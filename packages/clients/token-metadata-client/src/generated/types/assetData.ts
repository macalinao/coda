/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  
  combineCodec,
  
  
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder
  
  
} from "@solana/kit";
import type {Address, Codec, Decoder, Encoder, Option, OptionOrNullable} from "@solana/kit";
import {
  
  
  
  
  
  
  getCollectionDecoder,
  getCollectionDetailsDecoder,
  getCollectionDetailsEncoder,
  getCollectionEncoder,
  getCreatorDecoder,
  getCreatorEncoder,
  getTokenStandardDecoder,
  getTokenStandardEncoder,
  getUsesDecoder,
  getUsesEncoder
  
  
  
  
} from "./index.js";
import type {Collection, CollectionArgs, CollectionDetails, CollectionDetailsArgs, Creator, CreatorArgs, TokenStandard, TokenStandardArgs, Uses, UsesArgs} from "./index.js";

export interface AssetData {
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  creators: Option<Creator[]>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  tokenStandard: TokenStandard;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  ruleSet: Option<Address>;
}

export interface AssetDataArgs {
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  creators: OptionOrNullable<CreatorArgs[]>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  tokenStandard: TokenStandardArgs;
  collection: OptionOrNullable<CollectionArgs>;
  uses: OptionOrNullable<UsesArgs>;
  collectionDetails: OptionOrNullable<CollectionDetailsArgs>;
  ruleSet: OptionOrNullable<Address>;
}

export function getAssetDataEncoder(): Encoder<AssetDataArgs> {
  return getStructEncoder([
    ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["symbol", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["uri", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["sellerFeeBasisPoints", getU16Encoder()],
    ["creators", getOptionEncoder(getArrayEncoder(getCreatorEncoder()))],
    ["primarySaleHappened", getBooleanEncoder()],
    ["isMutable", getBooleanEncoder()],
    ["tokenStandard", getTokenStandardEncoder()],
    ["collection", getOptionEncoder(getCollectionEncoder())],
    ["uses", getOptionEncoder(getUsesEncoder())],
    ["collectionDetails", getOptionEncoder(getCollectionDetailsEncoder())],
    ["ruleSet", getOptionEncoder(getAddressEncoder())],
  ]);
}

export function getAssetDataDecoder(): Decoder<AssetData> {
  return getStructDecoder([
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["sellerFeeBasisPoints", getU16Decoder()],
    ["creators", getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
    ["primarySaleHappened", getBooleanDecoder()],
    ["isMutable", getBooleanDecoder()],
    ["tokenStandard", getTokenStandardDecoder()],
    ["collection", getOptionDecoder(getCollectionDecoder())],
    ["uses", getOptionDecoder(getUsesDecoder())],
    ["collectionDetails", getOptionDecoder(getCollectionDetailsDecoder())],
    ["ruleSet", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getAssetDataCodec(): Codec<AssetDataArgs, AssetData> {
  return combineCodec(getAssetDataEncoder(), getAssetDataDecoder());
}
