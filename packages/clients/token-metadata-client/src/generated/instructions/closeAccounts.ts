/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CLOSE_ACCOUNTS_DISCRIMINATOR = 57;

export function getCloseAccountsDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(CLOSE_ACCOUNTS_DISCRIMINATOR);
}

export type CloseAccountsInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetadata extends string | AccountMeta = string,
  TAccountEdition extends string | AccountMeta = string,
  TAccountMint extends string | AccountMeta = string,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountDestination extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? WritableAccount<TAccountEdition>
        : TAccountEdition,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      ...TRemainingAccounts,
    ]
  >;

export interface CloseAccountsInstructionData {
  discriminator: number;
}

export interface CloseAccountsInstructionDataArgs {}

export function getCloseAccountsInstructionDataEncoder(): FixedSizeEncoder<CloseAccountsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CLOSE_ACCOUNTS_DISCRIMINATOR }),
  );
}

export function getCloseAccountsInstructionDataDecoder(): FixedSizeDecoder<CloseAccountsInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getCloseAccountsInstructionDataCodec(): FixedSizeCodec<
  CloseAccountsInstructionDataArgs,
  CloseAccountsInstructionData
> {
  return combineCodec(
    getCloseAccountsInstructionDataEncoder(),
    getCloseAccountsInstructionDataDecoder(),
  );
}

export interface CloseAccountsInput<
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountDestination extends string = string,
> {
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: Address<TAccountMetadata>;
  /** Edition of the asset */
  edition: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** Authority to close ownerless accounts */
  authority: TransactionSigner<TAccountAuthority>;
  /** The destination account that will receive the rent. */
  destination: Address<TAccountDestination>;
}

export function getCloseAccountsInstruction<
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountDestination extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: CloseAccountsInput<
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountAuthority,
    TAccountDestination
  >,
  config?: { programAddress?: TProgramAddress },
): CloseAccountsInstruction<
  TProgramAddress,
  TAccountMetadata,
  TAccountEdition,
  TAccountMint,
  TAccountAuthority,
  TAccountDestination
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.destination),
    ],
    programAddress,
    data: getCloseAccountsInstructionDataEncoder().encode({}),
  } as CloseAccountsInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountAuthority,
    TAccountDestination
  >;

  return instruction;
}

export interface ParsedCloseAccountsInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Metadata (pda of ['metadata', program id, mint id]) */
    metadata: TAccountMetas[0];
    /** Edition of the asset */
    edition: TAccountMetas[1];
    /** Mint of token asset */
    mint: TAccountMetas[2];
    /** Authority to close ownerless accounts */
    authority: TAccountMetas[3];
    /** The destination account that will receive the rent. */
    destination: TAccountMetas[4];
  };
  data: CloseAccountsInstructionData;
}

export function parseCloseAccountsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCloseAccountsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      edition: getNextAccount(),
      mint: getNextAccount(),
      authority: getNextAccount(),
      destination: getNextAccount(),
    },
    data: getCloseAccountsInstructionDataDecoder().decode(instruction.data),
  };
}
