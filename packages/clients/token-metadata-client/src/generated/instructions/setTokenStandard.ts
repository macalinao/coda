/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_TOKEN_STANDARD_DISCRIMINATOR = 35;

export function getSetTokenStandardDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_TOKEN_STANDARD_DISCRIMINATOR);
}

export type SetTokenStandardInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetadata extends string | AccountMeta = string,
  TAccountUpdateAuthority extends string | AccountMeta = string,
  TAccountMint extends string | AccountMeta = string,
  TAccountEdition extends string | AccountMeta | undefined = undefined,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountUpdateAuthority extends string
        ? ReadonlySignerAccount<TAccountUpdateAuthority> &
            AccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      ...(TAccountEdition extends undefined
        ? []
        : [
            TAccountEdition extends string
              ? ReadonlyAccount<TAccountEdition>
              : TAccountEdition,
          ]),
      ...TRemainingAccounts,
    ]
  >;

export interface SetTokenStandardInstructionData {
  discriminator: number;
}

export interface SetTokenStandardInstructionDataArgs {}

export function getSetTokenStandardInstructionDataEncoder(): FixedSizeEncoder<SetTokenStandardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SET_TOKEN_STANDARD_DISCRIMINATOR }),
  );
}

export function getSetTokenStandardInstructionDataDecoder(): FixedSizeDecoder<SetTokenStandardInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getSetTokenStandardInstructionDataCodec(): FixedSizeCodec<
  SetTokenStandardInstructionDataArgs,
  SetTokenStandardInstructionData
> {
  return combineCodec(
    getSetTokenStandardInstructionDataEncoder(),
    getSetTokenStandardInstructionDataDecoder(),
  );
}

export interface SetTokenStandardInput<
  TAccountMetadata extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountEdition extends string = string,
> {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Metadata update authority */
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Edition account */
  edition?: Address<TAccountEdition>;
}

export function getSetTokenStandardInstruction<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string,
  TAccountMint extends string,
  TAccountEdition extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: SetTokenStandardInput<
    TAccountMetadata,
    TAccountUpdateAuthority,
    TAccountMint,
    TAccountEdition
  >,
  config?: { programAddress?: TProgramAddress },
): SetTokenStandardInstruction<
  TProgramAddress,
  TAccountMetadata,
  TAccountUpdateAuthority,
  TAccountMint,
  TAccountEdition
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    edition: { value: input.edition ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "omitted");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.edition),
    ].filter(<T>(x: T | undefined): x is T => x !== undefined),
    programAddress,
    data: getSetTokenStandardInstructionDataEncoder().encode({}),
  } as SetTokenStandardInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountUpdateAuthority,
    TAccountMint,
    TAccountEdition
  >;

  return instruction;
}

export interface ParsedSetTokenStandardInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Metadata account */
    metadata: TAccountMetas[0];
    /** Metadata update authority */
    updateAuthority: TAccountMetas[1];
    /** Mint account */
    mint: TAccountMetas[2];
    /** Edition account */
    edition?: TAccountMetas[3] | undefined;
  };
  data: SetTokenStandardInstructionData;
}

export function parseSetTokenStandardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetTokenStandardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  let optionalAccountsRemaining = instruction.accounts.length - 3;
  const getNextOptionalAccount = () => {
    if (optionalAccountsRemaining === 0) return undefined;
    optionalAccountsRemaining -= 1;
    return getNextAccount();
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      updateAuthority: getNextAccount(),
      mint: getNextAccount(),
      edition: getNextOptionalAccount(),
    },
    data: getSetTokenStandardInstructionDataDecoder().decode(instruction.data),
  };
}
