/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ProgramDerivedAddress } from "@solana/kit";
import {
  getAddressEncoder,
  getProgramDerivedAddress,
  getUtf8Encoder,
} from "@solana/kit";

export interface RegistrarSeeds {
  realm: Address;
  realmGoverningTokenMint: Address;
}

/**
 * The voting registrar. There can only be a single registrar
 * per governance realm and governing mint.
 */
export async function findRegistrarPda(
  seeds: RegistrarSeeds,
  config: { programAddress?: Address | undefined } = {},
): Promise<ProgramDerivedAddress> {
  const {
    programAddress = "vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ" as Address<"vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ">,
  } = config;
  return await getProgramDerivedAddress({
    programAddress,
    seeds: [
      getAddressEncoder().encode(seeds.realm),
      getUtf8Encoder().encode("registrar"),
      getAddressEncoder().encode(seeds.realmGoverningTokenMint),
    ],
  });
}
