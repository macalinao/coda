/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "@solana/kit";
import type {
  ParsedClawbackInstruction,
  ParsedCloseDepositEntryInstruction,
  ParsedCloseVoterInstruction,
  ParsedConfigureVotingMintInstruction,
  ParsedCreateDepositEntryInstruction,
  ParsedCreateRegistrarInstruction,
  ParsedCreateVoterInstruction,
  ParsedDepositInstruction,
  ParsedGrantInstruction,
  ParsedInternalTransferInstruction,
  ParsedResetLockupInstruction,
  ParsedSetTimeOffsetInstruction,
  ParsedUpdateMaxVoteWeightInstruction,
  ParsedUpdateVoterWeightRecordInstruction,
  ParsedWithdrawInstruction,
} from "../instructions/index.js";
import { containsBytes, fixEncoderSize, getBytesEncoder } from "@solana/kit";

export const VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS =
  "vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ" as Address<"vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ">;

export enum VoterStakeRegistryAccount {
  Registrar = 0,
  Voter = 1,
  VoterWeightRecord = 2,
}

export function identifyVoterStakeRegistryAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): VoterStakeRegistryAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 202, 205, 51, 78, 168, 150, 128]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryAccount.Registrar;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 93, 35, 191, 254, 147, 17, 202]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryAccount.Voter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 101, 102, 57, 57, 98, 52, 98]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryAccount.VoterWeightRecord;
  }
  throw new Error(
    "The provided account could not be identified as a voterStakeRegistry account.",
  );
}

export enum VoterStakeRegistryInstruction {
  CreateRegistrar = 0,
  ConfigureVotingMint = 1,
  CreateVoter = 2,
  CreateDepositEntry = 3,
  Deposit = 4,
  Withdraw = 5,
  Grant = 6,
  Clawback = 7,
  CloseDepositEntry = 8,
  ResetLockup = 9,
  InternalTransfer = 10,
  UpdateVoterWeightRecord = 11,
  UpdateMaxVoteWeight = 12,
  CloseVoter = 13,
  SetTimeOffset = 14,
}

export function identifyVoterStakeRegistryInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): VoterStakeRegistryInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 235, 36, 49, 139, 66, 202, 69]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.CreateRegistrar;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([113, 153, 141, 236, 184, 9, 135, 15]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.ConfigureVotingMint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([6, 24, 245, 52, 243, 255, 148, 25]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.CreateVoter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 131, 167, 186, 159, 125, 19, 67]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.CreateDepositEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.Withdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 189, 68, 153, 161, 231, 76, 107]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.Grant;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 92, 142, 79, 33, 234, 82, 27]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.Clawback;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([236, 190, 87, 34, 251, 131, 138, 237]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.CloseDepositEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([243, 20, 24, 247, 238, 148, 94, 62]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.ResetLockup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 217, 60, 137, 252, 221, 185, 114]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.InternalTransfer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([45, 185, 3, 36, 109, 190, 115, 169]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.UpdateVoterWeightRecord;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 221, 185, 255, 240, 128, 244, 162]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.UpdateMaxVoteWeight;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 35, 234, 247, 206, 131, 182, 149]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.CloseVoter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([89, 238, 89, 160, 239, 113, 25, 123]),
      ),
      0,
    )
  ) {
    return VoterStakeRegistryInstruction.SetTimeOffset;
  }
  throw new Error(
    "The provided instruction could not be identified as a voterStakeRegistry instruction.",
  );
}

export type ParsedVoterStakeRegistryInstruction<
  TProgram extends string = "vsr2nfGVNHmSY8uxoBGqq8AQbwz3JwaEaHqGbsTPXqQ",
> =
  | ({
      instructionType: VoterStakeRegistryInstruction.CreateRegistrar;
    } & ParsedCreateRegistrarInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.ConfigureVotingMint;
    } & ParsedConfigureVotingMintInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.CreateVoter;
    } & ParsedCreateVoterInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.CreateDepositEntry;
    } & ParsedCreateDepositEntryInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.Grant;
    } & ParsedGrantInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.Clawback;
    } & ParsedClawbackInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.CloseDepositEntry;
    } & ParsedCloseDepositEntryInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.ResetLockup;
    } & ParsedResetLockupInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.InternalTransfer;
    } & ParsedInternalTransferInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.UpdateVoterWeightRecord;
    } & ParsedUpdateVoterWeightRecordInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.UpdateMaxVoteWeight;
    } & ParsedUpdateMaxVoteWeightInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.CloseVoter;
    } & ParsedCloseVoterInstruction<TProgram>)
  | ({
      instructionType: VoterStakeRegistryInstruction.SetTimeOffset;
    } & ParsedSetTimeOffsetInstruction<TProgram>);
