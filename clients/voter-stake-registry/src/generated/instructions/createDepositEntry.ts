/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  Option,
  OptionOrNullable,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { LockupKind, LockupKindArgs } from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import { getLockupKindDecoder, getLockupKindEncoder } from "../types/index.js";

export const CREATE_DEPOSIT_ENTRY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([185, 131, 167, 186, 159, 125, 19, 67]);

export function getCreateDepositEntryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_DEPOSIT_ENTRY_DISCRIMINATOR,
  );
}

export type CreateDepositEntryInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountVoter extends string | AccountMeta = string,
  TAccountVault extends string | AccountMeta = string,
  TAccountVoterAuthority extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountDepositMint extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVoterAuthority extends string
        ? ReadonlySignerAccount<TAccountVoterAuthority> &
            AccountSignerMeta<TAccountVoterAuthority>
        : TAccountVoterAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountDepositMint extends string
        ? ReadonlyAccount<TAccountDepositMint>
        : TAccountDepositMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateDepositEntryInstructionData {
  discriminator: ReadonlyUint8Array;
  depositEntryIndex: number;
  kind: LockupKind;
  startTs: Option<bigint>;
  periods: number;
  allowClawback: boolean;
}

export interface CreateDepositEntryInstructionDataArgs {
  depositEntryIndex: number;
  kind: LockupKindArgs;
  startTs: OptionOrNullable<number | bigint>;
  periods: number;
  allowClawback: boolean;
}

export function getCreateDepositEntryInstructionDataEncoder(): Encoder<CreateDepositEntryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["depositEntryIndex", getU8Encoder()],
      ["kind", getLockupKindEncoder()],
      ["startTs", getOptionEncoder(getU64Encoder())],
      ["periods", getU32Encoder()],
      ["allowClawback", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_DEPOSIT_ENTRY_DISCRIMINATOR,
    }),
  );
}

export function getCreateDepositEntryInstructionDataDecoder(): Decoder<CreateDepositEntryInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["depositEntryIndex", getU8Decoder()],
    ["kind", getLockupKindDecoder()],
    ["startTs", getOptionDecoder(getU64Decoder())],
    ["periods", getU32Decoder()],
    ["allowClawback", getBooleanDecoder()],
  ]);
}

export function getCreateDepositEntryInstructionDataCodec(): Codec<
  CreateDepositEntryInstructionDataArgs,
  CreateDepositEntryInstructionData
> {
  return combineCodec(
    getCreateDepositEntryInstructionDataEncoder(),
    getCreateDepositEntryInstructionDataDecoder(),
  );
}

export interface CreateDepositEntryInput<
  TAccountRegistrar extends string = string,
  TAccountVoter extends string = string,
  TAccountVault extends string = string,
  TAccountVoterAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountDepositMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  voter: Address<TAccountVoter>;
  vault: Address<TAccountVault>;
  voterAuthority: TransactionSigner<TAccountVoterAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  depositMint: Address<TAccountDepositMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  depositEntryIndex: CreateDepositEntryInstructionDataArgs["depositEntryIndex"];
  kind: CreateDepositEntryInstructionDataArgs["kind"];
  startTs: CreateDepositEntryInstructionDataArgs["startTs"];
  periods: CreateDepositEntryInstructionDataArgs["periods"];
  allowClawback: CreateDepositEntryInstructionDataArgs["allowClawback"];
}

export function getCreateDepositEntryInstruction<
  TAccountRegistrar extends string,
  TAccountVoter extends string,
  TAccountVault extends string,
  TAccountVoterAuthority extends string,
  TAccountPayer extends string,
  TAccountDepositMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: CreateDepositEntryInput<
    TAccountRegistrar,
    TAccountVoter,
    TAccountVault,
    TAccountVoterAuthority,
    TAccountPayer,
    TAccountDepositMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): CreateDepositEntryInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountVoter,
  TAccountVault,
  TAccountVoterAuthority,
  TAccountPayer,
  TAccountDepositMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    voter: { value: input.voter ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    voterAuthority: { value: input.voterAuthority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    depositMint: { value: input.depositMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.voterAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.depositMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getCreateDepositEntryInstructionDataEncoder().encode(
      args as CreateDepositEntryInstructionDataArgs,
    ),
    programAddress,
  } as CreateDepositEntryInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountVoter,
    TAccountVault,
    TAccountVoterAuthority,
    TAccountPayer,
    TAccountDepositMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >);
}

export interface ParsedCreateDepositEntryInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    voter: TAccountMetas[1];
    vault: TAccountMetas[2];
    voterAuthority: TAccountMetas[3];
    payer: TAccountMetas[4];
    depositMint: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
  };
  data: CreateDepositEntryInstructionData;
}

export function parseCreateDepositEntryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateDepositEntryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      voter: getNextAccount(),
      vault: getNextAccount(),
      voterAuthority: getNextAccount(),
      payer: getNextAccount(),
      depositMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateDepositEntryInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
