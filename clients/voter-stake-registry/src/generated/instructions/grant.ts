/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  Option,
  OptionOrNullable,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { LockupKind, LockupKindArgs } from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import { getLockupKindDecoder, getLockupKindEncoder } from "../types/index.js";

export const GRANT_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  145, 189, 68, 153, 161, 231, 76, 107,
]);

export function getGrantDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(GRANT_DISCRIMINATOR);
}

export type GrantInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountVoter extends string | AccountMeta = string,
  TAccountVoterAuthority extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TAccountVault extends string | AccountMeta = string,
  TAccountDepositToken extends string | AccountMeta = string,
  TAccountTokenAuthority extends string | AccountMeta = string,
  TAccountGrantAuthority extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountDepositMint extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountAssociatedTokenProgram extends string | AccountMeta = string,
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountVoterAuthority extends string
        ? ReadonlyAccount<TAccountVoterAuthority>
        : TAccountVoterAuthority,
      TAccountVoterWeightRecord extends string
        ? WritableAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountDepositToken extends string
        ? WritableAccount<TAccountDepositToken>
        : TAccountDepositToken,
      TAccountTokenAuthority extends string
        ? ReadonlySignerAccount<TAccountTokenAuthority> &
            AccountSignerMeta<TAccountTokenAuthority>
        : TAccountTokenAuthority,
      TAccountGrantAuthority extends string
        ? ReadonlySignerAccount<TAccountGrantAuthority> &
            AccountSignerMeta<TAccountGrantAuthority>
        : TAccountGrantAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountDepositMint extends string
        ? ReadonlyAccount<TAccountDepositMint>
        : TAccountDepositMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface GrantInstructionData {
  discriminator: ReadonlyUint8Array;
  voterBump: number;
  voterWeightRecordBump: number;
  kind: LockupKind;
  startTs: Option<bigint>;
  periods: number;
  allowClawback: boolean;
  amount: bigint;
}

export interface GrantInstructionDataArgs {
  voterBump: number;
  voterWeightRecordBump: number;
  kind: LockupKindArgs;
  startTs: OptionOrNullable<number | bigint>;
  periods: number;
  allowClawback: boolean;
  amount: number | bigint;
}

export function getGrantInstructionDataEncoder(): Encoder<GrantInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["voterBump", getU8Encoder()],
      ["voterWeightRecordBump", getU8Encoder()],
      ["kind", getLockupKindEncoder()],
      ["startTs", getOptionEncoder(getU64Encoder())],
      ["periods", getU32Encoder()],
      ["allowClawback", getBooleanEncoder()],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: GRANT_DISCRIMINATOR }),
  );
}

export function getGrantInstructionDataDecoder(): Decoder<GrantInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["voterBump", getU8Decoder()],
    ["voterWeightRecordBump", getU8Decoder()],
    ["kind", getLockupKindDecoder()],
    ["startTs", getOptionDecoder(getU64Decoder())],
    ["periods", getU32Decoder()],
    ["allowClawback", getBooleanDecoder()],
    ["amount", getU64Decoder()],
  ]);
}

export function getGrantInstructionDataCodec(): Codec<
  GrantInstructionDataArgs,
  GrantInstructionData
> {
  return combineCodec(
    getGrantInstructionDataEncoder(),
    getGrantInstructionDataDecoder(),
  );
}

export interface GrantInput<
  TAccountRegistrar extends string = string,
  TAccountVoter extends string = string,
  TAccountVoterAuthority extends string = string,
  TAccountVoterWeightRecord extends string = string,
  TAccountVault extends string = string,
  TAccountDepositToken extends string = string,
  TAccountTokenAuthority extends string = string,
  TAccountGrantAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountDepositMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  voter: Address<TAccountVoter>;
  voterAuthority: Address<TAccountVoterAuthority>;
  voterWeightRecord: Address<TAccountVoterWeightRecord>;
  vault: Address<TAccountVault>;
  depositToken: Address<TAccountDepositToken>;
  tokenAuthority: TransactionSigner<TAccountTokenAuthority>;
  grantAuthority: TransactionSigner<TAccountGrantAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  depositMint: Address<TAccountDepositMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  voterBump: GrantInstructionDataArgs["voterBump"];
  voterWeightRecordBump: GrantInstructionDataArgs["voterWeightRecordBump"];
  kind: GrantInstructionDataArgs["kind"];
  startTs: GrantInstructionDataArgs["startTs"];
  periods: GrantInstructionDataArgs["periods"];
  allowClawback: GrantInstructionDataArgs["allowClawback"];
  amount: GrantInstructionDataArgs["amount"];
}

export function getGrantInstruction<
  TAccountRegistrar extends string,
  TAccountVoter extends string,
  TAccountVoterAuthority extends string,
  TAccountVoterWeightRecord extends string,
  TAccountVault extends string,
  TAccountDepositToken extends string,
  TAccountTokenAuthority extends string,
  TAccountGrantAuthority extends string,
  TAccountPayer extends string,
  TAccountDepositMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: GrantInput<
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountVoterWeightRecord,
    TAccountVault,
    TAccountDepositToken,
    TAccountTokenAuthority,
    TAccountGrantAuthority,
    TAccountPayer,
    TAccountDepositMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): GrantInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountVoter,
  TAccountVoterAuthority,
  TAccountVoterWeightRecord,
  TAccountVault,
  TAccountDepositToken,
  TAccountTokenAuthority,
  TAccountGrantAuthority,
  TAccountPayer,
  TAccountDepositMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    voter: { value: input.voter ?? null, isWritable: true },
    voterAuthority: { value: input.voterAuthority ?? null, isWritable: false },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: true,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    depositToken: { value: input.depositToken ?? null, isWritable: true },
    tokenAuthority: { value: input.tokenAuthority ?? null, isWritable: false },
    grantAuthority: { value: input.grantAuthority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    depositMint: { value: input.depositMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.voterAuthority),
      getAccountMeta(accounts.voterWeightRecord),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.depositToken),
      getAccountMeta(accounts.tokenAuthority),
      getAccountMeta(accounts.grantAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.depositMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getGrantInstructionDataEncoder().encode(
      args as GrantInstructionDataArgs,
    ),
    programAddress,
  } as GrantInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountVoterWeightRecord,
    TAccountVault,
    TAccountDepositToken,
    TAccountTokenAuthority,
    TAccountGrantAuthority,
    TAccountPayer,
    TAccountDepositMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >);
}

export interface ParsedGrantInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    voter: TAccountMetas[1];
    voterAuthority: TAccountMetas[2];
    voterWeightRecord: TAccountMetas[3];
    vault: TAccountMetas[4];
    depositToken: TAccountMetas[5];
    tokenAuthority: TAccountMetas[6];
    grantAuthority: TAccountMetas[7];
    payer: TAccountMetas[8];
    depositMint: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    associatedTokenProgram: TAccountMetas[12];
    rent: TAccountMetas[13];
  };
  data: GrantInstructionData;
}

export function parseGrantInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedGrantInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      voter: getNextAccount(),
      voterAuthority: getNextAccount(),
      voterWeightRecord: getNextAccount(),
      vault: getNextAccount(),
      depositToken: getNextAccount(),
      tokenAuthority: getNextAccount(),
      grantAuthority: getNextAccount(),
      payer: getNextAccount(),
      depositMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getGrantInstructionDataDecoder().decode(instruction.data),
  };
}
