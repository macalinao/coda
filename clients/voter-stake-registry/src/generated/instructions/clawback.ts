/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CLAWBACK_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  111, 92, 142, 79, 33, 234, 82, 27,
]);

export function getClawbackDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAWBACK_DISCRIMINATOR);
}

export type ClawbackInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TAccountVoter extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountVault extends string | AccountMeta = string,
  TAccountDestination extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountRealmAuthority extends string
        ? ReadonlySignerAccount<TAccountRealmAuthority> &
            AccountSignerMeta<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface ClawbackInstructionData {
  discriminator: ReadonlyUint8Array;
  depositEntryIndex: number;
}

export interface ClawbackInstructionDataArgs {
  depositEntryIndex: number;
}

export function getClawbackInstructionDataEncoder(): FixedSizeEncoder<ClawbackInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["depositEntryIndex", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAWBACK_DISCRIMINATOR }),
  );
}

export function getClawbackInstructionDataDecoder(): FixedSizeDecoder<ClawbackInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["depositEntryIndex", getU8Decoder()],
  ]);
}

export function getClawbackInstructionDataCodec(): FixedSizeCodec<
  ClawbackInstructionDataArgs,
  ClawbackInstructionData
> {
  return combineCodec(
    getClawbackInstructionDataEncoder(),
    getClawbackInstructionDataDecoder(),
  );
}

export interface ClawbackInput<
  TAccountRegistrar extends string = string,
  TAccountRealmAuthority extends string = string,
  TAccountVoter extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountVault extends string = string,
  TAccountDestination extends string = string,
  TAccountTokenProgram extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  realmAuthority: TransactionSigner<TAccountRealmAuthority>;
  voter: Address<TAccountVoter>;
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  vault: Address<TAccountVault>;
  destination: Address<TAccountDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  depositEntryIndex: ClawbackInstructionDataArgs["depositEntryIndex"];
}

export function getClawbackInstruction<
  TAccountRegistrar extends string,
  TAccountRealmAuthority extends string,
  TAccountVoter extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountVault extends string,
  TAccountDestination extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: ClawbackInput<
    TAccountRegistrar,
    TAccountRealmAuthority,
    TAccountVoter,
    TAccountTokenOwnerRecord,
    TAccountVault,
    TAccountDestination,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ClawbackInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountRealmAuthority,
  TAccountVoter,
  TAccountTokenOwnerRecord,
  TAccountVault,
  TAccountDestination,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
    voter: { value: input.voter ?? null, isWritable: true },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: false,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.realmAuthority),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getClawbackInstructionDataEncoder().encode(
      args as ClawbackInstructionDataArgs,
    ),
    programAddress,
  } as ClawbackInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountRealmAuthority,
    TAccountVoter,
    TAccountTokenOwnerRecord,
    TAccountVault,
    TAccountDestination,
    TAccountTokenProgram
  >);
}

export interface ParsedClawbackInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    realmAuthority: TAccountMetas[1];
    voter: TAccountMetas[2];
    tokenOwnerRecord: TAccountMetas[3];
    vault: TAccountMetas[4];
    destination: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: ClawbackInstructionData;
}

export function parseClawbackInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedClawbackInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      realmAuthority: getNextAccount(),
      voter: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      vault: getNextAccount(),
      destination: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClawbackInstructionDataDecoder().decode(instruction.data),
  };
}
