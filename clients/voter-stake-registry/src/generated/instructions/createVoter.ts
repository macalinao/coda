/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CREATE_VOTER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  6, 24, 245, 52, 243, 255, 148, 25,
]);

export function getCreateVoterDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VOTER_DISCRIMINATOR,
  );
}

export type CreateVoterInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountVoter extends string | AccountMeta = string,
  TAccountVoterAuthority extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TAccountInstructions extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountVoterAuthority extends string
        ? ReadonlySignerAccount<TAccountVoterAuthority> &
            AccountSignerMeta<TAccountVoterAuthority>
        : TAccountVoterAuthority,
      TAccountVoterWeightRecord extends string
        ? WritableAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountInstructions extends string
        ? ReadonlyAccount<TAccountInstructions>
        : TAccountInstructions,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateVoterInstructionData {
  discriminator: ReadonlyUint8Array;
  voterBump: number;
  voterWeightRecordBump: number;
}

export interface CreateVoterInstructionDataArgs {
  voterBump: number;
  voterWeightRecordBump: number;
}

export function getCreateVoterInstructionDataEncoder(): FixedSizeEncoder<CreateVoterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["voterBump", getU8Encoder()],
      ["voterWeightRecordBump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_VOTER_DISCRIMINATOR }),
  );
}

export function getCreateVoterInstructionDataDecoder(): FixedSizeDecoder<CreateVoterInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["voterBump", getU8Decoder()],
    ["voterWeightRecordBump", getU8Decoder()],
  ]);
}

export function getCreateVoterInstructionDataCodec(): FixedSizeCodec<
  CreateVoterInstructionDataArgs,
  CreateVoterInstructionData
> {
  return combineCodec(
    getCreateVoterInstructionDataEncoder(),
    getCreateVoterInstructionDataDecoder(),
  );
}

export interface CreateVoterInput<
  TAccountRegistrar extends string = string,
  TAccountVoter extends string = string,
  TAccountVoterAuthority extends string = string,
  TAccountVoterWeightRecord extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountInstructions extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  voter: Address<TAccountVoter>;
  voterAuthority: TransactionSigner<TAccountVoterAuthority>;
  voterWeightRecord: Address<TAccountVoterWeightRecord>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  instructions?: Address<TAccountInstructions>;
  voterBump: CreateVoterInstructionDataArgs["voterBump"];
  voterWeightRecordBump: CreateVoterInstructionDataArgs["voterWeightRecordBump"];
}

export function getCreateVoterInstruction<
  TAccountRegistrar extends string,
  TAccountVoter extends string,
  TAccountVoterAuthority extends string,
  TAccountVoterWeightRecord extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountInstructions extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: CreateVoterInput<
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountVoterWeightRecord,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRent,
    TAccountInstructions
  >,
  config?: { programAddress?: TProgramAddress },
): CreateVoterInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountVoter,
  TAccountVoterAuthority,
  TAccountVoterWeightRecord,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountRent,
  TAccountInstructions
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    voter: { value: input.voter ?? null, isWritable: true },
    voterAuthority: { value: input.voterAuthority ?? null, isWritable: false },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    instructions: { value: input.instructions ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.instructions.value) {
    accounts.instructions.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.voterAuthority),
      getAccountMeta(accounts.voterWeightRecord),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.instructions),
    ],
    data: getCreateVoterInstructionDataEncoder().encode(
      args as CreateVoterInstructionDataArgs,
    ),
    programAddress,
  } as CreateVoterInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountVoterWeightRecord,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRent,
    TAccountInstructions
  >);
}

export interface ParsedCreateVoterInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    voter: TAccountMetas[1];
    voterAuthority: TAccountMetas[2];
    voterWeightRecord: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    rent: TAccountMetas[6];
    instructions: TAccountMetas[7];
  };
  data: CreateVoterInstructionData;
}

export function parseCreateVoterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateVoterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      voter: getNextAccount(),
      voterAuthority: getNextAccount(),
      voterWeightRecord: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      instructions: getNextAccount(),
    },
    data: getCreateVoterInstructionDataDecoder().decode(instruction.data),
  };
}
