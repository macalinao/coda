/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CLOSE_VOTER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  117, 35, 234, 247, 206, 131, 182, 149,
]);

export function getCloseVoterDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_VOTER_DISCRIMINATOR);
}

export type CloseVoterInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountVoter extends string | AccountMeta = string,
  TAccountVoterAuthority extends string | AccountMeta = string,
  TAccountSolDestination extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountVoterAuthority extends string
        ? ReadonlySignerAccount<TAccountVoterAuthority> &
            AccountSignerMeta<TAccountVoterAuthority>
        : TAccountVoterAuthority,
      TAccountSolDestination extends string
        ? ReadonlyAccount<TAccountSolDestination>
        : TAccountSolDestination,
      ...TRemainingAccounts,
    ]
  >;

export interface CloseVoterInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface CloseVoterInstructionDataArgs {}

export function getCloseVoterInstructionDataEncoder(): FixedSizeEncoder<CloseVoterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_VOTER_DISCRIMINATOR }),
  );
}

export function getCloseVoterInstructionDataDecoder(): FixedSizeDecoder<CloseVoterInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseVoterInstructionDataCodec(): FixedSizeCodec<
  CloseVoterInstructionDataArgs,
  CloseVoterInstructionData
> {
  return combineCodec(
    getCloseVoterInstructionDataEncoder(),
    getCloseVoterInstructionDataDecoder(),
  );
}

export interface CloseVoterInput<
  TAccountVoter extends string = string,
  TAccountVoterAuthority extends string = string,
  TAccountSolDestination extends string = string,
> {
  voter: Address<TAccountVoter>;
  voterAuthority: TransactionSigner<TAccountVoterAuthority>;
  solDestination: Address<TAccountSolDestination>;
}

export function getCloseVoterInstruction<
  TAccountVoter extends string,
  TAccountVoterAuthority extends string,
  TAccountSolDestination extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: CloseVoterInput<
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountSolDestination
  >,
  config?: { programAddress?: TProgramAddress },
): CloseVoterInstruction<
  TProgramAddress,
  TAccountVoter,
  TAccountVoterAuthority,
  TAccountSolDestination
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    voter: { value: input.voter ?? null, isWritable: true },
    voterAuthority: { value: input.voterAuthority ?? null, isWritable: false },
    solDestination: { value: input.solDestination ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.voterAuthority),
      getAccountMeta(accounts.solDestination),
    ],
    data: getCloseVoterInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseVoterInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountSolDestination
  >);
}

export interface ParsedCloseVoterInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    voter: TAccountMetas[0];
    voterAuthority: TAccountMetas[1];
    solDestination: TAccountMetas[2];
  };
  data: CloseVoterInstructionData;
}

export function parseCloseVoterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCloseVoterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      voter: getNextAccount(),
      voterAuthority: getNextAccount(),
      solDestination: getNextAccount(),
    },
    data: getCloseVoterInstructionDataDecoder().decode(instruction.data),
  };
}
