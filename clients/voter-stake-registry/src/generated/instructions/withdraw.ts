/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountVoter extends string | AccountMeta = string,
  TAccountVoterAuthority extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TAccountVault extends string | AccountMeta = string,
  TAccountDestination extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountVoter extends string
        ? WritableAccount<TAccountVoter>
        : TAccountVoter,
      TAccountVoterAuthority extends string
        ? ReadonlySignerAccount<TAccountVoterAuthority> &
            AccountSignerMeta<TAccountVoterAuthority>
        : TAccountVoterAuthority,
      TAccountTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountVoterWeightRecord extends string
        ? WritableAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawInstructionData {
  discriminator: ReadonlyUint8Array;
  depositEntryIndex: number;
  amount: bigint;
}

export interface WithdrawInstructionDataArgs {
  depositEntryIndex: number;
  amount: number | bigint;
}

export function getWithdrawInstructionDataEncoder(): FixedSizeEncoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["depositEntryIndex", getU8Encoder()],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR }),
  );
}

export function getWithdrawInstructionDataDecoder(): FixedSizeDecoder<WithdrawInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["depositEntryIndex", getU8Decoder()],
    ["amount", getU64Decoder()],
  ]);
}

export function getWithdrawInstructionDataCodec(): FixedSizeCodec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder(),
  );
}

export interface WithdrawInput<
  TAccountRegistrar extends string = string,
  TAccountVoter extends string = string,
  TAccountVoterAuthority extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountVoterWeightRecord extends string = string,
  TAccountVault extends string = string,
  TAccountDestination extends string = string,
  TAccountTokenProgram extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  voter: Address<TAccountVoter>;
  voterAuthority: TransactionSigner<TAccountVoterAuthority>;
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  voterWeightRecord: Address<TAccountVoterWeightRecord>;
  vault: Address<TAccountVault>;
  destination: Address<TAccountDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  depositEntryIndex: WithdrawInstructionDataArgs["depositEntryIndex"];
  amount: WithdrawInstructionDataArgs["amount"];
}

export function getWithdrawInstruction<
  TAccountRegistrar extends string,
  TAccountVoter extends string,
  TAccountVoterAuthority extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountVoterWeightRecord extends string,
  TAccountVault extends string,
  TAccountDestination extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountTokenOwnerRecord,
    TAccountVoterWeightRecord,
    TAccountVault,
    TAccountDestination,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountVoter,
  TAccountVoterAuthority,
  TAccountTokenOwnerRecord,
  TAccountVoterWeightRecord,
  TAccountVault,
  TAccountDestination,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    voter: { value: input.voter ?? null, isWritable: true },
    voterAuthority: { value: input.voterAuthority ?? null, isWritable: false },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: false,
    },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: true,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.voterAuthority),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.voterWeightRecord),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterAuthority,
    TAccountTokenOwnerRecord,
    TAccountVoterWeightRecord,
    TAccountVault,
    TAccountDestination,
    TAccountTokenProgram
  >);
}

export interface ParsedWithdrawInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    voter: TAccountMetas[1];
    voterAuthority: TAccountMetas[2];
    tokenOwnerRecord: TAccountMetas[3];
    voterWeightRecord: TAccountMetas[4];
    vault: TAccountMetas[5];
    destination: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: WithdrawInstructionData;
}

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      voter: getNextAccount(),
      voterAuthority: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      voterWeightRecord: getNextAccount(),
      vault: getNextAccount(),
      destination: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
