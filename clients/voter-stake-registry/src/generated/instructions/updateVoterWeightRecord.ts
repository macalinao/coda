/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_VOTER_WEIGHT_RECORD_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([45, 185, 3, 36, 109, 190, 115, 169]);

export function getUpdateVoterWeightRecordDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_VOTER_WEIGHT_RECORD_DISCRIMINATOR,
  );
}

export type UpdateVoterWeightRecordInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountVoter extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountVoter extends string
        ? ReadonlyAccount<TAccountVoter>
        : TAccountVoter,
      TAccountVoterWeightRecord extends string
        ? WritableAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateVoterWeightRecordInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface UpdateVoterWeightRecordInstructionDataArgs {}

export function getUpdateVoterWeightRecordInstructionDataEncoder(): FixedSizeEncoder<UpdateVoterWeightRecordInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_VOTER_WEIGHT_RECORD_DISCRIMINATOR,
    }),
  );
}

export function getUpdateVoterWeightRecordInstructionDataDecoder(): FixedSizeDecoder<UpdateVoterWeightRecordInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateVoterWeightRecordInstructionDataCodec(): FixedSizeCodec<
  UpdateVoterWeightRecordInstructionDataArgs,
  UpdateVoterWeightRecordInstructionData
> {
  return combineCodec(
    getUpdateVoterWeightRecordInstructionDataEncoder(),
    getUpdateVoterWeightRecordInstructionDataDecoder(),
  );
}

export interface UpdateVoterWeightRecordInput<
  TAccountRegistrar extends string = string,
  TAccountVoter extends string = string,
  TAccountVoterWeightRecord extends string = string,
  TAccountSystemProgram extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  voter: Address<TAccountVoter>;
  voterWeightRecord: Address<TAccountVoterWeightRecord>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export function getUpdateVoterWeightRecordInstruction<
  TAccountRegistrar extends string,
  TAccountVoter extends string,
  TAccountVoterWeightRecord extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: UpdateVoterWeightRecordInput<
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterWeightRecord,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateVoterWeightRecordInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountVoter,
  TAccountVoterWeightRecord,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    voter: { value: input.voter ?? null, isWritable: false },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.voterWeightRecord),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getUpdateVoterWeightRecordInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateVoterWeightRecordInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountVoter,
    TAccountVoterWeightRecord,
    TAccountSystemProgram
  >);
}

export interface ParsedUpdateVoterWeightRecordInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    voter: TAccountMetas[1];
    voterWeightRecord: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: UpdateVoterWeightRecordInstructionData;
}

export function parseUpdateVoterWeightRecordInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateVoterWeightRecordInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      voter: getNextAccount(),
      voterWeightRecord: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateVoterWeightRecordInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
