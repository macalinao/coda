/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_MAX_VOTE_WEIGHT_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([78, 221, 185, 255, 240, 128, 244, 162]);

export function getUpdateMaxVoteWeightDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_MAX_VOTE_WEIGHT_DISCRIMINATOR,
  );
}

export type UpdateMaxVoteWeightInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountMaxVoteWeightRecord extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? ReadonlyAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountMaxVoteWeightRecord extends string
        ? ReadonlyAccount<TAccountMaxVoteWeightRecord>
        : TAccountMaxVoteWeightRecord,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateMaxVoteWeightInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface UpdateMaxVoteWeightInstructionDataArgs {}

export function getUpdateMaxVoteWeightInstructionDataEncoder(): FixedSizeEncoder<UpdateMaxVoteWeightInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_MAX_VOTE_WEIGHT_DISCRIMINATOR,
    }),
  );
}

export function getUpdateMaxVoteWeightInstructionDataDecoder(): FixedSizeDecoder<UpdateMaxVoteWeightInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateMaxVoteWeightInstructionDataCodec(): FixedSizeCodec<
  UpdateMaxVoteWeightInstructionDataArgs,
  UpdateMaxVoteWeightInstructionData
> {
  return combineCodec(
    getUpdateMaxVoteWeightInstructionDataEncoder(),
    getUpdateMaxVoteWeightInstructionDataDecoder(),
  );
}

export interface UpdateMaxVoteWeightInput<
  TAccountRegistrar extends string = string,
  TAccountMaxVoteWeightRecord extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  maxVoteWeightRecord: Address<TAccountMaxVoteWeightRecord>;
}

export function getUpdateMaxVoteWeightInstruction<
  TAccountRegistrar extends string,
  TAccountMaxVoteWeightRecord extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: UpdateMaxVoteWeightInput<
    TAccountRegistrar,
    TAccountMaxVoteWeightRecord
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateMaxVoteWeightInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountMaxVoteWeightRecord
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: false },
    maxVoteWeightRecord: {
      value: input.maxVoteWeightRecord ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.maxVoteWeightRecord),
    ],
    data: getUpdateMaxVoteWeightInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateMaxVoteWeightInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountMaxVoteWeightRecord
  >);
}

export interface ParsedUpdateMaxVoteWeightInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    maxVoteWeightRecord: TAccountMetas[1];
  };
  data: UpdateMaxVoteWeightInstructionData;
}

export function parseUpdateMaxVoteWeightInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateMaxVoteWeightInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      maxVoteWeightRecord: getNextAccount(),
    },
    data: getUpdateMaxVoteWeightInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
