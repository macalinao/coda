/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_TIME_OFFSET_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [89, 238, 89, 160, 239, 113, 25, 123],
);

export function getSetTimeOffsetDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_TIME_OFFSET_DISCRIMINATOR,
  );
}

export type SetTimeOffsetInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? WritableAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountRealmAuthority extends string
        ? ReadonlySignerAccount<TAccountRealmAuthority> &
            AccountSignerMeta<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface SetTimeOffsetInstructionData {
  discriminator: ReadonlyUint8Array;
  timeOffset: bigint;
}

export interface SetTimeOffsetInstructionDataArgs {
  timeOffset: number | bigint;
}

export function getSetTimeOffsetInstructionDataEncoder(): FixedSizeEncoder<SetTimeOffsetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["timeOffset", getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_TIME_OFFSET_DISCRIMINATOR }),
  );
}

export function getSetTimeOffsetInstructionDataDecoder(): FixedSizeDecoder<SetTimeOffsetInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["timeOffset", getI64Decoder()],
  ]);
}

export function getSetTimeOffsetInstructionDataCodec(): FixedSizeCodec<
  SetTimeOffsetInstructionDataArgs,
  SetTimeOffsetInstructionData
> {
  return combineCodec(
    getSetTimeOffsetInstructionDataEncoder(),
    getSetTimeOffsetInstructionDataDecoder(),
  );
}

export interface SetTimeOffsetInput<
  TAccountRegistrar extends string = string,
  TAccountRealmAuthority extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  realmAuthority: TransactionSigner<TAccountRealmAuthority>;
  timeOffset: SetTimeOffsetInstructionDataArgs["timeOffset"];
}

export function getSetTimeOffsetInstruction<
  TAccountRegistrar extends string,
  TAccountRealmAuthority extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: SetTimeOffsetInput<TAccountRegistrar, TAccountRealmAuthority>,
  config?: { programAddress?: TProgramAddress },
): SetTimeOffsetInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountRealmAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: true },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.realmAuthority),
    ],
    data: getSetTimeOffsetInstructionDataEncoder().encode(
      args as SetTimeOffsetInstructionDataArgs,
    ),
    programAddress,
  } as SetTimeOffsetInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountRealmAuthority
  >);
}

export interface ParsedSetTimeOffsetInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    realmAuthority: TAccountMetas[1];
  };
  data: SetTimeOffsetInstructionData;
}

export function parseSetTimeOffsetInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetTimeOffsetInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { registrar: getNextAccount(), realmAuthority: getNextAccount() },
    data: getSetTimeOffsetInstructionDataDecoder().decode(instruction.data),
  };
}
