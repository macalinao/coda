/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  Option,
  OptionOrNullable,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI8Decoder,
  getI8Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CONFIGURE_VOTING_MINT_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([113, 153, 141, 236, 184, 9, 135, 15]);

export function getConfigureVotingMintDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIGURE_VOTING_MINT_DISCRIMINATOR,
  );
}

export type ConfigureVotingMintInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TAccountMint extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? WritableAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountRealmAuthority extends string
        ? ReadonlySignerAccount<TAccountRealmAuthority> &
            AccountSignerMeta<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      ...TRemainingAccounts,
    ]
  >;

export interface ConfigureVotingMintInstructionData {
  discriminator: ReadonlyUint8Array;
  idx: number;
  digitShift: number;
  baselineVoteWeightScaledFactor: bigint;
  maxExtraLockupVoteWeightScaledFactor: bigint;
  lockupSaturationSecs: bigint;
  grantAuthority: Option<Address>;
}

export interface ConfigureVotingMintInstructionDataArgs {
  idx: number;
  digitShift: number;
  baselineVoteWeightScaledFactor: number | bigint;
  maxExtraLockupVoteWeightScaledFactor: number | bigint;
  lockupSaturationSecs: number | bigint;
  grantAuthority: OptionOrNullable<Address>;
}

export function getConfigureVotingMintInstructionDataEncoder(): Encoder<ConfigureVotingMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["idx", getU16Encoder()],
      ["digitShift", getI8Encoder()],
      ["baselineVoteWeightScaledFactor", getU64Encoder()],
      ["maxExtraLockupVoteWeightScaledFactor", getU64Encoder()],
      ["lockupSaturationSecs", getU64Encoder()],
      ["grantAuthority", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CONFIGURE_VOTING_MINT_DISCRIMINATOR,
    }),
  );
}

export function getConfigureVotingMintInstructionDataDecoder(): Decoder<ConfigureVotingMintInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["idx", getU16Decoder()],
    ["digitShift", getI8Decoder()],
    ["baselineVoteWeightScaledFactor", getU64Decoder()],
    ["maxExtraLockupVoteWeightScaledFactor", getU64Decoder()],
    ["lockupSaturationSecs", getU64Decoder()],
    ["grantAuthority", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getConfigureVotingMintInstructionDataCodec(): Codec<
  ConfigureVotingMintInstructionDataArgs,
  ConfigureVotingMintInstructionData
> {
  return combineCodec(
    getConfigureVotingMintInstructionDataEncoder(),
    getConfigureVotingMintInstructionDataDecoder(),
  );
}

export interface ConfigureVotingMintInput<
  TAccountRegistrar extends string = string,
  TAccountRealmAuthority extends string = string,
  TAccountMint extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  realmAuthority: TransactionSigner<TAccountRealmAuthority>;
  mint: Address<TAccountMint>;
  idx: ConfigureVotingMintInstructionDataArgs["idx"];
  digitShift: ConfigureVotingMintInstructionDataArgs["digitShift"];
  baselineVoteWeightScaledFactor: ConfigureVotingMintInstructionDataArgs["baselineVoteWeightScaledFactor"];
  maxExtraLockupVoteWeightScaledFactor: ConfigureVotingMintInstructionDataArgs["maxExtraLockupVoteWeightScaledFactor"];
  lockupSaturationSecs: ConfigureVotingMintInstructionDataArgs["lockupSaturationSecs"];
  grantAuthority: ConfigureVotingMintInstructionDataArgs["grantAuthority"];
}

export function getConfigureVotingMintInstruction<
  TAccountRegistrar extends string,
  TAccountRealmAuthority extends string,
  TAccountMint extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: ConfigureVotingMintInput<
    TAccountRegistrar,
    TAccountRealmAuthority,
    TAccountMint
  >,
  config?: { programAddress?: TProgramAddress },
): ConfigureVotingMintInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountRealmAuthority,
  TAccountMint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: true },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.realmAuthority),
      getAccountMeta(accounts.mint),
    ],
    data: getConfigureVotingMintInstructionDataEncoder().encode(
      args as ConfigureVotingMintInstructionDataArgs,
    ),
    programAddress,
  } as ConfigureVotingMintInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountRealmAuthority,
    TAccountMint
  >);
}

export interface ParsedConfigureVotingMintInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    realmAuthority: TAccountMetas[1];
    mint: TAccountMetas[2];
  };
  data: ConfigureVotingMintInstructionData;
}

export function parseConfigureVotingMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedConfigureVotingMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      realmAuthority: getNextAccount(),
      mint: getNextAccount(),
    },
    data: getConfigureVotingMintInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
