/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CREATE_REGISTRAR_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([132, 235, 36, 49, 139, 66, 202, 69]);

export function getCreateRegistrarDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_REGISTRAR_DISCRIMINATOR,
  );
}

export type CreateRegistrarInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountRegistrar extends string | AccountMeta = string,
  TAccountRealm extends string | AccountMeta = string,
  TAccountGovernanceProgramId extends string | AccountMeta = string,
  TAccountRealmGoverningTokenMint extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRegistrar extends string
        ? WritableAccount<TAccountRegistrar>
        : TAccountRegistrar,
      TAccountRealm extends string
        ? ReadonlyAccount<TAccountRealm>
        : TAccountRealm,
      TAccountGovernanceProgramId extends string
        ? ReadonlyAccount<TAccountGovernanceProgramId>
        : TAccountGovernanceProgramId,
      TAccountRealmGoverningTokenMint extends string
        ? ReadonlyAccount<TAccountRealmGoverningTokenMint>
        : TAccountRealmGoverningTokenMint,
      TAccountRealmAuthority extends string
        ? ReadonlySignerAccount<TAccountRealmAuthority> &
            AccountSignerMeta<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateRegistrarInstructionData {
  discriminator: ReadonlyUint8Array;
  registrarBump: number;
}

export interface CreateRegistrarInstructionDataArgs {
  registrarBump: number;
}

export function getCreateRegistrarInstructionDataEncoder(): FixedSizeEncoder<CreateRegistrarInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["registrarBump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_REGISTRAR_DISCRIMINATOR }),
  );
}

export function getCreateRegistrarInstructionDataDecoder(): FixedSizeDecoder<CreateRegistrarInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["registrarBump", getU8Decoder()],
  ]);
}

export function getCreateRegistrarInstructionDataCodec(): FixedSizeCodec<
  CreateRegistrarInstructionDataArgs,
  CreateRegistrarInstructionData
> {
  return combineCodec(
    getCreateRegistrarInstructionDataEncoder(),
    getCreateRegistrarInstructionDataDecoder(),
  );
}

export interface CreateRegistrarInput<
  TAccountRegistrar extends string = string,
  TAccountRealm extends string = string,
  TAccountGovernanceProgramId extends string = string,
  TAccountRealmGoverningTokenMint extends string = string,
  TAccountRealmAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  registrar: Address<TAccountRegistrar>;
  realm: Address<TAccountRealm>;
  governanceProgramId: Address<TAccountGovernanceProgramId>;
  realmGoverningTokenMint: Address<TAccountRealmGoverningTokenMint>;
  realmAuthority: TransactionSigner<TAccountRealmAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  registrarBump: CreateRegistrarInstructionDataArgs["registrarBump"];
}

export function getCreateRegistrarInstruction<
  TAccountRegistrar extends string,
  TAccountRealm extends string,
  TAccountGovernanceProgramId extends string,
  TAccountRealmGoverningTokenMint extends string,
  TAccountRealmAuthority extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
>(
  input: CreateRegistrarInput<
    TAccountRegistrar,
    TAccountRealm,
    TAccountGovernanceProgramId,
    TAccountRealmGoverningTokenMint,
    TAccountRealmAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): CreateRegistrarInstruction<
  TProgramAddress,
  TAccountRegistrar,
  TAccountRealm,
  TAccountGovernanceProgramId,
  TAccountRealmGoverningTokenMint,
  TAccountRealmAuthority,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    registrar: { value: input.registrar ?? null, isWritable: true },
    realm: { value: input.realm ?? null, isWritable: false },
    governanceProgramId: {
      value: input.governanceProgramId ?? null,
      isWritable: false,
    },
    realmGoverningTokenMint: {
      value: input.realmGoverningTokenMint ?? null,
      isWritable: false,
    },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.registrar),
      getAccountMeta(accounts.realm),
      getAccountMeta(accounts.governanceProgramId),
      getAccountMeta(accounts.realmGoverningTokenMint),
      getAccountMeta(accounts.realmAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getCreateRegistrarInstructionDataEncoder().encode(
      args as CreateRegistrarInstructionDataArgs,
    ),
    programAddress,
  } as CreateRegistrarInstruction<
    TProgramAddress,
    TAccountRegistrar,
    TAccountRealm,
    TAccountGovernanceProgramId,
    TAccountRealmGoverningTokenMint,
    TAccountRealmAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface ParsedCreateRegistrarInstruction<
  TProgram extends string = typeof VOTER_STAKE_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    registrar: TAccountMetas[0];
    realm: TAccountMetas[1];
    governanceProgramId: TAccountMetas[2];
    realmGoverningTokenMint: TAccountMetas[3];
    realmAuthority: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: CreateRegistrarInstructionData;
}

export function parseCreateRegistrarInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateRegistrarInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      registrar: getNextAccount(),
      realm: getNextAccount(),
      governanceProgramId: getNextAccount(),
      realmGoverningTokenMint: getNextAccount(),
      realmAuthority: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateRegistrarInstructionDataDecoder().decode(instruction.data),
  };
}
