/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { RegistrarSeeds } from "../pdas/index.js";
import type { VotingMintConfig, VotingMintConfigArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findRegistrarPda } from "../pdas/index.js";
import {
  getVotingMintConfigDecoder,
  getVotingMintConfigEncoder,
} from "../types/index.js";

export const REGISTRAR_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  193, 202, 205, 51, 78, 168, 150, 128,
]);

export function getRegistrarDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REGISTRAR_DISCRIMINATOR);
}

export interface Registrar {
  discriminator: ReadonlyUint8Array;
  governanceProgramId: Address;
  realm: Address;
  realmGoverningTokenMint: Address;
  realmAuthority: Address;
  reserved1: number[];
  votingMints: VotingMintConfig[];
  timeOffset: bigint;
  bump: number;
  reserved2: number[];
  reserved3: bigint[];
}

export interface RegistrarArgs {
  governanceProgramId: Address;
  realm: Address;
  realmGoverningTokenMint: Address;
  realmAuthority: Address;
  reserved1: number[];
  votingMints: VotingMintConfigArgs[];
  timeOffset: number | bigint;
  bump: number;
  reserved2: number[];
  reserved3: (number | bigint)[];
}

export function getRegistrarEncoder(): FixedSizeEncoder<RegistrarArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["governanceProgramId", getAddressEncoder()],
      ["realm", getAddressEncoder()],
      ["realmGoverningTokenMint", getAddressEncoder()],
      ["realmAuthority", getAddressEncoder()],
      ["reserved1", getArrayEncoder(getU8Encoder(), { size: 32 })],
      [
        "votingMints",
        getArrayEncoder(getVotingMintConfigEncoder(), { size: 4 }),
      ],
      ["timeOffset", getI64Encoder()],
      ["bump", getU8Encoder()],
      ["reserved2", getArrayEncoder(getU8Encoder(), { size: 7 })],
      ["reserved3", getArrayEncoder(getU64Encoder(), { size: 11 })],
    ]),
    (value) => ({ ...value, discriminator: REGISTRAR_DISCRIMINATOR }),
  );
}

export function getRegistrarDecoder(): FixedSizeDecoder<Registrar> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["governanceProgramId", getAddressDecoder()],
    ["realm", getAddressDecoder()],
    ["realmGoverningTokenMint", getAddressDecoder()],
    ["realmAuthority", getAddressDecoder()],
    ["reserved1", getArrayDecoder(getU8Decoder(), { size: 32 })],
    ["votingMints", getArrayDecoder(getVotingMintConfigDecoder(), { size: 4 })],
    ["timeOffset", getI64Decoder()],
    ["bump", getU8Decoder()],
    ["reserved2", getArrayDecoder(getU8Decoder(), { size: 7 })],
    ["reserved3", getArrayDecoder(getU64Decoder(), { size: 11 })],
  ]);
}

export function getRegistrarCodec(): FixedSizeCodec<RegistrarArgs, Registrar> {
  return combineCodec(getRegistrarEncoder(), getRegistrarDecoder());
}

export function decodeRegistrar<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Registrar, TAddress>;
export function decodeRegistrar<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Registrar, TAddress>;
export function decodeRegistrar<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Registrar, TAddress> | MaybeAccount<Registrar, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRegistrarDecoder(),
  );
}

export async function fetchRegistrar<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Registrar, TAddress>> {
  const maybeAccount = await fetchMaybeRegistrar(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRegistrar<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Registrar, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRegistrar(maybeAccount);
}

export async function fetchAllRegistrar(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Registrar>[]> {
  const maybeAccounts = await fetchAllMaybeRegistrar(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRegistrar(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Registrar>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRegistrar(maybeAccount));
}

export async function fetchRegistrarFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RegistrarSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Registrar>> {
  const maybeAccount = await fetchMaybeRegistrarFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRegistrarFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RegistrarSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Registrar>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findRegistrarPda(seeds, { programAddress });
  return await fetchMaybeRegistrar(rpc, address, fetchConfig);
}
