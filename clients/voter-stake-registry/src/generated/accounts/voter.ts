/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { VoterSeeds } from "../pdas/index.js";
import type { DepositEntry, DepositEntryArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findVoterPda } from "../pdas/index.js";
import {
  getDepositEntryDecoder,
  getDepositEntryEncoder,
} from "../types/index.js";

export const VOTER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  241, 93, 35, 191, 254, 147, 17, 202,
]);

export function getVoterDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VOTER_DISCRIMINATOR);
}

export interface Voter {
  discriminator: ReadonlyUint8Array;
  voterAuthority: Address;
  registrar: Address;
  deposits: DepositEntry[];
  voterBump: number;
  voterWeightRecordBump: number;
  padding: number[];
}

export interface VoterArgs {
  voterAuthority: Address;
  registrar: Address;
  deposits: DepositEntryArgs[];
  voterBump: number;
  voterWeightRecordBump: number;
  padding: number[];
}

export function getVoterEncoder(): FixedSizeEncoder<VoterArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["voterAuthority", getAddressEncoder()],
      ["registrar", getAddressEncoder()],
      ["deposits", getArrayEncoder(getDepositEntryEncoder(), { size: 32 })],
      ["voterBump", getU8Encoder()],
      ["voterWeightRecordBump", getU8Encoder()],
      ["padding", getArrayEncoder(getU8Encoder(), { size: 30 })],
    ]),
    (value) => ({ ...value, discriminator: VOTER_DISCRIMINATOR }),
  );
}

export function getVoterDecoder(): FixedSizeDecoder<Voter> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["voterAuthority", getAddressDecoder()],
    ["registrar", getAddressDecoder()],
    ["deposits", getArrayDecoder(getDepositEntryDecoder(), { size: 32 })],
    ["voterBump", getU8Decoder()],
    ["voterWeightRecordBump", getU8Decoder()],
    ["padding", getArrayDecoder(getU8Decoder(), { size: 30 })],
  ]);
}

export function getVoterCodec(): FixedSizeCodec<VoterArgs, Voter> {
  return combineCodec(getVoterEncoder(), getVoterDecoder());
}

export function decodeVoter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Voter, TAddress>;
export function decodeVoter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Voter, TAddress>;
export function decodeVoter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Voter, TAddress> | MaybeAccount<Voter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoterDecoder(),
  );
}

export async function fetchVoter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Voter, TAddress>> {
  const maybeAccount = await fetchMaybeVoter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Voter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoter(maybeAccount);
}

export async function fetchAllVoter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Voter>[]> {
  const maybeAccounts = await fetchAllMaybeVoter(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Voter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVoter(maybeAccount));
}

export async function fetchVoterFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoterSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Voter>> {
  const maybeAccount = await fetchMaybeVoterFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoterFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoterSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Voter>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findVoterPda(seeds, { programAddress });
  return await fetchMaybeVoter(rpc, address, fetchConfig);
}
