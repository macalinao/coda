/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { VoterWeightRecordSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findVoterWeightRecordPda } from "../pdas/index.js";

export const VOTER_WEIGHT_RECORD_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([50, 101, 102, 57, 57, 98, 52, 98]);

export function getVoterWeightRecordDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VOTER_WEIGHT_RECORD_DISCRIMINATOR,
  );
}

export interface VoterWeightRecord {
  discriminator: ReadonlyUint8Array;
  realm: Address;
  governingTokenMint: Address;
  governingTokenOwner: Address;
  voterWeight: bigint;
  voterWeightExpiry: Option<bigint>;
  weightAction: Option<number>;
  weightActionTarget: Option<Address>;
}

export interface VoterWeightRecordArgs {
  realm: Address;
  governingTokenMint: Address;
  governingTokenOwner: Address;
  voterWeight: number | bigint;
  voterWeightExpiry: OptionOrNullable<number | bigint>;
  weightAction: OptionOrNullable<number>;
  weightActionTarget: OptionOrNullable<Address>;
}

export function getVoterWeightRecordEncoder(): Encoder<VoterWeightRecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["realm", getAddressEncoder()],
      ["governingTokenMint", getAddressEncoder()],
      ["governingTokenOwner", getAddressEncoder()],
      ["voterWeight", getU64Encoder()],
      ["voterWeightExpiry", getOptionEncoder(getU64Encoder())],
      ["weightAction", getOptionEncoder(getU8Encoder())],
      ["weightActionTarget", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: VOTER_WEIGHT_RECORD_DISCRIMINATOR }),
  );
}

export function getVoterWeightRecordDecoder(): Decoder<VoterWeightRecord> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["realm", getAddressDecoder()],
    ["governingTokenMint", getAddressDecoder()],
    ["governingTokenOwner", getAddressDecoder()],
    ["voterWeight", getU64Decoder()],
    ["voterWeightExpiry", getOptionDecoder(getU64Decoder())],
    ["weightAction", getOptionDecoder(getU8Decoder())],
    ["weightActionTarget", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getVoterWeightRecordCodec(): Codec<
  VoterWeightRecordArgs,
  VoterWeightRecord
> {
  return combineCodec(
    getVoterWeightRecordEncoder(),
    getVoterWeightRecordDecoder(),
  );
}

export function decodeVoterWeightRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<VoterWeightRecord, TAddress>;
export function decodeVoterWeightRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<VoterWeightRecord, TAddress>;
export function decodeVoterWeightRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<VoterWeightRecord, TAddress>
  | MaybeAccount<VoterWeightRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoterWeightRecordDecoder(),
  );
}

export async function fetchVoterWeightRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<VoterWeightRecord, TAddress>> {
  const maybeAccount = await fetchMaybeVoterWeightRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoterWeightRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<VoterWeightRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoterWeightRecord(maybeAccount);
}

export async function fetchAllVoterWeightRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<VoterWeightRecord>[]> {
  const maybeAccounts = await fetchAllMaybeVoterWeightRecord(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoterWeightRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<VoterWeightRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVoterWeightRecord(maybeAccount),
  );
}

export async function fetchVoterWeightRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoterWeightRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<VoterWeightRecord>> {
  const maybeAccount = await fetchMaybeVoterWeightRecordFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoterWeightRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoterWeightRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<VoterWeightRecord>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findVoterWeightRecordPda(seeds, { programAddress });
  return await fetchMaybeVoterWeightRecord(rpc, address, fetchConfig);
}
