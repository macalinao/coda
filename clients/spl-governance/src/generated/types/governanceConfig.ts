/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Codec, Decoder, Encoder } from "@solana/kit";
import type {
  VoteThreshold,
  VoteThresholdArgs,
  VoteTipping,
  VoteTippingArgs,
} from "./index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";
import {
  getVoteThresholdDecoder,
  getVoteThresholdEncoder,
  getVoteTippingDecoder,
  getVoteTippingEncoder,
} from "./index.js";

export interface GovernanceConfig {
  communityVoteThreshold: VoteThreshold;
  minCommunityWeightToCreateProposal: bigint;
  minTransactionHoldUpTime: number;
  votingBaseTime: number;
  communityVoteTipping: VoteTipping;
  councilVoteThreshold: VoteThreshold;
  councilVetoVoteThreshold: VoteThreshold;
  minCouncilWeightToCreateProposal: bigint;
  councilVoteTipping: VoteTipping;
  communityVetoVoteThreshold: VoteThreshold;
  votingCoolOffTime: number;
  depositExemptProposalCount: number;
}

export interface GovernanceConfigArgs {
  communityVoteThreshold: VoteThresholdArgs;
  minCommunityWeightToCreateProposal: number | bigint;
  minTransactionHoldUpTime: number;
  votingBaseTime: number;
  communityVoteTipping: VoteTippingArgs;
  councilVoteThreshold: VoteThresholdArgs;
  councilVetoVoteThreshold: VoteThresholdArgs;
  minCouncilWeightToCreateProposal: number | bigint;
  councilVoteTipping: VoteTippingArgs;
  communityVetoVoteThreshold: VoteThresholdArgs;
  votingCoolOffTime: number;
  depositExemptProposalCount: number;
}

export function getGovernanceConfigEncoder(): Encoder<GovernanceConfigArgs> {
  return getStructEncoder([
    ["communityVoteThreshold", getVoteThresholdEncoder()],
    ["minCommunityWeightToCreateProposal", getU64Encoder()],
    ["minTransactionHoldUpTime", getU32Encoder()],
    ["votingBaseTime", getU32Encoder()],
    ["communityVoteTipping", getVoteTippingEncoder()],
    ["councilVoteThreshold", getVoteThresholdEncoder()],
    ["councilVetoVoteThreshold", getVoteThresholdEncoder()],
    ["minCouncilWeightToCreateProposal", getU64Encoder()],
    ["councilVoteTipping", getVoteTippingEncoder()],
    ["communityVetoVoteThreshold", getVoteThresholdEncoder()],
    ["votingCoolOffTime", getU32Encoder()],
    ["depositExemptProposalCount", getU8Encoder()],
  ]);
}

export function getGovernanceConfigDecoder(): Decoder<GovernanceConfig> {
  return getStructDecoder([
    ["communityVoteThreshold", getVoteThresholdDecoder()],
    ["minCommunityWeightToCreateProposal", getU64Decoder()],
    ["minTransactionHoldUpTime", getU32Decoder()],
    ["votingBaseTime", getU32Decoder()],
    ["communityVoteTipping", getVoteTippingDecoder()],
    ["councilVoteThreshold", getVoteThresholdDecoder()],
    ["councilVetoVoteThreshold", getVoteThresholdDecoder()],
    ["minCouncilWeightToCreateProposal", getU64Decoder()],
    ["councilVoteTipping", getVoteTippingDecoder()],
    ["communityVetoVoteThreshold", getVoteThresholdDecoder()],
    ["votingCoolOffTime", getU32Decoder()],
    ["depositExemptProposalCount", getU8Decoder()],
  ]);
}

export function getGovernanceConfigCodec(): Codec<
  GovernanceConfigArgs,
  GovernanceConfig
> {
  return combineCodec(
    getGovernanceConfigEncoder(),
    getGovernanceConfigDecoder(),
  );
}
