/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
} from "@solana/kit";
import type { MultiChoiceType, MultiChoiceTypeArgs } from "./index.js";
import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUnitDecoder,
  getUnitEncoder,
} from "@solana/kit";
import {
  getMultiChoiceTypeDecoder,
  getMultiChoiceTypeEncoder,
} from "./index.js";

export type VoteType =
  | { __kind: "SingleChoice" }
  | {
      __kind: "MultiChoice";
      choiceType: MultiChoiceType;
      minVoterOptions: number;
      maxVoterOptions: number;
      maxWinningOptions: number;
    };

export type VoteTypeArgs =
  | { __kind: "SingleChoice" }
  | {
      __kind: "MultiChoice";
      choiceType: MultiChoiceTypeArgs;
      minVoterOptions: number;
      maxVoterOptions: number;
      maxWinningOptions: number;
    };

export function getVoteTypeEncoder(): Encoder<VoteTypeArgs> {
  return getDiscriminatedUnionEncoder([
    ["SingleChoice", getUnitEncoder()],
    [
      "MultiChoice",
      getStructEncoder([
        ["choiceType", getMultiChoiceTypeEncoder()],
        ["minVoterOptions", getU8Encoder()],
        ["maxVoterOptions", getU8Encoder()],
        ["maxWinningOptions", getU8Encoder()],
      ]),
    ],
  ]);
}

export function getVoteTypeDecoder(): Decoder<VoteType> {
  return getDiscriminatedUnionDecoder([
    ["SingleChoice", getUnitDecoder()],
    [
      "MultiChoice",
      getStructDecoder([
        ["choiceType", getMultiChoiceTypeDecoder()],
        ["minVoterOptions", getU8Decoder()],
        ["maxVoterOptions", getU8Decoder()],
        ["maxWinningOptions", getU8Decoder()],
      ]),
    ],
  ]);
}

export function getVoteTypeCodec(): Codec<VoteTypeArgs, VoteType> {
  return combineCodec(getVoteTypeEncoder(), getVoteTypeDecoder());
}

// Data Enum Helpers.
export function voteType(
  kind: "SingleChoice",
): GetDiscriminatedUnionVariant<VoteTypeArgs, "__kind", "SingleChoice">;
export function voteType(
  kind: "MultiChoice",
  data: GetDiscriminatedUnionVariantContent<
    VoteTypeArgs,
    "__kind",
    "MultiChoice"
  >,
): GetDiscriminatedUnionVariant<VoteTypeArgs, "__kind", "MultiChoice">;
export function voteType<K extends VoteTypeArgs["__kind"], Data>(
  kind: K,
  data?: Data,
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isVoteType<K extends VoteType["__kind"]>(
  kind: K,
  value: VoteType,
): value is VoteType & { __kind: K } {
  return value.__kind === kind;
}
