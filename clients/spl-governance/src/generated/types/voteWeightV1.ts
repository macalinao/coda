/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
} from "@solana/kit";
import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";

export type VoteWeightV1 =
  | { __kind: "Yes"; fields: readonly [bigint] }
  | { __kind: "No"; fields: readonly [bigint] };

export type VoteWeightV1Args =
  | { __kind: "Yes"; fields: readonly [number | bigint] }
  | { __kind: "No"; fields: readonly [number | bigint] };

export function getVoteWeightV1Encoder(): FixedSizeEncoder<VoteWeightV1Args> {
  return getDiscriminatedUnionEncoder([
    ["Yes", getStructEncoder([["fields", getTupleEncoder([getU64Encoder()])]])],
    ["No", getStructEncoder([["fields", getTupleEncoder([getU64Encoder()])]])],
  ]) as FixedSizeEncoder<VoteWeightV1Args>;
}

export function getVoteWeightV1Decoder(): FixedSizeDecoder<VoteWeightV1> {
  return getDiscriminatedUnionDecoder([
    ["Yes", getStructDecoder([["fields", getTupleDecoder([getU64Decoder()])]])],
    ["No", getStructDecoder([["fields", getTupleDecoder([getU64Decoder()])]])],
  ]) as FixedSizeDecoder<VoteWeightV1>;
}

export function getVoteWeightV1Codec(): FixedSizeCodec<
  VoteWeightV1Args,
  VoteWeightV1
> {
  return combineCodec(getVoteWeightV1Encoder(), getVoteWeightV1Decoder());
}

// Data Enum Helpers.
export function voteWeightV1(
  kind: "Yes",
  data: GetDiscriminatedUnionVariantContent<
    VoteWeightV1Args,
    "__kind",
    "Yes"
  >["fields"],
): GetDiscriminatedUnionVariant<VoteWeightV1Args, "__kind", "Yes">;
export function voteWeightV1(
  kind: "No",
  data: GetDiscriminatedUnionVariantContent<
    VoteWeightV1Args,
    "__kind",
    "No"
  >["fields"],
): GetDiscriminatedUnionVariant<VoteWeightV1Args, "__kind", "No">;
export function voteWeightV1<K extends VoteWeightV1Args["__kind"], Data>(
  kind: K,
  data?: Data,
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isVoteWeightV1<K extends VoteWeightV1["__kind"]>(
  kind: K,
  value: VoteWeightV1,
): value is VoteWeightV1 & { __kind: K } {
  return value.__kind === kind;
}
