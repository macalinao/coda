/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  Codec,
  Decoder,
  Encoder,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { AccountMetaData, AccountMetaDataArgs } from "./index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
} from "@solana/kit";
import {
  getAccountMetaDataDecoder,
  getAccountMetaDataEncoder,
} from "./index.js";

export interface InstructionData {
  programId: Address;
  accounts: AccountMetaData[];
  data: ReadonlyUint8Array;
}

export interface InstructionDataArgs {
  programId: Address;
  accounts: AccountMetaDataArgs[];
  data: ReadonlyUint8Array;
}

export function getInstructionDataEncoder(): Encoder<InstructionDataArgs> {
  return getStructEncoder([
    ["programId", getAddressEncoder()],
    ["accounts", getArrayEncoder(getAccountMetaDataEncoder())],
    ["data", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getInstructionDataDecoder(): Decoder<InstructionData> {
  return getStructDecoder([
    ["programId", getAddressDecoder()],
    ["accounts", getArrayDecoder(getAccountMetaDataDecoder())],
    ["data", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getInstructionDataCodec(): Codec<
  InstructionDataArgs,
  InstructionData
> {
  return combineCodec(getInstructionDataEncoder(), getInstructionDataDecoder());
}
