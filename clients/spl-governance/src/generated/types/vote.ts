/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
} from "@solana/kit";
import type { VoteChoice, VoteChoiceArgs } from "./index.js";
import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
} from "@solana/kit";
import { getVoteChoiceDecoder, getVoteChoiceEncoder } from "./index.js";

export type Vote =
  | { __kind: "Approve"; fields: readonly [VoteChoice[]] }
  | { __kind: "Deny" }
  | { __kind: "Abstain" }
  | { __kind: "Veto" };

export type VoteArgs =
  | { __kind: "Approve"; fields: readonly [VoteChoiceArgs[]] }
  | { __kind: "Deny" }
  | { __kind: "Abstain" }
  | { __kind: "Veto" };

export function getVoteEncoder(): Encoder<VoteArgs> {
  return getDiscriminatedUnionEncoder([
    [
      "Approve",
      getStructEncoder([
        ["fields", getTupleEncoder([getArrayEncoder(getVoteChoiceEncoder())])],
      ]),
    ],
    ["Deny", getUnitEncoder()],
    ["Abstain", getUnitEncoder()],
    ["Veto", getUnitEncoder()],
  ]);
}

export function getVoteDecoder(): Decoder<Vote> {
  return getDiscriminatedUnionDecoder([
    [
      "Approve",
      getStructDecoder([
        ["fields", getTupleDecoder([getArrayDecoder(getVoteChoiceDecoder())])],
      ]),
    ],
    ["Deny", getUnitDecoder()],
    ["Abstain", getUnitDecoder()],
    ["Veto", getUnitDecoder()],
  ]);
}

export function getVoteCodec(): Codec<VoteArgs, Vote> {
  return combineCodec(getVoteEncoder(), getVoteDecoder());
}

// Data Enum Helpers.
export function vote(
  kind: "Approve",
  data: GetDiscriminatedUnionVariantContent<
    VoteArgs,
    "__kind",
    "Approve"
  >["fields"],
): GetDiscriminatedUnionVariant<VoteArgs, "__kind", "Approve">;
export function vote(
  kind: "Deny",
): GetDiscriminatedUnionVariant<VoteArgs, "__kind", "Deny">;
export function vote(
  kind: "Abstain",
): GetDiscriminatedUnionVariant<VoteArgs, "__kind", "Abstain">;
export function vote(
  kind: "Veto",
): GetDiscriminatedUnionVariant<VoteArgs, "__kind", "Veto">;
export function vote<K extends VoteArgs["__kind"], Data>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isVote<K extends Vote["__kind"]>(
  kind: K,
  value: Vote,
): value is Vote & { __kind: K } {
  return value.__kind === kind;
}
