/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { GovernanceConfig, GovernanceConfigArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getGovernanceConfigDecoder,
  getGovernanceConfigEncoder,
} from "../types/index.js";

export const SET_GOVERNANCE_CONFIG_DISCRIMINATOR = 19;

export function getSetGovernanceConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_GOVERNANCE_CONFIG_DISCRIMINATOR);
}

export type SetGovernanceConfigInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernanceAccount extends string
        ? WritableSignerAccount<TAccountGovernanceAccount> &
            AccountSignerMeta<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface SetGovernanceConfigInstructionData {
  discriminator: number;
  config: GovernanceConfig;
}

export interface SetGovernanceConfigInstructionDataArgs {
  config: GovernanceConfigArgs;
}

export function getSetGovernanceConfigInstructionDataEncoder(): Encoder<SetGovernanceConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["config", getGovernanceConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_GOVERNANCE_CONFIG_DISCRIMINATOR,
    }),
  );
}

export function getSetGovernanceConfigInstructionDataDecoder(): Decoder<SetGovernanceConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["config", getGovernanceConfigDecoder()],
  ]);
}

export function getSetGovernanceConfigInstructionDataCodec(): Codec<
  SetGovernanceConfigInstructionDataArgs,
  SetGovernanceConfigInstructionData
> {
  return combineCodec(
    getSetGovernanceConfigInstructionDataEncoder(),
    getSetGovernanceConfigInstructionDataDecoder(),
  );
}

export interface SetGovernanceConfigInput<
  TAccountGovernanceAccount extends string = string,
> {
  /** The governance account the config is for */
  governanceAccount: TransactionSigner<TAccountGovernanceAccount>;
  config: SetGovernanceConfigInstructionDataArgs["config"];
}

export function getSetGovernanceConfigInstruction<
  TAccountGovernanceAccount extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: SetGovernanceConfigInput<TAccountGovernanceAccount>,
  config?: { programAddress?: TProgramAddress },
): SetGovernanceConfigInstruction<TProgramAddress, TAccountGovernanceAccount> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [getAccountMeta(accounts.governanceAccount)],
    data: getSetGovernanceConfigInstructionDataEncoder().encode(
      args as SetGovernanceConfigInstructionDataArgs,
    ),
    programAddress,
  } as SetGovernanceConfigInstruction<
    TProgramAddress,
    TAccountGovernanceAccount
  >);
}

export interface ParsedSetGovernanceConfigInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** The governance account the config is for */
    governanceAccount: TAccountMetas[0];
  };
  data: SetGovernanceConfigInstructionData;
}

export function parseSetGovernanceConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetGovernanceConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { governanceAccount: getNextAccount() },
    data: getSetGovernanceConfigInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
