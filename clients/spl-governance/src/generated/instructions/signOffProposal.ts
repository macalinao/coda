/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SIGN_OFF_PROPOSAL_DISCRIMINATOR = 12;

export function getSignOffProposalDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SIGN_OFF_PROPOSAL_DISCRIMINATOR);
}

export type SignOffProposalInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TAccountProposalAccount extends string | AccountMeta = string,
  TAccountSignatoryAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountGovernanceAccount extends string
        ? ReadonlyAccount<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      TAccountProposalAccount extends string
        ? WritableAccount<TAccountProposalAccount>
        : TAccountProposalAccount,
      TAccountSignatoryAccount extends string
        ? ReadonlySignerAccount<TAccountSignatoryAccount> &
            AccountSignerMeta<TAccountSignatoryAccount>
        : TAccountSignatoryAccount,
      TAccountTokenOwnerRecord extends string
        ? WritableAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      ...TRemainingAccounts,
    ]
  >;

export interface SignOffProposalInstructionData {
  discriminator: number;
}

export interface SignOffProposalInstructionDataArgs {}

export function getSignOffProposalInstructionDataEncoder(): FixedSizeEncoder<SignOffProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SIGN_OFF_PROPOSAL_DISCRIMINATOR }),
  );
}

export function getSignOffProposalInstructionDataDecoder(): FixedSizeDecoder<SignOffProposalInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getSignOffProposalInstructionDataCodec(): FixedSizeCodec<
  SignOffProposalInstructionDataArgs,
  SignOffProposalInstructionData
> {
  return combineCodec(
    getSignOffProposalInstructionDataEncoder(),
    getSignOffProposalInstructionDataDecoder(),
  );
}

export interface SignOffProposalInput<
  TAccountRealmAccount extends string = string,
  TAccountGovernanceAccount extends string = string,
  TAccountProposalAccount extends string = string,
  TAccountSignatoryAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  governanceAccount: Address<TAccountGovernanceAccount>;
  proposalAccount: Address<TAccountProposalAccount>;
  /**
   * Signatory account signing off the Proposal.
   *     Or Proposal owner if the owner hasn't appointed any signatories
   */
  signatoryAccount: TransactionSigner<TAccountSignatoryAccount>;
  /**
   * TokenOwnerRecord for the Proposal owner, required when the owner signs off the Proposal.
   *         Or `[writable]` SignatoryRecord account, required when non owner signs off the Proposal
   */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
}

export function getSignOffProposalInstruction<
  TAccountRealmAccount extends string,
  TAccountGovernanceAccount extends string,
  TAccountProposalAccount extends string,
  TAccountSignatoryAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: SignOffProposalInput<
    TAccountRealmAccount,
    TAccountGovernanceAccount,
    TAccountProposalAccount,
    TAccountSignatoryAccount,
    TAccountTokenOwnerRecord
  >,
  config?: { programAddress?: TProgramAddress },
): SignOffProposalInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountGovernanceAccount,
  TAccountProposalAccount,
  TAccountSignatoryAccount,
  TAccountTokenOwnerRecord
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: false,
    },
    proposalAccount: { value: input.proposalAccount ?? null, isWritable: true },
    signatoryAccount: {
      value: input.signatoryAccount ?? null,
      isWritable: false,
    },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governanceAccount),
      getAccountMeta(accounts.proposalAccount),
      getAccountMeta(accounts.signatoryAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
    ],
    data: getSignOffProposalInstructionDataEncoder().encode({}),
    programAddress,
  } as SignOffProposalInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGovernanceAccount,
    TAccountProposalAccount,
    TAccountSignatoryAccount,
    TAccountTokenOwnerRecord
  >);
}

export interface ParsedSignOffProposalInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    governanceAccount: TAccountMetas[1];
    proposalAccount: TAccountMetas[2];
    /**
     * Signatory account signing off the Proposal.
     *     Or Proposal owner if the owner hasn't appointed any signatories
     */
    signatoryAccount: TAccountMetas[3];
    /**
     * TokenOwnerRecord for the Proposal owner, required when the owner signs off the Proposal.
     *         Or `[writable]` SignatoryRecord account, required when non owner signs off the Proposal
     */
    tokenOwnerRecord: TAccountMetas[4];
  };
  data: SignOffProposalInstructionData;
}

export function parseSignOffProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSignOffProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      governanceAccount: getNextAccount(),
      proposalAccount: getNextAccount(),
      signatoryAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
    },
    data: getSignOffProposalInstructionDataDecoder().decode(instruction.data),
  };
}
