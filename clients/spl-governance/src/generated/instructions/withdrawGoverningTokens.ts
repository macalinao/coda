/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_GOVERNING_TOKENS_DISCRIMINATOR = 2;

export function getWithdrawGoverningTokensDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(WITHDRAW_GOVERNING_TOKENS_DISCRIMINATOR);
}

export type WithdrawGoverningTokensInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountGoverningTokenHoldingAccount extends string | AccountMeta = string,
  TAccountGoverningTokenDestinationAccount extends
    | string
    | AccountMeta = string,
  TAccountGoverningTokenOwnerAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountRealmConfigAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountGoverningTokenHoldingAccount extends string
        ? WritableAccount<TAccountGoverningTokenHoldingAccount>
        : TAccountGoverningTokenHoldingAccount,
      TAccountGoverningTokenDestinationAccount extends string
        ? WritableAccount<TAccountGoverningTokenDestinationAccount>
        : TAccountGoverningTokenDestinationAccount,
      TAccountGoverningTokenOwnerAccount extends string
        ? ReadonlySignerAccount<TAccountGoverningTokenOwnerAccount> &
            AccountSignerMeta<TAccountGoverningTokenOwnerAccount>
        : TAccountGoverningTokenOwnerAccount,
      TAccountTokenOwnerRecord extends string
        ? WritableAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRealmConfigAccount extends string
        ? ReadonlyAccount<TAccountRealmConfigAccount>
        : TAccountRealmConfigAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawGoverningTokensInstructionData {
  discriminator: number;
}

export interface WithdrawGoverningTokensInstructionDataArgs {}

export function getWithdrawGoverningTokensInstructionDataEncoder(): FixedSizeEncoder<WithdrawGoverningTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_GOVERNING_TOKENS_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawGoverningTokensInstructionDataDecoder(): FixedSizeDecoder<WithdrawGoverningTokensInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getWithdrawGoverningTokensInstructionDataCodec(): FixedSizeCodec<
  WithdrawGoverningTokensInstructionDataArgs,
  WithdrawGoverningTokensInstructionData
> {
  return combineCodec(
    getWithdrawGoverningTokensInstructionDataEncoder(),
    getWithdrawGoverningTokensInstructionDataDecoder(),
  );
}

export interface WithdrawGoverningTokensInput<
  TAccountRealmAccount extends string = string,
  TAccountGoverningTokenHoldingAccount extends string = string,
  TAccountGoverningTokenDestinationAccount extends string = string,
  TAccountGoverningTokenOwnerAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRealmConfigAccount extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  /** seeds=['governance', realm, governing_token_mint] */
  governingTokenHoldingAccount: Address<TAccountGoverningTokenHoldingAccount>;
  /** All tokens will be transferred to this account */
  governingTokenDestinationAccount: Address<TAccountGoverningTokenDestinationAccount>;
  governingTokenOwnerAccount: TransactionSigner<TAccountGoverningTokenOwnerAccount>;
  /** seeds=['governance',realm, governing_token_mint, governing_token_owner] */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  tokenProgram?: Address<TAccountTokenProgram>;
  /** seeds=['realm-config', realm] */
  realmConfigAccount: Address<TAccountRealmConfigAccount>;
}

export function getWithdrawGoverningTokensInstruction<
  TAccountRealmAccount extends string,
  TAccountGoverningTokenHoldingAccount extends string,
  TAccountGoverningTokenDestinationAccount extends string,
  TAccountGoverningTokenOwnerAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountTokenProgram extends string,
  TAccountRealmConfigAccount extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: WithdrawGoverningTokensInput<
    TAccountRealmAccount,
    TAccountGoverningTokenHoldingAccount,
    TAccountGoverningTokenDestinationAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountTokenProgram,
    TAccountRealmConfigAccount
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawGoverningTokensInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountGoverningTokenHoldingAccount,
  TAccountGoverningTokenDestinationAccount,
  TAccountGoverningTokenOwnerAccount,
  TAccountTokenOwnerRecord,
  TAccountTokenProgram,
  TAccountRealmConfigAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governingTokenHoldingAccount: {
      value: input.governingTokenHoldingAccount ?? null,
      isWritable: true,
    },
    governingTokenDestinationAccount: {
      value: input.governingTokenDestinationAccount ?? null,
      isWritable: true,
    },
    governingTokenOwnerAccount: {
      value: input.governingTokenOwnerAccount ?? null,
      isWritable: false,
    },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    realmConfigAccount: {
      value: input.realmConfigAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governingTokenHoldingAccount),
      getAccountMeta(accounts.governingTokenDestinationAccount),
      getAccountMeta(accounts.governingTokenOwnerAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.realmConfigAccount),
    ],
    data: getWithdrawGoverningTokensInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawGoverningTokensInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGoverningTokenHoldingAccount,
    TAccountGoverningTokenDestinationAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountTokenProgram,
    TAccountRealmConfigAccount
  >);
}

export interface ParsedWithdrawGoverningTokensInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    /** seeds=['governance', realm, governing_token_mint] */
    governingTokenHoldingAccount: TAccountMetas[1];
    /** All tokens will be transferred to this account */
    governingTokenDestinationAccount: TAccountMetas[2];
    governingTokenOwnerAccount: TAccountMetas[3];
    /** seeds=['governance',realm, governing_token_mint, governing_token_owner] */
    tokenOwnerRecord: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    /** seeds=['realm-config', realm] */
    realmConfigAccount: TAccountMetas[6];
  };
  data: WithdrawGoverningTokensInstructionData;
}

export function parseWithdrawGoverningTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawGoverningTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      governingTokenHoldingAccount: getNextAccount(),
      governingTokenDestinationAccount: getNextAccount(),
      governingTokenOwnerAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      tokenProgram: getNextAccount(),
      realmConfigAccount: getNextAccount(),
    },
    data: getWithdrawGoverningTokensInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
