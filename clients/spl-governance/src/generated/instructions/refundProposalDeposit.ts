/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REFUND_PROPOSAL_DEPOSIT_DISCRIMINATOR = 27;

export function getRefundProposalDepositDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(REFUND_PROPOSAL_DEPOSIT_DISCRIMINATOR);
}

export type RefundProposalDepositInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountProposalAccount extends string | AccountMeta = string,
  TAccountProposalDepositAccount extends string | AccountMeta = string,
  TAccountProposalDepositPayer extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposalAccount extends string
        ? ReadonlyAccount<TAccountProposalAccount>
        : TAccountProposalAccount,
      TAccountProposalDepositAccount extends string
        ? WritableAccount<TAccountProposalDepositAccount>
        : TAccountProposalDepositAccount,
      TAccountProposalDepositPayer extends string
        ? WritableAccount<TAccountProposalDepositPayer>
        : TAccountProposalDepositPayer,
      ...TRemainingAccounts,
    ]
  >;

export interface RefundProposalDepositInstructionData {
  discriminator: number;
}

export interface RefundProposalDepositInstructionDataArgs {}

export function getRefundProposalDepositInstructionDataEncoder(): FixedSizeEncoder<RefundProposalDepositInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: REFUND_PROPOSAL_DEPOSIT_DISCRIMINATOR,
    }),
  );
}

export function getRefundProposalDepositInstructionDataDecoder(): FixedSizeDecoder<RefundProposalDepositInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getRefundProposalDepositInstructionDataCodec(): FixedSizeCodec<
  RefundProposalDepositInstructionDataArgs,
  RefundProposalDepositInstructionData
> {
  return combineCodec(
    getRefundProposalDepositInstructionDataEncoder(),
    getRefundProposalDepositInstructionDataDecoder(),
  );
}

export interface RefundProposalDepositInput<
  TAccountProposalAccount extends string = string,
  TAccountProposalDepositAccount extends string = string,
  TAccountProposalDepositPayer extends string = string,
> {
  proposalAccount: Address<TAccountProposalAccount>;
  /** PDA Seeds: ['proposal-deposit', proposal, deposit payer] */
  proposalDepositAccount: Address<TAccountProposalDepositAccount>;
  /** Proposal Deposit Payer (beneficiary) account */
  proposalDepositPayer: Address<TAccountProposalDepositPayer>;
}

export function getRefundProposalDepositInstruction<
  TAccountProposalAccount extends string,
  TAccountProposalDepositAccount extends string,
  TAccountProposalDepositPayer extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: RefundProposalDepositInput<
    TAccountProposalAccount,
    TAccountProposalDepositAccount,
    TAccountProposalDepositPayer
  >,
  config?: { programAddress?: TProgramAddress },
): RefundProposalDepositInstruction<
  TProgramAddress,
  TAccountProposalAccount,
  TAccountProposalDepositAccount,
  TAccountProposalDepositPayer
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposalAccount: {
      value: input.proposalAccount ?? null,
      isWritable: false,
    },
    proposalDepositAccount: {
      value: input.proposalDepositAccount ?? null,
      isWritable: true,
    },
    proposalDepositPayer: {
      value: input.proposalDepositPayer ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.proposalAccount),
      getAccountMeta(accounts.proposalDepositAccount),
      getAccountMeta(accounts.proposalDepositPayer),
    ],
    data: getRefundProposalDepositInstructionDataEncoder().encode({}),
    programAddress,
  } as RefundProposalDepositInstruction<
    TProgramAddress,
    TAccountProposalAccount,
    TAccountProposalDepositAccount,
    TAccountProposalDepositPayer
  >);
}

export interface ParsedRefundProposalDepositInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    proposalAccount: TAccountMetas[0];
    /** PDA Seeds: ['proposal-deposit', proposal, deposit payer] */
    proposalDepositAccount: TAccountMetas[1];
    /** Proposal Deposit Payer (beneficiary) account */
    proposalDepositPayer: TAccountMetas[2];
  };
  data: RefundProposalDepositInstructionData;
}

export function parseRefundProposalDepositInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRefundProposalDepositInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposalAccount: getNextAccount(),
      proposalDepositAccount: getNextAccount(),
      proposalDepositPayer: getNextAccount(),
    },
    data: getRefundProposalDepositInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
