/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  RealmConfigParams,
  RealmConfigParamsArgs,
} from "../types/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getRealmConfigParamsDecoder,
  getRealmConfigParamsEncoder,
} from "../types/index.js";

export const CREATE_REALM_DISCRIMINATOR = 0;

export function getCreateRealmDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(CREATE_REALM_DISCRIMINATOR);
}

export type CreateRealmInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TAccountCommunityTokenMint extends string | AccountMeta = string,
  TAccountCommunityTokenHoldingAccount extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TAccountCouncilTokenMint extends string | AccountMeta = string,
  TAccountCouncilTokenHoldingAccount extends string | AccountMeta = string,
  TAccountRealmConfig extends string | AccountMeta = string,
  TAccountCommunityVoterWeightAddin extends string | AccountMeta = string,
  TAccountMaxCommunityVoterWeightAddin extends string | AccountMeta = string,
  TAccountCouncilVoterWeightAddin extends string | AccountMeta = string,
  TAccountMaxCouncilVoterWeightAddin extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? WritableAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountRealmAuthority extends string
        ? ReadonlyAccount<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      TAccountCommunityTokenMint extends string
        ? ReadonlyAccount<TAccountCommunityTokenMint>
        : TAccountCommunityTokenMint,
      TAccountCommunityTokenHoldingAccount extends string
        ? WritableAccount<TAccountCommunityTokenHoldingAccount>
        : TAccountCommunityTokenHoldingAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountCouncilTokenMint extends string
        ? ReadonlyAccount<TAccountCouncilTokenMint>
        : TAccountCouncilTokenMint,
      TAccountCouncilTokenHoldingAccount extends string
        ? WritableAccount<TAccountCouncilTokenHoldingAccount>
        : TAccountCouncilTokenHoldingAccount,
      TAccountRealmConfig extends string
        ? WritableAccount<TAccountRealmConfig>
        : TAccountRealmConfig,
      TAccountCommunityVoterWeightAddin extends string
        ? ReadonlyAccount<TAccountCommunityVoterWeightAddin>
        : TAccountCommunityVoterWeightAddin,
      TAccountMaxCommunityVoterWeightAddin extends string
        ? ReadonlyAccount<TAccountMaxCommunityVoterWeightAddin>
        : TAccountMaxCommunityVoterWeightAddin,
      TAccountCouncilVoterWeightAddin extends string
        ? ReadonlyAccount<TAccountCouncilVoterWeightAddin>
        : TAccountCouncilVoterWeightAddin,
      TAccountMaxCouncilVoterWeightAddin extends string
        ? ReadonlyAccount<TAccountMaxCouncilVoterWeightAddin>
        : TAccountMaxCouncilVoterWeightAddin,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateRealmInstructionData {
  discriminator: number;
  name: string;
  configArgs: RealmConfigParams;
}

export interface CreateRealmInstructionDataArgs {
  name: string;
  configArgs: RealmConfigParamsArgs;
}

export function getCreateRealmInstructionDataEncoder(): Encoder<CreateRealmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["configArgs", getRealmConfigParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_REALM_DISCRIMINATOR }),
  );
}

export function getCreateRealmInstructionDataDecoder(): Decoder<CreateRealmInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["configArgs", getRealmConfigParamsDecoder()],
  ]);
}

export function getCreateRealmInstructionDataCodec(): Codec<
  CreateRealmInstructionDataArgs,
  CreateRealmInstructionData
> {
  return combineCodec(
    getCreateRealmInstructionDataEncoder(),
    getCreateRealmInstructionDataDecoder(),
  );
}

export interface CreateRealmInput<
  TAccountRealmAccount extends string = string,
  TAccountRealmAuthority extends string = string,
  TAccountCommunityTokenMint extends string = string,
  TAccountCommunityTokenHoldingAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
  TAccountCouncilTokenMint extends string = string,
  TAccountCouncilTokenHoldingAccount extends string = string,
  TAccountRealmConfig extends string = string,
  TAccountCommunityVoterWeightAddin extends string = string,
  TAccountMaxCommunityVoterWeightAddin extends string = string,
  TAccountCouncilVoterWeightAddin extends string = string,
  TAccountMaxCouncilVoterWeightAddin extends string = string,
> {
  /** Governance Realm account */
  realmAccount: Address<TAccountRealmAccount>;
  /** The authority of the Realm */
  realmAuthority: Address<TAccountRealmAuthority>;
  /** The mint address of the token to be used as the community mint */
  communityTokenMint: Address<TAccountCommunityTokenMint>;
  /**
   * The account to hold the community tokens.
   *     PDA seeds=['governance', realm, community_mint]
   */
  communityTokenHoldingAccount: Address<TAccountCommunityTokenHoldingAccount>;
  /** the payer of this transaction */
  payer: TransactionSigner<TAccountPayer>;
  /** System Program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** SPL Token Program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** SysVar Rent */
  rent?: Address<TAccountRent>;
  /** The mint address of the token to be used as the council mint */
  councilTokenMint?: Address<TAccountCouncilTokenMint>;
  /**
   * The account to hold the council tokens.
   *     PDA seeds: ['governance',realm,council_mint]
   *
   */
  councilTokenHoldingAccount?: Address<TAccountCouncilTokenHoldingAccount>;
  /** Realm Config account */
  realmConfig: Address<TAccountRealmConfig>;
  /** Optional Community Voter Weight Addin Program Id */
  communityVoterWeightAddin?: Address<TAccountCommunityVoterWeightAddin>;
  /** Optional Max Community Voter Weight Addin Program Id */
  maxCommunityVoterWeightAddin?: Address<TAccountMaxCommunityVoterWeightAddin>;
  /** Optional Council Voter Weight Addin Program Id */
  councilVoterWeightAddin?: Address<TAccountCouncilVoterWeightAddin>;
  /** Optional Max Council Voter Weight Addin Program Id */
  maxCouncilVoterWeightAddin?: Address<TAccountMaxCouncilVoterWeightAddin>;
  name: CreateRealmInstructionDataArgs["name"];
  configArgs: CreateRealmInstructionDataArgs["configArgs"];
}

export function getCreateRealmInstruction<
  TAccountRealmAccount extends string,
  TAccountRealmAuthority extends string,
  TAccountCommunityTokenMint extends string,
  TAccountCommunityTokenHoldingAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TAccountCouncilTokenMint extends string,
  TAccountCouncilTokenHoldingAccount extends string,
  TAccountRealmConfig extends string,
  TAccountCommunityVoterWeightAddin extends string,
  TAccountMaxCommunityVoterWeightAddin extends string,
  TAccountCouncilVoterWeightAddin extends string,
  TAccountMaxCouncilVoterWeightAddin extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: CreateRealmInput<
    TAccountRealmAccount,
    TAccountRealmAuthority,
    TAccountCommunityTokenMint,
    TAccountCommunityTokenHoldingAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent,
    TAccountCouncilTokenMint,
    TAccountCouncilTokenHoldingAccount,
    TAccountRealmConfig,
    TAccountCommunityVoterWeightAddin,
    TAccountMaxCommunityVoterWeightAddin,
    TAccountCouncilVoterWeightAddin,
    TAccountMaxCouncilVoterWeightAddin
  >,
  config?: { programAddress?: TProgramAddress },
): CreateRealmInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountRealmAuthority,
  TAccountCommunityTokenMint,
  TAccountCommunityTokenHoldingAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent,
  TAccountCouncilTokenMint,
  TAccountCouncilTokenHoldingAccount,
  TAccountRealmConfig,
  TAccountCommunityVoterWeightAddin,
  TAccountMaxCommunityVoterWeightAddin,
  TAccountCouncilVoterWeightAddin,
  TAccountMaxCouncilVoterWeightAddin
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: true },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
    communityTokenMint: {
      value: input.communityTokenMint ?? null,
      isWritable: false,
    },
    communityTokenHoldingAccount: {
      value: input.communityTokenHoldingAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    councilTokenMint: {
      value: input.councilTokenMint ?? null,
      isWritable: false,
    },
    councilTokenHoldingAccount: {
      value: input.councilTokenHoldingAccount ?? null,
      isWritable: true,
    },
    realmConfig: { value: input.realmConfig ?? null, isWritable: true },
    communityVoterWeightAddin: {
      value: input.communityVoterWeightAddin ?? null,
      isWritable: false,
    },
    maxCommunityVoterWeightAddin: {
      value: input.maxCommunityVoterWeightAddin ?? null,
      isWritable: false,
    },
    councilVoterWeightAddin: {
      value: input.councilVoterWeightAddin ?? null,
      isWritable: false,
    },
    maxCouncilVoterWeightAddin: {
      value: input.maxCouncilVoterWeightAddin ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.realmAuthority),
      getAccountMeta(accounts.communityTokenMint),
      getAccountMeta(accounts.communityTokenHoldingAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.councilTokenMint),
      getAccountMeta(accounts.councilTokenHoldingAccount),
      getAccountMeta(accounts.realmConfig),
      getAccountMeta(accounts.communityVoterWeightAddin),
      getAccountMeta(accounts.maxCommunityVoterWeightAddin),
      getAccountMeta(accounts.councilVoterWeightAddin),
      getAccountMeta(accounts.maxCouncilVoterWeightAddin),
    ],
    data: getCreateRealmInstructionDataEncoder().encode(
      args as CreateRealmInstructionDataArgs,
    ),
    programAddress,
  } as CreateRealmInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountRealmAuthority,
    TAccountCommunityTokenMint,
    TAccountCommunityTokenHoldingAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent,
    TAccountCouncilTokenMint,
    TAccountCouncilTokenHoldingAccount,
    TAccountRealmConfig,
    TAccountCommunityVoterWeightAddin,
    TAccountMaxCommunityVoterWeightAddin,
    TAccountCouncilVoterWeightAddin,
    TAccountMaxCouncilVoterWeightAddin
  >);
}

export interface ParsedCreateRealmInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Governance Realm account */
    realmAccount: TAccountMetas[0];
    /** The authority of the Realm */
    realmAuthority: TAccountMetas[1];
    /** The mint address of the token to be used as the community mint */
    communityTokenMint: TAccountMetas[2];
    /**
     * The account to hold the community tokens.
     *     PDA seeds=['governance', realm, community_mint]
     */
    communityTokenHoldingAccount: TAccountMetas[3];
    /** the payer of this transaction */
    payer: TAccountMetas[4];
    /** System Program */
    systemProgram: TAccountMetas[5];
    /** SPL Token Program */
    tokenProgram: TAccountMetas[6];
    /** SysVar Rent */
    rent: TAccountMetas[7];
    /** The mint address of the token to be used as the council mint */
    councilTokenMint?: TAccountMetas[8] | undefined;
    /**
     * The account to hold the council tokens.
     *     PDA seeds: ['governance',realm,council_mint]
     *
     */
    councilTokenHoldingAccount?: TAccountMetas[9] | undefined;
    /** Realm Config account */
    realmConfig: TAccountMetas[10];
    /** Optional Community Voter Weight Addin Program Id */
    communityVoterWeightAddin?: TAccountMetas[11] | undefined;
    /** Optional Max Community Voter Weight Addin Program Id */
    maxCommunityVoterWeightAddin?: TAccountMetas[12] | undefined;
    /** Optional Council Voter Weight Addin Program Id */
    councilVoterWeightAddin?: TAccountMetas[13] | undefined;
    /** Optional Max Council Voter Weight Addin Program Id */
    maxCouncilVoterWeightAddin?: TAccountMetas[14] | undefined;
  };
  data: CreateRealmInstructionData;
}

export function parseCreateRealmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateRealmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      realmAuthority: getNextAccount(),
      communityTokenMint: getNextAccount(),
      communityTokenHoldingAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
      councilTokenMint: getNextOptionalAccount(),
      councilTokenHoldingAccount: getNextOptionalAccount(),
      realmConfig: getNextAccount(),
      communityVoterWeightAddin: getNextOptionalAccount(),
      maxCommunityVoterWeightAddin: getNextOptionalAccount(),
      councilVoterWeightAddin: getNextOptionalAccount(),
      maxCouncilVoterWeightAddin: getNextOptionalAccount(),
    },
    data: getCreateRealmInstructionDataDecoder().decode(instruction.data),
  };
}
