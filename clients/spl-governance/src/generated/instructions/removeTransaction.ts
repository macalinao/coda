/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REMOVE_TRANSACTION_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([11, 129, 185, 56, 38, 17, 111, 190]);

export function getRemoveTransactionDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_TRANSACTION_DISCRIMINATOR,
  );
}

export type RemoveTransactionInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountProposalAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountProposalTransactionAccount extends string | AccountMeta = string,
  TAccountBeneficiaryAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposalAccount extends string
        ? WritableAccount<TAccountProposalAccount>
        : TAccountProposalAccount,
      TAccountTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountProposalTransactionAccount extends string
        ? WritableAccount<TAccountProposalTransactionAccount>
        : TAccountProposalTransactionAccount,
      TAccountBeneficiaryAccount extends string
        ? WritableAccount<TAccountBeneficiaryAccount>
        : TAccountBeneficiaryAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface RemoveTransactionInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RemoveTransactionInstructionDataArgs {}

export function getRemoveTransactionInstructionDataEncoder(): FixedSizeEncoder<RemoveTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REMOVE_TRANSACTION_DISCRIMINATOR }),
  );
}

export function getRemoveTransactionInstructionDataDecoder(): FixedSizeDecoder<RemoveTransactionInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRemoveTransactionInstructionDataCodec(): FixedSizeCodec<
  RemoveTransactionInstructionDataArgs,
  RemoveTransactionInstructionData
> {
  return combineCodec(
    getRemoveTransactionInstructionDataEncoder(),
    getRemoveTransactionInstructionDataDecoder(),
  );
}

export interface RemoveTransactionInput<
  TAccountProposalAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountProposalTransactionAccount extends string = string,
  TAccountBeneficiaryAccount extends string = string,
> {
  proposalAccount: Address<TAccountProposalAccount>;
  /** TokenOwnerRecord account of the Proposal owner */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  /** Governance Authority (Token Owner or Governance Delegate) */
  governanceAuthority: TransactionSigner<TAccountGovernanceAuthority>;
  proposalTransactionAccount: Address<TAccountProposalTransactionAccount>;
  /** Beneficiary Account which would receive lamports from the disposed ProposalTransaction account */
  beneficiaryAccount: Address<TAccountBeneficiaryAccount>;
}

export function getRemoveTransactionInstruction<
  TAccountProposalAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountGovernanceAuthority extends string,
  TAccountProposalTransactionAccount extends string,
  TAccountBeneficiaryAccount extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: RemoveTransactionInput<
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountGovernanceAuthority,
    TAccountProposalTransactionAccount,
    TAccountBeneficiaryAccount
  >,
  config?: { programAddress?: TProgramAddress },
): RemoveTransactionInstruction<
  TProgramAddress,
  TAccountProposalAccount,
  TAccountTokenOwnerRecord,
  TAccountGovernanceAuthority,
  TAccountProposalTransactionAccount,
  TAccountBeneficiaryAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposalAccount: { value: input.proposalAccount ?? null, isWritable: true },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: false,
    },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    proposalTransactionAccount: {
      value: input.proposalTransactionAccount ?? null,
      isWritable: true,
    },
    beneficiaryAccount: {
      value: input.beneficiaryAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.proposalAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.proposalTransactionAccount),
      getAccountMeta(accounts.beneficiaryAccount),
    ],
    data: getRemoveTransactionInstructionDataEncoder().encode({}),
    programAddress,
  } as RemoveTransactionInstruction<
    TProgramAddress,
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountGovernanceAuthority,
    TAccountProposalTransactionAccount,
    TAccountBeneficiaryAccount
  >);
}

export interface ParsedRemoveTransactionInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    proposalAccount: TAccountMetas[0];
    /** TokenOwnerRecord account of the Proposal owner */
    tokenOwnerRecord: TAccountMetas[1];
    /** Governance Authority (Token Owner or Governance Delegate) */
    governanceAuthority: TAccountMetas[2];
    proposalTransactionAccount: TAccountMetas[3];
    /** Beneficiary Account which would receive lamports from the disposed ProposalTransaction account */
    beneficiaryAccount: TAccountMetas[4];
  };
  data: RemoveTransactionInstructionData;
}

export function parseRemoveTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRemoveTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposalAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      governanceAuthority: getNextAccount(),
      proposalTransactionAccount: getNextAccount(),
      beneficiaryAccount: getNextAccount(),
    },
    data: getRemoveTransactionInstructionDataDecoder().decode(instruction.data),
  };
}
