/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const ADD_SIGNATORY_DISCRIMINATOR = 7;

export function getAddSignatoryDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(ADD_SIGNATORY_DISCRIMINATOR);
}

export type AddSignatoryInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountProposalAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountSignatoryRecordAccount extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposalAccount extends string
        ? WritableAccount<TAccountProposalAccount>
        : TAccountProposalAccount,
      TAccountTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountSignatoryRecordAccount extends string
        ? WritableAccount<TAccountSignatoryRecordAccount>
        : TAccountSignatoryRecordAccount,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface AddSignatoryInstructionData {
  discriminator: number;
  signatory: Address;
}

export interface AddSignatoryInstructionDataArgs {
  signatory: Address;
}

export function getAddSignatoryInstructionDataEncoder(): FixedSizeEncoder<AddSignatoryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["signatory", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_SIGNATORY_DISCRIMINATOR }),
  );
}

export function getAddSignatoryInstructionDataDecoder(): FixedSizeDecoder<AddSignatoryInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["signatory", getAddressDecoder()],
  ]);
}

export function getAddSignatoryInstructionDataCodec(): FixedSizeCodec<
  AddSignatoryInstructionDataArgs,
  AddSignatoryInstructionData
> {
  return combineCodec(
    getAddSignatoryInstructionDataEncoder(),
    getAddSignatoryInstructionDataDecoder(),
  );
}

export interface AddSignatoryInput<
  TAccountProposalAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountSignatoryRecordAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  /** Proposal Account associated with the governance */
  proposalAccount: Address<TAccountProposalAccount>;
  /** TokenOwnerRecord account of the Proposal owner */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  /** Governance Authority (Token Owner or Governance Delegate) */
  governanceAuthority: TransactionSigner<TAccountGovernanceAuthority>;
  /** Signatory Record Account */
  signatoryRecordAccount: Address<TAccountSignatoryRecordAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  signatory: AddSignatoryInstructionDataArgs["signatory"];
}

export function getAddSignatoryInstruction<
  TAccountProposalAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountGovernanceAuthority extends string,
  TAccountSignatoryRecordAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: AddSignatoryInput<
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountGovernanceAuthority,
    TAccountSignatoryRecordAccount,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): AddSignatoryInstruction<
  TProgramAddress,
  TAccountProposalAccount,
  TAccountTokenOwnerRecord,
  TAccountGovernanceAuthority,
  TAccountSignatoryRecordAccount,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposalAccount: { value: input.proposalAccount ?? null, isWritable: true },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: false,
    },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    signatoryRecordAccount: {
      value: input.signatoryRecordAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.proposalAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.signatoryRecordAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAddSignatoryInstructionDataEncoder().encode(
      args as AddSignatoryInstructionDataArgs,
    ),
    programAddress,
  } as AddSignatoryInstruction<
    TProgramAddress,
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountGovernanceAuthority,
    TAccountSignatoryRecordAccount,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedAddSignatoryInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Proposal Account associated with the governance */
    proposalAccount: TAccountMetas[0];
    /** TokenOwnerRecord account of the Proposal owner */
    tokenOwnerRecord: TAccountMetas[1];
    /** Governance Authority (Token Owner or Governance Delegate) */
    governanceAuthority: TAccountMetas[2];
    /** Signatory Record Account */
    signatoryRecordAccount: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: AddSignatoryInstructionData;
}

export function parseAddSignatoryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedAddSignatoryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposalAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      governanceAuthority: getNextAccount(),
      signatoryRecordAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddSignatoryInstructionDataDecoder().decode(instruction.data),
  };
}
