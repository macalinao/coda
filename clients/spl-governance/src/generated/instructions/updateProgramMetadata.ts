/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_PROGRAM_METADATA_DISCRIMINATOR = 24;

export function getUpdateProgramMetadataDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(UPDATE_PROGRAM_METADATA_DISCRIMINATOR);
}

export type UpdateProgramMetadataInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountProgramMetadataAccount extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProgramMetadataAccount extends string
        ? WritableAccount<TAccountProgramMetadataAccount>
        : TAccountProgramMetadataAccount,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateProgramMetadataInstructionData {
  discriminator: number;
}

export interface UpdateProgramMetadataInstructionDataArgs {}

export function getUpdateProgramMetadataInstructionDataEncoder(): FixedSizeEncoder<UpdateProgramMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_PROGRAM_METADATA_DISCRIMINATOR,
    }),
  );
}

export function getUpdateProgramMetadataInstructionDataDecoder(): FixedSizeDecoder<UpdateProgramMetadataInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getUpdateProgramMetadataInstructionDataCodec(): FixedSizeCodec<
  UpdateProgramMetadataInstructionDataArgs,
  UpdateProgramMetadataInstructionData
> {
  return combineCodec(
    getUpdateProgramMetadataInstructionDataEncoder(),
    getUpdateProgramMetadataInstructionDataDecoder(),
  );
}

export interface UpdateProgramMetadataInput<
  TAccountProgramMetadataAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  /** seeds=['metadata'] */
  programMetadataAccount: Address<TAccountProgramMetadataAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export function getUpdateProgramMetadataInstruction<
  TAccountProgramMetadataAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: UpdateProgramMetadataInput<
    TAccountProgramMetadataAccount,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateProgramMetadataInstruction<
  TProgramAddress,
  TAccountProgramMetadataAccount,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programMetadataAccount: {
      value: input.programMetadataAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.programMetadataAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getUpdateProgramMetadataInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateProgramMetadataInstruction<
    TProgramAddress,
    TAccountProgramMetadataAccount,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedUpdateProgramMetadataInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** seeds=['metadata'] */
    programMetadataAccount: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: UpdateProgramMetadataInstructionData;
}

export function parseUpdateProgramMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateProgramMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programMetadataAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateProgramMetadataInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
