/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { GovernanceConfig, GovernanceConfigArgs } from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getGovernanceConfigDecoder,
  getGovernanceConfigEncoder,
} from "../types/index.js";

export const CREATE_PROGRAM_GOVERNANCE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([231, 18, 5, 95, 19, 219, 203, 48]);

export function getCreateProgramGovernanceDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_PROGRAM_GOVERNANCE_DISCRIMINATOR,
  );
}

export type CreateProgramGovernanceInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountProgramGovernanceAccount extends string | AccountMeta = string,
  TAccountGovernedProgram extends string | AccountMeta = string,
  TAccountProgramData extends string | AccountMeta = string,
  TAccountCurrentUpgradeAuthority extends string | AccountMeta = string,
  TAccountGoverningTokenOwnerRecord extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountBpfUpgradeableLoaderProgram extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountRealmConfig extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountProgramGovernanceAccount extends string
        ? WritableAccount<TAccountProgramGovernanceAccount>
        : TAccountProgramGovernanceAccount,
      TAccountGovernedProgram extends string
        ? ReadonlyAccount<TAccountGovernedProgram>
        : TAccountGovernedProgram,
      TAccountProgramData extends string
        ? WritableAccount<TAccountProgramData>
        : TAccountProgramData,
      TAccountCurrentUpgradeAuthority extends string
        ? ReadonlySignerAccount<TAccountCurrentUpgradeAuthority> &
            AccountSignerMeta<TAccountCurrentUpgradeAuthority>
        : TAccountCurrentUpgradeAuthority,
      TAccountGoverningTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountGoverningTokenOwnerRecord>
        : TAccountGoverningTokenOwnerRecord,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountBpfUpgradeableLoaderProgram extends string
        ? ReadonlyAccount<TAccountBpfUpgradeableLoaderProgram>
        : TAccountBpfUpgradeableLoaderProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountRealmConfig extends string
        ? ReadonlyAccount<TAccountRealmConfig>
        : TAccountRealmConfig,
      TAccountVoterWeightRecord extends string
        ? ReadonlyAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateProgramGovernanceInstructionData {
  discriminator: ReadonlyUint8Array;
  config: GovernanceConfig;
  transferUpgradeAuthority: boolean;
}

export interface CreateProgramGovernanceInstructionDataArgs {
  config: GovernanceConfigArgs;
  transferUpgradeAuthority: boolean;
}

export function getCreateProgramGovernanceInstructionDataEncoder(): Encoder<CreateProgramGovernanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["config", getGovernanceConfigEncoder()],
      ["transferUpgradeAuthority", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_PROGRAM_GOVERNANCE_DISCRIMINATOR,
    }),
  );
}

export function getCreateProgramGovernanceInstructionDataDecoder(): Decoder<CreateProgramGovernanceInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["config", getGovernanceConfigDecoder()],
    ["transferUpgradeAuthority", getBooleanDecoder()],
  ]);
}

export function getCreateProgramGovernanceInstructionDataCodec(): Codec<
  CreateProgramGovernanceInstructionDataArgs,
  CreateProgramGovernanceInstructionData
> {
  return combineCodec(
    getCreateProgramGovernanceInstructionDataEncoder(),
    getCreateProgramGovernanceInstructionDataDecoder(),
  );
}

export interface CreateProgramGovernanceInput<
  TAccountRealmAccount extends string = string,
  TAccountProgramGovernanceAccount extends string = string,
  TAccountGovernedProgram extends string = string,
  TAccountProgramData extends string = string,
  TAccountCurrentUpgradeAuthority extends string = string,
  TAccountGoverningTokenOwnerRecord extends string = string,
  TAccountPayer extends string = string,
  TAccountBpfUpgradeableLoaderProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountRealmConfig extends string = string,
  TAccountVoterWeightRecord extends string = string,
> {
  /** Realm account the created Governance belongs to */
  realmAccount: Address<TAccountRealmAccount>;
  /** Program Governance account. seeds: ['program-governance', realm, governed_program] */
  programGovernanceAccount: Address<TAccountProgramGovernanceAccount>;
  /** Program governed by this Governance account */
  governedProgram: Address<TAccountGovernedProgram>;
  /** Program Data account of the Program governed by this Governance account */
  programData: Address<TAccountProgramData>;
  /** Current Upgrade Authority account of the Program governed by this Governance account */
  currentUpgradeAuthority: TransactionSigner<TAccountCurrentUpgradeAuthority>;
  /** Governing TokenOwnerRecord account (Used only if not signed by RealmAuthority) */
  governingTokenOwnerRecord: Address<TAccountGoverningTokenOwnerRecord>;
  payer: TransactionSigner<TAccountPayer>;
  /** bpf_upgradeable_loader_program program */
  bpfUpgradeableLoaderProgram: Address<TAccountBpfUpgradeableLoaderProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  governanceAuthority: TransactionSigner<TAccountGovernanceAuthority>;
  /** RealmConfig account. seeds=['realm-config', realm] */
  realmConfig: Address<TAccountRealmConfig>;
  /** Optional Voter Weight Record */
  voterWeightRecord?: Address<TAccountVoterWeightRecord>;
  config: CreateProgramGovernanceInstructionDataArgs["config"];
  transferUpgradeAuthority: CreateProgramGovernanceInstructionDataArgs["transferUpgradeAuthority"];
}

export function getCreateProgramGovernanceInstruction<
  TAccountRealmAccount extends string,
  TAccountProgramGovernanceAccount extends string,
  TAccountGovernedProgram extends string,
  TAccountProgramData extends string,
  TAccountCurrentUpgradeAuthority extends string,
  TAccountGoverningTokenOwnerRecord extends string,
  TAccountPayer extends string,
  TAccountBpfUpgradeableLoaderProgram extends string,
  TAccountSystemProgram extends string,
  TAccountGovernanceAuthority extends string,
  TAccountRealmConfig extends string,
  TAccountVoterWeightRecord extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: CreateProgramGovernanceInput<
    TAccountRealmAccount,
    TAccountProgramGovernanceAccount,
    TAccountGovernedProgram,
    TAccountProgramData,
    TAccountCurrentUpgradeAuthority,
    TAccountGoverningTokenOwnerRecord,
    TAccountPayer,
    TAccountBpfUpgradeableLoaderProgram,
    TAccountSystemProgram,
    TAccountGovernanceAuthority,
    TAccountRealmConfig,
    TAccountVoterWeightRecord
  >,
  config?: { programAddress?: TProgramAddress },
): CreateProgramGovernanceInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountProgramGovernanceAccount,
  TAccountGovernedProgram,
  TAccountProgramData,
  TAccountCurrentUpgradeAuthority,
  TAccountGoverningTokenOwnerRecord,
  TAccountPayer,
  TAccountBpfUpgradeableLoaderProgram,
  TAccountSystemProgram,
  TAccountGovernanceAuthority,
  TAccountRealmConfig,
  TAccountVoterWeightRecord
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    programGovernanceAccount: {
      value: input.programGovernanceAccount ?? null,
      isWritable: true,
    },
    governedProgram: {
      value: input.governedProgram ?? null,
      isWritable: false,
    },
    programData: { value: input.programData ?? null, isWritable: true },
    currentUpgradeAuthority: {
      value: input.currentUpgradeAuthority ?? null,
      isWritable: false,
    },
    governingTokenOwnerRecord: {
      value: input.governingTokenOwnerRecord ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    bpfUpgradeableLoaderProgram: {
      value: input.bpfUpgradeableLoaderProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    realmConfig: { value: input.realmConfig ?? null, isWritable: false },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.programGovernanceAccount),
      getAccountMeta(accounts.governedProgram),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.currentUpgradeAuthority),
      getAccountMeta(accounts.governingTokenOwnerRecord),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.bpfUpgradeableLoaderProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.realmConfig),
      getAccountMeta(accounts.voterWeightRecord),
    ],
    data: getCreateProgramGovernanceInstructionDataEncoder().encode(
      args as CreateProgramGovernanceInstructionDataArgs,
    ),
    programAddress,
  } as CreateProgramGovernanceInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountProgramGovernanceAccount,
    TAccountGovernedProgram,
    TAccountProgramData,
    TAccountCurrentUpgradeAuthority,
    TAccountGoverningTokenOwnerRecord,
    TAccountPayer,
    TAccountBpfUpgradeableLoaderProgram,
    TAccountSystemProgram,
    TAccountGovernanceAuthority,
    TAccountRealmConfig,
    TAccountVoterWeightRecord
  >);
}

export interface ParsedCreateProgramGovernanceInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Realm account the created Governance belongs to */
    realmAccount: TAccountMetas[0];
    /** Program Governance account. seeds: ['program-governance', realm, governed_program] */
    programGovernanceAccount: TAccountMetas[1];
    /** Program governed by this Governance account */
    governedProgram: TAccountMetas[2];
    /** Program Data account of the Program governed by this Governance account */
    programData: TAccountMetas[3];
    /** Current Upgrade Authority account of the Program governed by this Governance account */
    currentUpgradeAuthority: TAccountMetas[4];
    /** Governing TokenOwnerRecord account (Used only if not signed by RealmAuthority) */
    governingTokenOwnerRecord: TAccountMetas[5];
    payer: TAccountMetas[6];
    /** bpf_upgradeable_loader_program program */
    bpfUpgradeableLoaderProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    governanceAuthority: TAccountMetas[9];
    /** RealmConfig account. seeds=['realm-config', realm] */
    realmConfig: TAccountMetas[10];
    /** Optional Voter Weight Record */
    voterWeightRecord?: TAccountMetas[11] | undefined;
  };
  data: CreateProgramGovernanceInstructionData;
}

export function parseCreateProgramGovernanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateProgramGovernanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      programGovernanceAccount: getNextAccount(),
      governedProgram: getNextAccount(),
      programData: getNextAccount(),
      currentUpgradeAuthority: getNextAccount(),
      governingTokenOwnerRecord: getNextAccount(),
      payer: getNextAccount(),
      bpfUpgradeableLoaderProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      governanceAuthority: getNextAccount(),
      realmConfig: getNextAccount(),
      voterWeightRecord: getNextOptionalAccount(),
    },
    data: getCreateProgramGovernanceInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
