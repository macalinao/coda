/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { GovernanceConfig, GovernanceConfigArgs } from "../types/index.js";
import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getGovernanceConfigDecoder,
  getGovernanceConfigEncoder,
} from "../types/index.js";

export const CREATE_MINT_GOVERNANCE_DISCRIMINATOR = 17;

export function getCreateMintGovernanceDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(CREATE_MINT_GOVERNANCE_DISCRIMINATOR);
}

export type CreateMintGovernanceInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountMintGovernanceAccount extends string | AccountMeta = string,
  TAccountGovernedMint extends string | AccountMeta = string,
  TAccountMintAuthority extends string | AccountMeta = string,
  TAccountGoverningTokenOwnerRecord extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountRealmConfig extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountMintGovernanceAccount extends string
        ? WritableAccount<TAccountMintGovernanceAccount>
        : TAccountMintGovernanceAccount,
      TAccountGovernedMint extends string
        ? WritableAccount<TAccountGovernedMint>
        : TAccountGovernedMint,
      TAccountMintAuthority extends string
        ? ReadonlySignerAccount<TAccountMintAuthority> &
            AccountSignerMeta<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountGoverningTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountGoverningTokenOwnerRecord>
        : TAccountGoverningTokenOwnerRecord,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountRealmConfig extends string
        ? ReadonlyAccount<TAccountRealmConfig>
        : TAccountRealmConfig,
      TAccountVoterWeightRecord extends string
        ? ReadonlyAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateMintGovernanceInstructionData {
  discriminator: number;
  config: GovernanceConfig;
  transferMintAuthorities: boolean;
}

export interface CreateMintGovernanceInstructionDataArgs {
  config: GovernanceConfigArgs;
  transferMintAuthorities: boolean;
}

export function getCreateMintGovernanceInstructionDataEncoder(): Encoder<CreateMintGovernanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["config", getGovernanceConfigEncoder()],
      ["transferMintAuthorities", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_MINT_GOVERNANCE_DISCRIMINATOR,
    }),
  );
}

export function getCreateMintGovernanceInstructionDataDecoder(): Decoder<CreateMintGovernanceInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["config", getGovernanceConfigDecoder()],
    ["transferMintAuthorities", getBooleanDecoder()],
  ]);
}

export function getCreateMintGovernanceInstructionDataCodec(): Codec<
  CreateMintGovernanceInstructionDataArgs,
  CreateMintGovernanceInstructionData
> {
  return combineCodec(
    getCreateMintGovernanceInstructionDataEncoder(),
    getCreateMintGovernanceInstructionDataDecoder(),
  );
}

export interface CreateMintGovernanceInput<
  TAccountRealmAccount extends string = string,
  TAccountMintGovernanceAccount extends string = string,
  TAccountGovernedMint extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountGoverningTokenOwnerRecord extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountRealmConfig extends string = string,
  TAccountVoterWeightRecord extends string = string,
> {
  /** Realm account the created Governance belongs to */
  realmAccount: Address<TAccountRealmAccount>;
  /** Mint Governance account. seeds=['mint-governance', realm, governed_mint] */
  mintGovernanceAccount: Address<TAccountMintGovernanceAccount>;
  /** Mint governed by this Governance account */
  governedMint: Address<TAccountGovernedMint>;
  /** Current Mint authority (MintTokens and optionally FreezeAccount) */
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  /** Governing TokenOwnerRecord account (Used only if not signed by RealmAuthority) */
  governingTokenOwnerRecord: Address<TAccountGoverningTokenOwnerRecord>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  governanceAuthority: TransactionSigner<TAccountGovernanceAuthority>;
  /** RealmConfig account. seeds=['realm-config', realm] */
  realmConfig: Address<TAccountRealmConfig>;
  /** Optional Voter Weight Record */
  voterWeightRecord?: Address<TAccountVoterWeightRecord>;
  config: CreateMintGovernanceInstructionDataArgs["config"];
  transferMintAuthorities: CreateMintGovernanceInstructionDataArgs["transferMintAuthorities"];
}

export function getCreateMintGovernanceInstruction<
  TAccountRealmAccount extends string,
  TAccountMintGovernanceAccount extends string,
  TAccountGovernedMint extends string,
  TAccountMintAuthority extends string,
  TAccountGoverningTokenOwnerRecord extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountGovernanceAuthority extends string,
  TAccountRealmConfig extends string,
  TAccountVoterWeightRecord extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: CreateMintGovernanceInput<
    TAccountRealmAccount,
    TAccountMintGovernanceAccount,
    TAccountGovernedMint,
    TAccountMintAuthority,
    TAccountGoverningTokenOwnerRecord,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGovernanceAuthority,
    TAccountRealmConfig,
    TAccountVoterWeightRecord
  >,
  config?: { programAddress?: TProgramAddress },
): CreateMintGovernanceInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountMintGovernanceAccount,
  TAccountGovernedMint,
  TAccountMintAuthority,
  TAccountGoverningTokenOwnerRecord,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountGovernanceAuthority,
  TAccountRealmConfig,
  TAccountVoterWeightRecord
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    mintGovernanceAccount: {
      value: input.mintGovernanceAccount ?? null,
      isWritable: true,
    },
    governedMint: { value: input.governedMint ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    governingTokenOwnerRecord: {
      value: input.governingTokenOwnerRecord ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    realmConfig: { value: input.realmConfig ?? null, isWritable: false },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.mintGovernanceAccount),
      getAccountMeta(accounts.governedMint),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.governingTokenOwnerRecord),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.realmConfig),
      getAccountMeta(accounts.voterWeightRecord),
    ],
    data: getCreateMintGovernanceInstructionDataEncoder().encode(
      args as CreateMintGovernanceInstructionDataArgs,
    ),
    programAddress,
  } as CreateMintGovernanceInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountMintGovernanceAccount,
    TAccountGovernedMint,
    TAccountMintAuthority,
    TAccountGoverningTokenOwnerRecord,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGovernanceAuthority,
    TAccountRealmConfig,
    TAccountVoterWeightRecord
  >);
}

export interface ParsedCreateMintGovernanceInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Realm account the created Governance belongs to */
    realmAccount: TAccountMetas[0];
    /** Mint Governance account. seeds=['mint-governance', realm, governed_mint] */
    mintGovernanceAccount: TAccountMetas[1];
    /** Mint governed by this Governance account */
    governedMint: TAccountMetas[2];
    /** Current Mint authority (MintTokens and optionally FreezeAccount) */
    mintAuthority: TAccountMetas[3];
    /** Governing TokenOwnerRecord account (Used only if not signed by RealmAuthority) */
    governingTokenOwnerRecord: TAccountMetas[4];
    payer: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    governanceAuthority: TAccountMetas[8];
    /** RealmConfig account. seeds=['realm-config', realm] */
    realmConfig: TAccountMetas[9];
    /** Optional Voter Weight Record */
    voterWeightRecord?: TAccountMetas[10] | undefined;
  };
  data: CreateMintGovernanceInstructionData;
}

export function parseCreateMintGovernanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateMintGovernanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      mintGovernanceAccount: getNextAccount(),
      governedMint: getNextAccount(),
      mintAuthority: getNextAccount(),
      governingTokenOwnerRecord: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      governanceAuthority: getNextAccount(),
      realmConfig: getNextAccount(),
      voterWeightRecord: getNextOptionalAccount(),
    },
    data: getCreateMintGovernanceInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
