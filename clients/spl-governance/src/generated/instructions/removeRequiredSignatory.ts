/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REMOVE_REQUIRED_SIGNATORY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([21, 156, 139, 89, 244, 230, 204, 130]);

export function getRemoveRequiredSignatoryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_REQUIRED_SIGNATORY_DISCRIMINATOR,
  );
}

export type RemoveRequiredSignatoryInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TAccountRequiredSignatoryAccount extends string | AccountMeta = string,
  TAccountBeneficiaryAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernanceAccount extends string
        ? WritableSignerAccount<TAccountGovernanceAccount> &
            AccountSignerMeta<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      TAccountRequiredSignatoryAccount extends string
        ? WritableAccount<TAccountRequiredSignatoryAccount>
        : TAccountRequiredSignatoryAccount,
      TAccountBeneficiaryAccount extends string
        ? WritableAccount<TAccountBeneficiaryAccount>
        : TAccountBeneficiaryAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface RemoveRequiredSignatoryInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RemoveRequiredSignatoryInstructionDataArgs {}

export function getRemoveRequiredSignatoryInstructionDataEncoder(): FixedSizeEncoder<RemoveRequiredSignatoryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REMOVE_REQUIRED_SIGNATORY_DISCRIMINATOR,
    }),
  );
}

export function getRemoveRequiredSignatoryInstructionDataDecoder(): FixedSizeDecoder<RemoveRequiredSignatoryInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRemoveRequiredSignatoryInstructionDataCodec(): FixedSizeCodec<
  RemoveRequiredSignatoryInstructionDataArgs,
  RemoveRequiredSignatoryInstructionData
> {
  return combineCodec(
    getRemoveRequiredSignatoryInstructionDataEncoder(),
    getRemoveRequiredSignatoryInstructionDataDecoder(),
  );
}

export interface RemoveRequiredSignatoryInput<
  TAccountGovernanceAccount extends string = string,
  TAccountRequiredSignatoryAccount extends string = string,
  TAccountBeneficiaryAccount extends string = string,
> {
  governanceAccount: TransactionSigner<TAccountGovernanceAccount>;
  requiredSignatoryAccount: Address<TAccountRequiredSignatoryAccount>;
  /** Beneficiary Account which would receive lamports from the disposed RequiredSignatory Account */
  beneficiaryAccount: Address<TAccountBeneficiaryAccount>;
}

export function getRemoveRequiredSignatoryInstruction<
  TAccountGovernanceAccount extends string,
  TAccountRequiredSignatoryAccount extends string,
  TAccountBeneficiaryAccount extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: RemoveRequiredSignatoryInput<
    TAccountGovernanceAccount,
    TAccountRequiredSignatoryAccount,
    TAccountBeneficiaryAccount
  >,
  config?: { programAddress?: TProgramAddress },
): RemoveRequiredSignatoryInstruction<
  TProgramAddress,
  TAccountGovernanceAccount,
  TAccountRequiredSignatoryAccount,
  TAccountBeneficiaryAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: true,
    },
    requiredSignatoryAccount: {
      value: input.requiredSignatoryAccount ?? null,
      isWritable: true,
    },
    beneficiaryAccount: {
      value: input.beneficiaryAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governanceAccount),
      getAccountMeta(accounts.requiredSignatoryAccount),
      getAccountMeta(accounts.beneficiaryAccount),
    ],
    data: getRemoveRequiredSignatoryInstructionDataEncoder().encode({}),
    programAddress,
  } as RemoveRequiredSignatoryInstruction<
    TProgramAddress,
    TAccountGovernanceAccount,
    TAccountRequiredSignatoryAccount,
    TAccountBeneficiaryAccount
  >);
}

export interface ParsedRemoveRequiredSignatoryInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    governanceAccount: TAccountMetas[0];
    requiredSignatoryAccount: TAccountMetas[1];
    /** Beneficiary Account which would receive lamports from the disposed RequiredSignatory Account */
    beneficiaryAccount: TAccountMetas[2];
  };
  data: RemoveRequiredSignatoryInstructionData;
}

export function parseRemoveRequiredSignatoryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRemoveRequiredSignatoryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governanceAccount: getNextAccount(),
      requiredSignatoryAccount: getNextAccount(),
      beneficiaryAccount: getNextAccount(),
    },
    data: getRemoveRequiredSignatoryInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
