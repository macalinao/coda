/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { GovernanceConfig, GovernanceConfigArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getGovernanceConfigDecoder,
  getGovernanceConfigEncoder,
} from "../types/index.js";

export const CREATE_GOVERNANCE_DISCRIMINATOR = 4;

export function getCreateGovernanceDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(CREATE_GOVERNANCE_DISCRIMINATOR);
}

export type CreateGovernanceInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TAccountGovernedAccount extends string | AccountMeta = string,
  TAccountGoverningTokenOwnerRecord extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountRealmConfigAccount extends string | AccountMeta = string,
  TAccountVoterWeightRecord extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountGovernanceAccount extends string
        ? WritableAccount<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      TAccountGovernedAccount extends string
        ? ReadonlyAccount<TAccountGovernedAccount>
        : TAccountGovernedAccount,
      TAccountGoverningTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountGoverningTokenOwnerRecord>
        : TAccountGoverningTokenOwnerRecord,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountRealmConfigAccount extends string
        ? ReadonlyAccount<TAccountRealmConfigAccount>
        : TAccountRealmConfigAccount,
      TAccountVoterWeightRecord extends string
        ? ReadonlyAccount<TAccountVoterWeightRecord>
        : TAccountVoterWeightRecord,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateGovernanceInstructionData {
  discriminator: number;
  config: GovernanceConfig;
}

export interface CreateGovernanceInstructionDataArgs {
  config: GovernanceConfigArgs;
}

export function getCreateGovernanceInstructionDataEncoder(): Encoder<CreateGovernanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["config", getGovernanceConfigEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_GOVERNANCE_DISCRIMINATOR }),
  );
}

export function getCreateGovernanceInstructionDataDecoder(): Decoder<CreateGovernanceInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["config", getGovernanceConfigDecoder()],
  ]);
}

export function getCreateGovernanceInstructionDataCodec(): Codec<
  CreateGovernanceInstructionDataArgs,
  CreateGovernanceInstructionData
> {
  return combineCodec(
    getCreateGovernanceInstructionDataEncoder(),
    getCreateGovernanceInstructionDataDecoder(),
  );
}

export interface CreateGovernanceInput<
  TAccountRealmAccount extends string = string,
  TAccountGovernanceAccount extends string = string,
  TAccountGovernedAccount extends string = string,
  TAccountGoverningTokenOwnerRecord extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountRealmConfigAccount extends string = string,
  TAccountVoterWeightRecord extends string = string,
> {
  /** Realm account the created governance belongs to */
  realmAccount: Address<TAccountRealmAccount>;
  /** seeds=['account-governance', realm, governed_account] */
  governanceAccount: Address<TAccountGovernanceAccount>;
  /** Account governed by this Governance (governing_account). 
        Note: the account doesn't have to exist and can be used only as a unique identified for the Governance account */
  governedAccount: Address<TAccountGovernedAccount>;
  /** Used only if not signed by RealmAuthority */
  governingTokenOwnerRecord: Address<TAccountGoverningTokenOwnerRecord>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  governanceAuthority: TransactionSigner<TAccountGovernanceAuthority>;
  /** seeds=['realm-config', realm] */
  realmConfigAccount: Address<TAccountRealmConfigAccount>;
  /** Optional Voter Weight Record */
  voterWeightRecord?: Address<TAccountVoterWeightRecord>;
  config: CreateGovernanceInstructionDataArgs["config"];
}

export function getCreateGovernanceInstruction<
  TAccountRealmAccount extends string,
  TAccountGovernanceAccount extends string,
  TAccountGovernedAccount extends string,
  TAccountGoverningTokenOwnerRecord extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountGovernanceAuthority extends string,
  TAccountRealmConfigAccount extends string,
  TAccountVoterWeightRecord extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: CreateGovernanceInput<
    TAccountRealmAccount,
    TAccountGovernanceAccount,
    TAccountGovernedAccount,
    TAccountGoverningTokenOwnerRecord,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountGovernanceAuthority,
    TAccountRealmConfigAccount,
    TAccountVoterWeightRecord
  >,
  config?: { programAddress?: TProgramAddress },
): CreateGovernanceInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountGovernanceAccount,
  TAccountGovernedAccount,
  TAccountGoverningTokenOwnerRecord,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountGovernanceAuthority,
  TAccountRealmConfigAccount,
  TAccountVoterWeightRecord
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: true,
    },
    governedAccount: {
      value: input.governedAccount ?? null,
      isWritable: false,
    },
    governingTokenOwnerRecord: {
      value: input.governingTokenOwnerRecord ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    realmConfigAccount: {
      value: input.realmConfigAccount ?? null,
      isWritable: false,
    },
    voterWeightRecord: {
      value: input.voterWeightRecord ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governanceAccount),
      getAccountMeta(accounts.governedAccount),
      getAccountMeta(accounts.governingTokenOwnerRecord),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.realmConfigAccount),
      getAccountMeta(accounts.voterWeightRecord),
    ],
    data: getCreateGovernanceInstructionDataEncoder().encode(
      args as CreateGovernanceInstructionDataArgs,
    ),
    programAddress,
  } as CreateGovernanceInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGovernanceAccount,
    TAccountGovernedAccount,
    TAccountGoverningTokenOwnerRecord,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountGovernanceAuthority,
    TAccountRealmConfigAccount,
    TAccountVoterWeightRecord
  >);
}

export interface ParsedCreateGovernanceInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Realm account the created governance belongs to */
    realmAccount: TAccountMetas[0];
    /** seeds=['account-governance', realm, governed_account] */
    governanceAccount: TAccountMetas[1];
    /** Account governed by this Governance (governing_account). 
        Note: the account doesn't have to exist and can be used only as a unique identified for the Governance account */
    governedAccount: TAccountMetas[2];
    /** Used only if not signed by RealmAuthority */
    governingTokenOwnerRecord: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    governanceAuthority: TAccountMetas[6];
    /** seeds=['realm-config', realm] */
    realmConfigAccount: TAccountMetas[7];
    /** Optional Voter Weight Record */
    voterWeightRecord?: TAccountMetas[8] | undefined;
  };
  data: CreateGovernanceInstructionData;
}

export function parseCreateGovernanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateGovernanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      governanceAccount: getNextAccount(),
      governedAccount: getNextAccount(),
      governingTokenOwnerRecord: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      governanceAuthority: getNextAccount(),
      realmConfigAccount: getNextAccount(),
      voterWeightRecord: getNextOptionalAccount(),
    },
    data: getCreateGovernanceInstructionDataDecoder().decode(instruction.data),
  };
}
