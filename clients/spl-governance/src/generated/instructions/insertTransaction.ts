/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { InstructionData, InstructionDataArgs } from "../types/index.js";
import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getInstructionDataDecoder,
  getInstructionDataEncoder,
} from "../types/index.js";

export const INSERT_TRANSACTION_DISCRIMINATOR = 9;

export function getInsertTransactionDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(INSERT_TRANSACTION_DISCRIMINATOR);
}

export type InsertTransactionInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TAccountProposalAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountProposalTransactionAccount extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernanceAccount extends string
        ? ReadonlyAccount<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      TAccountProposalAccount extends string
        ? WritableAccount<TAccountProposalAccount>
        : TAccountProposalAccount,
      TAccountTokenOwnerRecord extends string
        ? ReadonlyAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountProposalTransactionAccount extends string
        ? WritableAccount<TAccountProposalTransactionAccount>
        : TAccountProposalTransactionAccount,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface InsertTransactionInstructionData {
  discriminator: number;
  optionIndex: number;
  index: number;
  holdUpTime: number;
  instructions: InstructionData[];
}

export interface InsertTransactionInstructionDataArgs {
  optionIndex: number;
  index: number;
  holdUpTime: number;
  instructions: InstructionDataArgs[];
}

export function getInsertTransactionInstructionDataEncoder(): Encoder<InsertTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["optionIndex", getU8Encoder()],
      ["index", getU16Encoder()],
      ["holdUpTime", getU32Encoder()],
      ["instructions", getArrayEncoder(getInstructionDataEncoder())],
    ]),
    (value) => ({ ...value, discriminator: INSERT_TRANSACTION_DISCRIMINATOR }),
  );
}

export function getInsertTransactionInstructionDataDecoder(): Decoder<InsertTransactionInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["optionIndex", getU8Decoder()],
    ["index", getU16Decoder()],
    ["holdUpTime", getU32Decoder()],
    ["instructions", getArrayDecoder(getInstructionDataDecoder())],
  ]);
}

export function getInsertTransactionInstructionDataCodec(): Codec<
  InsertTransactionInstructionDataArgs,
  InsertTransactionInstructionData
> {
  return combineCodec(
    getInsertTransactionInstructionDataEncoder(),
    getInsertTransactionInstructionDataDecoder(),
  );
}

export interface InsertTransactionInput<
  TAccountGovernanceAccount extends string = string,
  TAccountProposalAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountProposalTransactionAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  governanceAccount: Address<TAccountGovernanceAccount>;
  proposalAccount: Address<TAccountProposalAccount>;
  /** TokenOwnerRecord account of the Proposal owner */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  /** Governance Authority (Token Owner or Governance Delegate) */
  governanceAuthority: TransactionSigner<TAccountGovernanceAuthority>;
  /** ProposalTransaction, account. PDA seeds: ['governance', proposal, option_index, index] */
  proposalTransactionAccount: Address<TAccountProposalTransactionAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  optionIndex: InsertTransactionInstructionDataArgs["optionIndex"];
  index: InsertTransactionInstructionDataArgs["index"];
  holdUpTime: InsertTransactionInstructionDataArgs["holdUpTime"];
  instructions: InsertTransactionInstructionDataArgs["instructions"];
}

export function getInsertTransactionInstruction<
  TAccountGovernanceAccount extends string,
  TAccountProposalAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountGovernanceAuthority extends string,
  TAccountProposalTransactionAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: InsertTransactionInput<
    TAccountGovernanceAccount,
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountGovernanceAuthority,
    TAccountProposalTransactionAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InsertTransactionInstruction<
  TProgramAddress,
  TAccountGovernanceAccount,
  TAccountProposalAccount,
  TAccountTokenOwnerRecord,
  TAccountGovernanceAuthority,
  TAccountProposalTransactionAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: false,
    },
    proposalAccount: { value: input.proposalAccount ?? null, isWritable: true },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: false,
    },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    proposalTransactionAccount: {
      value: input.proposalTransactionAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governanceAccount),
      getAccountMeta(accounts.proposalAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.proposalTransactionAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInsertTransactionInstructionDataEncoder().encode(
      args as InsertTransactionInstructionDataArgs,
    ),
    programAddress,
  } as InsertTransactionInstruction<
    TProgramAddress,
    TAccountGovernanceAccount,
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountGovernanceAuthority,
    TAccountProposalTransactionAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface ParsedInsertTransactionInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    governanceAccount: TAccountMetas[0];
    proposalAccount: TAccountMetas[1];
    /** TokenOwnerRecord account of the Proposal owner */
    tokenOwnerRecord: TAccountMetas[2];
    /** Governance Authority (Token Owner or Governance Delegate) */
    governanceAuthority: TAccountMetas[3];
    /** ProposalTransaction, account. PDA seeds: ['governance', proposal, option_index, index] */
    proposalTransactionAccount: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: InsertTransactionInstructionData;
}

export function parseInsertTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInsertTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governanceAccount: getNextAccount(),
      proposalAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      governanceAuthority: getNextAccount(),
      proposalTransactionAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInsertTransactionInstructionDataDecoder().decode(instruction.data),
  };
}
