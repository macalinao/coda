/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const ADD_REQUIRED_SIGNATORY_DISCRIMINATOR = 29;

export function getAddRequiredSignatoryDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(ADD_REQUIRED_SIGNATORY_DISCRIMINATOR);
}

export type AddRequiredSignatoryInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TAccountRequiredSignatoryAccount extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernanceAccount extends string
        ? WritableSignerAccount<TAccountGovernanceAccount> &
            AccountSignerMeta<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      TAccountRequiredSignatoryAccount extends string
        ? WritableAccount<TAccountRequiredSignatoryAccount>
        : TAccountRequiredSignatoryAccount,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface AddRequiredSignatoryInstructionData {
  discriminator: number;
  signatory: Address;
}

export interface AddRequiredSignatoryInstructionDataArgs {
  signatory: Address;
}

export function getAddRequiredSignatoryInstructionDataEncoder(): FixedSizeEncoder<AddRequiredSignatoryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["signatory", getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_REQUIRED_SIGNATORY_DISCRIMINATOR,
    }),
  );
}

export function getAddRequiredSignatoryInstructionDataDecoder(): FixedSizeDecoder<AddRequiredSignatoryInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["signatory", getAddressDecoder()],
  ]);
}

export function getAddRequiredSignatoryInstructionDataCodec(): FixedSizeCodec<
  AddRequiredSignatoryInstructionDataArgs,
  AddRequiredSignatoryInstructionData
> {
  return combineCodec(
    getAddRequiredSignatoryInstructionDataEncoder(),
    getAddRequiredSignatoryInstructionDataDecoder(),
  );
}

export interface AddRequiredSignatoryInput<
  TAccountGovernanceAccount extends string = string,
  TAccountRequiredSignatoryAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  /** The Governance account the config is for */
  governanceAccount: TransactionSigner<TAccountGovernanceAccount>;
  requiredSignatoryAccount: Address<TAccountRequiredSignatoryAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  signatory: AddRequiredSignatoryInstructionDataArgs["signatory"];
}

export function getAddRequiredSignatoryInstruction<
  TAccountGovernanceAccount extends string,
  TAccountRequiredSignatoryAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: AddRequiredSignatoryInput<
    TAccountGovernanceAccount,
    TAccountRequiredSignatoryAccount,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): AddRequiredSignatoryInstruction<
  TProgramAddress,
  TAccountGovernanceAccount,
  TAccountRequiredSignatoryAccount,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: true,
    },
    requiredSignatoryAccount: {
      value: input.requiredSignatoryAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governanceAccount),
      getAccountMeta(accounts.requiredSignatoryAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAddRequiredSignatoryInstructionDataEncoder().encode(
      args as AddRequiredSignatoryInstructionDataArgs,
    ),
    programAddress,
  } as AddRequiredSignatoryInstruction<
    TProgramAddress,
    TAccountGovernanceAccount,
    TAccountRequiredSignatoryAccount,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedAddRequiredSignatoryInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** The Governance account the config is for */
    governanceAccount: TAccountMetas[0];
    requiredSignatoryAccount: TAccountMetas[1];
    payer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: AddRequiredSignatoryInstructionData;
}

export function parseAddRequiredSignatoryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedAddRequiredSignatoryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governanceAccount: getNextAccount(),
      requiredSignatoryAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddRequiredSignatoryInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
