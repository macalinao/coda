/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findTokenOwnerRecordPda } from "../pdas/index.js";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const CREATE_TOKEN_OWNER_RECORD_DISCRIMINATOR = 23;

export function getCreateTokenOwnerRecordDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(CREATE_TOKEN_OWNER_RECORD_DISCRIMINATOR);
}

export type CreateTokenOwnerRecordInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountGoverningTokenOwnerAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountGoverningTokenMint extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountGoverningTokenOwnerAccount extends string
        ? ReadonlyAccount<TAccountGoverningTokenOwnerAccount>
        : TAccountGoverningTokenOwnerAccount,
      TAccountTokenOwnerRecord extends string
        ? WritableAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountGoverningTokenMint extends string
        ? ReadonlyAccount<TAccountGoverningTokenMint>
        : TAccountGoverningTokenMint,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateTokenOwnerRecordInstructionData {
  discriminator: number;
}

export interface CreateTokenOwnerRecordInstructionDataArgs {}

export function getCreateTokenOwnerRecordInstructionDataEncoder(): FixedSizeEncoder<CreateTokenOwnerRecordInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CREATE_TOKEN_OWNER_RECORD_DISCRIMINATOR,
    }),
  );
}

export function getCreateTokenOwnerRecordInstructionDataDecoder(): FixedSizeDecoder<CreateTokenOwnerRecordInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getCreateTokenOwnerRecordInstructionDataCodec(): FixedSizeCodec<
  CreateTokenOwnerRecordInstructionDataArgs,
  CreateTokenOwnerRecordInstructionData
> {
  return combineCodec(
    getCreateTokenOwnerRecordInstructionDataEncoder(),
    getCreateTokenOwnerRecordInstructionDataDecoder(),
  );
}

export interface CreateTokenOwnerRecordAsyncInput<
  TAccountRealmAccount extends string = string,
  TAccountGoverningTokenOwnerAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountGoverningTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  governingTokenOwnerAccount: Address<TAccountGoverningTokenOwnerAccount>;
  /** seeds=['governance', realm, governing_token_mint, governing_token_owner] */
  tokenOwnerRecord?: Address<TAccountTokenOwnerRecord>;
  governingTokenMint: Address<TAccountGoverningTokenMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export async function getCreateTokenOwnerRecordInstructionAsync<
  TAccountRealmAccount extends string,
  TAccountGoverningTokenOwnerAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountGoverningTokenMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: CreateTokenOwnerRecordAsyncInput<
    TAccountRealmAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  CreateTokenOwnerRecordInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governingTokenOwnerAccount: {
      value: input.governingTokenOwnerAccount ?? null,
      isWritable: false,
    },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
    governingTokenMint: {
      value: input.governingTokenMint ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenOwnerRecord.value) {
    accounts.tokenOwnerRecord.value = await findTokenOwnerRecordPda({
      realm: expectAddress(accounts.realmAccount.value),
      governingTokenMint: expectAddress(accounts.governingTokenMint.value),
      governingTokenOwner: expectAddress(
        accounts.governingTokenOwnerAccount.value,
      ),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governingTokenOwnerAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.governingTokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateTokenOwnerRecordInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateTokenOwnerRecordInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface CreateTokenOwnerRecordInput<
  TAccountRealmAccount extends string = string,
  TAccountGoverningTokenOwnerAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountGoverningTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  governingTokenOwnerAccount: Address<TAccountGoverningTokenOwnerAccount>;
  /** seeds=['governance', realm, governing_token_mint, governing_token_owner] */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  governingTokenMint: Address<TAccountGoverningTokenMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export function getCreateTokenOwnerRecordInstruction<
  TAccountRealmAccount extends string,
  TAccountGoverningTokenOwnerAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountGoverningTokenMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: CreateTokenOwnerRecordInput<
    TAccountRealmAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CreateTokenOwnerRecordInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountGoverningTokenOwnerAccount,
  TAccountTokenOwnerRecord,
  TAccountGoverningTokenMint,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governingTokenOwnerAccount: {
      value: input.governingTokenOwnerAccount ?? null,
      isWritable: false,
    },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
    governingTokenMint: {
      value: input.governingTokenMint ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governingTokenOwnerAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.governingTokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateTokenOwnerRecordInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateTokenOwnerRecordInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGoverningTokenOwnerAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedCreateTokenOwnerRecordInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    governingTokenOwnerAccount: TAccountMetas[1];
    /** seeds=['governance', realm, governing_token_mint, governing_token_owner] */
    tokenOwnerRecord: TAccountMetas[2];
    governingTokenMint: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: CreateTokenOwnerRecordInstructionData;
}

export function parseCreateTokenOwnerRecordInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateTokenOwnerRecordInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      governingTokenOwnerAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      governingTokenMint: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTokenOwnerRecordInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
