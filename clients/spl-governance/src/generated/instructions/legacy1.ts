/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";

export const LEGACY1_DISCRIMINATOR = 8;

export function getLegacy1DiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(LEGACY1_DISCRIMINATOR);
}

export type Legacy1Instruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export interface Legacy1InstructionData {
  discriminator: number;
}

export interface Legacy1InstructionDataArgs {}

export function getLegacy1InstructionDataEncoder(): FixedSizeEncoder<Legacy1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({ ...value, discriminator: LEGACY1_DISCRIMINATOR }),
  );
}

export function getLegacy1InstructionDataDecoder(): FixedSizeDecoder<Legacy1InstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getLegacy1InstructionDataCodec(): FixedSizeCodec<
  Legacy1InstructionDataArgs,
  Legacy1InstructionData
> {
  return combineCodec(
    getLegacy1InstructionDataEncoder(),
    getLegacy1InstructionDataDecoder(),
  );
}

export interface Legacy1Input {}

export function getLegacy1Instruction<
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): Legacy1Instruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  return Object.freeze({
    data: getLegacy1InstructionDataEncoder().encode({}),
    programAddress,
  } as Legacy1Instruction<TProgramAddress>);
}

export interface ParsedLegacy1Instruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
> {
  programAddress: Address<TProgram>;
  data: Legacy1InstructionData;
}

export function parseLegacy1Instruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>,
): ParsedLegacy1Instruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getLegacy1InstructionDataDecoder().decode(instruction.data),
  };
}
