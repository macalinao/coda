/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  SetRealmAuthorityAction,
  SetRealmAuthorityActionArgs,
} from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getSetRealmAuthorityActionDecoder,
  getSetRealmAuthorityActionEncoder,
} from "../types/index.js";

export const SET_REALM_AUTHORITY_DISCRIMINATOR = 21;

export function getSetRealmAuthorityDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_REALM_AUTHORITY_DISCRIMINATOR);
}

export type SetRealmAuthorityInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TAccountNewRealmAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? WritableAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountRealmAuthority extends string
        ? ReadonlySignerAccount<TAccountRealmAuthority> &
            AccountSignerMeta<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      TAccountNewRealmAuthority extends string
        ? ReadonlyAccount<TAccountNewRealmAuthority>
        : TAccountNewRealmAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface SetRealmAuthorityInstructionData {
  discriminator: number;
  action: SetRealmAuthorityAction;
}

export interface SetRealmAuthorityInstructionDataArgs {
  action: SetRealmAuthorityActionArgs;
}

export function getSetRealmAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetRealmAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["action", getSetRealmAuthorityActionEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_REALM_AUTHORITY_DISCRIMINATOR }),
  );
}

export function getSetRealmAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetRealmAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["action", getSetRealmAuthorityActionDecoder()],
  ]);
}

export function getSetRealmAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetRealmAuthorityInstructionDataArgs,
  SetRealmAuthorityInstructionData
> {
  return combineCodec(
    getSetRealmAuthorityInstructionDataEncoder(),
    getSetRealmAuthorityInstructionDataDecoder(),
  );
}

export interface SetRealmAuthorityInput<
  TAccountRealmAccount extends string = string,
  TAccountRealmAuthority extends string = string,
  TAccountNewRealmAuthority extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  realmAuthority: TransactionSigner<TAccountRealmAuthority>;
  /** Must be one of the realm governances when set */
  newRealmAuthority?: Address<TAccountNewRealmAuthority>;
  action: SetRealmAuthorityInstructionDataArgs["action"];
}

export function getSetRealmAuthorityInstruction<
  TAccountRealmAccount extends string,
  TAccountRealmAuthority extends string,
  TAccountNewRealmAuthority extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: SetRealmAuthorityInput<
    TAccountRealmAccount,
    TAccountRealmAuthority,
    TAccountNewRealmAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetRealmAuthorityInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountRealmAuthority,
  TAccountNewRealmAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: true },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
    newRealmAuthority: {
      value: input.newRealmAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.realmAuthority),
      getAccountMeta(accounts.newRealmAuthority),
    ],
    data: getSetRealmAuthorityInstructionDataEncoder().encode(
      args as SetRealmAuthorityInstructionDataArgs,
    ),
    programAddress,
  } as SetRealmAuthorityInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountRealmAuthority,
    TAccountNewRealmAuthority
  >);
}

export interface ParsedSetRealmAuthorityInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    realmAuthority: TAccountMetas[1];
    /** Must be one of the realm governances when set */
    newRealmAuthority?: TAccountMetas[2] | undefined;
  };
  data: SetRealmAuthorityInstructionData;
}

export function parseSetRealmAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetRealmAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      realmAuthority: getNextAccount(),
      newRealmAuthority: getNextOptionalAccount(),
    },
    data: getSetRealmAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
