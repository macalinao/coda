/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const RELINQUISH_VOTE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [39, 15, 192, 13, 10, 156, 182, 135],
);

export function getRelinquishVoteDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RELINQUISH_VOTE_DISCRIMINATOR,
  );
}

export type RelinquishVoteInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountGovernanceAccount extends string | AccountMeta = string,
  TAccountProposalAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountProposalVoteRecord extends string | AccountMeta = string,
  TAccountGoverningTokenMint extends string | AccountMeta = string,
  TAccountGovernanceAuthority extends string | AccountMeta = string,
  TAccountBeneficiaryAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountGovernanceAccount extends string
        ? ReadonlyAccount<TAccountGovernanceAccount>
        : TAccountGovernanceAccount,
      TAccountProposalAccount extends string
        ? WritableAccount<TAccountProposalAccount>
        : TAccountProposalAccount,
      TAccountTokenOwnerRecord extends string
        ? WritableAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountProposalVoteRecord extends string
        ? WritableAccount<TAccountProposalVoteRecord>
        : TAccountProposalVoteRecord,
      TAccountGoverningTokenMint extends string
        ? ReadonlyAccount<TAccountGoverningTokenMint>
        : TAccountGoverningTokenMint,
      TAccountGovernanceAuthority extends string
        ? ReadonlySignerAccount<TAccountGovernanceAuthority> &
            AccountSignerMeta<TAccountGovernanceAuthority>
        : TAccountGovernanceAuthority,
      TAccountBeneficiaryAccount extends string
        ? WritableAccount<TAccountBeneficiaryAccount>
        : TAccountBeneficiaryAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface RelinquishVoteInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RelinquishVoteInstructionDataArgs {}

export function getRelinquishVoteInstructionDataEncoder(): FixedSizeEncoder<RelinquishVoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RELINQUISH_VOTE_DISCRIMINATOR }),
  );
}

export function getRelinquishVoteInstructionDataDecoder(): FixedSizeDecoder<RelinquishVoteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRelinquishVoteInstructionDataCodec(): FixedSizeCodec<
  RelinquishVoteInstructionDataArgs,
  RelinquishVoteInstructionData
> {
  return combineCodec(
    getRelinquishVoteInstructionDataEncoder(),
    getRelinquishVoteInstructionDataDecoder(),
  );
}

export interface RelinquishVoteInput<
  TAccountRealmAccount extends string = string,
  TAccountGovernanceAccount extends string = string,
  TAccountProposalAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountProposalVoteRecord extends string = string,
  TAccountGoverningTokenMint extends string = string,
  TAccountGovernanceAuthority extends string = string,
  TAccountBeneficiaryAccount extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  governanceAccount: Address<TAccountGovernanceAccount>;
  proposalAccount: Address<TAccountProposalAccount>;
  /** TokenOwnerRecord account. PDA seeds: ['governance',realm, vote_governing_token_mint, governing_token_owner] */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  /** Proposal VoteRecord account. PDA seeds: ['governance',proposal, token_owner_record] */
  proposalVoteRecord: Address<TAccountProposalVoteRecord>;
  /** The Governing Token Mint which was used to cast the vote (vote_governing_token_mint) */
  governingTokenMint: Address<TAccountGoverningTokenMint>;
  governanceAuthority?: TransactionSigner<TAccountGovernanceAuthority>;
  /** Optional Beneficiary account which would receive lamports when VoteRecord Account is disposed.
    It's required only when Proposal is still being voted on */
  beneficiaryAccount?: Address<TAccountBeneficiaryAccount>;
}

export function getRelinquishVoteInstruction<
  TAccountRealmAccount extends string,
  TAccountGovernanceAccount extends string,
  TAccountProposalAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountProposalVoteRecord extends string,
  TAccountGoverningTokenMint extends string,
  TAccountGovernanceAuthority extends string,
  TAccountBeneficiaryAccount extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: RelinquishVoteInput<
    TAccountRealmAccount,
    TAccountGovernanceAccount,
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountProposalVoteRecord,
    TAccountGoverningTokenMint,
    TAccountGovernanceAuthority,
    TAccountBeneficiaryAccount
  >,
  config?: { programAddress?: TProgramAddress },
): RelinquishVoteInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountGovernanceAccount,
  TAccountProposalAccount,
  TAccountTokenOwnerRecord,
  TAccountProposalVoteRecord,
  TAccountGoverningTokenMint,
  TAccountGovernanceAuthority,
  TAccountBeneficiaryAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governanceAccount: {
      value: input.governanceAccount ?? null,
      isWritable: false,
    },
    proposalAccount: { value: input.proposalAccount ?? null, isWritable: true },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
    proposalVoteRecord: {
      value: input.proposalVoteRecord ?? null,
      isWritable: true,
    },
    governingTokenMint: {
      value: input.governingTokenMint ?? null,
      isWritable: false,
    },
    governanceAuthority: {
      value: input.governanceAuthority ?? null,
      isWritable: false,
    },
    beneficiaryAccount: {
      value: input.beneficiaryAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governanceAccount),
      getAccountMeta(accounts.proposalAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.proposalVoteRecord),
      getAccountMeta(accounts.governingTokenMint),
      getAccountMeta(accounts.governanceAuthority),
      getAccountMeta(accounts.beneficiaryAccount),
    ],
    data: getRelinquishVoteInstructionDataEncoder().encode({}),
    programAddress,
  } as RelinquishVoteInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGovernanceAccount,
    TAccountProposalAccount,
    TAccountTokenOwnerRecord,
    TAccountProposalVoteRecord,
    TAccountGoverningTokenMint,
    TAccountGovernanceAuthority,
    TAccountBeneficiaryAccount
  >);
}

export interface ParsedRelinquishVoteInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    governanceAccount: TAccountMetas[1];
    proposalAccount: TAccountMetas[2];
    /** TokenOwnerRecord account. PDA seeds: ['governance',realm, vote_governing_token_mint, governing_token_owner] */
    tokenOwnerRecord: TAccountMetas[3];
    /** Proposal VoteRecord account. PDA seeds: ['governance',proposal, token_owner_record] */
    proposalVoteRecord: TAccountMetas[4];
    /** The Governing Token Mint which was used to cast the vote (vote_governing_token_mint) */
    governingTokenMint: TAccountMetas[5];
    governanceAuthority?: TAccountMetas[6] | undefined;
    /** Optional Beneficiary account which would receive lamports when VoteRecord Account is disposed.
    It's required only when Proposal is still being voted on */
    beneficiaryAccount?: TAccountMetas[7] | undefined;
  };
  data: RelinquishVoteInstructionData;
}

export function parseRelinquishVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRelinquishVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      governanceAccount: getNextAccount(),
      proposalAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      proposalVoteRecord: getNextAccount(),
      governingTokenMint: getNextAccount(),
      governanceAuthority: getNextOptionalAccount(),
      beneficiaryAccount: getNextOptionalAccount(),
    },
    data: getRelinquishVoteInstructionDataDecoder().decode(instruction.data),
  };
}
