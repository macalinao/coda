/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REVOKE_GOVERNING_TOKENS_DISCRIMINATOR = 26;

export function getRevokeGoverningTokensDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(REVOKE_GOVERNING_TOKENS_DISCRIMINATOR);
}

export type RevokeGoverningTokensInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountGoverningTokenHoldingAccount extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TAccountGoverningTokenMint extends string | AccountMeta = string,
  TAccountGoverningTokenMintAuthorityOrTokenOwner extends
    | string
    | AccountMeta = string,
  TAccountRealmConfigAccount extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? ReadonlyAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountGoverningTokenHoldingAccount extends string
        ? WritableAccount<TAccountGoverningTokenHoldingAccount>
        : TAccountGoverningTokenHoldingAccount,
      TAccountTokenOwnerRecord extends string
        ? WritableAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      TAccountGoverningTokenMint extends string
        ? WritableAccount<TAccountGoverningTokenMint>
        : TAccountGoverningTokenMint,
      TAccountGoverningTokenMintAuthorityOrTokenOwner extends string
        ? ReadonlySignerAccount<TAccountGoverningTokenMintAuthorityOrTokenOwner> &
            AccountSignerMeta<TAccountGoverningTokenMintAuthorityOrTokenOwner>
        : TAccountGoverningTokenMintAuthorityOrTokenOwner,
      TAccountRealmConfigAccount extends string
        ? ReadonlyAccount<TAccountRealmConfigAccount>
        : TAccountRealmConfigAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RevokeGoverningTokensInstructionData {
  discriminator: number;
  amount: bigint;
}

export interface RevokeGoverningTokensInstructionDataArgs {
  amount: number | bigint;
}

export function getRevokeGoverningTokensInstructionDataEncoder(): FixedSizeEncoder<RevokeGoverningTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REVOKE_GOVERNING_TOKENS_DISCRIMINATOR,
    }),
  );
}

export function getRevokeGoverningTokensInstructionDataDecoder(): FixedSizeDecoder<RevokeGoverningTokensInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["amount", getU64Decoder()],
  ]);
}

export function getRevokeGoverningTokensInstructionDataCodec(): FixedSizeCodec<
  RevokeGoverningTokensInstructionDataArgs,
  RevokeGoverningTokensInstructionData
> {
  return combineCodec(
    getRevokeGoverningTokensInstructionDataEncoder(),
    getRevokeGoverningTokensInstructionDataDecoder(),
  );
}

export interface RevokeGoverningTokensInput<
  TAccountRealmAccount extends string = string,
  TAccountGoverningTokenHoldingAccount extends string = string,
  TAccountTokenOwnerRecord extends string = string,
  TAccountGoverningTokenMint extends string = string,
  TAccountGoverningTokenMintAuthorityOrTokenOwner extends string = string,
  TAccountRealmConfigAccount extends string = string,
  TAccountTokenProgram extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  /** seeds=['governance', realm, governing_token_mint] */
  governingTokenHoldingAccount: Address<TAccountGoverningTokenHoldingAccount>;
  /** seeds=['governance', realm, governing_token_mint, governing_token_owner] */
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  governingTokenMint: Address<TAccountGoverningTokenMint>;
  /** GoverningTokenMint mint_authority */
  governingTokenMintAuthorityOrTokenOwner: TransactionSigner<TAccountGoverningTokenMintAuthorityOrTokenOwner>;
  /** seeds=['realm-config', realm] */
  realmConfigAccount: Address<TAccountRealmConfigAccount>;
  tokenProgram: Address<TAccountTokenProgram>;
  amount: RevokeGoverningTokensInstructionDataArgs["amount"];
}

export function getRevokeGoverningTokensInstruction<
  TAccountRealmAccount extends string,
  TAccountGoverningTokenHoldingAccount extends string,
  TAccountTokenOwnerRecord extends string,
  TAccountGoverningTokenMint extends string,
  TAccountGoverningTokenMintAuthorityOrTokenOwner extends string,
  TAccountRealmConfigAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: RevokeGoverningTokensInput<
    TAccountRealmAccount,
    TAccountGoverningTokenHoldingAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountGoverningTokenMintAuthorityOrTokenOwner,
    TAccountRealmConfigAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RevokeGoverningTokensInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountGoverningTokenHoldingAccount,
  TAccountTokenOwnerRecord,
  TAccountGoverningTokenMint,
  TAccountGoverningTokenMintAuthorityOrTokenOwner,
  TAccountRealmConfigAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: false },
    governingTokenHoldingAccount: {
      value: input.governingTokenHoldingAccount ?? null,
      isWritable: true,
    },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
    governingTokenMint: {
      value: input.governingTokenMint ?? null,
      isWritable: true,
    },
    governingTokenMintAuthorityOrTokenOwner: {
      value: input.governingTokenMintAuthorityOrTokenOwner ?? null,
      isWritable: false,
    },
    realmConfigAccount: {
      value: input.realmConfigAccount ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.governingTokenHoldingAccount),
      getAccountMeta(accounts.tokenOwnerRecord),
      getAccountMeta(accounts.governingTokenMint),
      getAccountMeta(accounts.governingTokenMintAuthorityOrTokenOwner),
      getAccountMeta(accounts.realmConfigAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getRevokeGoverningTokensInstructionDataEncoder().encode(
      args as RevokeGoverningTokensInstructionDataArgs,
    ),
    programAddress,
  } as RevokeGoverningTokensInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountGoverningTokenHoldingAccount,
    TAccountTokenOwnerRecord,
    TAccountGoverningTokenMint,
    TAccountGoverningTokenMintAuthorityOrTokenOwner,
    TAccountRealmConfigAccount,
    TAccountTokenProgram
  >);
}

export interface ParsedRevokeGoverningTokensInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    /** seeds=['governance', realm, governing_token_mint] */
    governingTokenHoldingAccount: TAccountMetas[1];
    /** seeds=['governance', realm, governing_token_mint, governing_token_owner] */
    tokenOwnerRecord: TAccountMetas[2];
    governingTokenMint: TAccountMetas[3];
    /** GoverningTokenMint mint_authority */
    governingTokenMintAuthorityOrTokenOwner: TAccountMetas[4];
    /** seeds=['realm-config', realm] */
    realmConfigAccount: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: RevokeGoverningTokensInstructionData;
}

export function parseRevokeGoverningTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRevokeGoverningTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      governingTokenHoldingAccount: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
      governingTokenMint: getNextAccount(),
      governingTokenMintAuthorityOrTokenOwner: getNextAccount(),
      realmConfigAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRevokeGoverningTokensInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
