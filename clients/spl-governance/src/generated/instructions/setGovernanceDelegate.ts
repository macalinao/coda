/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  Option,
  OptionOrNullable,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_GOVERNANCE_DELEGATE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([89, 7, 44, 62, 31, 17, 147, 223]);

export function getSetGovernanceDelegateDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_GOVERNANCE_DELEGATE_DISCRIMINATOR,
  );
}

export type SetGovernanceDelegateInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountCurrentDelegateOrOwner extends string | AccountMeta = string,
  TAccountTokenOwnerRecord extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCurrentDelegateOrOwner extends string
        ? ReadonlySignerAccount<TAccountCurrentDelegateOrOwner> &
            AccountSignerMeta<TAccountCurrentDelegateOrOwner>
        : TAccountCurrentDelegateOrOwner,
      TAccountTokenOwnerRecord extends string
        ? WritableAccount<TAccountTokenOwnerRecord>
        : TAccountTokenOwnerRecord,
      ...TRemainingAccounts,
    ]
  >;

export interface SetGovernanceDelegateInstructionData {
  discriminator: ReadonlyUint8Array;
  newGovernanceDelegate: Option<Address>;
}

export interface SetGovernanceDelegateInstructionDataArgs {
  newGovernanceDelegate: OptionOrNullable<Address>;
}

export function getSetGovernanceDelegateInstructionDataEncoder(): Encoder<SetGovernanceDelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newGovernanceDelegate", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_GOVERNANCE_DELEGATE_DISCRIMINATOR,
    }),
  );
}

export function getSetGovernanceDelegateInstructionDataDecoder(): Decoder<SetGovernanceDelegateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newGovernanceDelegate", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getSetGovernanceDelegateInstructionDataCodec(): Codec<
  SetGovernanceDelegateInstructionDataArgs,
  SetGovernanceDelegateInstructionData
> {
  return combineCodec(
    getSetGovernanceDelegateInstructionDataEncoder(),
    getSetGovernanceDelegateInstructionDataDecoder(),
  );
}

export interface SetGovernanceDelegateInput<
  TAccountCurrentDelegateOrOwner extends string = string,
  TAccountTokenOwnerRecord extends string = string,
> {
  /** Current governance delegate or governing token owner */
  currentDelegateOrOwner: TransactionSigner<TAccountCurrentDelegateOrOwner>;
  tokenOwnerRecord: Address<TAccountTokenOwnerRecord>;
  newGovernanceDelegate: SetGovernanceDelegateInstructionDataArgs["newGovernanceDelegate"];
}

export function getSetGovernanceDelegateInstruction<
  TAccountCurrentDelegateOrOwner extends string,
  TAccountTokenOwnerRecord extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: SetGovernanceDelegateInput<
    TAccountCurrentDelegateOrOwner,
    TAccountTokenOwnerRecord
  >,
  config?: { programAddress?: TProgramAddress },
): SetGovernanceDelegateInstruction<
  TProgramAddress,
  TAccountCurrentDelegateOrOwner,
  TAccountTokenOwnerRecord
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    currentDelegateOrOwner: {
      value: input.currentDelegateOrOwner ?? null,
      isWritable: false,
    },
    tokenOwnerRecord: {
      value: input.tokenOwnerRecord ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.currentDelegateOrOwner),
      getAccountMeta(accounts.tokenOwnerRecord),
    ],
    data: getSetGovernanceDelegateInstructionDataEncoder().encode(
      args as SetGovernanceDelegateInstructionDataArgs,
    ),
    programAddress,
  } as SetGovernanceDelegateInstruction<
    TProgramAddress,
    TAccountCurrentDelegateOrOwner,
    TAccountTokenOwnerRecord
  >);
}

export interface ParsedSetGovernanceDelegateInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Current governance delegate or governing token owner */
    currentDelegateOrOwner: TAccountMetas[0];
    tokenOwnerRecord: TAccountMetas[1];
  };
  data: SetGovernanceDelegateInstructionData;
}

export function parseSetGovernanceDelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetGovernanceDelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      currentDelegateOrOwner: getNextAccount(),
      tokenOwnerRecord: getNextAccount(),
    },
    data: getSetGovernanceDelegateInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
