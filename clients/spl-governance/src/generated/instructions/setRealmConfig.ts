/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  RealmConfigParams,
  RealmConfigParamsArgs,
} from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_GOVERNANCE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getRealmConfigParamsDecoder,
  getRealmConfigParamsEncoder,
} from "../types/index.js";

export const SET_REALM_CONFIG_DISCRIMINATOR = 22;

export function getSetRealmConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_REALM_CONFIG_DISCRIMINATOR);
}

export type SetRealmConfigInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountRealmAccount extends string | AccountMeta = string,
  TAccountRealmAuthority extends string | AccountMeta = string,
  TAccountCouncilTokenMint extends string | AccountMeta = string,
  TAccountCouncilTokenHoldingAccount extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRealmConfig extends string | AccountMeta = string,
  TAccountCommunityVoterWeightAddinProgramId extends
    | string
    | AccountMeta = string,
  TAccountMaxCommunityVoterWeightAddinProgramId extends
    | string
    | AccountMeta = string,
  TAccountCouncilVoterWeightAddinProgramId extends
    | string
    | AccountMeta = string,
  TAccountMaxCouncilVoterWeightAddinProgramId extends
    | string
    | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRealmAccount extends string
        ? WritableAccount<TAccountRealmAccount>
        : TAccountRealmAccount,
      TAccountRealmAuthority extends string
        ? ReadonlySignerAccount<TAccountRealmAuthority> &
            AccountSignerMeta<TAccountRealmAuthority>
        : TAccountRealmAuthority,
      TAccountCouncilTokenMint extends string
        ? ReadonlyAccount<TAccountCouncilTokenMint>
        : TAccountCouncilTokenMint,
      TAccountCouncilTokenHoldingAccount extends string
        ? WritableAccount<TAccountCouncilTokenHoldingAccount>
        : TAccountCouncilTokenHoldingAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRealmConfig extends string
        ? WritableAccount<TAccountRealmConfig>
        : TAccountRealmConfig,
      TAccountCommunityVoterWeightAddinProgramId extends string
        ? ReadonlyAccount<TAccountCommunityVoterWeightAddinProgramId>
        : TAccountCommunityVoterWeightAddinProgramId,
      TAccountMaxCommunityVoterWeightAddinProgramId extends string
        ? ReadonlyAccount<TAccountMaxCommunityVoterWeightAddinProgramId>
        : TAccountMaxCommunityVoterWeightAddinProgramId,
      TAccountCouncilVoterWeightAddinProgramId extends string
        ? ReadonlyAccount<TAccountCouncilVoterWeightAddinProgramId>
        : TAccountCouncilVoterWeightAddinProgramId,
      TAccountMaxCouncilVoterWeightAddinProgramId extends string
        ? ReadonlyAccount<TAccountMaxCouncilVoterWeightAddinProgramId>
        : TAccountMaxCouncilVoterWeightAddinProgramId,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export interface SetRealmConfigInstructionData {
  discriminator: number;
  configArgs: RealmConfigParams;
}

export interface SetRealmConfigInstructionDataArgs {
  configArgs: RealmConfigParamsArgs;
}

export function getSetRealmConfigInstructionDataEncoder(): FixedSizeEncoder<SetRealmConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["configArgs", getRealmConfigParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_REALM_CONFIG_DISCRIMINATOR }),
  );
}

export function getSetRealmConfigInstructionDataDecoder(): FixedSizeDecoder<SetRealmConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["configArgs", getRealmConfigParamsDecoder()],
  ]);
}

export function getSetRealmConfigInstructionDataCodec(): FixedSizeCodec<
  SetRealmConfigInstructionDataArgs,
  SetRealmConfigInstructionData
> {
  return combineCodec(
    getSetRealmConfigInstructionDataEncoder(),
    getSetRealmConfigInstructionDataDecoder(),
  );
}

export interface SetRealmConfigInput<
  TAccountRealmAccount extends string = string,
  TAccountRealmAuthority extends string = string,
  TAccountCouncilTokenMint extends string = string,
  TAccountCouncilTokenHoldingAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRealmConfig extends string = string,
  TAccountCommunityVoterWeightAddinProgramId extends string = string,
  TAccountMaxCommunityVoterWeightAddinProgramId extends string = string,
  TAccountCouncilVoterWeightAddinProgramId extends string = string,
  TAccountMaxCouncilVoterWeightAddinProgramId extends string = string,
  TAccountPayer extends string = string,
> {
  realmAccount: Address<TAccountRealmAccount>;
  realmAuthority: TransactionSigner<TAccountRealmAuthority>;
  /** Council Token Mint - optional. 
        Note: In the current version it's only possible to remove council mint (set it to None)
        After setting council to None it won't be possible to withdraw the tokens from the Realm any longer. 
        If that's required then it must be done before executing this instruction */
  councilTokenMint?: Address<TAccountCouncilTokenMint>;
  /** Optional unless council is used. seeds=['governance', realm, council_mint] */
  councilTokenHoldingAccount?: Address<TAccountCouncilTokenHoldingAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  /** RealmConfig account. seeds=['realm-config', realm] */
  realmConfig: Address<TAccountRealmConfig>;
  /** Optional Community Voter Weight Addin Program Id */
  communityVoterWeightAddinProgramId?: Address<TAccountCommunityVoterWeightAddinProgramId>;
  /** Optional Max Community Voter Weight Addin Program Id */
  maxCommunityVoterWeightAddinProgramId?: Address<TAccountMaxCommunityVoterWeightAddinProgramId>;
  /** Optional Council Voter Weight Adding Program Id */
  councilVoterWeightAddinProgramId?: Address<TAccountCouncilVoterWeightAddinProgramId>;
  /** Optional Max Council Voter Weight Addin Program Id */
  maxCouncilVoterWeightAddinProgramId?: Address<TAccountMaxCouncilVoterWeightAddinProgramId>;
  /** Optional Payer. Required if RealmConfig doesn't exist and needs to be created */
  payer?: TransactionSigner<TAccountPayer>;
  configArgs: SetRealmConfigInstructionDataArgs["configArgs"];
}

export function getSetRealmConfigInstruction<
  TAccountRealmAccount extends string,
  TAccountRealmAuthority extends string,
  TAccountCouncilTokenMint extends string,
  TAccountCouncilTokenHoldingAccount extends string,
  TAccountSystemProgram extends string,
  TAccountRealmConfig extends string,
  TAccountCommunityVoterWeightAddinProgramId extends string,
  TAccountMaxCommunityVoterWeightAddinProgramId extends string,
  TAccountCouncilVoterWeightAddinProgramId extends string,
  TAccountMaxCouncilVoterWeightAddinProgramId extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
>(
  input: SetRealmConfigInput<
    TAccountRealmAccount,
    TAccountRealmAuthority,
    TAccountCouncilTokenMint,
    TAccountCouncilTokenHoldingAccount,
    TAccountSystemProgram,
    TAccountRealmConfig,
    TAccountCommunityVoterWeightAddinProgramId,
    TAccountMaxCommunityVoterWeightAddinProgramId,
    TAccountCouncilVoterWeightAddinProgramId,
    TAccountMaxCouncilVoterWeightAddinProgramId,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress },
): SetRealmConfigInstruction<
  TProgramAddress,
  TAccountRealmAccount,
  TAccountRealmAuthority,
  TAccountCouncilTokenMint,
  TAccountCouncilTokenHoldingAccount,
  TAccountSystemProgram,
  TAccountRealmConfig,
  TAccountCommunityVoterWeightAddinProgramId,
  TAccountMaxCommunityVoterWeightAddinProgramId,
  TAccountCouncilVoterWeightAddinProgramId,
  TAccountMaxCouncilVoterWeightAddinProgramId,
  TAccountPayer
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    realmAccount: { value: input.realmAccount ?? null, isWritable: true },
    realmAuthority: { value: input.realmAuthority ?? null, isWritable: false },
    councilTokenMint: {
      value: input.councilTokenMint ?? null,
      isWritable: false,
    },
    councilTokenHoldingAccount: {
      value: input.councilTokenHoldingAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    realmConfig: { value: input.realmConfig ?? null, isWritable: true },
    communityVoterWeightAddinProgramId: {
      value: input.communityVoterWeightAddinProgramId ?? null,
      isWritable: false,
    },
    maxCommunityVoterWeightAddinProgramId: {
      value: input.maxCommunityVoterWeightAddinProgramId ?? null,
      isWritable: false,
    },
    councilVoterWeightAddinProgramId: {
      value: input.councilVoterWeightAddinProgramId ?? null,
      isWritable: false,
    },
    maxCouncilVoterWeightAddinProgramId: {
      value: input.maxCouncilVoterWeightAddinProgramId ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.realmAccount),
      getAccountMeta(accounts.realmAuthority),
      getAccountMeta(accounts.councilTokenMint),
      getAccountMeta(accounts.councilTokenHoldingAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.realmConfig),
      getAccountMeta(accounts.communityVoterWeightAddinProgramId),
      getAccountMeta(accounts.maxCommunityVoterWeightAddinProgramId),
      getAccountMeta(accounts.councilVoterWeightAddinProgramId),
      getAccountMeta(accounts.maxCouncilVoterWeightAddinProgramId),
      getAccountMeta(accounts.payer),
    ],
    data: getSetRealmConfigInstructionDataEncoder().encode(
      args as SetRealmConfigInstructionDataArgs,
    ),
    programAddress,
  } as SetRealmConfigInstruction<
    TProgramAddress,
    TAccountRealmAccount,
    TAccountRealmAuthority,
    TAccountCouncilTokenMint,
    TAccountCouncilTokenHoldingAccount,
    TAccountSystemProgram,
    TAccountRealmConfig,
    TAccountCommunityVoterWeightAddinProgramId,
    TAccountMaxCommunityVoterWeightAddinProgramId,
    TAccountCouncilVoterWeightAddinProgramId,
    TAccountMaxCouncilVoterWeightAddinProgramId,
    TAccountPayer
  >);
}

export interface ParsedSetRealmConfigInstruction<
  TProgram extends string = typeof SPL_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    realmAccount: TAccountMetas[0];
    realmAuthority: TAccountMetas[1];
    /** Council Token Mint - optional. 
        Note: In the current version it's only possible to remove council mint (set it to None)
        After setting council to None it won't be possible to withdraw the tokens from the Realm any longer. 
        If that's required then it must be done before executing this instruction */
    councilTokenMint?: TAccountMetas[2] | undefined;
    /** Optional unless council is used. seeds=['governance', realm, council_mint] */
    councilTokenHoldingAccount?: TAccountMetas[3] | undefined;
    systemProgram: TAccountMetas[4];
    /** RealmConfig account. seeds=['realm-config', realm] */
    realmConfig: TAccountMetas[5];
    /** Optional Community Voter Weight Addin Program Id */
    communityVoterWeightAddinProgramId?: TAccountMetas[6] | undefined;
    /** Optional Max Community Voter Weight Addin Program Id */
    maxCommunityVoterWeightAddinProgramId?: TAccountMetas[7] | undefined;
    /** Optional Council Voter Weight Adding Program Id */
    councilVoterWeightAddinProgramId?: TAccountMetas[8] | undefined;
    /** Optional Max Council Voter Weight Addin Program Id */
    maxCouncilVoterWeightAddinProgramId?: TAccountMetas[9] | undefined;
    /** Optional Payer. Required if RealmConfig doesn't exist and needs to be created */
    payer?: TAccountMetas[10] | undefined;
  };
  data: SetRealmConfigInstructionData;
}

export function parseSetRealmConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetRealmConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_GOVERNANCE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      realmAccount: getNextAccount(),
      realmAuthority: getNextAccount(),
      councilTokenMint: getNextOptionalAccount(),
      councilTokenHoldingAccount: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      realmConfig: getNextAccount(),
      communityVoterWeightAddinProgramId: getNextOptionalAccount(),
      maxCommunityVoterWeightAddinProgramId: getNextOptionalAccount(),
      councilVoterWeightAddinProgramId: getNextOptionalAccount(),
      maxCouncilVoterWeightAddinProgramId: getNextOptionalAccount(),
      payer: getNextOptionalAccount(),
    },
    data: getSetRealmConfigInstructionDataDecoder().decode(instruction.data),
  };
}
