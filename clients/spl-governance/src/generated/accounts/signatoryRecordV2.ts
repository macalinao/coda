/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { SignatoryRecordSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findSignatoryRecordPda } from "../pdas/index.js";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
} from "../types/index.js";

export const SIGNATORY_RECORD_V2_ACCOUNT_TYPE =
  GovernanceAccountType.SignatoryRecordV2;

export function getSignatoryRecordV2AccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(
    SIGNATORY_RECORD_V2_ACCOUNT_TYPE,
  );
}

export interface SignatoryRecordV2 {
  accountType: GovernanceAccountType;
  proposal: Address;
  signatory: Address;
  signedOff: boolean;
  reservedV2: number[];
}

export interface SignatoryRecordV2Args {
  proposal: Address;
  signatory: Address;
  signedOff: boolean;
  reservedV2: number[];
}

export function getSignatoryRecordV2Encoder(): FixedSizeEncoder<SignatoryRecordV2Args> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["proposal", getAddressEncoder()],
      ["signatory", getAddressEncoder()],
      ["signedOff", getBooleanEncoder()],
      ["reservedV2", getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, accountType: SIGNATORY_RECORD_V2_ACCOUNT_TYPE }),
  );
}

export function getSignatoryRecordV2Decoder(): FixedSizeDecoder<SignatoryRecordV2> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["proposal", getAddressDecoder()],
    ["signatory", getAddressDecoder()],
    ["signedOff", getBooleanDecoder()],
    ["reservedV2", getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getSignatoryRecordV2Codec(): FixedSizeCodec<
  SignatoryRecordV2Args,
  SignatoryRecordV2
> {
  return combineCodec(
    getSignatoryRecordV2Encoder(),
    getSignatoryRecordV2Decoder(),
  );
}

export function decodeSignatoryRecordV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<SignatoryRecordV2, TAddress>;
export function decodeSignatoryRecordV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<SignatoryRecordV2, TAddress>;
export function decodeSignatoryRecordV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<SignatoryRecordV2, TAddress>
  | MaybeAccount<SignatoryRecordV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSignatoryRecordV2Decoder(),
  );
}

export async function fetchSignatoryRecordV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<SignatoryRecordV2, TAddress>> {
  const maybeAccount = await fetchMaybeSignatoryRecordV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSignatoryRecordV2<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<SignatoryRecordV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSignatoryRecordV2(maybeAccount);
}

export async function fetchAllSignatoryRecordV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<SignatoryRecordV2>[]> {
  const maybeAccounts = await fetchAllMaybeSignatoryRecordV2(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSignatoryRecordV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<SignatoryRecordV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeSignatoryRecordV2(maybeAccount),
  );
}

export async function fetchSignatoryRecordV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: SignatoryRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<SignatoryRecordV2>> {
  const maybeAccount = await fetchMaybeSignatoryRecordV2FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSignatoryRecordV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: SignatoryRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<SignatoryRecordV2>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findSignatoryRecordPda(seeds, { programAddress });
  return await fetchMaybeSignatoryRecordV2(rpc, address, fetchConfig);
}
