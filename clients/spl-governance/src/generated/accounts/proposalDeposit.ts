/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { ProposalDepositSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findProposalDepositPda } from "../pdas/index.js";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
} from "../types/index.js";

export const PROPOSAL_DEPOSIT_ACCOUNT_TYPE =
  GovernanceAccountType.ProposalDeposit;

export function getProposalDepositAccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(
    PROPOSAL_DEPOSIT_ACCOUNT_TYPE,
  );
}

export interface ProposalDeposit {
  accountType: GovernanceAccountType;
  proposal: Address;
  depositPayer: Address;
  reserved: number[];
}

export interface ProposalDepositArgs {
  proposal: Address;
  depositPayer: Address;
  reserved: number[];
}

export function getProposalDepositEncoder(): FixedSizeEncoder<ProposalDepositArgs> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["proposal", getAddressEncoder()],
      ["depositPayer", getAddressEncoder()],
      ["reserved", getArrayEncoder(getU8Encoder(), { size: 64 })],
    ]),
    (value) => ({ ...value, accountType: PROPOSAL_DEPOSIT_ACCOUNT_TYPE }),
  );
}

export function getProposalDepositDecoder(): FixedSizeDecoder<ProposalDeposit> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["proposal", getAddressDecoder()],
    ["depositPayer", getAddressDecoder()],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 64 })],
  ]);
}

export function getProposalDepositCodec(): FixedSizeCodec<
  ProposalDepositArgs,
  ProposalDeposit
> {
  return combineCodec(getProposalDepositEncoder(), getProposalDepositDecoder());
}

export function decodeProposalDeposit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ProposalDeposit, TAddress>;
export function decodeProposalDeposit<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ProposalDeposit, TAddress>;
export function decodeProposalDeposit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<ProposalDeposit, TAddress>
  | MaybeAccount<ProposalDeposit, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProposalDepositDecoder(),
  );
}

export async function fetchProposalDeposit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ProposalDeposit, TAddress>> {
  const maybeAccount = await fetchMaybeProposalDeposit(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalDeposit<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ProposalDeposit, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProposalDeposit(maybeAccount);
}

export async function fetchAllProposalDeposit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ProposalDeposit>[]> {
  const maybeAccounts = await fetchAllMaybeProposalDeposit(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProposalDeposit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ProposalDeposit>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProposalDeposit(maybeAccount),
  );
}

export async function fetchProposalDepositFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalDepositSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<ProposalDeposit>> {
  const maybeAccount = await fetchMaybeProposalDepositFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalDepositFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalDepositSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<ProposalDeposit>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProposalDepositPda(seeds, { programAddress });
  return await fetchMaybeProposalDeposit(rpc, address, fetchConfig);
}
