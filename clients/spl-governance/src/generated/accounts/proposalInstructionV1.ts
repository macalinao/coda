/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
} from "@solana/kit";
import type { ProposalTransactionSeeds } from "../pdas/index.js";
import type {
  InstructionData,
  InstructionDataArgs,
  TransactionExecutionStatus,
  TransactionExecutionStatusArgs,
  UnixTimestamp,
  UnixTimestampArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import { findProposalTransactionPda } from "../pdas/index.js";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getInstructionDataDecoder,
  getInstructionDataEncoder,
  getTransactionExecutionStatusDecoder,
  getTransactionExecutionStatusEncoder,
  getUnixTimestampDecoder,
  getUnixTimestampEncoder,
} from "../types/index.js";

export const PROPOSAL_INSTRUCTION_V1_ACCOUNT_TYPE =
  GovernanceAccountType.ProposalInstructionV1;

export function getProposalInstructionV1AccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(
    PROPOSAL_INSTRUCTION_V1_ACCOUNT_TYPE,
  );
}

export interface ProposalInstructionV1 {
  accountType: GovernanceAccountType;
  proposal: Address;
  instructionIndex: number;
  holdUpTime: number;
  instruction: InstructionData;
  executedAt: Option<UnixTimestamp>;
  executionStatus: TransactionExecutionStatus;
}

export interface ProposalInstructionV1Args {
  proposal: Address;
  instructionIndex: number;
  holdUpTime: number;
  instruction: InstructionDataArgs;
  executedAt: OptionOrNullable<UnixTimestampArgs>;
  executionStatus: TransactionExecutionStatusArgs;
}

export function getProposalInstructionV1Encoder(): Encoder<ProposalInstructionV1Args> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["proposal", getAddressEncoder()],
      ["instructionIndex", getU16Encoder()],
      ["holdUpTime", getU32Encoder()],
      ["instruction", getInstructionDataEncoder()],
      ["executedAt", getOptionEncoder(getUnixTimestampEncoder())],
      ["executionStatus", getTransactionExecutionStatusEncoder()],
    ]),
    (value) => ({
      ...value,
      accountType: PROPOSAL_INSTRUCTION_V1_ACCOUNT_TYPE,
    }),
  );
}

export function getProposalInstructionV1Decoder(): Decoder<ProposalInstructionV1> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["proposal", getAddressDecoder()],
    ["instructionIndex", getU16Decoder()],
    ["holdUpTime", getU32Decoder()],
    ["instruction", getInstructionDataDecoder()],
    ["executedAt", getOptionDecoder(getUnixTimestampDecoder())],
    ["executionStatus", getTransactionExecutionStatusDecoder()],
  ]);
}

export function getProposalInstructionV1Codec(): Codec<
  ProposalInstructionV1Args,
  ProposalInstructionV1
> {
  return combineCodec(
    getProposalInstructionV1Encoder(),
    getProposalInstructionV1Decoder(),
  );
}

export function decodeProposalInstructionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ProposalInstructionV1, TAddress>;
export function decodeProposalInstructionV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ProposalInstructionV1, TAddress>;
export function decodeProposalInstructionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<ProposalInstructionV1, TAddress>
  | MaybeAccount<ProposalInstructionV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProposalInstructionV1Decoder(),
  );
}

export async function fetchProposalInstructionV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ProposalInstructionV1, TAddress>> {
  const maybeAccount = await fetchMaybeProposalInstructionV1(
    rpc,
    address,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalInstructionV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ProposalInstructionV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProposalInstructionV1(maybeAccount);
}

export async function fetchAllProposalInstructionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ProposalInstructionV1>[]> {
  const maybeAccounts = await fetchAllMaybeProposalInstructionV1(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProposalInstructionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ProposalInstructionV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProposalInstructionV1(maybeAccount),
  );
}

export async function fetchProposalInstructionV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalTransactionSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<ProposalInstructionV1>> {
  const maybeAccount = await fetchMaybeProposalInstructionV1FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalInstructionV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalTransactionSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<ProposalInstructionV1>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProposalTransactionPda(seeds, { programAddress });
  return await fetchMaybeProposalInstructionV1(rpc, address, fetchConfig);
}
