/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { RequiredSignatorySeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findRequiredSignatoryPda } from "../pdas/index.js";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
} from "../types/index.js";

export const REQUIRED_SIGNATORY_ACCOUNT_TYPE =
  GovernanceAccountType.RequiredSignatory;

export function getRequiredSignatoryAccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(
    REQUIRED_SIGNATORY_ACCOUNT_TYPE,
  );
}

export interface RequiredSignatory {
  accountType: GovernanceAccountType;
  accountVersion: number;
  governance: Address;
  signatory: Address;
}

export interface RequiredSignatoryArgs {
  accountVersion: number;
  governance: Address;
  signatory: Address;
}

export function getRequiredSignatoryEncoder(): FixedSizeEncoder<RequiredSignatoryArgs> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["accountVersion", getU8Encoder()],
      ["governance", getAddressEncoder()],
      ["signatory", getAddressEncoder()],
    ]),
    (value) => ({ ...value, accountType: REQUIRED_SIGNATORY_ACCOUNT_TYPE }),
  );
}

export function getRequiredSignatoryDecoder(): FixedSizeDecoder<RequiredSignatory> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["accountVersion", getU8Decoder()],
    ["governance", getAddressDecoder()],
    ["signatory", getAddressDecoder()],
  ]);
}

export function getRequiredSignatoryCodec(): FixedSizeCodec<
  RequiredSignatoryArgs,
  RequiredSignatory
> {
  return combineCodec(
    getRequiredSignatoryEncoder(),
    getRequiredSignatoryDecoder(),
  );
}

export function decodeRequiredSignatory<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<RequiredSignatory, TAddress>;
export function decodeRequiredSignatory<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<RequiredSignatory, TAddress>;
export function decodeRequiredSignatory<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<RequiredSignatory, TAddress>
  | MaybeAccount<RequiredSignatory, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRequiredSignatoryDecoder(),
  );
}

export async function fetchRequiredSignatory<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<RequiredSignatory, TAddress>> {
  const maybeAccount = await fetchMaybeRequiredSignatory(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRequiredSignatory<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<RequiredSignatory, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRequiredSignatory(maybeAccount);
}

export async function fetchAllRequiredSignatory(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<RequiredSignatory>[]> {
  const maybeAccounts = await fetchAllMaybeRequiredSignatory(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRequiredSignatory(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<RequiredSignatory>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeRequiredSignatory(maybeAccount),
  );
}

export async function fetchRequiredSignatoryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RequiredSignatorySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<RequiredSignatory>> {
  const maybeAccount = await fetchMaybeRequiredSignatoryFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRequiredSignatoryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RequiredSignatorySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<RequiredSignatory>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findRequiredSignatoryPda(seeds, { programAddress });
  return await fetchMaybeRequiredSignatory(rpc, address, fetchConfig);
}
