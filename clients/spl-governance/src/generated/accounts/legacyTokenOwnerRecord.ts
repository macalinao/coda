/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
} from "@solana/kit";
import type { TokenOwnerRecordSeeds } from "../pdas/index.js";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";
import { findTokenOwnerRecordPda } from "../pdas/index.js";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
} from "../types/index.js";

export interface LegacyTokenOwnerRecord {
  accountType: GovernanceAccountType;
  realm: Address;
  governingTokenMint: Address;
  governingTokenOwner: Address;
  governingTokenDepositAmount: bigint;
  unrelinquishedVotesCount: number;
  totalVotesCount: number;
  outstandingProposalCount: number;
  reserved: number[];
  governanceDelegate: Option<Address>;
  reservedV2: number[];
}

export interface LegacyTokenOwnerRecordArgs {
  accountType: GovernanceAccountTypeArgs;
  realm: Address;
  governingTokenMint: Address;
  governingTokenOwner: Address;
  governingTokenDepositAmount: number | bigint;
  unrelinquishedVotesCount: number;
  totalVotesCount: number;
  outstandingProposalCount: number;
  reserved: number[];
  governanceDelegate: OptionOrNullable<Address>;
  reservedV2: number[];
}

export function getLegacyTokenOwnerRecordEncoder(): Encoder<LegacyTokenOwnerRecordArgs> {
  return getStructEncoder([
    ["accountType", getGovernanceAccountTypeEncoder()],
    ["realm", getAddressEncoder()],
    ["governingTokenMint", getAddressEncoder()],
    ["governingTokenOwner", getAddressEncoder()],
    ["governingTokenDepositAmount", getU64Encoder()],
    ["unrelinquishedVotesCount", getU32Encoder()],
    ["totalVotesCount", getU32Encoder()],
    ["outstandingProposalCount", getU8Encoder()],
    ["reserved", getArrayEncoder(getU8Encoder(), { size: 7 })],
    ["governanceDelegate", getOptionEncoder(getAddressEncoder())],
    ["reservedV2", getArrayEncoder(getU8Encoder(), { size: 128 })],
  ]);
}

export function getLegacyTokenOwnerRecordDecoder(): Decoder<LegacyTokenOwnerRecord> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["realm", getAddressDecoder()],
    ["governingTokenMint", getAddressDecoder()],
    ["governingTokenOwner", getAddressDecoder()],
    ["governingTokenDepositAmount", getU64Decoder()],
    ["unrelinquishedVotesCount", getU32Decoder()],
    ["totalVotesCount", getU32Decoder()],
    ["outstandingProposalCount", getU8Decoder()],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 7 })],
    ["governanceDelegate", getOptionDecoder(getAddressDecoder())],
    ["reservedV2", getArrayDecoder(getU8Decoder(), { size: 128 })],
  ]);
}

export function getLegacyTokenOwnerRecordCodec(): Codec<
  LegacyTokenOwnerRecordArgs,
  LegacyTokenOwnerRecord
> {
  return combineCodec(
    getLegacyTokenOwnerRecordEncoder(),
    getLegacyTokenOwnerRecordDecoder(),
  );
}

export function decodeLegacyTokenOwnerRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<LegacyTokenOwnerRecord, TAddress>;
export function decodeLegacyTokenOwnerRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<LegacyTokenOwnerRecord, TAddress>;
export function decodeLegacyTokenOwnerRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<LegacyTokenOwnerRecord, TAddress>
  | MaybeAccount<LegacyTokenOwnerRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLegacyTokenOwnerRecordDecoder(),
  );
}

export async function fetchLegacyTokenOwnerRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<LegacyTokenOwnerRecord, TAddress>> {
  const maybeAccount = await fetchMaybeLegacyTokenOwnerRecord(
    rpc,
    address,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLegacyTokenOwnerRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<LegacyTokenOwnerRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLegacyTokenOwnerRecord(maybeAccount);
}

export async function fetchAllLegacyTokenOwnerRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<LegacyTokenOwnerRecord>[]> {
  const maybeAccounts = await fetchAllMaybeLegacyTokenOwnerRecord(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLegacyTokenOwnerRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<LegacyTokenOwnerRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLegacyTokenOwnerRecord(maybeAccount),
  );
}

export async function fetchLegacyTokenOwnerRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenOwnerRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<LegacyTokenOwnerRecord>> {
  const maybeAccount = await fetchMaybeLegacyTokenOwnerRecordFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLegacyTokenOwnerRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenOwnerRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<LegacyTokenOwnerRecord>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findTokenOwnerRecordPda(seeds, { programAddress });
  return await fetchMaybeLegacyTokenOwnerRecord(rpc, address, fetchConfig);
}
