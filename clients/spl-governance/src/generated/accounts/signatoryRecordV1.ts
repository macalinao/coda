/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
} from "../types/index.js";

export const SIGNATORY_RECORD_V1_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([24, 32, 149, 3, 147, 254, 107, 100]);

export function getSignatoryRecordV1DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SIGNATORY_RECORD_V1_DISCRIMINATOR,
  );
}

export interface SignatoryRecordV1 {
  discriminator: ReadonlyUint8Array;
  accountType: GovernanceAccountType;
  proposal: Address;
  signatory: Address;
  signedOff: boolean;
}

export interface SignatoryRecordV1Args {
  accountType: GovernanceAccountTypeArgs;
  proposal: Address;
  signatory: Address;
  signedOff: boolean;
}

export function getSignatoryRecordV1Encoder(): FixedSizeEncoder<SignatoryRecordV1Args> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["proposal", getAddressEncoder()],
      ["signatory", getAddressEncoder()],
      ["signedOff", getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SIGNATORY_RECORD_V1_DISCRIMINATOR }),
  );
}

export function getSignatoryRecordV1Decoder(): FixedSizeDecoder<SignatoryRecordV1> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["proposal", getAddressDecoder()],
    ["signatory", getAddressDecoder()],
    ["signedOff", getBooleanDecoder()],
  ]);
}

export function getSignatoryRecordV1Codec(): FixedSizeCodec<
  SignatoryRecordV1Args,
  SignatoryRecordV1
> {
  return combineCodec(
    getSignatoryRecordV1Encoder(),
    getSignatoryRecordV1Decoder(),
  );
}

export function decodeSignatoryRecordV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<SignatoryRecordV1, TAddress>;
export function decodeSignatoryRecordV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<SignatoryRecordV1, TAddress>;
export function decodeSignatoryRecordV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<SignatoryRecordV1, TAddress>
  | MaybeAccount<SignatoryRecordV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSignatoryRecordV1Decoder(),
  );
}

export async function fetchSignatoryRecordV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<SignatoryRecordV1, TAddress>> {
  const maybeAccount = await fetchMaybeSignatoryRecordV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSignatoryRecordV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<SignatoryRecordV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSignatoryRecordV1(maybeAccount);
}

export async function fetchAllSignatoryRecordV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<SignatoryRecordV1>[]> {
  const maybeAccounts = await fetchAllMaybeSignatoryRecordV1(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSignatoryRecordV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<SignatoryRecordV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeSignatoryRecordV1(maybeAccount),
  );
}
