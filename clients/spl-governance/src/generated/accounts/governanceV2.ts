/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { GovernanceSeeds } from "../pdas/index.js";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
  GovernanceConfig,
  GovernanceConfigArgs,
  Reserved119,
  Reserved119Args,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";
import { findGovernancePda } from "../pdas/index.js";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getGovernanceConfigDecoder,
  getGovernanceConfigEncoder,
  getReserved119Decoder,
  getReserved119Encoder,
} from "../types/index.js";

export interface GovernanceV2 {
  accountType: GovernanceAccountType;
  realm: Address;
  governedAccount: Address;
  reserved1: number;
  config: GovernanceConfig;
  reservedV2: Reserved119;
  requiredSignatoriesCount: number;
  activeProposalCount: bigint;
}

export interface GovernanceV2Args {
  accountType: GovernanceAccountTypeArgs;
  realm: Address;
  governedAccount: Address;
  reserved1: number;
  config: GovernanceConfigArgs;
  reservedV2: Reserved119Args;
  requiredSignatoriesCount: number;
  activeProposalCount: number | bigint;
}

export function getGovernanceV2Encoder(): Encoder<GovernanceV2Args> {
  return getStructEncoder([
    ["accountType", getGovernanceAccountTypeEncoder()],
    ["realm", getAddressEncoder()],
    ["governedAccount", getAddressEncoder()],
    ["reserved1", getU32Encoder()],
    ["config", getGovernanceConfigEncoder()],
    ["reservedV2", getReserved119Encoder()],
    ["requiredSignatoriesCount", getU8Encoder()],
    ["activeProposalCount", getU64Encoder()],
  ]);
}

export function getGovernanceV2Decoder(): Decoder<GovernanceV2> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["realm", getAddressDecoder()],
    ["governedAccount", getAddressDecoder()],
    ["reserved1", getU32Decoder()],
    ["config", getGovernanceConfigDecoder()],
    ["reservedV2", getReserved119Decoder()],
    ["requiredSignatoriesCount", getU8Decoder()],
    ["activeProposalCount", getU64Decoder()],
  ]);
}

export function getGovernanceV2Codec(): Codec<GovernanceV2Args, GovernanceV2> {
  return combineCodec(getGovernanceV2Encoder(), getGovernanceV2Decoder());
}

export function decodeGovernanceV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<GovernanceV2, TAddress>;
export function decodeGovernanceV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<GovernanceV2, TAddress>;
export function decodeGovernanceV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<GovernanceV2, TAddress> | MaybeAccount<GovernanceV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGovernanceV2Decoder(),
  );
}

export async function fetchGovernanceV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<GovernanceV2, TAddress>> {
  const maybeAccount = await fetchMaybeGovernanceV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGovernanceV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<GovernanceV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGovernanceV2(maybeAccount);
}

export async function fetchAllGovernanceV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<GovernanceV2>[]> {
  const maybeAccounts = await fetchAllMaybeGovernanceV2(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGovernanceV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<GovernanceV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGovernanceV2(maybeAccount));
}

export async function fetchGovernanceV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: GovernanceSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<GovernanceV2>> {
  const maybeAccount = await fetchMaybeGovernanceV2FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGovernanceV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: GovernanceSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<GovernanceV2>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findGovernancePda(seeds, { programAddress });
  return await fetchMaybeGovernanceV2(rpc, address, fetchConfig);
}
