/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { VoteRecordSeeds } from "../pdas/index.js";
import type { Vote, VoteArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findVoteRecordPda } from "../pdas/index.js";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getVoteDecoder,
  getVoteEncoder,
} from "../types/index.js";

export const VOTE_RECORD_V2_ACCOUNT_TYPE = GovernanceAccountType.VoteRecordV2;

export function getVoteRecordV2AccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(VOTE_RECORD_V2_ACCOUNT_TYPE);
}

export interface VoteRecordV2 {
  accountType: GovernanceAccountType;
  proposal: Address;
  governingTokenOwner: Address;
  isRelinquished: boolean;
  voterWeight: bigint;
  vote: Vote;
  reservedV2: number[];
}

export interface VoteRecordV2Args {
  proposal: Address;
  governingTokenOwner: Address;
  isRelinquished: boolean;
  voterWeight: number | bigint;
  vote: VoteArgs;
  reservedV2: number[];
}

export function getVoteRecordV2Encoder(): Encoder<VoteRecordV2Args> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["proposal", getAddressEncoder()],
      ["governingTokenOwner", getAddressEncoder()],
      ["isRelinquished", getBooleanEncoder()],
      ["voterWeight", getU64Encoder()],
      ["vote", getVoteEncoder()],
      ["reservedV2", getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, accountType: VOTE_RECORD_V2_ACCOUNT_TYPE }),
  );
}

export function getVoteRecordV2Decoder(): Decoder<VoteRecordV2> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["proposal", getAddressDecoder()],
    ["governingTokenOwner", getAddressDecoder()],
    ["isRelinquished", getBooleanDecoder()],
    ["voterWeight", getU64Decoder()],
    ["vote", getVoteDecoder()],
    ["reservedV2", getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getVoteRecordV2Codec(): Codec<VoteRecordV2Args, VoteRecordV2> {
  return combineCodec(getVoteRecordV2Encoder(), getVoteRecordV2Decoder());
}

export function decodeVoteRecordV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<VoteRecordV2, TAddress>;
export function decodeVoteRecordV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<VoteRecordV2, TAddress>;
export function decodeVoteRecordV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<VoteRecordV2, TAddress> | MaybeAccount<VoteRecordV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoteRecordV2Decoder(),
  );
}

export async function fetchVoteRecordV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<VoteRecordV2, TAddress>> {
  const maybeAccount = await fetchMaybeVoteRecordV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoteRecordV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<VoteRecordV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoteRecordV2(maybeAccount);
}

export async function fetchAllVoteRecordV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<VoteRecordV2>[]> {
  const maybeAccounts = await fetchAllMaybeVoteRecordV2(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoteRecordV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<VoteRecordV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVoteRecordV2(maybeAccount));
}

export async function fetchVoteRecordV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoteRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<VoteRecordV2>> {
  const maybeAccount = await fetchMaybeVoteRecordV2FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoteRecordV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoteRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<VoteRecordV2>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findVoteRecordPda(seeds, { programAddress });
  return await fetchMaybeVoteRecordV2(rpc, address, fetchConfig);
}
