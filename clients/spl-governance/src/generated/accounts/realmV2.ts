/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { RealmSeeds } from "../pdas/index.js";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
  RealmConfig,
  RealmConfigArgs,
} from "../types/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findRealmPda } from "../pdas/index.js";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getRealmConfigDecoder,
  getRealmConfigEncoder,
} from "../types/index.js";

export const REALM_V2_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  53, 32, 114, 21, 48, 170, 3, 180,
]);

export function getRealmV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REALM_V2_DISCRIMINATOR);
}

export interface RealmV2 {
  discriminator: ReadonlyUint8Array;
  accountType: GovernanceAccountType;
  communityMint: Address;
  config: RealmConfig;
  reserved: number[];
  legacy1: number;
  authority: Option<Address>;
  name: string;
  reservedV2: number[];
}

export interface RealmV2Args {
  accountType: GovernanceAccountTypeArgs;
  communityMint: Address;
  config: RealmConfigArgs;
  reserved: number[];
  legacy1: number;
  authority: OptionOrNullable<Address>;
  name: string;
  reservedV2: number[];
}

export function getRealmV2Encoder(): Encoder<RealmV2Args> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["communityMint", getAddressEncoder()],
      ["config", getRealmConfigEncoder()],
      ["reserved", getArrayEncoder(getU8Encoder(), { size: 6 })],
      ["legacy1", getU16Encoder()],
      ["authority", getOptionEncoder(getAddressEncoder())],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["reservedV2", getArrayEncoder(getU8Encoder(), { size: 128 })],
    ]),
    (value) => ({ ...value, discriminator: REALM_V2_DISCRIMINATOR }),
  );
}

export function getRealmV2Decoder(): Decoder<RealmV2> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["communityMint", getAddressDecoder()],
    ["config", getRealmConfigDecoder()],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 6 })],
    ["legacy1", getU16Decoder()],
    ["authority", getOptionDecoder(getAddressDecoder())],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["reservedV2", getArrayDecoder(getU8Decoder(), { size: 128 })],
  ]);
}

export function getRealmV2Codec(): Codec<RealmV2Args, RealmV2> {
  return combineCodec(getRealmV2Encoder(), getRealmV2Decoder());
}

export function decodeRealmV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<RealmV2, TAddress>;
export function decodeRealmV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<RealmV2, TAddress>;
export function decodeRealmV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<RealmV2, TAddress> | MaybeAccount<RealmV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRealmV2Decoder(),
  );
}

export async function fetchRealmV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<RealmV2, TAddress>> {
  const maybeAccount = await fetchMaybeRealmV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRealmV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<RealmV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRealmV2(maybeAccount);
}

export async function fetchAllRealmV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<RealmV2>[]> {
  const maybeAccounts = await fetchAllMaybeRealmV2(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRealmV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<RealmV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRealmV2(maybeAccount));
}

export async function fetchRealmV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RealmSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<RealmV2>> {
  const maybeAccount = await fetchMaybeRealmV2FromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRealmV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RealmSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<RealmV2>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findRealmPda(seeds, { programAddress });
  return await fetchMaybeRealmV2(rpc, address, fetchConfig);
}
