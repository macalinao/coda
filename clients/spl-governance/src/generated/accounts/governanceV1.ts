/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { GovernanceSeeds } from "../pdas/index.js";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
  GovernanceConfig,
  GovernanceConfigArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import { findGovernancePda } from "../pdas/index.js";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getGovernanceConfigDecoder,
  getGovernanceConfigEncoder,
} from "../types/index.js";

export const GOVERNANCE_V1_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  49, 251, 55, 156, 61, 96, 92, 180,
]);

export function getGovernanceV1DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GOVERNANCE_V1_DISCRIMINATOR,
  );
}

export interface GovernanceV1 {
  discriminator: ReadonlyUint8Array;
  accountType: GovernanceAccountType;
  realm: Address;
  governedAccount: Address;
  proposalsCount: number;
  config: GovernanceConfig;
}

export interface GovernanceV1Args {
  accountType: GovernanceAccountTypeArgs;
  realm: Address;
  governedAccount: Address;
  proposalsCount: number;
  config: GovernanceConfigArgs;
}

export function getGovernanceV1Encoder(): Encoder<GovernanceV1Args> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["realm", getAddressEncoder()],
      ["governedAccount", getAddressEncoder()],
      ["proposalsCount", getU32Encoder()],
      ["config", getGovernanceConfigEncoder()],
    ]),
    (value) => ({ ...value, discriminator: GOVERNANCE_V1_DISCRIMINATOR }),
  );
}

export function getGovernanceV1Decoder(): Decoder<GovernanceV1> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["realm", getAddressDecoder()],
    ["governedAccount", getAddressDecoder()],
    ["proposalsCount", getU32Decoder()],
    ["config", getGovernanceConfigDecoder()],
  ]);
}

export function getGovernanceV1Codec(): Codec<GovernanceV1Args, GovernanceV1> {
  return combineCodec(getGovernanceV1Encoder(), getGovernanceV1Decoder());
}

export function decodeGovernanceV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<GovernanceV1, TAddress>;
export function decodeGovernanceV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<GovernanceV1, TAddress>;
export function decodeGovernanceV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<GovernanceV1, TAddress> | MaybeAccount<GovernanceV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGovernanceV1Decoder(),
  );
}

export async function fetchGovernanceV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<GovernanceV1, TAddress>> {
  const maybeAccount = await fetchMaybeGovernanceV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGovernanceV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<GovernanceV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGovernanceV1(maybeAccount);
}

export async function fetchAllGovernanceV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<GovernanceV1>[]> {
  const maybeAccounts = await fetchAllMaybeGovernanceV1(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGovernanceV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<GovernanceV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGovernanceV1(maybeAccount));
}

export async function fetchGovernanceV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: GovernanceSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<GovernanceV1>> {
  const maybeAccount = await fetchMaybeGovernanceV1FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGovernanceV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: GovernanceSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<GovernanceV1>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findGovernancePda(seeds, { programAddress });
  return await fetchMaybeGovernanceV1(rpc, address, fetchConfig);
}
