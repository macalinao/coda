/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
} from "@solana/kit";
import type { TokenOwnerRecordSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findTokenOwnerRecordPda } from "../pdas/index.js";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
} from "../types/index.js";

export const TOKEN_OWNER_RECORD_V1_ACCOUNT_TYPE =
  GovernanceAccountType.TokenOwnerRecordV1;

export function getTokenOwnerRecordV1AccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(
    TOKEN_OWNER_RECORD_V1_ACCOUNT_TYPE,
  );
}

export interface TokenOwnerRecordV1 {
  accountType: GovernanceAccountType;
  realm: Address;
  governingTokenMint: Address;
  governingTokenOwner: Address;
  governingTokenDepositAmount: bigint;
  unrelinquishedVotesCount: bigint;
  outstandingProposalCount: number;
  version: number;
  reserved: number[];
  governanceDelegate: Option<Address>;
}

export interface TokenOwnerRecordV1Args {
  realm: Address;
  governingTokenMint: Address;
  governingTokenOwner: Address;
  governingTokenDepositAmount: number | bigint;
  unrelinquishedVotesCount: number | bigint;
  outstandingProposalCount: number;
  version: number;
  reserved: number[];
  governanceDelegate: OptionOrNullable<Address>;
}

export function getTokenOwnerRecordV1Encoder(): Encoder<TokenOwnerRecordV1Args> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["realm", getAddressEncoder()],
      ["governingTokenMint", getAddressEncoder()],
      ["governingTokenOwner", getAddressEncoder()],
      ["governingTokenDepositAmount", getU64Encoder()],
      ["unrelinquishedVotesCount", getU64Encoder()],
      ["outstandingProposalCount", getU8Encoder()],
      ["version", getU8Encoder()],
      ["reserved", getArrayEncoder(getU8Encoder(), { size: 6 })],
      ["governanceDelegate", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, accountType: TOKEN_OWNER_RECORD_V1_ACCOUNT_TYPE }),
  );
}

export function getTokenOwnerRecordV1Decoder(): Decoder<TokenOwnerRecordV1> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["realm", getAddressDecoder()],
    ["governingTokenMint", getAddressDecoder()],
    ["governingTokenOwner", getAddressDecoder()],
    ["governingTokenDepositAmount", getU64Decoder()],
    ["unrelinquishedVotesCount", getU64Decoder()],
    ["outstandingProposalCount", getU8Decoder()],
    ["version", getU8Decoder()],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 6 })],
    ["governanceDelegate", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getTokenOwnerRecordV1Codec(): Codec<
  TokenOwnerRecordV1Args,
  TokenOwnerRecordV1
> {
  return combineCodec(
    getTokenOwnerRecordV1Encoder(),
    getTokenOwnerRecordV1Decoder(),
  );
}

export function decodeTokenOwnerRecordV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<TokenOwnerRecordV1, TAddress>;
export function decodeTokenOwnerRecordV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<TokenOwnerRecordV1, TAddress>;
export function decodeTokenOwnerRecordV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<TokenOwnerRecordV1, TAddress>
  | MaybeAccount<TokenOwnerRecordV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenOwnerRecordV1Decoder(),
  );
}

export async function fetchTokenOwnerRecordV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<TokenOwnerRecordV1, TAddress>> {
  const maybeAccount = await fetchMaybeTokenOwnerRecordV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenOwnerRecordV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<TokenOwnerRecordV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenOwnerRecordV1(maybeAccount);
}

export async function fetchAllTokenOwnerRecordV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<TokenOwnerRecordV1>[]> {
  const maybeAccounts = await fetchAllMaybeTokenOwnerRecordV1(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenOwnerRecordV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<TokenOwnerRecordV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeTokenOwnerRecordV1(maybeAccount),
  );
}

export async function fetchTokenOwnerRecordV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenOwnerRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<TokenOwnerRecordV1>> {
  const maybeAccount = await fetchMaybeTokenOwnerRecordV1FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenOwnerRecordV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenOwnerRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<TokenOwnerRecordV1>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findTokenOwnerRecordPda(seeds, { programAddress });
  return await fetchMaybeTokenOwnerRecordV1(rpc, address, fetchConfig);
}
