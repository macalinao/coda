/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { Slot, SlotArgs } from "../types/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";
import {
  GovernanceAccountType,
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getSlotDecoder,
  getSlotEncoder,
} from "../types/index.js";

export const PROGRAM_METADATA_ACCOUNT_TYPE =
  GovernanceAccountType.ProgramMetadata;

export function getProgramMetadataAccountTypeBytes() {
  return getGovernanceAccountTypeEncoder().encode(
    PROGRAM_METADATA_ACCOUNT_TYPE,
  );
}

export interface ProgramMetadata {
  accountType: GovernanceAccountType;
  updatedAt: Slot;
  version: string;
  reserved: number[];
}

export interface ProgramMetadataArgs {
  updatedAt: SlotArgs;
  version: string;
  reserved: number[];
}

export function getProgramMetadataEncoder(): Encoder<ProgramMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["updatedAt", getSlotEncoder()],
      ["version", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["reserved", getArrayEncoder(getU8Encoder(), { size: 64 })],
    ]),
    (value) => ({ ...value, accountType: PROGRAM_METADATA_ACCOUNT_TYPE }),
  );
}

export function getProgramMetadataDecoder(): Decoder<ProgramMetadata> {
  return getStructDecoder([
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["updatedAt", getSlotDecoder()],
    ["version", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 64 })],
  ]);
}

export function getProgramMetadataCodec(): Codec<
  ProgramMetadataArgs,
  ProgramMetadata
> {
  return combineCodec(getProgramMetadataEncoder(), getProgramMetadataDecoder());
}

export function decodeProgramMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ProgramMetadata, TAddress>;
export function decodeProgramMetadata<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ProgramMetadata, TAddress>;
export function decodeProgramMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<ProgramMetadata, TAddress>
  | MaybeAccount<ProgramMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProgramMetadataDecoder(),
  );
}

export async function fetchProgramMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ProgramMetadata, TAddress>> {
  const maybeAccount = await fetchMaybeProgramMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ProgramMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProgramMetadata(maybeAccount);
}

export async function fetchAllProgramMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ProgramMetadata>[]> {
  const maybeAccounts = await fetchAllMaybeProgramMetadata(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProgramMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ProgramMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProgramMetadata(maybeAccount),
  );
}
