/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { VoteRecordSeeds } from "../pdas/index.js";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
  VoteWeightV1,
  VoteWeightV1Args,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { findVoteRecordPda } from "../pdas/index.js";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getVoteWeightV1Decoder,
  getVoteWeightV1Encoder,
} from "../types/index.js";

export const VOTE_RECORD_V1_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  255, 129, 8, 10, 31, 22, 240, 178,
]);

export function getVoteRecordV1DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VOTE_RECORD_V1_DISCRIMINATOR,
  );
}

export interface VoteRecordV1 {
  discriminator: ReadonlyUint8Array;
  accountType: GovernanceAccountType;
  proposal: Address;
  governingTokenOwner: Address;
  isRelinquished: boolean;
  voteWeight: VoteWeightV1;
}

export interface VoteRecordV1Args {
  accountType: GovernanceAccountTypeArgs;
  proposal: Address;
  governingTokenOwner: Address;
  isRelinquished: boolean;
  voteWeight: VoteWeightV1Args;
}

export function getVoteRecordV1Encoder(): FixedSizeEncoder<VoteRecordV1Args> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["proposal", getAddressEncoder()],
      ["governingTokenOwner", getAddressEncoder()],
      ["isRelinquished", getBooleanEncoder()],
      ["voteWeight", getVoteWeightV1Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VOTE_RECORD_V1_DISCRIMINATOR }),
  );
}

export function getVoteRecordV1Decoder(): FixedSizeDecoder<VoteRecordV1> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["proposal", getAddressDecoder()],
    ["governingTokenOwner", getAddressDecoder()],
    ["isRelinquished", getBooleanDecoder()],
    ["voteWeight", getVoteWeightV1Decoder()],
  ]);
}

export function getVoteRecordV1Codec(): FixedSizeCodec<
  VoteRecordV1Args,
  VoteRecordV1
> {
  return combineCodec(getVoteRecordV1Encoder(), getVoteRecordV1Decoder());
}

export function decodeVoteRecordV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<VoteRecordV1, TAddress>;
export function decodeVoteRecordV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<VoteRecordV1, TAddress>;
export function decodeVoteRecordV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<VoteRecordV1, TAddress> | MaybeAccount<VoteRecordV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoteRecordV1Decoder(),
  );
}

export async function fetchVoteRecordV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<VoteRecordV1, TAddress>> {
  const maybeAccount = await fetchMaybeVoteRecordV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoteRecordV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<VoteRecordV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoteRecordV1(maybeAccount);
}

export async function fetchAllVoteRecordV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<VoteRecordV1>[]> {
  const maybeAccounts = await fetchAllMaybeVoteRecordV1(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoteRecordV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<VoteRecordV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVoteRecordV1(maybeAccount));
}

export async function fetchVoteRecordV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoteRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<VoteRecordV1>> {
  const maybeAccount = await fetchMaybeVoteRecordV1FromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoteRecordV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoteRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<VoteRecordV1>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findVoteRecordPda(seeds, { programAddress });
  return await fetchMaybeVoteRecordV1(rpc, address, fetchConfig);
}
