/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { RealmConfigSeeds } from "../pdas/index.js";
import type {
  GovernanceAccountType,
  GovernanceAccountTypeArgs,
  GoverningTokenConfig,
  GoverningTokenConfigArgs,
  Reserved110,
  Reserved110Args,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { findRealmConfigPda } from "../pdas/index.js";
import {
  getGovernanceAccountTypeDecoder,
  getGovernanceAccountTypeEncoder,
  getGoverningTokenConfigDecoder,
  getGoverningTokenConfigEncoder,
  getReserved110Decoder,
  getReserved110Encoder,
} from "../types/index.js";

export const REALM_CONFIG_ACCOUNT_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([13, 244, 36, 40, 108, 112, 111, 60]);

export function getRealmConfigAccountDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REALM_CONFIG_ACCOUNT_DISCRIMINATOR,
  );
}

export interface RealmConfigAccount {
  discriminator: ReadonlyUint8Array;
  accountType: GovernanceAccountType;
  realm: Address;
  communityTokenConfig: GoverningTokenConfig;
  councilTokenConfig: GoverningTokenConfig;
  reserved: Reserved110;
}

export interface RealmConfigAccountArgs {
  accountType: GovernanceAccountTypeArgs;
  realm: Address;
  communityTokenConfig: GoverningTokenConfigArgs;
  councilTokenConfig: GoverningTokenConfigArgs;
  reserved: Reserved110Args;
}

export function getRealmConfigAccountEncoder(): Encoder<RealmConfigAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accountType", getGovernanceAccountTypeEncoder()],
      ["realm", getAddressEncoder()],
      ["communityTokenConfig", getGoverningTokenConfigEncoder()],
      ["councilTokenConfig", getGoverningTokenConfigEncoder()],
      ["reserved", getReserved110Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REALM_CONFIG_ACCOUNT_DISCRIMINATOR,
    }),
  );
}

export function getRealmConfigAccountDecoder(): Decoder<RealmConfigAccount> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accountType", getGovernanceAccountTypeDecoder()],
    ["realm", getAddressDecoder()],
    ["communityTokenConfig", getGoverningTokenConfigDecoder()],
    ["councilTokenConfig", getGoverningTokenConfigDecoder()],
    ["reserved", getReserved110Decoder()],
  ]);
}

export function getRealmConfigAccountCodec(): Codec<
  RealmConfigAccountArgs,
  RealmConfigAccount
> {
  return combineCodec(
    getRealmConfigAccountEncoder(),
    getRealmConfigAccountDecoder(),
  );
}

export function decodeRealmConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<RealmConfigAccount, TAddress>;
export function decodeRealmConfigAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<RealmConfigAccount, TAddress>;
export function decodeRealmConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<RealmConfigAccount, TAddress>
  | MaybeAccount<RealmConfigAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRealmConfigAccountDecoder(),
  );
}

export async function fetchRealmConfigAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<RealmConfigAccount, TAddress>> {
  const maybeAccount = await fetchMaybeRealmConfigAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRealmConfigAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<RealmConfigAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRealmConfigAccount(maybeAccount);
}

export async function fetchAllRealmConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<RealmConfigAccount>[]> {
  const maybeAccounts = await fetchAllMaybeRealmConfigAccount(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRealmConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<RealmConfigAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeRealmConfigAccount(maybeAccount),
  );
}

export async function fetchRealmConfigAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RealmConfigSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<RealmConfigAccount>> {
  const maybeAccount = await fetchMaybeRealmConfigAccountFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRealmConfigAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RealmConfigSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<RealmConfigAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findRealmConfigPda(seeds, { programAddress });
  return await fetchMaybeRealmConfigAccount(rpc, address, fetchConfig);
}
