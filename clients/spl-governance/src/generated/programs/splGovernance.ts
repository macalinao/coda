/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "@solana/kit";
import type {
  ParsedAddRequiredSignatoryInstruction,
  ParsedAddSignatoryInstruction,
  ParsedCancelProposalInstruction,
  ParsedCastVoteInstruction,
  ParsedCompleteProposalInstruction,
  ParsedCreateGovernanceInstruction,
  ParsedCreateMintGovernanceInstruction,
  ParsedCreateNativeTreasuryInstruction,
  ParsedCreateProgramGovernanceInstruction,
  ParsedCreateProposalInstruction,
  ParsedCreateRealmInstruction,
  ParsedCreateTokenGovernanceInstruction,
  ParsedCreateTokenOwnerRecordInstruction,
  ParsedDepositGoverningTokensInstruction,
  ParsedExecuteTransactionInstruction,
  ParsedFinalizeVoteInstruction,
  ParsedFlagTransactionErrorInstruction,
  ParsedInsertTransactionInstruction,
  ParsedLegacy1Instruction,
  ParsedRefundProposalDepositInstruction,
  ParsedRelinquishVoteInstruction,
  ParsedRemoveRequiredSignatoryInstruction,
  ParsedRemoveTransactionInstruction,
  ParsedRevokeGoverningTokensInstruction,
  ParsedSetGovernanceConfigInstruction,
  ParsedSetGovernanceDelegateInstruction,
  ParsedSetRealmAuthorityInstruction,
  ParsedSetRealmConfigInstruction,
  ParsedSignOffProposalInstruction,
  ParsedUpdateProgramMetadataInstruction,
  ParsedWithdrawGoverningTokensInstruction,
} from "../instructions/index.js";
import { containsBytes, getU8Encoder } from "@solana/kit";

export const SPL_GOVERNANCE_PROGRAM_ADDRESS =
  "GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw" as Address<"GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw">;

export enum SplGovernanceAccount {
  GovernanceV2 = 0,
  RealmV1 = 1,
  TokenOwnerRecordV1 = 2,
  GovernanceV1 = 3,
  ProposalV1 = 4,
  SignatoryRecordV1 = 5,
  ProposalInstructionV1 = 6,
  VoteRecordV1 = 7,
  ProgramMetadata = 8,
  ProposalV2 = 9,
  ProposalDeposit = 10,
  ProposalTransactionV2 = 11,
  RealmV2 = 12,
  RealmConfigAccount = 13,
  RequiredSignatory = 14,
  SignatoryRecordV2 = 15,
  TokenOwnerRecordV2 = 16,
  LegacyTokenOwnerRecord = 17,
  VoteRecordV2 = 18,
}

export enum SplGovernanceInstruction {
  CreateRealm = 0,
  DepositGoverningTokens = 1,
  WithdrawGoverningTokens = 2,
  SetGovernanceDelegate = 3,
  CreateGovernance = 4,
  CreateProgramGovernance = 5,
  CreateProposal = 6,
  AddSignatory = 7,
  Legacy1 = 8,
  InsertTransaction = 9,
  RemoveTransaction = 10,
  CancelProposal = 11,
  SignOffProposal = 12,
  CastVote = 13,
  FinalizeVote = 14,
  RelinquishVote = 15,
  ExecuteTransaction = 16,
  CreateMintGovernance = 17,
  CreateTokenGovernance = 18,
  SetGovernanceConfig = 19,
  FlagTransactionError = 20,
  SetRealmAuthority = 21,
  SetRealmConfig = 22,
  CreateTokenOwnerRecord = 23,
  UpdateProgramMetadata = 24,
  CreateNativeTreasury = 25,
  RevokeGoverningTokens = 26,
  RefundProposalDeposit = 27,
  CompleteProposal = 28,
  AddRequiredSignatory = 29,
  RemoveRequiredSignatory = 30,
}

export function identifySplGovernanceInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SplGovernanceInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SplGovernanceInstruction.CreateRealm;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SplGovernanceInstruction.DepositGoverningTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SplGovernanceInstruction.WithdrawGoverningTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return SplGovernanceInstruction.SetGovernanceDelegate;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return SplGovernanceInstruction.CreateGovernance;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return SplGovernanceInstruction.CreateProgramGovernance;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return SplGovernanceInstruction.CreateProposal;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return SplGovernanceInstruction.AddSignatory;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return SplGovernanceInstruction.Legacy1;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return SplGovernanceInstruction.InsertTransaction;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return SplGovernanceInstruction.RemoveTransaction;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return SplGovernanceInstruction.CancelProposal;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return SplGovernanceInstruction.SignOffProposal;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return SplGovernanceInstruction.CastVote;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return SplGovernanceInstruction.FinalizeVote;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return SplGovernanceInstruction.RelinquishVote;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return SplGovernanceInstruction.ExecuteTransaction;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return SplGovernanceInstruction.CreateMintGovernance;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return SplGovernanceInstruction.CreateTokenGovernance;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return SplGovernanceInstruction.SetGovernanceConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return SplGovernanceInstruction.FlagTransactionError;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return SplGovernanceInstruction.SetRealmAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return SplGovernanceInstruction.SetRealmConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return SplGovernanceInstruction.CreateTokenOwnerRecord;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return SplGovernanceInstruction.UpdateProgramMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return SplGovernanceInstruction.CreateNativeTreasury;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return SplGovernanceInstruction.RevokeGoverningTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(27), 0)) {
    return SplGovernanceInstruction.RefundProposalDeposit;
  }
  if (containsBytes(data, getU8Encoder().encode(28), 0)) {
    return SplGovernanceInstruction.CompleteProposal;
  }
  if (containsBytes(data, getU8Encoder().encode(29), 0)) {
    return SplGovernanceInstruction.AddRequiredSignatory;
  }
  if (containsBytes(data, getU8Encoder().encode(30), 0)) {
    return SplGovernanceInstruction.RemoveRequiredSignatory;
  }
  throw new Error(
    "The provided instruction could not be identified as a splGovernance instruction.",
  );
}

export type ParsedSplGovernanceInstruction<
  TProgram extends string = "GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw",
> =
  | ({
      instructionType: SplGovernanceInstruction.CreateRealm;
    } & ParsedCreateRealmInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.DepositGoverningTokens;
    } & ParsedDepositGoverningTokensInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.WithdrawGoverningTokens;
    } & ParsedWithdrawGoverningTokensInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetGovernanceDelegate;
    } & ParsedSetGovernanceDelegateInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateGovernance;
    } & ParsedCreateGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateProgramGovernance;
    } & ParsedCreateProgramGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateProposal;
    } & ParsedCreateProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.AddSignatory;
    } & ParsedAddSignatoryInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.Legacy1;
    } & ParsedLegacy1Instruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.InsertTransaction;
    } & ParsedInsertTransactionInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RemoveTransaction;
    } & ParsedRemoveTransactionInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CancelProposal;
    } & ParsedCancelProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SignOffProposal;
    } & ParsedSignOffProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.FinalizeVote;
    } & ParsedFinalizeVoteInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RelinquishVote;
    } & ParsedRelinquishVoteInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.ExecuteTransaction;
    } & ParsedExecuteTransactionInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateMintGovernance;
    } & ParsedCreateMintGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateTokenGovernance;
    } & ParsedCreateTokenGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetGovernanceConfig;
    } & ParsedSetGovernanceConfigInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.FlagTransactionError;
    } & ParsedFlagTransactionErrorInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetRealmAuthority;
    } & ParsedSetRealmAuthorityInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetRealmConfig;
    } & ParsedSetRealmConfigInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateTokenOwnerRecord;
    } & ParsedCreateTokenOwnerRecordInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.UpdateProgramMetadata;
    } & ParsedUpdateProgramMetadataInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateNativeTreasury;
    } & ParsedCreateNativeTreasuryInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RevokeGoverningTokens;
    } & ParsedRevokeGoverningTokensInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RefundProposalDeposit;
    } & ParsedRefundProposalDepositInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CompleteProposal;
    } & ParsedCompleteProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.AddRequiredSignatory;
    } & ParsedAddRequiredSignatoryInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RemoveRequiredSignatory;
    } & ParsedRemoveRequiredSignatoryInstruction<TProgram>);
