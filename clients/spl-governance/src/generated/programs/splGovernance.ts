/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "@solana/kit";
import type {
  ParsedAddRequiredSignatoryInstruction,
  ParsedAddSignatoryInstruction,
  ParsedCancelProposalInstruction,
  ParsedCastVoteInstruction,
  ParsedCompleteProposalInstruction,
  ParsedCreateGovernanceInstruction,
  ParsedCreateMintGovernanceInstruction,
  ParsedCreateNativeTreasuryInstruction,
  ParsedCreateProgramGovernanceInstruction,
  ParsedCreateProposalInstruction,
  ParsedCreateRealmInstruction,
  ParsedCreateTokenGovernanceInstruction,
  ParsedCreateTokenOwnerRecordInstruction,
  ParsedDepositGoverningTokensInstruction,
  ParsedExecuteTransactionInstruction,
  ParsedFinalizeVoteInstruction,
  ParsedFlagTransactionErrorInstruction,
  ParsedInsertTransactionInstruction,
  ParsedLegacy1Instruction,
  ParsedRefundProposalDepositInstruction,
  ParsedRelinquishVoteInstruction,
  ParsedRemoveRequiredSignatoryInstruction,
  ParsedRemoveTransactionInstruction,
  ParsedRevokeGoverningTokensInstruction,
  ParsedSetGovernanceConfigInstruction,
  ParsedSetGovernanceDelegateInstruction,
  ParsedSetRealmAuthorityInstruction,
  ParsedSetRealmConfigInstruction,
  ParsedSignOffProposalInstruction,
  ParsedUpdateProgramMetadataInstruction,
  ParsedWithdrawGoverningTokensInstruction,
} from "../instructions/index.js";
import { containsBytes, fixEncoderSize, getBytesEncoder } from "@solana/kit";

export const SPL_GOVERNANCE_PROGRAM_ADDRESS =
  "GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw" as Address<"GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw">;

export enum SplGovernanceAccount {
  GovernanceV2 = 0,
  RealmV1 = 1,
  TokenOwnerRecordV1 = 2,
  GovernanceV1 = 3,
  ProposalV1 = 4,
  SignatoryRecordV1 = 5,
  ProposalInstructionV1 = 6,
  VoteRecordV1 = 7,
  ProgramMetadata = 8,
  ProposalV2 = 9,
  ProposalDeposit = 10,
  ProposalTransactionV2 = 11,
  RealmV2 = 12,
  RealmConfigAccount = 13,
  RequiredSignatory = 14,
  SignatoryRecordV2 = 15,
  TokenOwnerRecordV2 = 16,
  LegacyTokenOwnerRecord = 17,
  VoteRecordV2 = 18,
}

export function identifySplGovernanceAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SplGovernanceAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 81, 148, 6, 240, 242, 22, 251]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.GovernanceV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 90, 21, 174, 119, 136, 214, 93]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.RealmV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 65, 45, 193, 39, 176, 56, 7]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.TokenOwnerRecordV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([49, 251, 55, 156, 61, 96, 92, 180]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.GovernanceV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 93, 74, 144, 204, 23, 162, 229]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.ProposalV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 32, 149, 3, 147, 254, 107, 100]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.SignatoryRecordV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 191, 144, 217, 179, 141, 202, 181]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.ProposalInstructionV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 129, 8, 10, 31, 22, 240, 178]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.VoteRecordV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 19, 251, 54, 185, 115, 178, 108]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.ProgramMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 68, 195, 218, 88, 123, 211, 172]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.ProposalV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([189, 70, 125, 55, 15, 185, 171, 24]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.ProposalDeposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([77, 73, 87, 166, 206, 61, 96, 217]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.ProposalTransactionV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 32, 114, 21, 48, 170, 3, 180]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.RealmV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 244, 36, 40, 108, 112, 111, 60]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.RealmConfigAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 254, 199, 24, 189, 242, 178, 123]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.RequiredSignatory;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 66, 186, 240, 53, 184, 250, 20]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.SignatoryRecordV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 244, 129, 164, 125, 243, 201, 246]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.TokenOwnerRecordV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 242, 131, 13, 167, 170, 255, 38]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.LegacyTokenOwnerRecord;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 196, 210, 20, 98, 64, 155, 142]),
      ),
      0,
    )
  ) {
    return SplGovernanceAccount.VoteRecordV2;
  }
  throw new Error(
    "The provided account could not be identified as a splGovernance account.",
  );
}

export enum SplGovernanceInstruction {
  CreateRealm = 0,
  DepositGoverningTokens = 1,
  WithdrawGoverningTokens = 2,
  SetGovernanceDelegate = 3,
  CreateGovernance = 4,
  CreateProgramGovernance = 5,
  CreateProposal = 6,
  AddSignatory = 7,
  Legacy1 = 8,
  InsertTransaction = 9,
  RemoveTransaction = 10,
  CancelProposal = 11,
  SignOffProposal = 12,
  CastVote = 13,
  FinalizeVote = 14,
  RelinquishVote = 15,
  ExecuteTransaction = 16,
  CreateMintGovernance = 17,
  CreateTokenGovernance = 18,
  SetGovernanceConfig = 19,
  FlagTransactionError = 20,
  SetRealmAuthority = 21,
  SetRealmConfig = 22,
  CreateTokenOwnerRecord = 23,
  UpdateProgramMetadata = 24,
  CreateNativeTreasury = 25,
  RevokeGoverningTokens = 26,
  RefundProposalDeposit = 27,
  CompleteProposal = 28,
  AddRequiredSignatory = 29,
  RemoveRequiredSignatory = 30,
}

export function identifySplGovernanceInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SplGovernanceInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 147, 95, 250, 91, 1, 118, 220]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateRealm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 227, 56, 9, 82, 30, 79, 235]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.DepositGoverningTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 71, 255, 130, 236, 41, 93, 103]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.WithdrawGoverningTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([89, 7, 44, 62, 31, 17, 147, 223]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.SetGovernanceDelegate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([134, 46, 105, 91, 27, 91, 99, 157]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateGovernance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 18, 5, 95, 19, 219, 203, 48]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateProgramGovernance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 116, 68, 174, 216, 160, 198, 22]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([210, 233, 221, 216, 216, 181, 115, 56]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.AddSignatory;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 194, 70, 247, 183, 2, 255, 118]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.Legacy1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 8, 35, 192, 19, 26, 140, 38]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.InsertTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 129, 185, 56, 38, 17, 111, 190]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.RemoveTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 74, 128, 146, 19, 65, 39, 23]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CancelProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 155, 109, 27, 119, 75, 170, 65]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.SignOffProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 212, 15, 189, 69, 180, 69, 151]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CastVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 176, 6, 248, 249, 134, 146, 56]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.FinalizeVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 15, 192, 13, 10, 156, 182, 135]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.RelinquishVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 173, 49, 91, 235, 24, 68, 19]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.ExecuteTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 126, 79, 244, 242, 122, 116, 208]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateMintGovernance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 228, 177, 222, 178, 221, 96, 138]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateTokenGovernance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 85, 201, 96, 219, 241, 95, 58]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.SetGovernanceConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 7, 179, 64, 49, 129, 181, 5]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.FlagTransactionError;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 76, 56, 99, 3, 85, 157, 154]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.SetRealmAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 167, 208, 103, 24, 172, 112, 232]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.SetRealmConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([47, 45, 190, 114, 133, 246, 163, 222]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateTokenOwnerRecord;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 19, 75, 78, 235, 229, 180, 114]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.UpdateProgramMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 91, 231, 66, 73, 164, 213, 110]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CreateNativeTreasury;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([32, 197, 228, 228, 34, 131, 105, 133]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.RevokeGoverningTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 201, 11, 99, 38, 148, 163, 155]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.RefundProposalDeposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([3, 48, 26, 135, 144, 239, 5, 169]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.CompleteProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 75, 49, 70, 90, 15, 114, 200]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.AddRequiredSignatory;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 156, 139, 89, 244, 230, 204, 130]),
      ),
      0,
    )
  ) {
    return SplGovernanceInstruction.RemoveRequiredSignatory;
  }
  throw new Error(
    "The provided instruction could not be identified as a splGovernance instruction.",
  );
}

export type ParsedSplGovernanceInstruction<
  TProgram extends string = "GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw",
> =
  | ({
      instructionType: SplGovernanceInstruction.CreateRealm;
    } & ParsedCreateRealmInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.DepositGoverningTokens;
    } & ParsedDepositGoverningTokensInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.WithdrawGoverningTokens;
    } & ParsedWithdrawGoverningTokensInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetGovernanceDelegate;
    } & ParsedSetGovernanceDelegateInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateGovernance;
    } & ParsedCreateGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateProgramGovernance;
    } & ParsedCreateProgramGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateProposal;
    } & ParsedCreateProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.AddSignatory;
    } & ParsedAddSignatoryInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.Legacy1;
    } & ParsedLegacy1Instruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.InsertTransaction;
    } & ParsedInsertTransactionInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RemoveTransaction;
    } & ParsedRemoveTransactionInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CancelProposal;
    } & ParsedCancelProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SignOffProposal;
    } & ParsedSignOffProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.FinalizeVote;
    } & ParsedFinalizeVoteInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RelinquishVote;
    } & ParsedRelinquishVoteInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.ExecuteTransaction;
    } & ParsedExecuteTransactionInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateMintGovernance;
    } & ParsedCreateMintGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateTokenGovernance;
    } & ParsedCreateTokenGovernanceInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetGovernanceConfig;
    } & ParsedSetGovernanceConfigInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.FlagTransactionError;
    } & ParsedFlagTransactionErrorInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetRealmAuthority;
    } & ParsedSetRealmAuthorityInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.SetRealmConfig;
    } & ParsedSetRealmConfigInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateTokenOwnerRecord;
    } & ParsedCreateTokenOwnerRecordInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.UpdateProgramMetadata;
    } & ParsedUpdateProgramMetadataInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CreateNativeTreasury;
    } & ParsedCreateNativeTreasuryInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RevokeGoverningTokens;
    } & ParsedRevokeGoverningTokensInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RefundProposalDeposit;
    } & ParsedRefundProposalDepositInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.CompleteProposal;
    } & ParsedCompleteProposalInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.AddRequiredSignatory;
    } & ParsedAddRequiredSignatoryInstruction<TProgram>)
  | ({
      instructionType: SplGovernanceInstruction.RemoveRequiredSignatory;
    } & ParsedRemoveRequiredSignatoryInstruction<TProgram>);
