/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
} from "@solana/kit";
import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";

export interface BurnArgs {
  __kind: "V1";
  amount: bigint;
}

export interface BurnArgsArgs {
  __kind: "V1";
  amount: number | bigint;
}

export function getBurnArgsEncoder(): FixedSizeEncoder<BurnArgsArgs> {
  return getDiscriminatedUnionEncoder([
    ["V1", getStructEncoder([["amount", getU64Encoder()]])],
  ]) as FixedSizeEncoder<BurnArgsArgs>;
}

export function getBurnArgsDecoder(): FixedSizeDecoder<BurnArgs> {
  return getDiscriminatedUnionDecoder([
    ["V1", getStructDecoder([["amount", getU64Decoder()]])],
  ]) as FixedSizeDecoder<BurnArgs>;
}

export function getBurnArgsCodec(): FixedSizeCodec<BurnArgsArgs, BurnArgs> {
  return combineCodec(getBurnArgsEncoder(), getBurnArgsDecoder());
}

// Data Enum Helpers.
export function burnArgs(
  kind: "V1",
  data: GetDiscriminatedUnionVariantContent<BurnArgsArgs, "__kind", "V1">,
): GetDiscriminatedUnionVariant<BurnArgsArgs, "__kind", "V1">;
export function burnArgs<K extends BurnArgsArgs["__kind"], Data>(
  kind: K,
  data?: Data,
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBurnArgs<K extends BurnArgs["__kind"]>(
  kind: K,
  value: BurnArgs,
): value is BurnArgs & { __kind: K } {
  return value.__kind === kind;
}
