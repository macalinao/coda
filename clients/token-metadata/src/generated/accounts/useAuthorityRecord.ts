/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type { Key, KeyArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";
import { getKeyDecoder, getKeyEncoder } from "../types/index.js";

export interface UseAuthorityRecord {
  key: Key;
  allowedUses: bigint;
  bump: number;
}

export interface UseAuthorityRecordArgs {
  key: KeyArgs;
  allowedUses: number | bigint;
  bump: number;
}

export function getUseAuthorityRecordEncoder(): FixedSizeEncoder<UseAuthorityRecordArgs> {
  return getStructEncoder([
    ["key", getKeyEncoder()],
    ["allowedUses", getU64Encoder()],
    ["bump", getU8Encoder()],
  ]);
}

export function getUseAuthorityRecordDecoder(): FixedSizeDecoder<UseAuthorityRecord> {
  return getStructDecoder([
    ["key", getKeyDecoder()],
    ["allowedUses", getU64Decoder()],
    ["bump", getU8Decoder()],
  ]);
}

export function getUseAuthorityRecordCodec(): FixedSizeCodec<
  UseAuthorityRecordArgs,
  UseAuthorityRecord
> {
  return combineCodec(
    getUseAuthorityRecordEncoder(),
    getUseAuthorityRecordDecoder(),
  );
}

export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<UseAuthorityRecord, TAddress>;
export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<UseAuthorityRecord, TAddress>;
export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<UseAuthorityRecord, TAddress>
  | MaybeAccount<UseAuthorityRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUseAuthorityRecordDecoder(),
  );
}

export async function fetchUseAuthorityRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<UseAuthorityRecord, TAddress>> {
  const maybeAccount = await fetchMaybeUseAuthorityRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUseAuthorityRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<UseAuthorityRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUseAuthorityRecord(maybeAccount);
}

export async function fetchAllUseAuthorityRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<UseAuthorityRecord>[]> {
  const maybeAccounts = await fetchAllMaybeUseAuthorityRecord(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUseAuthorityRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<UseAuthorityRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUseAuthorityRecord(maybeAccount),
  );
}
