/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DEPRECATED_MINT_PRINTING_TOKENS_VIA_TOKEN_DISCRIMINATOR = 8;

export function getDeprecatedMintPrintingTokensViaTokenDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(
    DEPRECATED_MINT_PRINTING_TOKENS_VIA_TOKEN_DISCRIMINATOR,
  );
}

export type DeprecatedMintPrintingTokensViaTokenInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountDestination extends string | AccountMeta = string,
  TAccountToken extends string | AccountMeta = string,
  TAccountOneTimePrintingAuthorizationMint extends
    | string
    | AccountMeta = string,
  TAccountPrintingMint extends string | AccountMeta = string,
  TAccountBurnAuthority extends string | AccountMeta = string,
  TAccountMetadata extends string | AccountMeta = string,
  TAccountMasterEdition extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountToken extends string
        ? WritableAccount<TAccountToken>
        : TAccountToken,
      TAccountOneTimePrintingAuthorizationMint extends string
        ? WritableAccount<TAccountOneTimePrintingAuthorizationMint>
        : TAccountOneTimePrintingAuthorizationMint,
      TAccountPrintingMint extends string
        ? WritableAccount<TAccountPrintingMint>
        : TAccountPrintingMint,
      TAccountBurnAuthority extends string
        ? ReadonlySignerAccount<TAccountBurnAuthority> &
            AccountSignerMeta<TAccountBurnAuthority>
        : TAccountBurnAuthority,
      TAccountMetadata extends string
        ? ReadonlyAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMasterEdition extends string
        ? ReadonlyAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface DeprecatedMintPrintingTokensViaTokenInstructionData {
  discriminator: number;
}

export interface DeprecatedMintPrintingTokensViaTokenInstructionDataArgs {}

export function getDeprecatedMintPrintingTokensViaTokenInstructionDataEncoder(): FixedSizeEncoder<DeprecatedMintPrintingTokensViaTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: DEPRECATED_MINT_PRINTING_TOKENS_VIA_TOKEN_DISCRIMINATOR,
    }),
  );
}

export function getDeprecatedMintPrintingTokensViaTokenInstructionDataDecoder(): FixedSizeDecoder<DeprecatedMintPrintingTokensViaTokenInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getDeprecatedMintPrintingTokensViaTokenInstructionDataCodec(): FixedSizeCodec<
  DeprecatedMintPrintingTokensViaTokenInstructionDataArgs,
  DeprecatedMintPrintingTokensViaTokenInstructionData
> {
  return combineCodec(
    getDeprecatedMintPrintingTokensViaTokenInstructionDataEncoder(),
    getDeprecatedMintPrintingTokensViaTokenInstructionDataDecoder(),
  );
}

export interface DeprecatedMintPrintingTokensViaTokenInput<
  TAccountDestination extends string = string,
  TAccountToken extends string = string,
  TAccountOneTimePrintingAuthorizationMint extends string = string,
  TAccountPrintingMint extends string = string,
  TAccountBurnAuthority extends string = string,
  TAccountMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> {
  /** Destination account */
  destination: Address<TAccountDestination>;
  /** Token account containing one time authorization token */
  token: Address<TAccountToken>;
  /** One time authorization mint */
  oneTimePrintingAuthorizationMint: Address<TAccountOneTimePrintingAuthorizationMint>;
  /** Printing mint */
  printingMint: Address<TAccountPrintingMint>;
  /** Burn authority */
  burnAuthority: TransactionSigner<TAccountBurnAuthority>;
  /** Metadata key (pda of ['metadata', program id, mint id]) */
  metadata: Address<TAccountMetadata>;
  /** Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition']) */
  masterEdition: Address<TAccountMasterEdition>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Rent */
  rent?: Address<TAccountRent>;
}

export function getDeprecatedMintPrintingTokensViaTokenInstruction<
  TAccountDestination extends string,
  TAccountToken extends string,
  TAccountOneTimePrintingAuthorizationMint extends string,
  TAccountPrintingMint extends string,
  TAccountBurnAuthority extends string,
  TAccountMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: DeprecatedMintPrintingTokensViaTokenInput<
    TAccountDestination,
    TAccountToken,
    TAccountOneTimePrintingAuthorizationMint,
    TAccountPrintingMint,
    TAccountBurnAuthority,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): DeprecatedMintPrintingTokensViaTokenInstruction<
  TProgramAddress,
  TAccountDestination,
  TAccountToken,
  TAccountOneTimePrintingAuthorizationMint,
  TAccountPrintingMint,
  TAccountBurnAuthority,
  TAccountMetadata,
  TAccountMasterEdition,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    destination: { value: input.destination ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    oneTimePrintingAuthorizationMint: {
      value: input.oneTimePrintingAuthorizationMint ?? null,
      isWritable: true,
    },
    printingMint: { value: input.printingMint ?? null, isWritable: true },
    burnAuthority: { value: input.burnAuthority ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: false },
    masterEdition: { value: input.masterEdition ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.oneTimePrintingAuthorizationMint),
      getAccountMeta(accounts.printingMint),
      getAccountMeta(accounts.burnAuthority),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getDeprecatedMintPrintingTokensViaTokenInstructionDataEncoder().encode(
      {},
    ),
    programAddress,
  } as DeprecatedMintPrintingTokensViaTokenInstruction<
    TProgramAddress,
    TAccountDestination,
    TAccountToken,
    TAccountOneTimePrintingAuthorizationMint,
    TAccountPrintingMint,
    TAccountBurnAuthority,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountTokenProgram,
    TAccountRent
  >);
}

export interface ParsedDeprecatedMintPrintingTokensViaTokenInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Destination account */
    destination: TAccountMetas[0];
    /** Token account containing one time authorization token */
    token: TAccountMetas[1];
    /** One time authorization mint */
    oneTimePrintingAuthorizationMint: TAccountMetas[2];
    /** Printing mint */
    printingMint: TAccountMetas[3];
    /** Burn authority */
    burnAuthority: TAccountMetas[4];
    /** Metadata key (pda of ['metadata', program id, mint id]) */
    metadata: TAccountMetas[5];
    /** Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition']) */
    masterEdition: TAccountMetas[6];
    /** Token program */
    tokenProgram: TAccountMetas[7];
    /** Rent */
    rent: TAccountMetas[8];
  };
  data: DeprecatedMintPrintingTokensViaTokenInstructionData;
}

export function parseDeprecatedMintPrintingTokensViaTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDeprecatedMintPrintingTokensViaTokenInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      destination: getNextAccount(),
      token: getNextAccount(),
      oneTimePrintingAuthorizationMint: getNextAccount(),
      printingMint: getNextAccount(),
      burnAuthority: getNextAccount(),
      metadata: getNextAccount(),
      masterEdition: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getDeprecatedMintPrintingTokensViaTokenInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
