/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { VerificationArgs, VerificationArgsArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getVerificationArgsDecoder,
  getVerificationArgsEncoder,
} from "../types/index.js";

export const UNVERIFY_DISCRIMINATOR = 53;

export function getUnverifyDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(UNVERIFY_DISCRIMINATOR);
}

export type UnverifyInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountDelegateRecord extends string | AccountMeta = string,
  TAccountMetadata extends string | AccountMeta = string,
  TAccountCollectionMint extends string | AccountMeta = string,
  TAccountCollectionMetadata extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TAccountSysvarInstructions extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountDelegateRecord extends string
        ? ReadonlyAccount<TAccountDelegateRecord>
        : TAccountDelegateRecord,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountCollectionMint extends string
        ? ReadonlyAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      ...TRemainingAccounts,
    ]
  >;

export interface UnverifyInstructionData {
  discriminator: number;
  verificationArgs: VerificationArgs;
}

export interface UnverifyInstructionDataArgs {
  verificationArgs: VerificationArgsArgs;
}

export function getUnverifyInstructionDataEncoder(): FixedSizeEncoder<UnverifyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["verificationArgs", getVerificationArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UNVERIFY_DISCRIMINATOR }),
  );
}

export function getUnverifyInstructionDataDecoder(): FixedSizeDecoder<UnverifyInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["verificationArgs", getVerificationArgsDecoder()],
  ]);
}

export function getUnverifyInstructionDataCodec(): FixedSizeCodec<
  UnverifyInstructionDataArgs,
  UnverifyInstructionData
> {
  return combineCodec(
    getUnverifyInstructionDataEncoder(),
    getUnverifyInstructionDataDecoder(),
  );
}

export interface UnverifyInput<
  TAccountAuthority extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountMetadata extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
> {
  /** Creator to verify, collection (or metadata if parent burned) update authority or delegate */
  authority: TransactionSigner<TAccountAuthority>;
  /** Delegate record PDA */
  delegateRecord?: Address<TAccountDelegateRecord>;
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Mint of the Collection */
  collectionMint?: Address<TAccountCollectionMint>;
  /** Metadata Account of the Collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  /** System program */
  systemProgram: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions: Address<TAccountSysvarInstructions>;
  verificationArgs: UnverifyInstructionDataArgs["verificationArgs"];
}

export function getUnverifyInstruction<
  TAccountAuthority extends string,
  TAccountDelegateRecord extends string,
  TAccountMetadata extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: UnverifyInput<
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountMetadata,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountSystemProgram,
    TAccountSysvarInstructions
  >,
  config?: { programAddress?: TProgramAddress },
): UnverifyInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountDelegateRecord,
  TAccountMetadata,
  TAccountCollectionMint,
  TAccountCollectionMetadata,
  TAccountSystemProgram,
  TAccountSysvarInstructions
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    delegateRecord: { value: input.delegateRecord ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.delegateRecord),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
    ],
    data: getUnverifyInstructionDataEncoder().encode(
      args as UnverifyInstructionDataArgs,
    ),
    programAddress,
  } as UnverifyInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountMetadata,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountSystemProgram,
    TAccountSysvarInstructions
  >);
}

export interface ParsedUnverifyInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Creator to verify, collection (or metadata if parent burned) update authority or delegate */
    authority: TAccountMetas[0];
    /** Delegate record PDA */
    delegateRecord?: TAccountMetas[1] | undefined;
    /** Metadata account */
    metadata: TAccountMetas[2];
    /** Mint of the Collection */
    collectionMint?: TAccountMetas[3] | undefined;
    /** Metadata Account of the Collection */
    collectionMetadata?: TAccountMetas[4] | undefined;
    /** System program */
    systemProgram: TAccountMetas[5];
    /** Instructions sysvar account */
    sysvarInstructions: TAccountMetas[6];
  };
  data: UnverifyInstructionData;
}

export function parseUnverifyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUnverifyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TOKEN_METADATA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      delegateRecord: getNextOptionalAccount(),
      metadata: getNextAccount(),
      collectionMint: getNextOptionalAccount(),
      collectionMetadata: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
    },
    data: getUnverifyInstructionDataDecoder().decode(instruction.data),
  };
}
