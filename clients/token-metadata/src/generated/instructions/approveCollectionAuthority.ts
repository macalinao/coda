/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const APPROVE_COLLECTION_AUTHORITY_DISCRIMINATOR = 23;

export function getApproveCollectionAuthorityDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(APPROVE_COLLECTION_AUTHORITY_DISCRIMINATOR);
}

export type ApproveCollectionAuthorityInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountCollectionAuthorityRecord extends string | AccountMeta = string,
  TAccountNewCollectionAuthority extends string | AccountMeta = string,
  TAccountUpdateAuthority extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountMetadata extends string | AccountMeta = string,
  TAccountMint extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta | undefined = undefined,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCollectionAuthorityRecord extends string
        ? WritableAccount<TAccountCollectionAuthorityRecord>
        : TAccountCollectionAuthorityRecord,
      TAccountNewCollectionAuthority extends string
        ? ReadonlyAccount<TAccountNewCollectionAuthority>
        : TAccountNewCollectionAuthority,
      TAccountUpdateAuthority extends string
        ? WritableSignerAccount<TAccountUpdateAuthority> &
            AccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMetadata extends string
        ? ReadonlyAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...(TAccountRent extends undefined
        ? []
        : [
            TAccountRent extends string
              ? ReadonlyAccount<TAccountRent>
              : TAccountRent,
          ]),
      ...TRemainingAccounts,
    ]
  >;

export interface ApproveCollectionAuthorityInstructionData {
  discriminator: number;
}

export interface ApproveCollectionAuthorityInstructionDataArgs {}

export function getApproveCollectionAuthorityInstructionDataEncoder(): FixedSizeEncoder<ApproveCollectionAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: APPROVE_COLLECTION_AUTHORITY_DISCRIMINATOR,
    }),
  );
}

export function getApproveCollectionAuthorityInstructionDataDecoder(): FixedSizeDecoder<ApproveCollectionAuthorityInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getApproveCollectionAuthorityInstructionDataCodec(): FixedSizeCodec<
  ApproveCollectionAuthorityInstructionDataArgs,
  ApproveCollectionAuthorityInstructionData
> {
  return combineCodec(
    getApproveCollectionAuthorityInstructionDataEncoder(),
    getApproveCollectionAuthorityInstructionDataDecoder(),
  );
}

export interface ApproveCollectionAuthorityInput<
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountNewCollectionAuthority extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  /** Collection Authority Record PDA */
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  /** A Collection Authority */
  newCollectionAuthority: Address<TAccountNewCollectionAuthority>;
  /** Update Authority of Collection NFT */
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** Collection Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Mint of Collection Metadata */
  mint: Address<TAccountMint>;
  /** System program */
  systemProgram: Address<TAccountSystemProgram>;
  /** Rent info */
  rent?: Address<TAccountRent>;
}

export function getApproveCollectionAuthorityInstruction<
  TAccountCollectionAuthorityRecord extends string,
  TAccountNewCollectionAuthority extends string,
  TAccountUpdateAuthority extends string,
  TAccountPayer extends string,
  TAccountMetadata extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: ApproveCollectionAuthorityInput<
    TAccountCollectionAuthorityRecord,
    TAccountNewCollectionAuthority,
    TAccountUpdateAuthority,
    TAccountPayer,
    TAccountMetadata,
    TAccountMint,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): ApproveCollectionAuthorityInstruction<
  TProgramAddress,
  TAccountCollectionAuthorityRecord,
  TAccountNewCollectionAuthority,
  TAccountUpdateAuthority,
  TAccountPayer,
  TAccountMetadata,
  TAccountMint,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    newCollectionAuthority: {
      value: input.newCollectionAuthority ?? null,
      isWritable: false,
    },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "omitted");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.newCollectionAuthority),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ].filter(<T>(x: T | undefined): x is T => x !== undefined),
    programAddress,
    data: getApproveCollectionAuthorityInstructionDataEncoder().encode({}),
  } as ApproveCollectionAuthorityInstruction<
    TProgramAddress,
    TAccountCollectionAuthorityRecord,
    TAccountNewCollectionAuthority,
    TAccountUpdateAuthority,
    TAccountPayer,
    TAccountMetadata,
    TAccountMint,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export interface ParsedApproveCollectionAuthorityInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Collection Authority Record PDA */
    collectionAuthorityRecord: TAccountMetas[0];
    /** A Collection Authority */
    newCollectionAuthority: TAccountMetas[1];
    /** Update Authority of Collection NFT */
    updateAuthority: TAccountMetas[2];
    /** Payer */
    payer: TAccountMetas[3];
    /** Collection Metadata account */
    metadata: TAccountMetas[4];
    /** Mint of Collection Metadata */
    mint: TAccountMetas[5];
    /** System program */
    systemProgram: TAccountMetas[6];
    /** Rent info */
    rent?: TAccountMetas[7] | undefined;
  };
  data: ApproveCollectionAuthorityInstructionData;
}

export function parseApproveCollectionAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedApproveCollectionAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  let optionalAccountsRemaining = instruction.accounts.length - 7;
  const getNextOptionalAccount = () => {
    if (optionalAccountsRemaining === 0) {
      return undefined;
    }
    optionalAccountsRemaining -= 1;
    return getNextAccount();
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collectionAuthorityRecord: getNextAccount(),
      newCollectionAuthority: getNextAccount(),
      updateAuthority: getNextAccount(),
      payer: getNextAccount(),
      metadata: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextOptionalAccount(),
    },
    data: getApproveCollectionAuthorityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
