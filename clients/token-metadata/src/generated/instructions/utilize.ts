/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { UtilizeArgs, UtilizeArgsArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getUtilizeArgsDecoder,
  getUtilizeArgsEncoder,
} from "../types/index.js";

export const UTILIZE_DISCRIMINATOR = 19;

export function getUtilizeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(UTILIZE_DISCRIMINATOR);
}

export type UtilizeInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetadata extends string | AccountMeta = string,
  TAccountTokenAccount extends string | AccountMeta = string,
  TAccountMint extends string | AccountMeta = string,
  TAccountUseAuthority extends string | AccountMeta = string,
  TAccountOwner extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TAccountAtaProgram extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountUseAuthorityRecord extends
    | string
    | AccountMeta
    | undefined = undefined,
  TAccountBurner extends string | AccountMeta | undefined = undefined,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountUseAuthority extends string
        ? WritableSignerAccount<TAccountUseAuthority> &
            AccountSignerMeta<TAccountUseAuthority>
        : TAccountUseAuthority,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAtaProgram extends string
        ? ReadonlyAccount<TAccountAtaProgram>
        : TAccountAtaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...(TAccountUseAuthorityRecord extends undefined
        ? []
        : [
            TAccountUseAuthorityRecord extends string
              ? WritableAccount<TAccountUseAuthorityRecord>
              : TAccountUseAuthorityRecord,
          ]),
      ...(TAccountBurner extends undefined
        ? []
        : [
            TAccountBurner extends string
              ? ReadonlyAccount<TAccountBurner>
              : TAccountBurner,
          ]),
      ...TRemainingAccounts,
    ]
  >;

export interface UtilizeInstructionData {
  discriminator: number;
  utilizeArgs: UtilizeArgs;
}

export interface UtilizeInstructionDataArgs {
  utilizeArgs: UtilizeArgsArgs;
}

export function getUtilizeInstructionDataEncoder(): FixedSizeEncoder<UtilizeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["utilizeArgs", getUtilizeArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UTILIZE_DISCRIMINATOR }),
  );
}

export function getUtilizeInstructionDataDecoder(): FixedSizeDecoder<UtilizeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["utilizeArgs", getUtilizeArgsDecoder()],
  ]);
}

export function getUtilizeInstructionDataCodec(): FixedSizeCodec<
  UtilizeInstructionDataArgs,
  UtilizeInstructionData
> {
  return combineCodec(
    getUtilizeInstructionDataEncoder(),
    getUtilizeInstructionDataDecoder(),
  );
}

export interface UtilizeInput<
  TAccountMetadata extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountUseAuthority extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAtaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountUseAuthorityRecord extends string = string,
  TAccountBurner extends string = string,
> {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Token Account Of NFT */
  tokenAccount: Address<TAccountTokenAccount>;
  /** Mint of the Metadata */
  mint: Address<TAccountMint>;
  /** A Use Authority / Can be the current Owner of the NFT */
  useAuthority: TransactionSigner<TAccountUseAuthority>;
  /** Owner */
  owner: Address<TAccountOwner>;
  /** Token program */
  tokenProgram: Address<TAccountTokenProgram>;
  /** Associated Token program */
  ataProgram: Address<TAccountAtaProgram>;
  /** System program */
  systemProgram: Address<TAccountSystemProgram>;
  /** Rent info */
  rent: Address<TAccountRent>;
  /** Use Authority Record PDA If present the program Assumes a delegated use authority */
  useAuthorityRecord?: Address<TAccountUseAuthorityRecord>;
  /** Program As Signer (Burner) */
  burner?: Address<TAccountBurner>;
  utilizeArgs: UtilizeInstructionDataArgs["utilizeArgs"];
}

export function getUtilizeInstruction<
  TAccountMetadata extends string,
  TAccountTokenAccount extends string,
  TAccountMint extends string,
  TAccountUseAuthority extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountAtaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountUseAuthorityRecord extends string,
  TAccountBurner extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: UtilizeInput<
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountUseAuthority,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountAtaProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountUseAuthorityRecord,
    TAccountBurner
  >,
  config?: { programAddress?: TProgramAddress },
): UtilizeInstruction<
  TProgramAddress,
  TAccountMetadata,
  TAccountTokenAccount,
  TAccountMint,
  TAccountUseAuthority,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountAtaProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountUseAuthorityRecord,
  TAccountBurner
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    useAuthority: { value: input.useAuthority ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    ataProgram: { value: input.ataProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    useAuthorityRecord: {
      value: input.useAuthorityRecord ?? null,
      isWritable: true,
    },
    burner: { value: input.burner ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "omitted");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.useAuthority),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.ataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.useAuthorityRecord),
      getAccountMeta(accounts.burner),
    ].filter(<T>(x: T | undefined): x is T => x !== undefined),
    data: getUtilizeInstructionDataEncoder().encode(
      args as UtilizeInstructionDataArgs,
    ),
    programAddress,
  } as UtilizeInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountUseAuthority,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountAtaProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountUseAuthorityRecord,
    TAccountBurner
  >);
}

export interface ParsedUtilizeInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Metadata account */
    metadata: TAccountMetas[0];
    /** Token Account Of NFT */
    tokenAccount: TAccountMetas[1];
    /** Mint of the Metadata */
    mint: TAccountMetas[2];
    /** A Use Authority / Can be the current Owner of the NFT */
    useAuthority: TAccountMetas[3];
    /** Owner */
    owner: TAccountMetas[4];
    /** Token program */
    tokenProgram: TAccountMetas[5];
    /** Associated Token program */
    ataProgram: TAccountMetas[6];
    /** System program */
    systemProgram: TAccountMetas[7];
    /** Rent info */
    rent: TAccountMetas[8];
    /** Use Authority Record PDA If present the program Assumes a delegated use authority */
    useAuthorityRecord?: TAccountMetas[9] | undefined;
    /** Program As Signer (Burner) */
    burner?: TAccountMetas[10] | undefined;
  };
  data: UtilizeInstructionData;
}

export function parseUtilizeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUtilizeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  let optionalAccountsRemaining = instruction.accounts.length - 9;
  const getNextOptionalAccount = () => {
    if (optionalAccountsRemaining === 0) {
      return undefined;
    }
    optionalAccountsRemaining -= 1;
    return getNextAccount();
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      tokenAccount: getNextAccount(),
      mint: getNextAccount(),
      useAuthority: getNextAccount(),
      owner: getNextAccount(),
      tokenProgram: getNextAccount(),
      ataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      useAuthorityRecord: getNextOptionalAccount(),
      burner: getNextOptionalAccount(),
    },
    data: getUtilizeInstructionDataDecoder().decode(instruction.data),
  };
}
