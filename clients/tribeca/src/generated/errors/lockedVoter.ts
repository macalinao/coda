/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  SolanaError,
} from "@solana/kit";
import { isProgramError } from "@solana/kit";
import { LOCKED_VOTER_PROGRAM_ADDRESS } from "../programs/index.js";

/** ProgramNotWhitelisted: CPI caller not whitelisted to invoke lock instruction. */
export const LOCKED_VOTER_ERROR__PROGRAM_NOT_WHITELISTED = 0x1770; // 6000
/** LockupDurationTooShort: Lockup duration must at least be the min stake duration. */
export const LOCKED_VOTER_ERROR__LOCKUP_DURATION_TOO_SHORT = 0x1771; // 6001
/** LockupDurationTooLong: Lockup duration must at most be the max stake duration. */
export const LOCKED_VOTER_ERROR__LOCKUP_DURATION_TOO_LONG = 0x1772; // 6002
/** RefreshCannotShorten: A voting escrow refresh cannot shorten the escrow time remaining. */
export const LOCKED_VOTER_ERROR__REFRESH_CANNOT_SHORTEN = 0x1773; // 6003
/** EscrowNotEnded: Escrow has not ended. */
export const LOCKED_VOTER_ERROR__ESCROW_NOT_ENDED = 0x1774; // 6004
/** MustProvideWhitelist: Program whitelist enabled; please provide whitelist entry and instructions sysvar or use the 'lock_with_whitelist' instruction. */
export const LOCKED_VOTER_ERROR__MUST_PROVIDE_WHITELIST = 0x1775; // 6005
/** EscrowOwnerNotWhitelisted: CPI caller not whitelisted for escrow owner to invoke lock instruction. */
export const LOCKED_VOTER_ERROR__ESCROW_OWNER_NOT_WHITELISTED = 0x1776; // 6006
/** MustCallLockWithWhitelistEntry: Must call `lock_with_whitelist_entry` to lock via CPI. */
export const LOCKED_VOTER_ERROR__MUST_CALL_LOCK_WITH_WHITELIST_ENTRY = 0x1777; // 6007
/** MustCallLockPermissionless: Must call `lock_permissionless` since this DAO does not have a CPI whitelist. */
export const LOCKED_VOTER_ERROR__MUST_CALL_LOCK_PERMISSIONLESS = 0x1778; // 6008

export type LockedVoterError =
  | typeof LOCKED_VOTER_ERROR__ESCROW_NOT_ENDED
  | typeof LOCKED_VOTER_ERROR__ESCROW_OWNER_NOT_WHITELISTED
  | typeof LOCKED_VOTER_ERROR__LOCKUP_DURATION_TOO_LONG
  | typeof LOCKED_VOTER_ERROR__LOCKUP_DURATION_TOO_SHORT
  | typeof LOCKED_VOTER_ERROR__MUST_CALL_LOCK_PERMISSIONLESS
  | typeof LOCKED_VOTER_ERROR__MUST_CALL_LOCK_WITH_WHITELIST_ENTRY
  | typeof LOCKED_VOTER_ERROR__MUST_PROVIDE_WHITELIST
  | typeof LOCKED_VOTER_ERROR__PROGRAM_NOT_WHITELISTED
  | typeof LOCKED_VOTER_ERROR__REFRESH_CANNOT_SHORTEN;

let lockedVoterErrorMessages: Record<LockedVoterError, string> | undefined;
if (true) {
  lockedVoterErrorMessages = {
    [LOCKED_VOTER_ERROR__ESCROW_NOT_ENDED]: "Escrow has not ended.",
    [LOCKED_VOTER_ERROR__ESCROW_OWNER_NOT_WHITELISTED]:
      "CPI caller not whitelisted for escrow owner to invoke lock instruction.",
    [LOCKED_VOTER_ERROR__LOCKUP_DURATION_TOO_LONG]:
      "Lockup duration must at most be the max stake duration.",
    [LOCKED_VOTER_ERROR__LOCKUP_DURATION_TOO_SHORT]:
      "Lockup duration must at least be the min stake duration.",
    [LOCKED_VOTER_ERROR__MUST_CALL_LOCK_PERMISSIONLESS]:
      "Must call `lock_permissionless` since this DAO does not have a CPI whitelist.",
    [LOCKED_VOTER_ERROR__MUST_CALL_LOCK_WITH_WHITELIST_ENTRY]:
      "Must call `lock_with_whitelist_entry` to lock via CPI.",
    [LOCKED_VOTER_ERROR__MUST_PROVIDE_WHITELIST]: `Program whitelist enabled; please provide whitelist entry and instructions sysvar or use the 'lock_with_whitelist' instruction.`,
    [LOCKED_VOTER_ERROR__PROGRAM_NOT_WHITELISTED]:
      "CPI caller not whitelisted to invoke lock instruction.",
    [LOCKED_VOTER_ERROR__REFRESH_CANNOT_SHORTEN]:
      "A voting escrow refresh cannot shorten the escrow time remaining.",
  };
}

export function getLockedVoterErrorMessage(code: LockedVoterError): string {
  if (true) {
    return lockedVoterErrorMessages![code];
  }

  return "Error message not available in production bundles.";
}

export function isLockedVoterError<TProgramErrorCode extends LockedVoterError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LOCKED_VOTER_PROGRAM_ADDRESS,
    code,
  );
}
