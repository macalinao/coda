/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  SolanaError,
} from "@solana/kit";
import { isProgramError } from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";

/** InvalidVoteSide: Invalid vote side. */
export const GOVERN_ERROR__INVALID_VOTE_SIDE = 0x1770; // 6000
/** GovernorNotFound: The owner of the smart wallet doesn't match with current. */
export const GOVERN_ERROR__GOVERNOR_NOT_FOUND = 0x1771; // 6001
/** VotingDelayNotMet: The proposal cannot be activated since it has not yet passed the voting delay. */
export const GOVERN_ERROR__VOTING_DELAY_NOT_MET = 0x1772; // 6002
/** ProposalNotDraft: Only drafts can be canceled. */
export const GOVERN_ERROR__PROPOSAL_NOT_DRAFT = 0x1773; // 6003
/** ProposalNotActive: The proposal must be active. */
export const GOVERN_ERROR__PROPOSAL_NOT_ACTIVE = 0x1774; // 6004

export type GovernError =
  | typeof GOVERN_ERROR__GOVERNOR_NOT_FOUND
  | typeof GOVERN_ERROR__INVALID_VOTE_SIDE
  | typeof GOVERN_ERROR__PROPOSAL_NOT_ACTIVE
  | typeof GOVERN_ERROR__PROPOSAL_NOT_DRAFT
  | typeof GOVERN_ERROR__VOTING_DELAY_NOT_MET;

let governErrorMessages: Record<GovernError, string> | undefined;
if (true) {
  governErrorMessages = {
    [GOVERN_ERROR__GOVERNOR_NOT_FOUND]: `The owner of the smart wallet doesn't match with current.`,
    [GOVERN_ERROR__INVALID_VOTE_SIDE]: "Invalid vote side.",
    [GOVERN_ERROR__PROPOSAL_NOT_ACTIVE]: "The proposal must be active.",
    [GOVERN_ERROR__PROPOSAL_NOT_DRAFT]: "Only drafts can be canceled.",
    [GOVERN_ERROR__VOTING_DELAY_NOT_MET]:
      "The proposal cannot be activated since it has not yet passed the voting delay.",
  };
}

export function getGovernErrorMessage(code: GovernError): string {
  if (true) {
    return governErrorMessages![code];
  }

  return "Error message not available in production bundles.";
}

export function isGovernError<TProgramErrorCode extends GovernError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    GOVERN_PROGRAM_ADDRESS,
    code,
  );
}
