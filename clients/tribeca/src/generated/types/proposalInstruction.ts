/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  Codec,
  Decoder,
  Encoder,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { ProposalAccountMeta, ProposalAccountMetaArgs } from "./index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
} from "@solana/kit";
import {
  getProposalAccountMetaDecoder,
  getProposalAccountMetaEncoder,
} from "./index.js";

export interface ProposalInstruction {
  programId: Address;
  keys: ProposalAccountMeta[];
  data: ReadonlyUint8Array;
}

export interface ProposalInstructionArgs {
  programId: Address;
  keys: ProposalAccountMetaArgs[];
  data: ReadonlyUint8Array;
}

export function getProposalInstructionEncoder(): Encoder<ProposalInstructionArgs> {
  return getStructEncoder([
    ["programId", getAddressEncoder()],
    ["keys", getArrayEncoder(getProposalAccountMetaEncoder())],
    ["data", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getProposalInstructionDecoder(): Decoder<ProposalInstruction> {
  return getStructDecoder([
    ["programId", getAddressDecoder()],
    ["keys", getArrayDecoder(getProposalAccountMetaDecoder())],
    ["data", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getProposalInstructionCodec(): Codec<
  ProposalInstructionArgs,
  ProposalInstruction
> {
  return combineCodec(
    getProposalInstructionEncoder(),
    getProposalInstructionDecoder(),
  );
}
