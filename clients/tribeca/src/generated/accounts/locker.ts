/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { LockerSeeds } from "../pdas/index.js";
import type { LockerParams, LockerParamsArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findLockerPda } from "../pdas/index.js";
import {
  getLockerParamsDecoder,
  getLockerParamsEncoder,
} from "../types/index.js";

export const LOCKER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  74, 246, 6, 113, 249, 228, 75, 169,
]);

export function getLockerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOCKER_DISCRIMINATOR);
}

export interface Locker {
  discriminator: ReadonlyUint8Array;
  base: Address;
  bump: number;
  tokenMint: Address;
  lockedSupply: bigint;
  governor: Address;
  params: LockerParams;
}

export interface LockerArgs {
  base: Address;
  bump: number;
  tokenMint: Address;
  lockedSupply: number | bigint;
  governor: Address;
  params: LockerParamsArgs;
}

export function getLockerEncoder(): FixedSizeEncoder<LockerArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["base", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["tokenMint", getAddressEncoder()],
      ["lockedSupply", getU64Encoder()],
      ["governor", getAddressEncoder()],
      ["params", getLockerParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCKER_DISCRIMINATOR }),
  );
}

export function getLockerDecoder(): FixedSizeDecoder<Locker> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["base", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["tokenMint", getAddressDecoder()],
    ["lockedSupply", getU64Decoder()],
    ["governor", getAddressDecoder()],
    ["params", getLockerParamsDecoder()],
  ]);
}

export function getLockerCodec(): FixedSizeCodec<LockerArgs, Locker> {
  return combineCodec(getLockerEncoder(), getLockerDecoder());
}

export function decodeLocker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Locker, TAddress>;
export function decodeLocker<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Locker, TAddress>;
export function decodeLocker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Locker, TAddress> | MaybeAccount<Locker, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLockerDecoder(),
  );
}

export async function fetchLocker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Locker, TAddress>> {
  const maybeAccount = await fetchMaybeLocker(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLocker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Locker, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLocker(maybeAccount);
}

export async function fetchAllLocker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Locker>[]> {
  const maybeAccounts = await fetchAllMaybeLocker(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLocker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Locker>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeLocker(maybeAccount));
}

export async function fetchLockerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: LockerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Locker>> {
  const maybeAccount = await fetchMaybeLockerFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLockerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: LockerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Locker>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findLockerPda(seeds, { programAddress });
  return await fetchMaybeLocker(rpc, address, fetchConfig);
}
