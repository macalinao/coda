/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { ProposalMetaSeeds } from "../pdas/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findProposalMetaPda } from "../pdas/index.js";

export const PROPOSAL_META_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  50, 100, 46, 24, 151, 174, 216, 78,
]);

export function getProposalMetaDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROPOSAL_META_DISCRIMINATOR,
  );
}

export interface ProposalMeta {
  discriminator: ReadonlyUint8Array;
  proposal: Address;
  title: string;
  descriptionLink: string;
}

export interface ProposalMetaArgs {
  proposal: Address;
  title: string;
  descriptionLink: string;
}

export function getProposalMetaEncoder(): Encoder<ProposalMetaArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["proposal", getAddressEncoder()],
      ["title", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        "descriptionLink",
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: PROPOSAL_META_DISCRIMINATOR }),
  );
}

export function getProposalMetaDecoder(): Decoder<ProposalMeta> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["proposal", getAddressDecoder()],
    ["title", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      "descriptionLink",
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
  ]);
}

export function getProposalMetaCodec(): Codec<ProposalMetaArgs, ProposalMeta> {
  return combineCodec(getProposalMetaEncoder(), getProposalMetaDecoder());
}

export function decodeProposalMeta<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ProposalMeta, TAddress>;
export function decodeProposalMeta<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ProposalMeta, TAddress>;
export function decodeProposalMeta<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<ProposalMeta, TAddress> | MaybeAccount<ProposalMeta, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProposalMetaDecoder(),
  );
}

export async function fetchProposalMeta<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ProposalMeta, TAddress>> {
  const maybeAccount = await fetchMaybeProposalMeta(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalMeta<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ProposalMeta, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProposalMeta(maybeAccount);
}

export async function fetchAllProposalMeta(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ProposalMeta>[]> {
  const maybeAccounts = await fetchAllMaybeProposalMeta(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProposalMeta(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ProposalMeta>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProposalMeta(maybeAccount));
}

export async function fetchProposalMetaFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalMetaSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<ProposalMeta>> {
  const maybeAccount = await fetchMaybeProposalMetaFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalMetaFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalMetaSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<ProposalMeta>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProposalMetaPda(seeds, { programAddress });
  return await fetchMaybeProposalMeta(rpc, address, fetchConfig);
}
