/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { WhitelistSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWhitelistPda } from "../pdas/index.js";

export const LOCKER_WHITELIST_ENTRY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([128, 245, 238, 138, 226, 48, 216, 63]);

export function getLockerWhitelistEntryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LOCKER_WHITELIST_ENTRY_DISCRIMINATOR,
  );
}

export interface LockerWhitelistEntry {
  discriminator: ReadonlyUint8Array;
  bump: number;
  locker: Address;
  programId: Address;
  owner: Address;
}

export interface LockerWhitelistEntryArgs {
  bump: number;
  locker: Address;
  programId: Address;
  owner: Address;
}

export function getLockerWhitelistEntryEncoder(): FixedSizeEncoder<LockerWhitelistEntryArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
      ["locker", getAddressEncoder()],
      ["programId", getAddressEncoder()],
      ["owner", getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: LOCKER_WHITELIST_ENTRY_DISCRIMINATOR,
    }),
  );
}

export function getLockerWhitelistEntryDecoder(): FixedSizeDecoder<LockerWhitelistEntry> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
    ["locker", getAddressDecoder()],
    ["programId", getAddressDecoder()],
    ["owner", getAddressDecoder()],
  ]);
}

export function getLockerWhitelistEntryCodec(): FixedSizeCodec<
  LockerWhitelistEntryArgs,
  LockerWhitelistEntry
> {
  return combineCodec(
    getLockerWhitelistEntryEncoder(),
    getLockerWhitelistEntryDecoder(),
  );
}

export function decodeLockerWhitelistEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<LockerWhitelistEntry, TAddress>;
export function decodeLockerWhitelistEntry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<LockerWhitelistEntry, TAddress>;
export function decodeLockerWhitelistEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<LockerWhitelistEntry, TAddress>
  | MaybeAccount<LockerWhitelistEntry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLockerWhitelistEntryDecoder(),
  );
}

export async function fetchLockerWhitelistEntry<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<LockerWhitelistEntry, TAddress>> {
  const maybeAccount = await fetchMaybeLockerWhitelistEntry(
    rpc,
    address,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLockerWhitelistEntry<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<LockerWhitelistEntry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLockerWhitelistEntry(maybeAccount);
}

export async function fetchAllLockerWhitelistEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<LockerWhitelistEntry>[]> {
  const maybeAccounts = await fetchAllMaybeLockerWhitelistEntry(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLockerWhitelistEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<LockerWhitelistEntry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLockerWhitelistEntry(maybeAccount),
  );
}

export async function fetchLockerWhitelistEntryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WhitelistSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<LockerWhitelistEntry>> {
  const maybeAccount = await fetchMaybeLockerWhitelistEntryFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLockerWhitelistEntryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WhitelistSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<LockerWhitelistEntry>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findWhitelistPda(seeds, { programAddress });
  return await fetchMaybeLockerWhitelistEntry(rpc, address, fetchConfig);
}
