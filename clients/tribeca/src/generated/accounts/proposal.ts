/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { ProposalSeeds } from "../pdas/index.js";
import type {
  ProposalInstruction,
  ProposalInstructionArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findProposalPda } from "../pdas/index.js";
import {
  getProposalInstructionDecoder,
  getProposalInstructionEncoder,
} from "../types/index.js";

export const PROPOSAL_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  26, 94, 189, 187, 116, 136, 53, 33,
]);

export function getProposalDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROPOSAL_DISCRIMINATOR);
}

export interface Proposal {
  discriminator: ReadonlyUint8Array;
  governor: Address;
  index: bigint;
  bump: number;
  proposer: Address;
  quorumVotes: bigint;
  forVotes: bigint;
  againstVotes: bigint;
  abstainVotes: bigint;
  canceledAt: bigint;
  createdAt: bigint;
  activatedAt: bigint;
  votingEndsAt: bigint;
  queuedAt: bigint;
  queuedTransaction: Address;
  instructions: ProposalInstruction[];
}

export interface ProposalArgs {
  governor: Address;
  index: number | bigint;
  bump: number;
  proposer: Address;
  quorumVotes: number | bigint;
  forVotes: number | bigint;
  againstVotes: number | bigint;
  abstainVotes: number | bigint;
  canceledAt: number | bigint;
  createdAt: number | bigint;
  activatedAt: number | bigint;
  votingEndsAt: number | bigint;
  queuedAt: number | bigint;
  queuedTransaction: Address;
  instructions: ProposalInstructionArgs[];
}

export function getProposalEncoder(): Encoder<ProposalArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["governor", getAddressEncoder()],
      ["index", getU64Encoder()],
      ["bump", getU8Encoder()],
      ["proposer", getAddressEncoder()],
      ["quorumVotes", getU64Encoder()],
      ["forVotes", getU64Encoder()],
      ["againstVotes", getU64Encoder()],
      ["abstainVotes", getU64Encoder()],
      ["canceledAt", getI64Encoder()],
      ["createdAt", getI64Encoder()],
      ["activatedAt", getI64Encoder()],
      ["votingEndsAt", getI64Encoder()],
      ["queuedAt", getI64Encoder()],
      ["queuedTransaction", getAddressEncoder()],
      ["instructions", getArrayEncoder(getProposalInstructionEncoder())],
    ]),
    (value) => ({ ...value, discriminator: PROPOSAL_DISCRIMINATOR }),
  );
}

export function getProposalDecoder(): Decoder<Proposal> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["governor", getAddressDecoder()],
    ["index", getU64Decoder()],
    ["bump", getU8Decoder()],
    ["proposer", getAddressDecoder()],
    ["quorumVotes", getU64Decoder()],
    ["forVotes", getU64Decoder()],
    ["againstVotes", getU64Decoder()],
    ["abstainVotes", getU64Decoder()],
    ["canceledAt", getI64Decoder()],
    ["createdAt", getI64Decoder()],
    ["activatedAt", getI64Decoder()],
    ["votingEndsAt", getI64Decoder()],
    ["queuedAt", getI64Decoder()],
    ["queuedTransaction", getAddressDecoder()],
    ["instructions", getArrayDecoder(getProposalInstructionDecoder())],
  ]);
}

export function getProposalCodec(): Codec<ProposalArgs, Proposal> {
  return combineCodec(getProposalEncoder(), getProposalDecoder());
}

export function decodeProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Proposal, TAddress>;
export function decodeProposal<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Proposal, TAddress>;
export function decodeProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Proposal, TAddress> | MaybeAccount<Proposal, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProposalDecoder(),
  );
}

export async function fetchProposal<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Proposal, TAddress>> {
  const maybeAccount = await fetchMaybeProposal(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposal<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Proposal, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProposal(maybeAccount);
}

export async function fetchAllProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Proposal>[]> {
  const maybeAccounts = await fetchAllMaybeProposal(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Proposal>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProposal(maybeAccount));
}

export async function fetchProposalFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Proposal>> {
  const maybeAccount = await fetchMaybeProposalFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProposalFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProposalSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Proposal>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProposalPda(seeds, { programAddress });
  return await fetchMaybeProposal(rpc, address, fetchConfig);
}
