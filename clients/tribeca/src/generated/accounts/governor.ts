/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { GovernorSeeds } from "../pdas/index.js";
import type {
  GovernanceParameters,
  GovernanceParametersArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findGovernorPda } from "../pdas/index.js";
import {
  getGovernanceParametersDecoder,
  getGovernanceParametersEncoder,
} from "../types/index.js";

export const GOVERNOR_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  37, 136, 44, 80, 68, 85, 213, 178,
]);

export function getGovernorDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(GOVERNOR_DISCRIMINATOR);
}

export interface Governor {
  discriminator: ReadonlyUint8Array;
  base: Address;
  bump: number;
  proposalCount: bigint;
  electorate: Address;
  smartWallet: Address;
  params: GovernanceParameters;
}

export interface GovernorArgs {
  base: Address;
  bump: number;
  proposalCount: number | bigint;
  electorate: Address;
  smartWallet: Address;
  params: GovernanceParametersArgs;
}

export function getGovernorEncoder(): FixedSizeEncoder<GovernorArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["base", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["proposalCount", getU64Encoder()],
      ["electorate", getAddressEncoder()],
      ["smartWallet", getAddressEncoder()],
      ["params", getGovernanceParametersEncoder()],
    ]),
    (value) => ({ ...value, discriminator: GOVERNOR_DISCRIMINATOR }),
  );
}

export function getGovernorDecoder(): FixedSizeDecoder<Governor> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["base", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["proposalCount", getU64Decoder()],
    ["electorate", getAddressDecoder()],
    ["smartWallet", getAddressDecoder()],
    ["params", getGovernanceParametersDecoder()],
  ]);
}

export function getGovernorCodec(): FixedSizeCodec<GovernorArgs, Governor> {
  return combineCodec(getGovernorEncoder(), getGovernorDecoder());
}

export function decodeGovernor<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Governor, TAddress>;
export function decodeGovernor<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Governor, TAddress>;
export function decodeGovernor<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Governor, TAddress> | MaybeAccount<Governor, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGovernorDecoder(),
  );
}

export async function fetchGovernor<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Governor, TAddress>> {
  const maybeAccount = await fetchMaybeGovernor(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGovernor<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Governor, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGovernor(maybeAccount);
}

export async function fetchAllGovernor(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Governor>[]> {
  const maybeAccounts = await fetchAllMaybeGovernor(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGovernor(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Governor>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGovernor(maybeAccount));
}

export async function fetchGovernorFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: GovernorSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Governor>> {
  const maybeAccount = await fetchMaybeGovernorFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGovernorFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: GovernorSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Governor>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findGovernorPda(seeds, { programAddress });
  return await fetchMaybeGovernor(rpc, address, fetchConfig);
}
