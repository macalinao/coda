/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { VoteSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findVotePda } from "../pdas/index.js";

export const VOTE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  96, 91, 104, 57, 145, 35, 172, 155,
]);

export function getVoteDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VOTE_DISCRIMINATOR);
}

export interface Vote {
  discriminator: ReadonlyUint8Array;
  proposal: Address;
  voter: Address;
  bump: number;
  side: number;
  weight: bigint;
}

export interface VoteArgs {
  proposal: Address;
  voter: Address;
  bump: number;
  side: number;
  weight: number | bigint;
}

export function getVoteEncoder(): FixedSizeEncoder<VoteArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["proposal", getAddressEncoder()],
      ["voter", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["side", getU8Encoder()],
      ["weight", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VOTE_DISCRIMINATOR }),
  );
}

export function getVoteDecoder(): FixedSizeDecoder<Vote> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["proposal", getAddressDecoder()],
    ["voter", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["side", getU8Decoder()],
    ["weight", getU64Decoder()],
  ]);
}

export function getVoteCodec(): FixedSizeCodec<VoteArgs, Vote> {
  return combineCodec(getVoteEncoder(), getVoteDecoder());
}

export function decodeVote<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Vote, TAddress>;
export function decodeVote<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Vote, TAddress>;
export function decodeVote<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Vote, TAddress> | MaybeAccount<Vote, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoteDecoder(),
  );
}

export async function fetchVote<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Vote, TAddress>> {
  const maybeAccount = await fetchMaybeVote(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVote<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Vote, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVote(maybeAccount);
}

export async function fetchAllVote(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Vote>[]> {
  const maybeAccounts = await fetchAllMaybeVote(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVote(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Vote>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVote(maybeAccount));
}

export async function fetchVoteFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoteSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Vote>> {
  const maybeAccount = await fetchMaybeVoteFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoteFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: VoteSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Vote>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findVotePda(seeds, { programAddress });
  return await fetchMaybeVote(rpc, address, fetchConfig);
}
