/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_VOTE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  171, 33, 83, 172, 148, 215, 239, 97,
]);

export function getSetVoteDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_VOTE_DISCRIMINATOR);
}

export type SetVoteInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountProposal extends string | AccountMeta = string,
  TAccountVote extends string | AccountMeta = string,
  TAccountElectorate extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernor extends string
        ? ReadonlyAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountVote extends string
        ? WritableAccount<TAccountVote>
        : TAccountVote,
      TAccountElectorate extends string
        ? ReadonlySignerAccount<TAccountElectorate> &
            AccountSignerMeta<TAccountElectorate>
        : TAccountElectorate,
      ...TRemainingAccounts,
    ]
  >;

export interface SetVoteInstructionData {
  discriminator: ReadonlyUint8Array;
  side: number;
  weight: bigint;
}

export interface SetVoteInstructionDataArgs {
  side: number;
  weight: number | bigint;
}

export function getSetVoteInstructionDataEncoder(): FixedSizeEncoder<SetVoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["side", getU8Encoder()],
      ["weight", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_VOTE_DISCRIMINATOR }),
  );
}

export function getSetVoteInstructionDataDecoder(): FixedSizeDecoder<SetVoteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["side", getU8Decoder()],
    ["weight", getU64Decoder()],
  ]);
}

export function getSetVoteInstructionDataCodec(): FixedSizeCodec<
  SetVoteInstructionDataArgs,
  SetVoteInstructionData
> {
  return combineCodec(
    getSetVoteInstructionDataEncoder(),
    getSetVoteInstructionDataDecoder(),
  );
}

export interface SetVoteInput<
  TAccountGovernor extends string = string,
  TAccountProposal extends string = string,
  TAccountVote extends string = string,
  TAccountElectorate extends string = string,
> {
  governor: Address<TAccountGovernor>;
  proposal: Address<TAccountProposal>;
  vote: Address<TAccountVote>;
  electorate: TransactionSigner<TAccountElectorate>;
  side: SetVoteInstructionDataArgs["side"];
  weight: SetVoteInstructionDataArgs["weight"];
}

export function getSetVoteInstruction<
  TAccountGovernor extends string,
  TAccountProposal extends string,
  TAccountVote extends string,
  TAccountElectorate extends string,
  TProgramAddress extends Address = typeof GOVERN_PROGRAM_ADDRESS,
>(
  input: SetVoteInput<
    TAccountGovernor,
    TAccountProposal,
    TAccountVote,
    TAccountElectorate
  >,
  config?: { programAddress?: TProgramAddress },
): SetVoteInstruction<
  TProgramAddress,
  TAccountGovernor,
  TAccountProposal,
  TAccountVote,
  TAccountElectorate
> {
  // Program address.
  const programAddress = config?.programAddress ?? GOVERN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governor: { value: input.governor ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    vote: { value: input.vote ?? null, isWritable: true },
    electorate: { value: input.electorate ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.electorate),
    ],
    data: getSetVoteInstructionDataEncoder().encode(
      args as SetVoteInstructionDataArgs,
    ),
    programAddress,
  } as SetVoteInstruction<
    TProgramAddress,
    TAccountGovernor,
    TAccountProposal,
    TAccountVote,
    TAccountElectorate
  >);
}

export interface ParsedSetVoteInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    governor: TAccountMetas[0];
    proposal: TAccountMetas[1];
    vote: TAccountMetas[2];
    electorate: TAccountMetas[3];
  };
  data: SetVoteInstructionData;
}

export function parseSetVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governor: getNextAccount(),
      proposal: getNextAccount(),
      vote: getNextAccount(),
      electorate: getNextAccount(),
    },
    data: getSetVoteInstructionDataDecoder().decode(instruction.data),
  };
}
