/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { LOCKED_VOTER_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const APPROVE_PROGRAM_LOCK_PRIVILEGE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([75, 202, 1, 4, 122, 110, 102, 148]);

export function getApproveProgramLockPrivilegeDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPROVE_PROGRAM_LOCK_PRIVILEGE_DISCRIMINATOR,
  );
}

export type ApproveProgramLockPrivilegeInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountLocker extends string | AccountMeta = string,
  TAccountWhitelistEntry extends string | AccountMeta = string,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountSmartWallet extends string | AccountMeta = string,
  TAccountExecutableId extends string | AccountMeta = string,
  TAccountWhitelistedOwner extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLocker extends string
        ? ReadonlyAccount<TAccountLocker>
        : TAccountLocker,
      TAccountWhitelistEntry extends string
        ? WritableAccount<TAccountWhitelistEntry>
        : TAccountWhitelistEntry,
      TAccountGovernor extends string
        ? ReadonlyAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountSmartWallet extends string
        ? ReadonlySignerAccount<TAccountSmartWallet> &
            AccountSignerMeta<TAccountSmartWallet>
        : TAccountSmartWallet,
      TAccountExecutableId extends string
        ? ReadonlyAccount<TAccountExecutableId>
        : TAccountExecutableId,
      TAccountWhitelistedOwner extends string
        ? ReadonlyAccount<TAccountWhitelistedOwner>
        : TAccountWhitelistedOwner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface ApproveProgramLockPrivilegeInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
}

export interface ApproveProgramLockPrivilegeInstructionDataArgs {
  bump: number;
}

export function getApproveProgramLockPrivilegeInstructionDataEncoder(): FixedSizeEncoder<ApproveProgramLockPrivilegeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: APPROVE_PROGRAM_LOCK_PRIVILEGE_DISCRIMINATOR,
    }),
  );
}

export function getApproveProgramLockPrivilegeInstructionDataDecoder(): FixedSizeDecoder<ApproveProgramLockPrivilegeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
  ]);
}

export function getApproveProgramLockPrivilegeInstructionDataCodec(): FixedSizeCodec<
  ApproveProgramLockPrivilegeInstructionDataArgs,
  ApproveProgramLockPrivilegeInstructionData
> {
  return combineCodec(
    getApproveProgramLockPrivilegeInstructionDataEncoder(),
    getApproveProgramLockPrivilegeInstructionDataDecoder(),
  );
}

export interface ApproveProgramLockPrivilegeInput<
  TAccountLocker extends string = string,
  TAccountWhitelistEntry extends string = string,
  TAccountGovernor extends string = string,
  TAccountSmartWallet extends string = string,
  TAccountExecutableId extends string = string,
  TAccountWhitelistedOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  locker: Address<TAccountLocker>;
  whitelistEntry: Address<TAccountWhitelistEntry>;
  governor: Address<TAccountGovernor>;
  smartWallet: TransactionSigner<TAccountSmartWallet>;
  executableId: Address<TAccountExecutableId>;
  whitelistedOwner: Address<TAccountWhitelistedOwner>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: ApproveProgramLockPrivilegeInstructionDataArgs["bump"];
}

export function getApproveProgramLockPrivilegeInstruction<
  TAccountLocker extends string,
  TAccountWhitelistEntry extends string,
  TAccountGovernor extends string,
  TAccountSmartWallet extends string,
  TAccountExecutableId extends string,
  TAccountWhitelistedOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
>(
  input: ApproveProgramLockPrivilegeInput<
    TAccountLocker,
    TAccountWhitelistEntry,
    TAccountGovernor,
    TAccountSmartWallet,
    TAccountExecutableId,
    TAccountWhitelistedOwner,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ApproveProgramLockPrivilegeInstruction<
  TProgramAddress,
  TAccountLocker,
  TAccountWhitelistEntry,
  TAccountGovernor,
  TAccountSmartWallet,
  TAccountExecutableId,
  TAccountWhitelistedOwner,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKED_VOTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    locker: { value: input.locker ?? null, isWritable: false },
    whitelistEntry: { value: input.whitelistEntry ?? null, isWritable: true },
    governor: { value: input.governor ?? null, isWritable: false },
    smartWallet: { value: input.smartWallet ?? null, isWritable: false },
    executableId: { value: input.executableId ?? null, isWritable: false },
    whitelistedOwner: {
      value: input.whitelistedOwner ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.locker),
      getAccountMeta(accounts.whitelistEntry),
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.smartWallet),
      getAccountMeta(accounts.executableId),
      getAccountMeta(accounts.whitelistedOwner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getApproveProgramLockPrivilegeInstructionDataEncoder().encode(
      args as ApproveProgramLockPrivilegeInstructionDataArgs,
    ),
    programAddress,
  } as ApproveProgramLockPrivilegeInstruction<
    TProgramAddress,
    TAccountLocker,
    TAccountWhitelistEntry,
    TAccountGovernor,
    TAccountSmartWallet,
    TAccountExecutableId,
    TAccountWhitelistedOwner,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedApproveProgramLockPrivilegeInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    locker: TAccountMetas[0];
    whitelistEntry: TAccountMetas[1];
    governor: TAccountMetas[2];
    smartWallet: TAccountMetas[3];
    executableId: TAccountMetas[4];
    whitelistedOwner: TAccountMetas[5];
    payer: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: ApproveProgramLockPrivilegeInstructionData;
}

export function parseApproveProgramLockPrivilegeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedApproveProgramLockPrivilegeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      locker: getNextAccount(),
      whitelistEntry: getNextAccount(),
      governor: getNextAccount(),
      smartWallet: getNextAccount(),
      executableId: getNextAccount(),
      whitelistedOwner: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getApproveProgramLockPrivilegeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
