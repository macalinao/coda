/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  ProposalInstruction,
  ProposalInstructionArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getProposalInstructionDecoder,
  getProposalInstructionEncoder,
} from "../types/index.js";

export const CREATE_PROPOSAL_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [132, 116, 68, 174, 216, 160, 198, 22],
);

export function getCreateProposalDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_PROPOSAL_DISCRIMINATOR,
  );
}

export type CreateProposalInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountProposal extends string | AccountMeta = string,
  TAccountProposer extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernor extends string
        ? WritableAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountProposer extends string
        ? ReadonlySignerAccount<TAccountProposer> &
            AccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateProposalInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
  instructions: ProposalInstruction[];
}

export interface CreateProposalInstructionDataArgs {
  bump: number;
  instructions: ProposalInstructionArgs[];
}

export function getCreateProposalInstructionDataEncoder(): Encoder<CreateProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
      ["instructions", getArrayEncoder(getProposalInstructionEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_PROPOSAL_DISCRIMINATOR }),
  );
}

export function getCreateProposalInstructionDataDecoder(): Decoder<CreateProposalInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
    ["instructions", getArrayDecoder(getProposalInstructionDecoder())],
  ]);
}

export function getCreateProposalInstructionDataCodec(): Codec<
  CreateProposalInstructionDataArgs,
  CreateProposalInstructionData
> {
  return combineCodec(
    getCreateProposalInstructionDataEncoder(),
    getCreateProposalInstructionDataDecoder(),
  );
}

export interface CreateProposalInput<
  TAccountGovernor extends string = string,
  TAccountProposal extends string = string,
  TAccountProposer extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  governor: Address<TAccountGovernor>;
  proposal: Address<TAccountProposal>;
  proposer: TransactionSigner<TAccountProposer>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: CreateProposalInstructionDataArgs["bump"];
  instructions: CreateProposalInstructionDataArgs["instructions"];
}

export function getCreateProposalInstruction<
  TAccountGovernor extends string,
  TAccountProposal extends string,
  TAccountProposer extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof GOVERN_PROGRAM_ADDRESS,
>(
  input: CreateProposalInput<
    TAccountGovernor,
    TAccountProposal,
    TAccountProposer,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CreateProposalInstruction<
  TProgramAddress,
  TAccountGovernor,
  TAccountProposal,
  TAccountProposer,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? GOVERN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governor: { value: input.governor ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
    proposer: { value: input.proposer ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateProposalInstructionDataEncoder().encode(
      args as CreateProposalInstructionDataArgs,
    ),
    programAddress,
  } as CreateProposalInstruction<
    TProgramAddress,
    TAccountGovernor,
    TAccountProposal,
    TAccountProposer,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedCreateProposalInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    governor: TAccountMetas[0];
    proposal: TAccountMetas[1];
    proposer: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateProposalInstructionData;
}

export function parseCreateProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governor: getNextAccount(),
      proposal: getNextAccount(),
      proposer: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateProposalInstructionDataDecoder().decode(instruction.data),
  };
}
