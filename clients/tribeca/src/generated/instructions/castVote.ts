/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { LOCKED_VOTER_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CAST_VOTE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  20, 212, 15, 189, 69, 180, 69, 151,
]);

export function getCastVoteDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CAST_VOTE_DISCRIMINATOR);
}

export type CastVoteInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountLocker extends string | AccountMeta = string,
  TAccountEscrow extends string | AccountMeta = string,
  TAccountVoteDelegate extends string | AccountMeta = string,
  TAccountProposal extends string | AccountMeta = string,
  TAccountVote extends string | AccountMeta = string,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountGovernProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLocker extends string
        ? ReadonlyAccount<TAccountLocker>
        : TAccountLocker,
      TAccountEscrow extends string
        ? ReadonlyAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountVoteDelegate extends string
        ? ReadonlySignerAccount<TAccountVoteDelegate> &
            AccountSignerMeta<TAccountVoteDelegate>
        : TAccountVoteDelegate,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountVote extends string
        ? WritableAccount<TAccountVote>
        : TAccountVote,
      TAccountGovernor extends string
        ? ReadonlyAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountGovernProgram extends string
        ? ReadonlyAccount<TAccountGovernProgram>
        : TAccountGovernProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CastVoteInstructionData {
  discriminator: ReadonlyUint8Array;
  side: number;
}

export interface CastVoteInstructionDataArgs {
  side: number;
}

export function getCastVoteInstructionDataEncoder(): FixedSizeEncoder<CastVoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["side", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CAST_VOTE_DISCRIMINATOR }),
  );
}

export function getCastVoteInstructionDataDecoder(): FixedSizeDecoder<CastVoteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["side", getU8Decoder()],
  ]);
}

export function getCastVoteInstructionDataCodec(): FixedSizeCodec<
  CastVoteInstructionDataArgs,
  CastVoteInstructionData
> {
  return combineCodec(
    getCastVoteInstructionDataEncoder(),
    getCastVoteInstructionDataDecoder(),
  );
}

export interface CastVoteInput<
  TAccountLocker extends string = string,
  TAccountEscrow extends string = string,
  TAccountVoteDelegate extends string = string,
  TAccountProposal extends string = string,
  TAccountVote extends string = string,
  TAccountGovernor extends string = string,
  TAccountGovernProgram extends string = string,
> {
  locker: Address<TAccountLocker>;
  escrow: Address<TAccountEscrow>;
  voteDelegate: TransactionSigner<TAccountVoteDelegate>;
  proposal: Address<TAccountProposal>;
  vote: Address<TAccountVote>;
  governor: Address<TAccountGovernor>;
  governProgram: Address<TAccountGovernProgram>;
  side: CastVoteInstructionDataArgs["side"];
}

export function getCastVoteInstruction<
  TAccountLocker extends string,
  TAccountEscrow extends string,
  TAccountVoteDelegate extends string,
  TAccountProposal extends string,
  TAccountVote extends string,
  TAccountGovernor extends string,
  TAccountGovernProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
>(
  input: CastVoteInput<
    TAccountLocker,
    TAccountEscrow,
    TAccountVoteDelegate,
    TAccountProposal,
    TAccountVote,
    TAccountGovernor,
    TAccountGovernProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CastVoteInstruction<
  TProgramAddress,
  TAccountLocker,
  TAccountEscrow,
  TAccountVoteDelegate,
  TAccountProposal,
  TAccountVote,
  TAccountGovernor,
  TAccountGovernProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKED_VOTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    locker: { value: input.locker ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: false },
    voteDelegate: { value: input.voteDelegate ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    vote: { value: input.vote ?? null, isWritable: true },
    governor: { value: input.governor ?? null, isWritable: false },
    governProgram: { value: input.governProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.locker),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.voteDelegate),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.governProgram),
    ],
    data: getCastVoteInstructionDataEncoder().encode(
      args as CastVoteInstructionDataArgs,
    ),
    programAddress,
  } as CastVoteInstruction<
    TProgramAddress,
    TAccountLocker,
    TAccountEscrow,
    TAccountVoteDelegate,
    TAccountProposal,
    TAccountVote,
    TAccountGovernor,
    TAccountGovernProgram
  >);
}

export interface ParsedCastVoteInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    locker: TAccountMetas[0];
    escrow: TAccountMetas[1];
    voteDelegate: TAccountMetas[2];
    proposal: TAccountMetas[3];
    vote: TAccountMetas[4];
    governor: TAccountMetas[5];
    governProgram: TAccountMetas[6];
  };
  data: CastVoteInstructionData;
}

export function parseCastVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCastVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      locker: getNextAccount(),
      escrow: getNextAccount(),
      voteDelegate: getNextAccount(),
      proposal: getNextAccount(),
      vote: getNextAccount(),
      governor: getNextAccount(),
      governProgram: getNextAccount(),
    },
    data: getCastVoteInstructionDataDecoder().decode(instruction.data),
  };
}
