/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_ELECTORATE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  145, 135, 92, 16, 77, 195, 145, 91,
]);

export function getSetElectorateDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_ELECTORATE_DISCRIMINATOR,
  );
}

export type SetElectorateInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountSmartWallet extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernor extends string
        ? WritableAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountSmartWallet extends string
        ? ReadonlySignerAccount<TAccountSmartWallet> &
            AccountSignerMeta<TAccountSmartWallet>
        : TAccountSmartWallet,
      ...TRemainingAccounts,
    ]
  >;

export interface SetElectorateInstructionData {
  discriminator: ReadonlyUint8Array;
  newElectorate: Address;
}

export interface SetElectorateInstructionDataArgs {
  newElectorate: Address;
}

export function getSetElectorateInstructionDataEncoder(): FixedSizeEncoder<SetElectorateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newElectorate", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_ELECTORATE_DISCRIMINATOR }),
  );
}

export function getSetElectorateInstructionDataDecoder(): FixedSizeDecoder<SetElectorateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newElectorate", getAddressDecoder()],
  ]);
}

export function getSetElectorateInstructionDataCodec(): FixedSizeCodec<
  SetElectorateInstructionDataArgs,
  SetElectorateInstructionData
> {
  return combineCodec(
    getSetElectorateInstructionDataEncoder(),
    getSetElectorateInstructionDataDecoder(),
  );
}

export interface SetElectorateInput<
  TAccountGovernor extends string = string,
  TAccountSmartWallet extends string = string,
> {
  governor: Address<TAccountGovernor>;
  smartWallet: TransactionSigner<TAccountSmartWallet>;
  newElectorate: SetElectorateInstructionDataArgs["newElectorate"];
}

export function getSetElectorateInstruction<
  TAccountGovernor extends string,
  TAccountSmartWallet extends string,
  TProgramAddress extends Address = typeof GOVERN_PROGRAM_ADDRESS,
>(
  input: SetElectorateInput<TAccountGovernor, TAccountSmartWallet>,
  config?: { programAddress?: TProgramAddress },
): SetElectorateInstruction<
  TProgramAddress,
  TAccountGovernor,
  TAccountSmartWallet
> {
  // Program address.
  const programAddress = config?.programAddress ?? GOVERN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governor: { value: input.governor ?? null, isWritable: true },
    smartWallet: { value: input.smartWallet ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.smartWallet),
    ],
    data: getSetElectorateInstructionDataEncoder().encode(
      args as SetElectorateInstructionDataArgs,
    ),
    programAddress,
  } as SetElectorateInstruction<
    TProgramAddress,
    TAccountGovernor,
    TAccountSmartWallet
  >);
}

export interface ParsedSetElectorateInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    governor: TAccountMetas[0];
    smartWallet: TAccountMetas[1];
  };
  data: SetElectorateInstructionData;
}

export function parseSetElectorateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetElectorateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { governor: getNextAccount(), smartWallet: getNextAccount() },
    data: getSetElectorateInstructionDataDecoder().decode(instruction.data),
  };
}
