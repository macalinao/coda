/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { LOCKED_VOTER_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const ACTIVATE_PROPOSAL_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([90, 186, 203, 234, 70, 185, 191, 21]);

export function getActivateProposalDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ACTIVATE_PROPOSAL_DISCRIMINATOR,
  );
}

export type ActivateProposalInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountLocker extends string | AccountMeta = string,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountProposal extends string | AccountMeta = string,
  TAccountEscrow extends string | AccountMeta = string,
  TAccountEscrowOwner extends string | AccountMeta = string,
  TAccountGovernProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLocker extends string
        ? ReadonlyAccount<TAccountLocker>
        : TAccountLocker,
      TAccountGovernor extends string
        ? ReadonlyAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountEscrow extends string
        ? ReadonlyAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowOwner extends string
        ? ReadonlySignerAccount<TAccountEscrowOwner> &
            AccountSignerMeta<TAccountEscrowOwner>
        : TAccountEscrowOwner,
      TAccountGovernProgram extends string
        ? ReadonlyAccount<TAccountGovernProgram>
        : TAccountGovernProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface ActivateProposalInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface ActivateProposalInstructionDataArgs {}

export function getActivateProposalInstructionDataEncoder(): FixedSizeEncoder<ActivateProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: ACTIVATE_PROPOSAL_DISCRIMINATOR }),
  );
}

export function getActivateProposalInstructionDataDecoder(): FixedSizeDecoder<ActivateProposalInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getActivateProposalInstructionDataCodec(): FixedSizeCodec<
  ActivateProposalInstructionDataArgs,
  ActivateProposalInstructionData
> {
  return combineCodec(
    getActivateProposalInstructionDataEncoder(),
    getActivateProposalInstructionDataDecoder(),
  );
}

export interface ActivateProposalInput<
  TAccountLocker extends string = string,
  TAccountGovernor extends string = string,
  TAccountProposal extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowOwner extends string = string,
  TAccountGovernProgram extends string = string,
> {
  locker: Address<TAccountLocker>;
  governor: Address<TAccountGovernor>;
  proposal: Address<TAccountProposal>;
  escrow: Address<TAccountEscrow>;
  escrowOwner: TransactionSigner<TAccountEscrowOwner>;
  governProgram: Address<TAccountGovernProgram>;
}

export function getActivateProposalInstruction<
  TAccountLocker extends string,
  TAccountGovernor extends string,
  TAccountProposal extends string,
  TAccountEscrow extends string,
  TAccountEscrowOwner extends string,
  TAccountGovernProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
>(
  input: ActivateProposalInput<
    TAccountLocker,
    TAccountGovernor,
    TAccountProposal,
    TAccountEscrow,
    TAccountEscrowOwner,
    TAccountGovernProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ActivateProposalInstruction<
  TProgramAddress,
  TAccountLocker,
  TAccountGovernor,
  TAccountProposal,
  TAccountEscrow,
  TAccountEscrowOwner,
  TAccountGovernProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKED_VOTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    locker: { value: input.locker ?? null, isWritable: false },
    governor: { value: input.governor ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: false },
    escrowOwner: { value: input.escrowOwner ?? null, isWritable: false },
    governProgram: { value: input.governProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.locker),
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowOwner),
      getAccountMeta(accounts.governProgram),
    ],
    data: getActivateProposalInstructionDataEncoder().encode({}),
    programAddress,
  } as ActivateProposalInstruction<
    TProgramAddress,
    TAccountLocker,
    TAccountGovernor,
    TAccountProposal,
    TAccountEscrow,
    TAccountEscrowOwner,
    TAccountGovernProgram
  >);
}

export interface ParsedActivateProposalInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    locker: TAccountMetas[0];
    governor: TAccountMetas[1];
    proposal: TAccountMetas[2];
    escrow: TAccountMetas[3];
    escrowOwner: TAccountMetas[4];
    governProgram: TAccountMetas[5];
  };
  data: ActivateProposalInstructionData;
}

export function parseActivateProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedActivateProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      locker: getNextAccount(),
      governor: getNextAccount(),
      proposal: getNextAccount(),
      escrow: getNextAccount(),
      escrowOwner: getNextAccount(),
      governProgram: getNextAccount(),
    },
    data: getActivateProposalInstructionDataDecoder().decode(instruction.data),
  };
}
