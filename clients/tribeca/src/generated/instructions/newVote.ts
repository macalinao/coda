/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const NEW_VOTE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  163, 108, 157, 189, 140, 80, 13, 143,
]);

export function getNewVoteDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(NEW_VOTE_DISCRIMINATOR);
}

export type NewVoteInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountProposal extends string | AccountMeta = string,
  TAccountVote extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposal extends string
        ? ReadonlyAccount<TAccountProposal>
        : TAccountProposal,
      TAccountVote extends string
        ? WritableAccount<TAccountVote>
        : TAccountVote,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface NewVoteInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
  voter: Address;
}

export interface NewVoteInstructionDataArgs {
  bump: number;
  voter: Address;
}

export function getNewVoteInstructionDataEncoder(): FixedSizeEncoder<NewVoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
      ["voter", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: NEW_VOTE_DISCRIMINATOR }),
  );
}

export function getNewVoteInstructionDataDecoder(): FixedSizeDecoder<NewVoteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
    ["voter", getAddressDecoder()],
  ]);
}

export function getNewVoteInstructionDataCodec(): FixedSizeCodec<
  NewVoteInstructionDataArgs,
  NewVoteInstructionData
> {
  return combineCodec(
    getNewVoteInstructionDataEncoder(),
    getNewVoteInstructionDataDecoder(),
  );
}

export interface NewVoteInput<
  TAccountProposal extends string = string,
  TAccountVote extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  proposal: Address<TAccountProposal>;
  vote: Address<TAccountVote>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: NewVoteInstructionDataArgs["bump"];
  voter: NewVoteInstructionDataArgs["voter"];
}

export function getNewVoteInstruction<
  TAccountProposal extends string,
  TAccountVote extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof GOVERN_PROGRAM_ADDRESS,
>(
  input: NewVoteInput<
    TAccountProposal,
    TAccountVote,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): NewVoteInstruction<
  TProgramAddress,
  TAccountProposal,
  TAccountVote,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? GOVERN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: false },
    vote: { value: input.vote ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.vote),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getNewVoteInstructionDataEncoder().encode(
      args as NewVoteInstructionDataArgs,
    ),
    programAddress,
  } as NewVoteInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountVote,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedNewVoteInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    proposal: TAccountMetas[0];
    vote: TAccountMetas[1];
    payer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: NewVoteInstructionData;
}

export function parseNewVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedNewVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposal: getNextAccount(),
      vote: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getNewVoteInstructionDataDecoder().decode(instruction.data),
  };
}
