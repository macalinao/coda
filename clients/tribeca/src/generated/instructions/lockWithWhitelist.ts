/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { LOCKED_VOTER_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const LOCK_WITH_WHITELIST_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([138, 141, 28, 193, 7, 211, 181, 69]);

export function getLockWithWhitelistDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LOCK_WITH_WHITELIST_DISCRIMINATOR,
  );
}

export type LockWithWhitelistInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountLocker extends string | AccountMeta = string,
  TAccountEscrow extends string | AccountMeta = string,
  TAccountEscrowTokens extends string | AccountMeta = string,
  TAccountEscrowOwner extends string | AccountMeta = string,
  TAccountSourceTokens extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLocker extends string
        ? WritableAccount<TAccountLocker>
        : TAccountLocker,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountEscrowTokens extends string
        ? WritableAccount<TAccountEscrowTokens>
        : TAccountEscrowTokens,
      TAccountEscrowOwner extends string
        ? ReadonlySignerAccount<TAccountEscrowOwner> &
            AccountSignerMeta<TAccountEscrowOwner>
        : TAccountEscrowOwner,
      TAccountSourceTokens extends string
        ? WritableAccount<TAccountSourceTokens>
        : TAccountSourceTokens,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export interface LockWithWhitelistInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  duration: bigint;
}

export interface LockWithWhitelistInstructionDataArgs {
  amount: number | bigint;
  duration: number | bigint;
}

export function getLockWithWhitelistInstructionDataEncoder(): FixedSizeEncoder<LockWithWhitelistInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
      ["duration", getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_WITH_WHITELIST_DISCRIMINATOR }),
  );
}

export function getLockWithWhitelistInstructionDataDecoder(): FixedSizeDecoder<LockWithWhitelistInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
    ["duration", getI64Decoder()],
  ]);
}

export function getLockWithWhitelistInstructionDataCodec(): FixedSizeCodec<
  LockWithWhitelistInstructionDataArgs,
  LockWithWhitelistInstructionData
> {
  return combineCodec(
    getLockWithWhitelistInstructionDataEncoder(),
    getLockWithWhitelistInstructionDataDecoder(),
  );
}

export interface LockWithWhitelistInput<
  TAccountLocker extends string = string,
  TAccountEscrow extends string = string,
  TAccountEscrowTokens extends string = string,
  TAccountEscrowOwner extends string = string,
  TAccountSourceTokens extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionsSysvar extends string = string,
> {
  locker: Address<TAccountLocker>;
  escrow: Address<TAccountEscrow>;
  escrowTokens: Address<TAccountEscrowTokens>;
  escrowOwner: TransactionSigner<TAccountEscrowOwner>;
  sourceTokens: Address<TAccountSourceTokens>;
  tokenProgram?: Address<TAccountTokenProgram>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  amount: LockWithWhitelistInstructionDataArgs["amount"];
  duration: LockWithWhitelistInstructionDataArgs["duration"];
}

export function getLockWithWhitelistInstruction<
  TAccountLocker extends string,
  TAccountEscrow extends string,
  TAccountEscrowTokens extends string,
  TAccountEscrowOwner extends string,
  TAccountSourceTokens extends string,
  TAccountTokenProgram extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
>(
  input: LockWithWhitelistInput<
    TAccountLocker,
    TAccountEscrow,
    TAccountEscrowTokens,
    TAccountEscrowOwner,
    TAccountSourceTokens,
    TAccountTokenProgram,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress },
): LockWithWhitelistInstruction<
  TProgramAddress,
  TAccountLocker,
  TAccountEscrow,
  TAccountEscrowTokens,
  TAccountEscrowOwner,
  TAccountSourceTokens,
  TAccountTokenProgram,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKED_VOTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    locker: { value: input.locker ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    escrowTokens: { value: input.escrowTokens ?? null, isWritable: true },
    escrowOwner: { value: input.escrowOwner ?? null, isWritable: false },
    sourceTokens: { value: input.sourceTokens ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.locker),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.escrowTokens),
      getAccountMeta(accounts.escrowOwner),
      getAccountMeta(accounts.sourceTokens),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionsSysvar),
    ],
    data: getLockWithWhitelistInstructionDataEncoder().encode(
      args as LockWithWhitelistInstructionDataArgs,
    ),
    programAddress,
  } as LockWithWhitelistInstruction<
    TProgramAddress,
    TAccountLocker,
    TAccountEscrow,
    TAccountEscrowTokens,
    TAccountEscrowOwner,
    TAccountSourceTokens,
    TAccountTokenProgram,
    TAccountInstructionsSysvar
  >);
}

export interface ParsedLockWithWhitelistInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    locker: TAccountMetas[0];
    escrow: TAccountMetas[1];
    escrowTokens: TAccountMetas[2];
    escrowOwner: TAccountMetas[3];
    sourceTokens: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    instructionsSysvar: TAccountMetas[6];
  };
  data: LockWithWhitelistInstructionData;
}

export function parseLockWithWhitelistInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedLockWithWhitelistInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      locker: getNextAccount(),
      escrow: getNextAccount(),
      escrowTokens: getNextAccount(),
      escrowOwner: getNextAccount(),
      sourceTokens: getNextAccount(),
      tokenProgram: getNextAccount(),
      instructionsSysvar: getNextAccount(),
    },
    data: getLockWithWhitelistInstructionDataDecoder().decode(instruction.data),
  };
}
