/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const QUEUE_PROPOSAL_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  168, 219, 139, 211, 205, 152, 125, 110,
]);

export function getQueueProposalDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    QUEUE_PROPOSAL_DISCRIMINATOR,
  );
}

export type QueueProposalInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountProposal extends string | AccountMeta = string,
  TAccountTransaction extends string | AccountMeta = string,
  TAccountSmartWallet extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSmartWalletProgram extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGovernor extends string
        ? ReadonlyAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountSmartWallet extends string
        ? WritableAccount<TAccountSmartWallet>
        : TAccountSmartWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSmartWalletProgram extends string
        ? ReadonlyAccount<TAccountSmartWalletProgram>
        : TAccountSmartWalletProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface QueueProposalInstructionData {
  discriminator: ReadonlyUint8Array;
  txBump: number;
}

export interface QueueProposalInstructionDataArgs {
  txBump: number;
}

export function getQueueProposalInstructionDataEncoder(): FixedSizeEncoder<QueueProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["txBump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: QUEUE_PROPOSAL_DISCRIMINATOR }),
  );
}

export function getQueueProposalInstructionDataDecoder(): FixedSizeDecoder<QueueProposalInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["txBump", getU8Decoder()],
  ]);
}

export function getQueueProposalInstructionDataCodec(): FixedSizeCodec<
  QueueProposalInstructionDataArgs,
  QueueProposalInstructionData
> {
  return combineCodec(
    getQueueProposalInstructionDataEncoder(),
    getQueueProposalInstructionDataDecoder(),
  );
}

export interface QueueProposalInput<
  TAccountGovernor extends string = string,
  TAccountProposal extends string = string,
  TAccountTransaction extends string = string,
  TAccountSmartWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSmartWalletProgram extends string = string,
  TAccountSystemProgram extends string = string,
> {
  governor: Address<TAccountGovernor>;
  proposal: Address<TAccountProposal>;
  transaction: Address<TAccountTransaction>;
  smartWallet: Address<TAccountSmartWallet>;
  payer: TransactionSigner<TAccountPayer>;
  smartWalletProgram: Address<TAccountSmartWalletProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  txBump: QueueProposalInstructionDataArgs["txBump"];
}

export function getQueueProposalInstruction<
  TAccountGovernor extends string,
  TAccountProposal extends string,
  TAccountTransaction extends string,
  TAccountSmartWallet extends string,
  TAccountPayer extends string,
  TAccountSmartWalletProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof GOVERN_PROGRAM_ADDRESS,
>(
  input: QueueProposalInput<
    TAccountGovernor,
    TAccountProposal,
    TAccountTransaction,
    TAccountSmartWallet,
    TAccountPayer,
    TAccountSmartWalletProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): QueueProposalInstruction<
  TProgramAddress,
  TAccountGovernor,
  TAccountProposal,
  TAccountTransaction,
  TAccountSmartWallet,
  TAccountPayer,
  TAccountSmartWalletProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? GOVERN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governor: { value: input.governor ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: true },
    smartWallet: { value: input.smartWallet ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    smartWalletProgram: {
      value: input.smartWalletProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.smartWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.smartWalletProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getQueueProposalInstructionDataEncoder().encode(
      args as QueueProposalInstructionDataArgs,
    ),
    programAddress,
  } as QueueProposalInstruction<
    TProgramAddress,
    TAccountGovernor,
    TAccountProposal,
    TAccountTransaction,
    TAccountSmartWallet,
    TAccountPayer,
    TAccountSmartWalletProgram,
    TAccountSystemProgram
  >);
}

export interface ParsedQueueProposalInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    governor: TAccountMetas[0];
    proposal: TAccountMetas[1];
    transaction: TAccountMetas[2];
    smartWallet: TAccountMetas[3];
    payer: TAccountMetas[4];
    smartWalletProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: QueueProposalInstructionData;
}

export function parseQueueProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedQueueProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governor: getNextAccount(),
      proposal: getNextAccount(),
      transaction: getNextAccount(),
      smartWallet: getNextAccount(),
      payer: getNextAccount(),
      smartWalletProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getQueueProposalInstructionDataDecoder().decode(instruction.data),
  };
}
