/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { LOCKED_VOTER_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REVOKE_PROGRAM_LOCK_PRIVILEGE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([170, 151, 7, 88, 194, 86, 245, 112]);

export function getRevokeProgramLockPrivilegeDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REVOKE_PROGRAM_LOCK_PRIVILEGE_DISCRIMINATOR,
  );
}

export type RevokeProgramLockPrivilegeInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountLocker extends string | AccountMeta = string,
  TAccountWhitelistEntry extends string | AccountMeta = string,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountSmartWallet extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLocker extends string
        ? ReadonlyAccount<TAccountLocker>
        : TAccountLocker,
      TAccountWhitelistEntry extends string
        ? WritableAccount<TAccountWhitelistEntry>
        : TAccountWhitelistEntry,
      TAccountGovernor extends string
        ? ReadonlyAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountSmartWallet extends string
        ? ReadonlySignerAccount<TAccountSmartWallet> &
            AccountSignerMeta<TAccountSmartWallet>
        : TAccountSmartWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export interface RevokeProgramLockPrivilegeInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RevokeProgramLockPrivilegeInstructionDataArgs {}

export function getRevokeProgramLockPrivilegeInstructionDataEncoder(): FixedSizeEncoder<RevokeProgramLockPrivilegeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REVOKE_PROGRAM_LOCK_PRIVILEGE_DISCRIMINATOR,
    }),
  );
}

export function getRevokeProgramLockPrivilegeInstructionDataDecoder(): FixedSizeDecoder<RevokeProgramLockPrivilegeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRevokeProgramLockPrivilegeInstructionDataCodec(): FixedSizeCodec<
  RevokeProgramLockPrivilegeInstructionDataArgs,
  RevokeProgramLockPrivilegeInstructionData
> {
  return combineCodec(
    getRevokeProgramLockPrivilegeInstructionDataEncoder(),
    getRevokeProgramLockPrivilegeInstructionDataDecoder(),
  );
}

export interface RevokeProgramLockPrivilegeInput<
  TAccountLocker extends string = string,
  TAccountWhitelistEntry extends string = string,
  TAccountGovernor extends string = string,
  TAccountSmartWallet extends string = string,
  TAccountPayer extends string = string,
> {
  locker: Address<TAccountLocker>;
  whitelistEntry: Address<TAccountWhitelistEntry>;
  governor: Address<TAccountGovernor>;
  smartWallet: TransactionSigner<TAccountSmartWallet>;
  payer: TransactionSigner<TAccountPayer>;
}

export function getRevokeProgramLockPrivilegeInstruction<
  TAccountLocker extends string,
  TAccountWhitelistEntry extends string,
  TAccountGovernor extends string,
  TAccountSmartWallet extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
>(
  input: RevokeProgramLockPrivilegeInput<
    TAccountLocker,
    TAccountWhitelistEntry,
    TAccountGovernor,
    TAccountSmartWallet,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress },
): RevokeProgramLockPrivilegeInstruction<
  TProgramAddress,
  TAccountLocker,
  TAccountWhitelistEntry,
  TAccountGovernor,
  TAccountSmartWallet,
  TAccountPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? LOCKED_VOTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    locker: { value: input.locker ?? null, isWritable: false },
    whitelistEntry: { value: input.whitelistEntry ?? null, isWritable: true },
    governor: { value: input.governor ?? null, isWritable: false },
    smartWallet: { value: input.smartWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.locker),
      getAccountMeta(accounts.whitelistEntry),
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.smartWallet),
      getAccountMeta(accounts.payer),
    ],
    data: getRevokeProgramLockPrivilegeInstructionDataEncoder().encode({}),
    programAddress,
  } as RevokeProgramLockPrivilegeInstruction<
    TProgramAddress,
    TAccountLocker,
    TAccountWhitelistEntry,
    TAccountGovernor,
    TAccountSmartWallet,
    TAccountPayer
  >);
}

export interface ParsedRevokeProgramLockPrivilegeInstruction<
  TProgram extends string = typeof LOCKED_VOTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    locker: TAccountMetas[0];
    whitelistEntry: TAccountMetas[1];
    governor: TAccountMetas[2];
    smartWallet: TAccountMetas[3];
    payer: TAccountMetas[4];
  };
  data: RevokeProgramLockPrivilegeInstructionData;
}

export function parseRevokeProgramLockPrivilegeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRevokeProgramLockPrivilegeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      locker: getNextAccount(),
      whitelistEntry: getNextAccount(),
      governor: getNextAccount(),
      smartWallet: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getRevokeProgramLockPrivilegeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
