/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  GovernanceParameters,
  GovernanceParametersArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { GOVERN_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getGovernanceParametersDecoder,
  getGovernanceParametersEncoder,
} from "../types/index.js";

export const CREATE_GOVERNOR_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [103, 30, 78, 252, 28, 128, 40, 3],
);

export function getCreateGovernorDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_GOVERNOR_DISCRIMINATOR,
  );
}

export type CreateGovernorInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountBase extends string | AccountMeta = string,
  TAccountGovernor extends string | AccountMeta = string,
  TAccountSmartWallet extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & AccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountGovernor extends string
        ? WritableAccount<TAccountGovernor>
        : TAccountGovernor,
      TAccountSmartWallet extends string
        ? ReadonlyAccount<TAccountSmartWallet>
        : TAccountSmartWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateGovernorInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
  electorate: Address;
  params: GovernanceParameters;
}

export interface CreateGovernorInstructionDataArgs {
  bump: number;
  electorate: Address;
  params: GovernanceParametersArgs;
}

export function getCreateGovernorInstructionDataEncoder(): FixedSizeEncoder<CreateGovernorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
      ["electorate", getAddressEncoder()],
      ["params", getGovernanceParametersEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_GOVERNOR_DISCRIMINATOR }),
  );
}

export function getCreateGovernorInstructionDataDecoder(): FixedSizeDecoder<CreateGovernorInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
    ["electorate", getAddressDecoder()],
    ["params", getGovernanceParametersDecoder()],
  ]);
}

export function getCreateGovernorInstructionDataCodec(): FixedSizeCodec<
  CreateGovernorInstructionDataArgs,
  CreateGovernorInstructionData
> {
  return combineCodec(
    getCreateGovernorInstructionDataEncoder(),
    getCreateGovernorInstructionDataDecoder(),
  );
}

export interface CreateGovernorInput<
  TAccountBase extends string = string,
  TAccountGovernor extends string = string,
  TAccountSmartWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  governor: Address<TAccountGovernor>;
  smartWallet: Address<TAccountSmartWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: CreateGovernorInstructionDataArgs["bump"];
  electorate: CreateGovernorInstructionDataArgs["electorate"];
  params: CreateGovernorInstructionDataArgs["params"];
}

export function getCreateGovernorInstruction<
  TAccountBase extends string,
  TAccountGovernor extends string,
  TAccountSmartWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof GOVERN_PROGRAM_ADDRESS,
>(
  input: CreateGovernorInput<
    TAccountBase,
    TAccountGovernor,
    TAccountSmartWallet,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CreateGovernorInstruction<
  TProgramAddress,
  TAccountBase,
  TAccountGovernor,
  TAccountSmartWallet,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? GOVERN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    governor: { value: input.governor ?? null, isWritable: true },
    smartWallet: { value: input.smartWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.governor),
      getAccountMeta(accounts.smartWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateGovernorInstructionDataEncoder().encode(
      args as CreateGovernorInstructionDataArgs,
    ),
    programAddress,
  } as CreateGovernorInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountGovernor,
    TAccountSmartWallet,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedCreateGovernorInstruction<
  TProgram extends string = typeof GOVERN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    base: TAccountMetas[0];
    governor: TAccountMetas[1];
    smartWallet: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateGovernorInstructionData;
}

export function parseCreateGovernorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateGovernorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      governor: getNextAccount(),
      smartWallet: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateGovernorInstructionDataDecoder().decode(instruction.data),
  };
}
