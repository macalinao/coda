/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  OptionOrNullable,
  ProgramDerivedAddress,
} from "@solana/kit";
import {
  address,
  getAddressEncoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getUtf8Encoder,
} from "@solana/kit";

export interface WhitelistSeeds {
  locker: Address;
  programId: Address;
  owner: OptionOrNullable<Address>;
}

/** Whitelist entry for a program that can interact with the locker */
export async function findWhitelistPda(
  seeds: WhitelistSeeds,
  config: { programAddress?: Address | undefined } = {},
): Promise<ProgramDerivedAddress> {
  const {
    programAddress = "LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw" as Address<"LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw">,
  } = config;
  return await getProgramDerivedAddress({
    programAddress,
    seeds: [
      getUtf8Encoder().encode("LockerWhitelistEntry"),
      getAddressEncoder().encode(seeds.locker),
      getAddressEncoder().encode(seeds.programId),
      getOptionEncoder(getAddressEncoder(), {
        prefix: null,
        noneValue: getAddressEncoder().encode(
          address("11111111111111111111111111111111"),
        ),
      }).encode(seeds.owner),
    ],
  });
}
