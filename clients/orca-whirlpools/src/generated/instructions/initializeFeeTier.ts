/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INITIALIZE_FEE_TIER_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([183, 74, 156, 160, 112, 2, 42, 30]);

export function getInitializeFeeTierDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_FEE_TIER_DISCRIMINATOR,
  );
}

export type InitializeFeeTierInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta = string,
  TAccountFeeTier extends string | AccountMeta = string,
  TAccountFunder extends string | AccountMeta = string,
  TAccountFeeAuthority extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountFeeTier extends string
        ? WritableAccount<TAccountFeeTier>
        : TAccountFeeTier,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountFeeAuthority extends string
        ? ReadonlySignerAccount<TAccountFeeAuthority> &
            AccountSignerMeta<TAccountFeeAuthority>
        : TAccountFeeAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeFeeTierInstructionData {
  discriminator: ReadonlyUint8Array;
  tickSpacing: number;
  defaultFeeRate: number;
}

export interface InitializeFeeTierInstructionDataArgs {
  tickSpacing: number;
  defaultFeeRate: number;
}

export function getInitializeFeeTierInstructionDataEncoder(): FixedSizeEncoder<InitializeFeeTierInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["tickSpacing", getU16Encoder()],
      ["defaultFeeRate", getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_FEE_TIER_DISCRIMINATOR }),
  );
}

export function getInitializeFeeTierInstructionDataDecoder(): FixedSizeDecoder<InitializeFeeTierInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["tickSpacing", getU16Decoder()],
    ["defaultFeeRate", getU16Decoder()],
  ]);
}

export function getInitializeFeeTierInstructionDataCodec(): FixedSizeCodec<
  InitializeFeeTierInstructionDataArgs,
  InitializeFeeTierInstructionData
> {
  return combineCodec(
    getInitializeFeeTierInstructionDataEncoder(),
    getInitializeFeeTierInstructionDataDecoder(),
  );
}

export interface InitializeFeeTierInput<
  TAccountConfig extends string = string,
  TAccountFeeTier extends string = string,
  TAccountFunder extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> {
  config: Address<TAccountConfig>;
  feeTier: Address<TAccountFeeTier>;
  funder: TransactionSigner<TAccountFunder>;
  feeAuthority: TransactionSigner<TAccountFeeAuthority>;
  systemProgram: Address<TAccountSystemProgram>;
  tickSpacing: InitializeFeeTierInstructionDataArgs["tickSpacing"];
  defaultFeeRate: InitializeFeeTierInstructionDataArgs["defaultFeeRate"];
}

export function getInitializeFeeTierInstruction<
  TAccountConfig extends string,
  TAccountFeeTier extends string,
  TAccountFunder extends string,
  TAccountFeeAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeFeeTierInput<
    TAccountConfig,
    TAccountFeeTier,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeFeeTierInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountFeeTier,
  TAccountFunder,
  TAccountFeeAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    feeTier: { value: input.feeTier ?? null, isWritable: true },
    funder: { value: input.funder ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.feeTier),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeFeeTierInstructionDataEncoder().encode(
      args as InitializeFeeTierInstructionDataArgs,
    ),
    programAddress,
  } as InitializeFeeTierInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeTier,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >);
}

export interface ParsedInitializeFeeTierInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    feeTier: TAccountMetas[1];
    funder: TAccountMetas[2];
    feeAuthority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeFeeTierInstructionData;
}

export function parseInitializeFeeTierInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeFeeTierInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      feeTier: getNextAccount(),
      funder: getNextAccount(),
      feeAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeFeeTierInstructionDataDecoder().decode(instruction.data),
  };
}
