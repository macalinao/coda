/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INITIALIZE_REWARD_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([95, 135, 192, 196, 242, 129, 230, 68]);

export function getInitializeRewardDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_REWARD_DISCRIMINATOR,
  );
}

export type InitializeRewardInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountRewardAuthority extends string | AccountMeta = string,
  TAccountFunder extends string | AccountMeta = string,
  TAccountWhirlpool extends string | AccountMeta = string,
  TAccountRewardMint extends string | AccountMeta = string,
  TAccountRewardVault extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRewardAuthority extends string
        ? ReadonlySignerAccount<TAccountRewardAuthority> &
            AccountSignerMeta<TAccountRewardAuthority>
        : TAccountRewardAuthority,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountRewardVault extends string
        ? WritableSignerAccount<TAccountRewardVault> &
            AccountSignerMeta<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeRewardInstructionData {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
}

export interface InitializeRewardInstructionDataArgs {
  rewardIndex: number;
}

export function getInitializeRewardInstructionDataEncoder(): FixedSizeEncoder<InitializeRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_REWARD_DISCRIMINATOR }),
  );
}

export function getInitializeRewardInstructionDataDecoder(): FixedSizeDecoder<InitializeRewardInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
  ]);
}

export function getInitializeRewardInstructionDataCodec(): FixedSizeCodec<
  InitializeRewardInstructionDataArgs,
  InitializeRewardInstructionData
> {
  return combineCodec(
    getInitializeRewardInstructionDataEncoder(),
    getInitializeRewardInstructionDataDecoder(),
  );
}

export interface InitializeRewardInput<
  TAccountRewardAuthority extends string = string,
  TAccountFunder extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
  funder: TransactionSigner<TAccountFunder>;
  whirlpool: Address<TAccountWhirlpool>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault: TransactionSigner<TAccountRewardVault>;
  tokenProgram: Address<TAccountTokenProgram>;
  systemProgram: Address<TAccountSystemProgram>;
  rent: Address<TAccountRent>;
  rewardIndex: InitializeRewardInstructionDataArgs["rewardIndex"];
}

export function getInitializeRewardInstruction<
  TAccountRewardAuthority extends string,
  TAccountFunder extends string,
  TAccountWhirlpool extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeRewardInput<
    TAccountRewardAuthority,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeRewardInstruction<
  TProgramAddress,
  TAccountRewardAuthority,
  TAccountFunder,
  TAccountWhirlpool,
  TAccountRewardMint,
  TAccountRewardVault,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardAuthority: {
      value: input.rewardAuthority ?? null,
      isWritable: false,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.rewardAuthority),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializeRewardInstructionDataEncoder().encode(
      args as InitializeRewardInstructionDataArgs,
    ),
    programAddress,
  } as InitializeRewardInstruction<
    TProgramAddress,
    TAccountRewardAuthority,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface ParsedInitializeRewardInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    rewardAuthority: TAccountMetas[0];
    funder: TAccountMetas[1];
    whirlpool: TAccountMetas[2];
    rewardMint: TAccountMetas[3];
    rewardVault: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
  };
  data: InitializeRewardInstructionData;
}

export function parseInitializeRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewardAuthority: getNextAccount(),
      funder: getNextAccount(),
      whirlpool: getNextAccount(),
      rewardMint: getNextAccount(),
      rewardVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializeRewardInstructionDataDecoder().decode(instruction.data),
  };
}
