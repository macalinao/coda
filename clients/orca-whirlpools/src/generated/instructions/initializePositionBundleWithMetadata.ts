/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INITIALIZE_POSITION_BUNDLE_WITH_METADATA_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([93, 124, 16, 179, 249, 131, 115, 245]);

export function getInitializePositionBundleWithMetadataDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POSITION_BUNDLE_WITH_METADATA_DISCRIMINATOR,
  );
}

export type InitializePositionBundleWithMetadataInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountPositionBundle extends string | AccountMeta = string,
  TAccountPositionBundleMint extends string | AccountMeta = string,
  TAccountPositionBundleMetadata extends string | AccountMeta = string,
  TAccountPositionBundleTokenAccount extends string | AccountMeta = string,
  TAccountPositionBundleOwner extends string | AccountMeta = string,
  TAccountFunder extends string | AccountMeta = string,
  TAccountMetadataUpdateAuth extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountAssociatedTokenProgram extends string | AccountMeta = string,
  TAccountMetadataProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPositionBundle extends string
        ? WritableAccount<TAccountPositionBundle>
        : TAccountPositionBundle,
      TAccountPositionBundleMint extends string
        ? WritableSignerAccount<TAccountPositionBundleMint> &
            AccountSignerMeta<TAccountPositionBundleMint>
        : TAccountPositionBundleMint,
      TAccountPositionBundleMetadata extends string
        ? WritableAccount<TAccountPositionBundleMetadata>
        : TAccountPositionBundleMetadata,
      TAccountPositionBundleTokenAccount extends string
        ? WritableAccount<TAccountPositionBundleTokenAccount>
        : TAccountPositionBundleTokenAccount,
      TAccountPositionBundleOwner extends string
        ? ReadonlyAccount<TAccountPositionBundleOwner>
        : TAccountPositionBundleOwner,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountMetadataUpdateAuth extends string
        ? ReadonlyAccount<TAccountMetadataUpdateAuth>
        : TAccountMetadataUpdateAuth,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializePositionBundleWithMetadataInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitializePositionBundleWithMetadataInstructionDataArgs {}

export function getInitializePositionBundleWithMetadataInstructionDataEncoder(): FixedSizeEncoder<InitializePositionBundleWithMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_POSITION_BUNDLE_WITH_METADATA_DISCRIMINATOR,
    }),
  );
}

export function getInitializePositionBundleWithMetadataInstructionDataDecoder(): FixedSizeDecoder<InitializePositionBundleWithMetadataInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializePositionBundleWithMetadataInstructionDataCodec(): FixedSizeCodec<
  InitializePositionBundleWithMetadataInstructionDataArgs,
  InitializePositionBundleWithMetadataInstructionData
> {
  return combineCodec(
    getInitializePositionBundleWithMetadataInstructionDataEncoder(),
    getInitializePositionBundleWithMetadataInstructionDataDecoder(),
  );
}

export interface InitializePositionBundleWithMetadataInput<
  TAccountPositionBundle extends string = string,
  TAccountPositionBundleMint extends string = string,
  TAccountPositionBundleMetadata extends string = string,
  TAccountPositionBundleTokenAccount extends string = string,
  TAccountPositionBundleOwner extends string = string,
  TAccountFunder extends string = string,
  TAccountMetadataUpdateAuth extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
> {
  positionBundle: Address<TAccountPositionBundle>;
  positionBundleMint: TransactionSigner<TAccountPositionBundleMint>;
  positionBundleMetadata: Address<TAccountPositionBundleMetadata>;
  positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
  positionBundleOwner: Address<TAccountPositionBundleOwner>;
  funder: TransactionSigner<TAccountFunder>;
  metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
  tokenProgram: Address<TAccountTokenProgram>;
  systemProgram: Address<TAccountSystemProgram>;
  rent: Address<TAccountRent>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  metadataProgram: Address<TAccountMetadataProgram>;
}

export function getInitializePositionBundleWithMetadataInstruction<
  TAccountPositionBundle extends string,
  TAccountPositionBundleMint extends string,
  TAccountPositionBundleMetadata extends string,
  TAccountPositionBundleTokenAccount extends string,
  TAccountPositionBundleOwner extends string,
  TAccountFunder extends string,
  TAccountMetadataUpdateAuth extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializePositionBundleWithMetadataInput<
    TAccountPositionBundle,
    TAccountPositionBundleMint,
    TAccountPositionBundleMetadata,
    TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner,
    TAccountFunder,
    TAccountMetadataUpdateAuth,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializePositionBundleWithMetadataInstruction<
  TProgramAddress,
  TAccountPositionBundle,
  TAccountPositionBundleMint,
  TAccountPositionBundleMetadata,
  TAccountPositionBundleTokenAccount,
  TAccountPositionBundleOwner,
  TAccountFunder,
  TAccountMetadataUpdateAuth,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountAssociatedTokenProgram,
  TAccountMetadataProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    positionBundle: { value: input.positionBundle ?? null, isWritable: true },
    positionBundleMint: {
      value: input.positionBundleMint ?? null,
      isWritable: true,
    },
    positionBundleMetadata: {
      value: input.positionBundleMetadata ?? null,
      isWritable: true,
    },
    positionBundleTokenAccount: {
      value: input.positionBundleTokenAccount ?? null,
      isWritable: true,
    },
    positionBundleOwner: {
      value: input.positionBundleOwner ?? null,
      isWritable: false,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    metadataUpdateAuth: {
      value: input.metadataUpdateAuth ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.positionBundle),
      getAccountMeta(accounts.positionBundleMint),
      getAccountMeta(accounts.positionBundleMetadata),
      getAccountMeta(accounts.positionBundleTokenAccount),
      getAccountMeta(accounts.positionBundleOwner),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.metadataUpdateAuth),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
    ],
    programAddress,
    data: getInitializePositionBundleWithMetadataInstructionDataEncoder().encode(
      {},
    ),
  } as InitializePositionBundleWithMetadataInstruction<
    TProgramAddress,
    TAccountPositionBundle,
    TAccountPositionBundleMint,
    TAccountPositionBundleMetadata,
    TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner,
    TAccountFunder,
    TAccountMetadataUpdateAuth,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram
  >;

  return instruction;
}

export interface ParsedInitializePositionBundleWithMetadataInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    positionBundle: TAccountMetas[0];
    positionBundleMint: TAccountMetas[1];
    positionBundleMetadata: TAccountMetas[2];
    positionBundleTokenAccount: TAccountMetas[3];
    positionBundleOwner: TAccountMetas[4];
    funder: TAccountMetas[5];
    metadataUpdateAuth: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
    metadataProgram: TAccountMetas[11];
  };
  data: InitializePositionBundleWithMetadataInstructionData;
}

export function parseInitializePositionBundleWithMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializePositionBundleWithMetadataInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      positionBundle: getNextAccount(),
      positionBundleMint: getNextAccount(),
      positionBundleMetadata: getNextAccount(),
      positionBundleTokenAccount: getNextAccount(),
      positionBundleOwner: getNextAccount(),
      funder: getNextAccount(),
      metadataUpdateAuth: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
    },
    data: getInitializePositionBundleWithMetadataInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
