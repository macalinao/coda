/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  Option,
  OptionOrNullable,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  RemainingAccountsInfo,
  RemainingAccountsInfoArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
} from "../types/index.js";

export const COLLECT_REWARD_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([177, 107, 37, 180, 160, 19, 49, 209]);

export function getCollectRewardV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_REWARD_V2_DISCRIMINATOR,
  );
}

export type CollectRewardV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | AccountMeta = string,
  TAccountPositionAuthority extends string | AccountMeta = string,
  TAccountPosition extends string | AccountMeta = string,
  TAccountPositionTokenAccount extends string | AccountMeta = string,
  TAccountRewardOwnerAccount extends string | AccountMeta = string,
  TAccountRewardMint extends string | AccountMeta = string,
  TAccountRewardVault extends string | AccountMeta = string,
  TAccountRewardTokenProgram extends string | AccountMeta = string,
  TAccountMemoProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            AccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionTokenAccount extends string
        ? ReadonlyAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountRewardOwnerAccount extends string
        ? WritableAccount<TAccountRewardOwnerAccount>
        : TAccountRewardOwnerAccount,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CollectRewardV2InstructionData {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
}

export interface CollectRewardV2InstructionDataArgs {
  rewardIndex: number;
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
}

export function getCollectRewardV2InstructionDataEncoder(): Encoder<CollectRewardV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
      [
        "remainingAccountsInfo",
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_REWARD_V2_DISCRIMINATOR }),
  );
}

export function getCollectRewardV2InstructionDataDecoder(): Decoder<CollectRewardV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
    [
      "remainingAccountsInfo",
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getCollectRewardV2InstructionDataCodec(): Codec<
  CollectRewardV2InstructionDataArgs,
  CollectRewardV2InstructionData
> {
  return combineCodec(
    getCollectRewardV2InstructionDataEncoder(),
    getCollectRewardV2InstructionDataDecoder(),
  );
}

export interface CollectRewardV2Input<
  TAccountWhirlpool extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountRewardOwnerAccount extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
> {
  whirlpool: Address<TAccountWhirlpool>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position: Address<TAccountPosition>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  rewardOwnerAccount: Address<TAccountRewardOwnerAccount>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault: Address<TAccountRewardVault>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  rewardIndex: CollectRewardV2InstructionDataArgs["rewardIndex"];
  remainingAccountsInfo: CollectRewardV2InstructionDataArgs["remainingAccountsInfo"];
}

export function getCollectRewardV2Instruction<
  TAccountWhirlpool extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionTokenAccount extends string,
  TAccountRewardOwnerAccount extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountRewardTokenProgram extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: CollectRewardV2Input<
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTokenProgram,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CollectRewardV2Instruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountPositionAuthority,
  TAccountPosition,
  TAccountPositionTokenAccount,
  TAccountRewardOwnerAccount,
  TAccountRewardMint,
  TAccountRewardVault,
  TAccountRewardTokenProgram,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: false,
    },
    rewardOwnerAccount: {
      value: input.rewardOwnerAccount ?? null,
      isWritable: true,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.rewardOwnerAccount),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getCollectRewardV2InstructionDataEncoder().encode(
      args as CollectRewardV2InstructionDataArgs,
    ),
  } as CollectRewardV2Instruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTokenProgram,
    TAccountMemoProgram
  >;

  return instruction;
}

export interface ParsedCollectRewardV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    positionAuthority: TAccountMetas[1];
    position: TAccountMetas[2];
    positionTokenAccount: TAccountMetas[3];
    rewardOwnerAccount: TAccountMetas[4];
    rewardMint: TAccountMetas[5];
    rewardVault: TAccountMetas[6];
    rewardTokenProgram: TAccountMetas[7];
    memoProgram: TAccountMetas[8];
  };
  data: CollectRewardV2InstructionData;
}

export function parseCollectRewardV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCollectRewardV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      positionAuthority: getNextAccount(),
      position: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      rewardOwnerAccount: getNextAccount(),
      rewardMint: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getCollectRewardV2InstructionDataDecoder().decode(instruction.data),
  };
}
