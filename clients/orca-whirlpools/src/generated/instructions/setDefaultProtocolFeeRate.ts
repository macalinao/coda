/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_DEFAULT_PROTOCOL_FEE_RATE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([107, 205, 249, 226, 151, 35, 86, 0]);

export function getSetDefaultProtocolFeeRateDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_DEFAULT_PROTOCOL_FEE_RATE_DISCRIMINATOR,
  );
}

export type SetDefaultProtocolFeeRateInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta = string,
  TAccountFeeAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? WritableAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountFeeAuthority extends string
        ? ReadonlySignerAccount<TAccountFeeAuthority> &
            AccountSignerMeta<TAccountFeeAuthority>
        : TAccountFeeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface SetDefaultProtocolFeeRateInstructionData {
  discriminator: ReadonlyUint8Array;
  defaultProtocolFeeRate: number;
}

export interface SetDefaultProtocolFeeRateInstructionDataArgs {
  defaultProtocolFeeRate: number;
}

export function getSetDefaultProtocolFeeRateInstructionDataEncoder(): FixedSizeEncoder<SetDefaultProtocolFeeRateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["defaultProtocolFeeRate", getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_DEFAULT_PROTOCOL_FEE_RATE_DISCRIMINATOR,
    }),
  );
}

export function getSetDefaultProtocolFeeRateInstructionDataDecoder(): FixedSizeDecoder<SetDefaultProtocolFeeRateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["defaultProtocolFeeRate", getU16Decoder()],
  ]);
}

export function getSetDefaultProtocolFeeRateInstructionDataCodec(): FixedSizeCodec<
  SetDefaultProtocolFeeRateInstructionDataArgs,
  SetDefaultProtocolFeeRateInstructionData
> {
  return combineCodec(
    getSetDefaultProtocolFeeRateInstructionDataEncoder(),
    getSetDefaultProtocolFeeRateInstructionDataDecoder(),
  );
}

export interface SetDefaultProtocolFeeRateInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountFeeAuthority extends string = string,
> {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  feeAuthority: TransactionSigner<TAccountFeeAuthority>;
  defaultProtocolFeeRate: SetDefaultProtocolFeeRateInstructionDataArgs["defaultProtocolFeeRate"];
}

export function getSetDefaultProtocolFeeRateInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountFeeAuthority extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetDefaultProtocolFeeRateInput<
    TAccountWhirlpoolsConfig,
    TAccountFeeAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetDefaultProtocolFeeRateInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountFeeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: true,
    },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.feeAuthority),
    ],
    programAddress,
    data: getSetDefaultProtocolFeeRateInstructionDataEncoder().encode(
      args as SetDefaultProtocolFeeRateInstructionDataArgs,
    ),
  } as SetDefaultProtocolFeeRateInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountFeeAuthority
  >;

  return instruction;
}

export interface ParsedSetDefaultProtocolFeeRateInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    feeAuthority: TAccountMetas[1];
  };
  data: SetDefaultProtocolFeeRateInstructionData;
}

export function parseSetDefaultProtocolFeeRateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetDefaultProtocolFeeRateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      feeAuthority: getNextAccount(),
    },
    data: getSetDefaultProtocolFeeRateInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
