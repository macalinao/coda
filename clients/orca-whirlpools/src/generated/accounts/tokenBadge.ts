/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";

export const TOKEN_BADGE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  116, 219, 204, 229, 249, 116, 255, 150,
]);

export function getTokenBadgeDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TOKEN_BADGE_DISCRIMINATOR);
}

export interface TokenBadge {
  discriminator: ReadonlyUint8Array;
  whirlpoolsConfig: Address;
  tokenMint: Address;
}

export interface TokenBadgeArgs {
  whirlpoolsConfig: Address;
  tokenMint: Address;
}

export function getTokenBadgeEncoder(): FixedSizeEncoder<TokenBadgeArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["whirlpoolsConfig", getAddressEncoder()],
      ["tokenMint", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_BADGE_DISCRIMINATOR }),
  );
}

export function getTokenBadgeDecoder(): FixedSizeDecoder<TokenBadge> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["whirlpoolsConfig", getAddressDecoder()],
    ["tokenMint", getAddressDecoder()],
  ]);
}

export function getTokenBadgeCodec(): FixedSizeCodec<
  TokenBadgeArgs,
  TokenBadge
> {
  return combineCodec(getTokenBadgeEncoder(), getTokenBadgeDecoder());
}

export function decodeTokenBadge<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<TokenBadge, TAddress>;
export function decodeTokenBadge<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<TokenBadge, TAddress>;
export function decodeTokenBadge<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<TokenBadge, TAddress> | MaybeAccount<TokenBadge, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenBadgeDecoder(),
  );
}

export async function fetchTokenBadge<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<TokenBadge, TAddress>> {
  const maybeAccount = await fetchMaybeTokenBadge(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenBadge<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<TokenBadge, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenBadge(maybeAccount);
}

export async function fetchAllTokenBadge(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<TokenBadge>[]> {
  const maybeAccounts = await fetchAllMaybeTokenBadge(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenBadge(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<TokenBadge>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenBadge(maybeAccount));
}
