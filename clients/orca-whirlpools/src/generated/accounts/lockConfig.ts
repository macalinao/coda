/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { LockTypeLabel, LockTypeLabelArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import {
  getLockTypeLabelDecoder,
  getLockTypeLabelEncoder,
} from "../types/index.js";

export const LOCK_CONFIG_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  106, 47, 238, 159, 124, 12, 160, 192,
]);

export function getLockConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOCK_CONFIG_DISCRIMINATOR);
}

export interface LockConfig {
  discriminator: ReadonlyUint8Array;
  position: Address;
  positionOwner: Address;
  whirlpool: Address;
  lockedTimestamp: bigint;
  lockType: LockTypeLabel;
}

export interface LockConfigArgs {
  position: Address;
  positionOwner: Address;
  whirlpool: Address;
  lockedTimestamp: number | bigint;
  lockType: LockTypeLabelArgs;
}

export function getLockConfigEncoder(): FixedSizeEncoder<LockConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["position", getAddressEncoder()],
      ["positionOwner", getAddressEncoder()],
      ["whirlpool", getAddressEncoder()],
      ["lockedTimestamp", getU64Encoder()],
      ["lockType", getLockTypeLabelEncoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_CONFIG_DISCRIMINATOR }),
  );
}

export function getLockConfigDecoder(): FixedSizeDecoder<LockConfig> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["position", getAddressDecoder()],
    ["positionOwner", getAddressDecoder()],
    ["whirlpool", getAddressDecoder()],
    ["lockedTimestamp", getU64Decoder()],
    ["lockType", getLockTypeLabelDecoder()],
  ]);
}

export function getLockConfigCodec(): FixedSizeCodec<
  LockConfigArgs,
  LockConfig
> {
  return combineCodec(getLockConfigEncoder(), getLockConfigDecoder());
}

export function decodeLockConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<LockConfig, TAddress>;
export function decodeLockConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<LockConfig, TAddress>;
export function decodeLockConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<LockConfig, TAddress> | MaybeAccount<LockConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLockConfigDecoder(),
  );
}

export async function fetchLockConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<LockConfig, TAddress>> {
  const maybeAccount = await fetchMaybeLockConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLockConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<LockConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLockConfig(maybeAccount);
}

export async function fetchAllLockConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<LockConfig>[]> {
  const maybeAccounts = await fetchAllMaybeLockConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLockConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<LockConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeLockConfig(maybeAccount));
}
