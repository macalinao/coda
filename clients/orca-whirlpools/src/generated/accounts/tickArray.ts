/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { Tick, TickArgs } from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { getTickDecoder, getTickEncoder } from "../types/index.js";

export const TICK_ARRAY_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  69, 97, 189, 190, 110, 7, 66, 187,
]);

export function getTickArrayDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TICK_ARRAY_DISCRIMINATOR);
}

export interface TickArray {
  discriminator: ReadonlyUint8Array;
  startTickIndex: number;
  ticks: Tick[];
  whirlpool: Address;
}

export interface TickArrayArgs {
  startTickIndex: number;
  ticks: TickArgs[];
  whirlpool: Address;
}

export function getTickArrayEncoder(): FixedSizeEncoder<TickArrayArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["startTickIndex", getI32Encoder()],
      ["ticks", getArrayEncoder(getTickEncoder(), { size: 88 })],
      ["whirlpool", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TICK_ARRAY_DISCRIMINATOR }),
  );
}

export function getTickArrayDecoder(): FixedSizeDecoder<TickArray> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["startTickIndex", getI32Decoder()],
    ["ticks", getArrayDecoder(getTickDecoder(), { size: 88 })],
    ["whirlpool", getAddressDecoder()],
  ]);
}

export function getTickArrayCodec(): FixedSizeCodec<TickArrayArgs, TickArray> {
  return combineCodec(getTickArrayEncoder(), getTickArrayDecoder());
}

export function decodeTickArray<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<TickArray, TAddress>;
export function decodeTickArray<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<TickArray, TAddress>;
export function decodeTickArray<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<TickArray, TAddress> | MaybeAccount<TickArray, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTickArrayDecoder(),
  );
}

export async function fetchTickArray<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<TickArray, TAddress>> {
  const maybeAccount = await fetchMaybeTickArray(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTickArray<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<TickArray, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTickArray(maybeAccount);
}

export async function fetchAllTickArray(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<TickArray>[]> {
  const maybeAccounts = await fetchAllMaybeTickArray(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTickArray(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<TickArray>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTickArray(maybeAccount));
}
