/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  
  
  
  
  
  
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  
  
  
  transformEncoder
} from "@solana/kit";
import type {Account, Address, EncodedAccount, FetchAccountConfig, FetchAccountsConfig, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, MaybeAccount, MaybeEncodedAccount, ReadonlyUint8Array} from "@solana/kit";

export const FEE_TIER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  56, 75, 159, 76, 142, 68, 190, 105,
]);

export function getFeeTierDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(FEE_TIER_DISCRIMINATOR);
}

export interface FeeTier {
  discriminator: ReadonlyUint8Array;
  whirlpoolsConfig: Address;
  tickSpacing: number;
  defaultFeeRate: number;
}

export interface FeeTierArgs {
  whirlpoolsConfig: Address;
  tickSpacing: number;
  defaultFeeRate: number;
}

export function getFeeTierEncoder(): FixedSizeEncoder<FeeTierArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["whirlpoolsConfig", getAddressEncoder()],
      ["tickSpacing", getU16Encoder()],
      ["defaultFeeRate", getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: FEE_TIER_DISCRIMINATOR }),
  );
}

export function getFeeTierDecoder(): FixedSizeDecoder<FeeTier> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["whirlpoolsConfig", getAddressDecoder()],
    ["tickSpacing", getU16Decoder()],
    ["defaultFeeRate", getU16Decoder()],
  ]);
}

export function getFeeTierCodec(): FixedSizeCodec<FeeTierArgs, FeeTier> {
  return combineCodec(getFeeTierEncoder(), getFeeTierDecoder());
}

export function decodeFeeTier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<FeeTier, TAddress>;
export function decodeFeeTier<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<FeeTier, TAddress>;
export function decodeFeeTier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<FeeTier, TAddress> | MaybeAccount<FeeTier, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFeeTierDecoder(),
  );
}

export async function fetchFeeTier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<FeeTier, TAddress>> {
  const maybeAccount = await fetchMaybeFeeTier(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFeeTier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<FeeTier, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFeeTier(maybeAccount);
}

export async function fetchAllFeeTier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<FeeTier>[]> {
  const maybeAccounts = await fetchAllMaybeFeeTier(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFeeTier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<FeeTier>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFeeTier(maybeAccount));
}
