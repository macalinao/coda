/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
} from "@solana/kit";
import type {
  ValidatorStakeInfo,
  ValidatorStakeInfoArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import {
  AccountType,
  getAccountTypeDecoder,
  getAccountTypeEncoder,
  getValidatorStakeInfoDecoder,
  getValidatorStakeInfoEncoder,
} from "../types/index.js";

export const VALIDATOR_LIST_ACCOUNT_TYPE = AccountType.ValidatorList;

export function getValidatorListAccountTypeBytes() {
  return getAccountTypeEncoder().encode(VALIDATOR_LIST_ACCOUNT_TYPE);
}

export interface ValidatorList {
  /** Account type, must be `ValidatorList` currently */
  accountType: AccountType;
  /** Maximum allowable number of validators */
  maxValidators: number;
  /** List of stake info for each validator in the pool */
  validators: ValidatorStakeInfo[];
}

export interface ValidatorListArgs {
  /** Maximum allowable number of validators */
  maxValidators: number;
  /** List of stake info for each validator in the pool */
  validators: ValidatorStakeInfoArgs[];
}

export function getValidatorListEncoder(): Encoder<ValidatorListArgs> {
  return transformEncoder(
    getStructEncoder([
      ["accountType", getAccountTypeEncoder()],
      ["maxValidators", getU32Encoder()],
      ["validators", getArrayEncoder(getValidatorStakeInfoEncoder())],
    ]),
    (value) => ({ ...value, accountType: VALIDATOR_LIST_ACCOUNT_TYPE }),
  );
}

export function getValidatorListDecoder(): Decoder<ValidatorList> {
  return getStructDecoder([
    ["accountType", getAccountTypeDecoder()],
    ["maxValidators", getU32Decoder()],
    ["validators", getArrayDecoder(getValidatorStakeInfoDecoder())],
  ]);
}

export function getValidatorListCodec(): Codec<
  ValidatorListArgs,
  ValidatorList
> {
  return combineCodec(getValidatorListEncoder(), getValidatorListDecoder());
}

export function decodeValidatorList<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ValidatorList, TAddress>;
export function decodeValidatorList<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ValidatorList, TAddress>;
export function decodeValidatorList<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<ValidatorList, TAddress> | MaybeAccount<ValidatorList, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getValidatorListDecoder(),
  );
}

export async function fetchValidatorList<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ValidatorList, TAddress>> {
  const maybeAccount = await fetchMaybeValidatorList(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeValidatorList<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ValidatorList, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeValidatorList(maybeAccount);
}

export async function fetchAllValidatorList(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ValidatorList>[]> {
  const maybeAccounts = await fetchAllMaybeValidatorList(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeValidatorList(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ValidatorList>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeValidatorList(maybeAccount));
}
