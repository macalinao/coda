/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR = 2;

export function getRemoveValidatorFromPoolDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR);
}

export type RemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorStakeList extends string | AccountMeta = string,
  TAccountStakeAccount extends string | AccountMeta = string,
  TAccountTransientStakeAccount extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorStakeList extends string
        ? WritableAccount<TAccountValidatorStakeList>
        : TAccountValidatorStakeList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RemoveValidatorFromPoolInstructionData {
  discriminator: number;
}

export interface RemoveValidatorFromPoolInstructionDataArgs {}

export function getRemoveValidatorFromPoolInstructionDataEncoder(): FixedSizeEncoder<RemoveValidatorFromPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR,
    }),
  );
}

export function getRemoveValidatorFromPoolInstructionDataDecoder(): FixedSizeDecoder<RemoveValidatorFromPoolInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getRemoveValidatorFromPoolInstructionDataCodec(): FixedSizeCodec<
  RemoveValidatorFromPoolInstructionDataArgs,
  RemoveValidatorFromPoolInstructionData
> {
  return combineCodec(
    getRemoveValidatorFromPoolInstructionDataEncoder(),
    getRemoveValidatorFromPoolInstructionDataDecoder(),
  );
}

export interface RemoveValidatorFromPoolAsyncInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorStakeList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeProgram extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Staker */
  staker: TransactionSigner<TAccountStaker>;
  /** Stake pool withdraw authority */
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  /** Validator stake list storage account */
  validatorStakeList: Address<TAccountValidatorStakeList>;
  /** Stake account to remove from the pool */
  stakeAccount: Address<TAccountStakeAccount>;
  /** Transient stake account, to deactivate if necessary */
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  /** Sysvar clock */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Stake program id */
  stakeProgram?: Address<TAccountStakeProgram>;
}

export async function getRemoveValidatorFromPoolInstructionAsync<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorStakeList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClockSysvar extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RemoveValidatorFromPoolAsyncInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorStakeList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  RemoveValidatorFromPoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorStakeList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorStakeList: {
      value: input.validatorStakeList ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorStakeList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getRemoveValidatorFromPoolInstructionDataEncoder().encode({}),
    programAddress,
  } as RemoveValidatorFromPoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorStakeList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountStakeProgram
  >);
}

export interface RemoveValidatorFromPoolInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorStakeList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeProgram extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Staker */
  staker: TransactionSigner<TAccountStaker>;
  /** Stake pool withdraw authority */
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  /** Validator stake list storage account */
  validatorStakeList: Address<TAccountValidatorStakeList>;
  /** Stake account to remove from the pool */
  stakeAccount: Address<TAccountStakeAccount>;
  /** Transient stake account, to deactivate if necessary */
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  /** Sysvar clock */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Stake program id */
  stakeProgram?: Address<TAccountStakeProgram>;
}

export function getRemoveValidatorFromPoolInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorStakeList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClockSysvar extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RemoveValidatorFromPoolInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorStakeList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RemoveValidatorFromPoolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorStakeList,
  TAccountStakeAccount,
  TAccountTransientStakeAccount,
  TAccountClockSysvar,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorStakeList: {
      value: input.validatorStakeList ?? null,
      isWritable: true,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorStakeList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getRemoveValidatorFromPoolInstructionDataEncoder().encode({}),
    programAddress,
  } as RemoveValidatorFromPoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorStakeList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountStakeProgram
  >);
}

export interface ParsedRemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Staker */
    staker: TAccountMetas[1];
    /** Stake pool withdraw authority */
    withdrawAuthority: TAccountMetas[2];
    /** Validator stake list storage account */
    validatorStakeList: TAccountMetas[3];
    /** Stake account to remove from the pool */
    stakeAccount: TAccountMetas[4];
    /** Transient stake account, to deactivate if necessary */
    transientStakeAccount: TAccountMetas[5];
    /** Sysvar clock */
    clockSysvar: TAccountMetas[6];
    /** Stake program id */
    stakeProgram: TAccountMetas[7];
  };
  data: RemoveValidatorFromPoolInstructionData;
}

export function parseRemoveValidatorFromPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRemoveValidatorFromPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorStakeList: getNextAccount(),
      stakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getRemoveValidatorFromPoolInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
