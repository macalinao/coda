/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const INCREASE_ADDITIONAL_VALIDATOR_STAKE_DISCRIMINATOR = 19;

export function getIncreaseAdditionalValidatorStakeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(
    INCREASE_ADDITIONAL_VALIDATOR_STAKE_DISCRIMINATOR,
  );
}

export type IncreaseAdditionalValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountEphemeralStake extends string | AccountMeta = string,
  TAccountTransientStake extends string | AccountMeta = string,
  TAccountValidatorStake extends string | AccountMeta = string,
  TAccountValidatorVote extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountStakeConfigSysvar extends
    | string
    | AccountMeta = "StakeConfig11111111111111111111111111111111",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountEphemeralStake extends string
        ? WritableAccount<TAccountEphemeralStake>
        : TAccountEphemeralStake,
      TAccountTransientStake extends string
        ? WritableAccount<TAccountTransientStake>
        : TAccountTransientStake,
      TAccountValidatorStake extends string
        ? ReadonlyAccount<TAccountValidatorStake>
        : TAccountValidatorStake,
      TAccountValidatorVote extends string
        ? ReadonlyAccount<TAccountValidatorVote>
        : TAccountValidatorVote,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountStakeConfigSysvar extends string
        ? ReadonlyAccount<TAccountStakeConfigSysvar>
        : TAccountStakeConfigSysvar,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface IncreaseAdditionalValidatorStakeInstructionData {
  discriminator: number;
  lamports: bigint;
  transientStakeSeed: bigint;
  ephemeralStakeSeed: bigint;
}

export interface IncreaseAdditionalValidatorStakeInstructionDataArgs {
  lamports: number | bigint;
  transientStakeSeed: number | bigint;
  ephemeralStakeSeed: number | bigint;
}

export function getIncreaseAdditionalValidatorStakeInstructionDataEncoder(): FixedSizeEncoder<IncreaseAdditionalValidatorStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["lamports", getU64Encoder()],
      ["transientStakeSeed", getU64Encoder()],
      ["ephemeralStakeSeed", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREASE_ADDITIONAL_VALIDATOR_STAKE_DISCRIMINATOR,
    }),
  );
}

export function getIncreaseAdditionalValidatorStakeInstructionDataDecoder(): FixedSizeDecoder<IncreaseAdditionalValidatorStakeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["lamports", getU64Decoder()],
    ["transientStakeSeed", getU64Decoder()],
    ["ephemeralStakeSeed", getU64Decoder()],
  ]);
}

export function getIncreaseAdditionalValidatorStakeInstructionDataCodec(): FixedSizeCodec<
  IncreaseAdditionalValidatorStakeInstructionDataArgs,
  IncreaseAdditionalValidatorStakeInstructionData
> {
  return combineCodec(
    getIncreaseAdditionalValidatorStakeInstructionDataEncoder(),
    getIncreaseAdditionalValidatorStakeInstructionDataDecoder(),
  );
}

export interface IncreaseAdditionalValidatorStakeAsyncInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountEphemeralStake extends string = string,
  TAccountTransientStake extends string = string,
  TAccountValidatorStake extends string = string,
  TAccountValidatorVote extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeConfigSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  ephemeralStake: Address<TAccountEphemeralStake>;
  transientStake: Address<TAccountTransientStake>;
  validatorStake: Address<TAccountValidatorStake>;
  validatorVote: Address<TAccountValidatorVote>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeConfigSysvar?: Address<TAccountStakeConfigSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: IncreaseAdditionalValidatorStakeInstructionDataArgs["lamports"];
  transientStakeSeed: IncreaseAdditionalValidatorStakeInstructionDataArgs["transientStakeSeed"];
  ephemeralStakeSeed: IncreaseAdditionalValidatorStakeInstructionDataArgs["ephemeralStakeSeed"];
}

export async function getIncreaseAdditionalValidatorStakeInstructionAsync<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountEphemeralStake extends string,
  TAccountTransientStake extends string,
  TAccountValidatorStake extends string,
  TAccountValidatorVote extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeConfigSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: IncreaseAdditionalValidatorStakeAsyncInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountEphemeralStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidatorVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  IncreaseAdditionalValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountEphemeralStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidatorVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    ephemeralStake: { value: input.ephemeralStake ?? null, isWritable: true },
    transientStake: { value: input.transientStake ?? null, isWritable: true },
    validatorStake: { value: input.validatorStake ?? null, isWritable: false },
    validatorVote: { value: input.validatorVote ?? null, isWritable: false },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeConfigSysvar: {
      value: input.stakeConfigSysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeConfigSysvar.value) {
    accounts.stakeConfigSysvar.value =
      "StakeConfig11111111111111111111111111111111" as Address<"StakeConfig11111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.ephemeralStake),
      getAccountMeta(accounts.transientStake),
      getAccountMeta(accounts.validatorStake),
      getAccountMeta(accounts.validatorVote),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeConfigSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getIncreaseAdditionalValidatorStakeInstructionDataEncoder().encode(
      args as IncreaseAdditionalValidatorStakeInstructionDataArgs,
    ),
    programAddress,
  } as IncreaseAdditionalValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountEphemeralStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidatorVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface IncreaseAdditionalValidatorStakeInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountEphemeralStake extends string = string,
  TAccountTransientStake extends string = string,
  TAccountValidatorStake extends string = string,
  TAccountValidatorVote extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeConfigSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  ephemeralStake: Address<TAccountEphemeralStake>;
  transientStake: Address<TAccountTransientStake>;
  validatorStake: Address<TAccountValidatorStake>;
  validatorVote: Address<TAccountValidatorVote>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeConfigSysvar?: Address<TAccountStakeConfigSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: IncreaseAdditionalValidatorStakeInstructionDataArgs["lamports"];
  transientStakeSeed: IncreaseAdditionalValidatorStakeInstructionDataArgs["transientStakeSeed"];
  ephemeralStakeSeed: IncreaseAdditionalValidatorStakeInstructionDataArgs["ephemeralStakeSeed"];
}

export function getIncreaseAdditionalValidatorStakeInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountEphemeralStake extends string,
  TAccountTransientStake extends string,
  TAccountValidatorStake extends string,
  TAccountValidatorVote extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeConfigSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: IncreaseAdditionalValidatorStakeInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountEphemeralStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidatorVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): IncreaseAdditionalValidatorStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountEphemeralStake,
  TAccountTransientStake,
  TAccountValidatorStake,
  TAccountValidatorVote,
  TAccountClockSysvar,
  TAccountStakeHistorySysvar,
  TAccountStakeConfigSysvar,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    ephemeralStake: { value: input.ephemeralStake ?? null, isWritable: true },
    transientStake: { value: input.transientStake ?? null, isWritable: true },
    validatorStake: { value: input.validatorStake ?? null, isWritable: false },
    validatorVote: { value: input.validatorVote ?? null, isWritable: false },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeConfigSysvar: {
      value: input.stakeConfigSysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeConfigSysvar.value) {
    accounts.stakeConfigSysvar.value =
      "StakeConfig11111111111111111111111111111111" as Address<"StakeConfig11111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.ephemeralStake),
      getAccountMeta(accounts.transientStake),
      getAccountMeta(accounts.validatorStake),
      getAccountMeta(accounts.validatorVote),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeConfigSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getIncreaseAdditionalValidatorStakeInstructionDataEncoder().encode(
      args as IncreaseAdditionalValidatorStakeInstructionDataArgs,
    ),
    programAddress,
  } as IncreaseAdditionalValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountEphemeralStake,
    TAccountTransientStake,
    TAccountValidatorStake,
    TAccountValidatorVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedIncreaseAdditionalValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    ephemeralStake: TAccountMetas[5];
    transientStake: TAccountMetas[6];
    validatorStake: TAccountMetas[7];
    validatorVote: TAccountMetas[8];
    clockSysvar: TAccountMetas[9];
    stakeHistorySysvar: TAccountMetas[10];
    stakeConfigSysvar: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
    stakeProgram: TAccountMetas[13];
  };
  data: IncreaseAdditionalValidatorStakeInstructionData;
}

export function parseIncreaseAdditionalValidatorStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedIncreaseAdditionalValidatorStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      ephemeralStake: getNextAccount(),
      transientStake: getNextAccount(),
      validatorStake: getNextAccount(),
      validatorVote: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      stakeConfigSysvar: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getIncreaseAdditionalValidatorStakeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
