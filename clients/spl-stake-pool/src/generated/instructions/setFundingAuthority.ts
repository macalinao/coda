/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { FundingType, FundingTypeArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getFundingTypeDecoder,
  getFundingTypeEncoder,
} from "../types/index.js";

export const SET_FUNDING_AUTHORITY_DISCRIMINATOR = 15;

export function getSetFundingAuthorityDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_FUNDING_AUTHORITY_DISCRIMINATOR);
}

export type SetFundingAuthorityInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountManager extends string | AccountMeta = string,
  TAccountNewAuthorityPubkey extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            AccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountNewAuthorityPubkey extends string
        ? ReadonlyAccount<TAccountNewAuthorityPubkey>
        : TAccountNewAuthorityPubkey,
      ...TRemainingAccounts,
    ]
  >;

export interface SetFundingAuthorityInstructionData {
  discriminator: number;
  fundingType: FundingType;
}

export interface SetFundingAuthorityInstructionDataArgs {
  fundingType: FundingTypeArgs;
}

export function getSetFundingAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetFundingAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["fundingType", getFundingTypeEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_FUNDING_AUTHORITY_DISCRIMINATOR,
    }),
  );
}

export function getSetFundingAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetFundingAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["fundingType", getFundingTypeDecoder()],
  ]);
}

export function getSetFundingAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetFundingAuthorityInstructionDataArgs,
  SetFundingAuthorityInstructionData
> {
  return combineCodec(
    getSetFundingAuthorityInstructionDataEncoder(),
    getSetFundingAuthorityInstructionDataDecoder(),
  );
}

export interface SetFundingAuthorityInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountNewAuthorityPubkey extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Manager */
  manager: TransactionSigner<TAccountManager>;
  /** New authority pubkey */
  newAuthorityPubkey: Address<TAccountNewAuthorityPubkey>;
  fundingType: SetFundingAuthorityInstructionDataArgs["fundingType"];
}

export function getSetFundingAuthorityInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountNewAuthorityPubkey extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetFundingAuthorityInput<
    TAccountStakePool,
    TAccountManager,
    TAccountNewAuthorityPubkey
  >,
  config?: { programAddress?: TProgramAddress },
): SetFundingAuthorityInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountNewAuthorityPubkey
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
    newAuthorityPubkey: {
      value: input.newAuthorityPubkey ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.newAuthorityPubkey),
    ],
    data: getSetFundingAuthorityInstructionDataEncoder().encode(
      args as SetFundingAuthorityInstructionDataArgs,
    ),
    programAddress,
  } as SetFundingAuthorityInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountNewAuthorityPubkey
  >);
}

export interface ParsedSetFundingAuthorityInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Manager */
    manager: TAccountMetas[1];
    /** New authority pubkey */
    newAuthorityPubkey: TAccountMetas[2];
  };
  data: SetFundingAuthorityInstructionData;
}

export function parseSetFundingAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetFundingAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      newAuthorityPubkey: getNextAccount(),
    },
    data: getSetFundingAuthorityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
