/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR = 6;

export function getUpdateValidatorListBalanceDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR);
}

export type UpdateValidatorListBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateValidatorListBalanceInstructionData {
  discriminator: number;
  startIndex: number;
  noMerge: boolean;
}

export interface UpdateValidatorListBalanceInstructionDataArgs {
  startIndex: number;
  noMerge: boolean;
}

export function getUpdateValidatorListBalanceInstructionDataEncoder(): FixedSizeEncoder<UpdateValidatorListBalanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["startIndex", getU32Encoder()],
      ["noMerge", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_VALIDATOR_LIST_BALANCE_DISCRIMINATOR,
    }),
  );
}

export function getUpdateValidatorListBalanceInstructionDataDecoder(): FixedSizeDecoder<UpdateValidatorListBalanceInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["startIndex", getU32Decoder()],
    ["noMerge", getBooleanDecoder()],
  ]);
}

export function getUpdateValidatorListBalanceInstructionDataCodec(): FixedSizeCodec<
  UpdateValidatorListBalanceInstructionDataArgs,
  UpdateValidatorListBalanceInstructionData
> {
  return combineCodec(
    getUpdateValidatorListBalanceInstructionDataEncoder(),
    getUpdateValidatorListBalanceInstructionDataDecoder(),
  );
}

export interface UpdateValidatorListBalanceAsyncInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeProgram?: Address<TAccountStakeProgram>;
  startIndex: UpdateValidatorListBalanceInstructionDataArgs["startIndex"];
  noMerge: UpdateValidatorListBalanceInstructionDataArgs["noMerge"];
}

export async function getUpdateValidatorListBalanceInstructionAsync<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateValidatorListBalanceAsyncInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  UpdateValidatorListBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getUpdateValidatorListBalanceInstructionDataEncoder().encode(
      args as UpdateValidatorListBalanceInstructionDataArgs,
    ),
    programAddress,
  } as UpdateValidatorListBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram
  >);
}

export interface UpdateValidatorListBalanceInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeProgram?: Address<TAccountStakeProgram>;
  startIndex: UpdateValidatorListBalanceInstructionDataArgs["startIndex"];
  noMerge: UpdateValidatorListBalanceInstructionDataArgs["noMerge"];
}

export function getUpdateValidatorListBalanceInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateValidatorListBalanceInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateValidatorListBalanceInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountClockSysvar,
  TAccountStakeHistorySysvar,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getUpdateValidatorListBalanceInstructionDataEncoder().encode(
      args as UpdateValidatorListBalanceInstructionDataArgs,
    ),
    programAddress,
  } as UpdateValidatorListBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram
  >);
}

export interface ParsedUpdateValidatorListBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdrawAuthority: TAccountMetas[1];
    validatorList: TAccountMetas[2];
    reserveStake: TAccountMetas[3];
    clockSysvar: TAccountMetas[4];
    stakeHistorySysvar: TAccountMetas[5];
    stakeProgram: TAccountMetas[6];
  };
  data: UpdateValidatorListBalanceInstructionData;
}

export function parseUpdateValidatorListBalanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateValidatorListBalanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getUpdateValidatorListBalanceInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
