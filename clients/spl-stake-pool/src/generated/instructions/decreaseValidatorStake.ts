/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const DECREASE_VALIDATOR_STAKE_DISCRIMINATOR = 3;

export function getDecreaseValidatorStakeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(DECREASE_VALIDATOR_STAKE_DISCRIMINATOR);
}

export type DecreaseValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountStakeAccount extends string | AccountMeta = string,
  TAccountTransientStakeAccount extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountRentSysvar extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountRentSysvar extends string
        ? ReadonlyAccount<TAccountRentSysvar>
        : TAccountRentSysvar,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DecreaseValidatorStakeInstructionData {
  discriminator: number;
  lamports: bigint;
  transientStakeSeed: bigint;
}

export interface DecreaseValidatorStakeInstructionDataArgs {
  lamports: number | bigint;
  transientStakeSeed: number | bigint;
}

export function getDecreaseValidatorStakeInstructionDataEncoder(): FixedSizeEncoder<DecreaseValidatorStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["lamports", getU64Encoder()],
      ["transientStakeSeed", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DECREASE_VALIDATOR_STAKE_DISCRIMINATOR,
    }),
  );
}

export function getDecreaseValidatorStakeInstructionDataDecoder(): FixedSizeDecoder<DecreaseValidatorStakeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["lamports", getU64Decoder()],
    ["transientStakeSeed", getU64Decoder()],
  ]);
}

export function getDecreaseValidatorStakeInstructionDataCodec(): FixedSizeCodec<
  DecreaseValidatorStakeInstructionDataArgs,
  DecreaseValidatorStakeInstructionData
> {
  return combineCodec(
    getDecreaseValidatorStakeInstructionDataEncoder(),
    getDecreaseValidatorStakeInstructionDataDecoder(),
  );
}

export interface DecreaseValidatorStakeAsyncInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountRentSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  clockSysvar?: Address<TAccountClockSysvar>;
  rentSysvar?: Address<TAccountRentSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: DecreaseValidatorStakeInstructionDataArgs["lamports"];
  transientStakeSeed: DecreaseValidatorStakeInstructionDataArgs["transientStakeSeed"];
}

export async function getDecreaseValidatorStakeInstructionAsync<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClockSysvar extends string,
  TAccountRentSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DecreaseValidatorStakeAsyncInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DecreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.rentSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getDecreaseValidatorStakeInstructionDataEncoder().encode(
      args as DecreaseValidatorStakeInstructionDataArgs,
    ),
    programAddress,
  } as DecreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface DecreaseValidatorStakeInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountRentSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  clockSysvar?: Address<TAccountClockSysvar>;
  rentSysvar?: Address<TAccountRentSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: DecreaseValidatorStakeInstructionDataArgs["lamports"];
  transientStakeSeed: DecreaseValidatorStakeInstructionDataArgs["transientStakeSeed"];
}

export function getDecreaseValidatorStakeInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClockSysvar extends string,
  TAccountRentSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DecreaseValidatorStakeInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DecreaseValidatorStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountStakeAccount,
  TAccountTransientStakeAccount,
  TAccountClockSysvar,
  TAccountRentSysvar,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.rentSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getDecreaseValidatorStakeInstructionDataEncoder().encode(
      args as DecreaseValidatorStakeInstructionDataArgs,
    ),
    programAddress,
  } as DecreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedDecreaseValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    stakeAccount: TAccountMetas[4];
    transientStakeAccount: TAccountMetas[5];
    clockSysvar: TAccountMetas[6];
    rentSysvar: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    stakeProgram: TAccountMetas[9];
  };
  data: DecreaseValidatorStakeInstructionData;
}

export function parseDecreaseValidatorStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDecreaseValidatorStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      clockSysvar: getNextAccount(),
      rentSysvar: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getDecreaseValidatorStakeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
