/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_SOL_WITH_SLIPPAGE_DISCRIMINATOR = 25;

export function getDepositSolWithSlippageDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(DEPOSIT_SOL_WITH_SLIPPAGE_DISCRIMINATOR);
}

export type DepositSolWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountReferralFeeAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSolDepositAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountFeeAccount extends string
        ? WritableAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountReferralFeeAccount extends string
        ? WritableAccount<TAccountReferralFeeAccount>
        : TAccountReferralFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSolDepositAuthority extends string
        ? ReadonlyAccount<TAccountSolDepositAuthority>
        : TAccountSolDepositAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositSolWithSlippageInstructionData {
  discriminator: number;
  lamportsIn: bigint;
  minimumPoolTokensOut: bigint;
}

export interface DepositSolWithSlippageInstructionDataArgs {
  lamportsIn: number | bigint;
  minimumPoolTokensOut: number | bigint;
}

export function getDepositSolWithSlippageInstructionDataEncoder(): FixedSizeEncoder<DepositSolWithSlippageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["lamportsIn", getU64Encoder()],
      ["minimumPoolTokensOut", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_SOL_WITH_SLIPPAGE_DISCRIMINATOR,
    }),
  );
}

export function getDepositSolWithSlippageInstructionDataDecoder(): FixedSizeDecoder<DepositSolWithSlippageInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["lamportsIn", getU64Decoder()],
    ["minimumPoolTokensOut", getU64Decoder()],
  ]);
}

export function getDepositSolWithSlippageInstructionDataCodec(): FixedSizeCodec<
  DepositSolWithSlippageInstructionDataArgs,
  DepositSolWithSlippageInstructionData
> {
  return combineCodec(
    getDepositSolWithSlippageInstructionDataEncoder(),
    getDepositSolWithSlippageInstructionDataDecoder(),
  );
}

export interface DepositSolWithSlippageAsyncInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPayer extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountReferralFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSolDepositAuthority extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Stake pool withdraw authority */
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  /** Reserve stake */
  reserveStake: Address<TAccountReserveStake>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** User pool token account */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Fee account */
  feeAccount: Address<TAccountFeeAccount>;
  /** Referral fee account */
  referralFeeAccount: Address<TAccountReferralFeeAccount>;
  /** Pool mint */
  poolMint: Address<TAccountPoolMint>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Stake pool sol deposit authority */
  solDepositAuthority:
    | Address<TAccountSolDepositAuthority>
    | TransactionSigner<TAccountSolDepositAuthority>;
  lamportsIn: DepositSolWithSlippageInstructionDataArgs["lamportsIn"];
  minimumPoolTokensOut: DepositSolWithSlippageInstructionDataArgs["minimumPoolTokensOut"];
}

export async function getDepositSolWithSlippageInstructionAsync<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountReserveStake extends string,
  TAccountPayer extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountReferralFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSolDepositAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositSolWithSlippageAsyncInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountSolDepositAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DepositSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    (typeof input)["solDepositAuthority"] extends TransactionSigner<TAccountSolDepositAuthority>
      ? ReadonlySignerAccount<TAccountSolDepositAuthority> &
          AccountSignerMeta<TAccountSolDepositAuthority>
      : TAccountSolDepositAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: false },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    referralFeeAccount: {
      value: input.referralFeeAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    solDepositAuthority: {
      value: input.solDepositAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.referralFeeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.solDepositAuthority),
    ],
    data: getDepositSolWithSlippageInstructionDataEncoder().encode(
      args as DepositSolWithSlippageInstructionDataArgs,
    ),
    programAddress,
  } as DepositSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    (typeof input)["solDepositAuthority"] extends TransactionSigner<TAccountSolDepositAuthority>
      ? ReadonlySignerAccount<TAccountSolDepositAuthority> &
          AccountSignerMeta<TAccountSolDepositAuthority>
      : TAccountSolDepositAuthority
  >);
}

export interface DepositSolWithSlippageInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPayer extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountReferralFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSolDepositAuthority extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Stake pool withdraw authority */
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  /** Reserve stake */
  reserveStake: Address<TAccountReserveStake>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** User pool token account */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Fee account */
  feeAccount: Address<TAccountFeeAccount>;
  /** Referral fee account */
  referralFeeAccount: Address<TAccountReferralFeeAccount>;
  /** Pool mint */
  poolMint: Address<TAccountPoolMint>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Stake pool sol deposit authority */
  solDepositAuthority:
    | Address<TAccountSolDepositAuthority>
    | TransactionSigner<TAccountSolDepositAuthority>;
  lamportsIn: DepositSolWithSlippageInstructionDataArgs["lamportsIn"];
  minimumPoolTokensOut: DepositSolWithSlippageInstructionDataArgs["minimumPoolTokensOut"];
}

export function getDepositSolWithSlippageInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountReserveStake extends string,
  TAccountPayer extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountReferralFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSolDepositAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositSolWithSlippageInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountSolDepositAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): DepositSolWithSlippageInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountReserveStake,
  TAccountPayer,
  TAccountUserPoolTokenAccount,
  TAccountFeeAccount,
  TAccountReferralFeeAccount,
  TAccountPoolMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  (typeof input)["solDepositAuthority"] extends TransactionSigner<TAccountSolDepositAuthority>
    ? ReadonlySignerAccount<TAccountSolDepositAuthority> &
        AccountSignerMeta<TAccountSolDepositAuthority>
    : TAccountSolDepositAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: false },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    referralFeeAccount: {
      value: input.referralFeeAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    solDepositAuthority: {
      value: input.solDepositAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.referralFeeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.solDepositAuthority),
    ],
    data: getDepositSolWithSlippageInstructionDataEncoder().encode(
      args as DepositSolWithSlippageInstructionDataArgs,
    ),
    programAddress,
  } as DepositSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    (typeof input)["solDepositAuthority"] extends TransactionSigner<TAccountSolDepositAuthority>
      ? ReadonlySignerAccount<TAccountSolDepositAuthority> &
          AccountSignerMeta<TAccountSolDepositAuthority>
      : TAccountSolDepositAuthority
  >);
}

export interface ParsedDepositSolWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Stake pool withdraw authority */
    withdrawAuthority: TAccountMetas[1];
    /** Reserve stake */
    reserveStake: TAccountMetas[2];
    /** Payer */
    payer: TAccountMetas[3];
    /** User pool token account */
    userPoolTokenAccount: TAccountMetas[4];
    /** Fee account */
    feeAccount: TAccountMetas[5];
    /** Referral fee account */
    referralFeeAccount: TAccountMetas[6];
    /** Pool mint */
    poolMint: TAccountMetas[7];
    /** System program */
    systemProgram: TAccountMetas[8];
    /** Token program */
    tokenProgram: TAccountMetas[9];
    /** Stake pool sol deposit authority */
    solDepositAuthority: TAccountMetas[10];
  };
  data: DepositSolWithSlippageInstructionData;
}

export function parseDepositSolWithSlippageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositSolWithSlippageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      reserveStake: getNextAccount(),
      payer: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      feeAccount: getNextAccount(),
      referralFeeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      solDepositAuthority: getNextAccount(),
    },
    data: getDepositSolWithSlippageInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
