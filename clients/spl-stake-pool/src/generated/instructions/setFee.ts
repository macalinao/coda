/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { FeeType, FeeTypeArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import { getFeeTypeDecoder, getFeeTypeEncoder } from "../types/index.js";

export const SET_FEE_DISCRIMINATOR = 12;

export function getSetFeeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_FEE_DISCRIMINATOR);
}

export type SetFeeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountManager extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            AccountSignerMeta<TAccountManager>
        : TAccountManager,
      ...TRemainingAccounts,
    ]
  >;

export interface SetFeeInstructionData {
  discriminator: number;
  fee: FeeType;
}

export interface SetFeeInstructionDataArgs {
  fee: FeeTypeArgs;
}

export function getSetFeeInstructionDataEncoder(): Encoder<SetFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["fee", getFeeTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_FEE_DISCRIMINATOR }),
  );
}

export function getSetFeeInstructionDataDecoder(): Decoder<SetFeeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["fee", getFeeTypeDecoder()],
  ]);
}

export function getSetFeeInstructionDataCodec(): Codec<
  SetFeeInstructionDataArgs,
  SetFeeInstructionData
> {
  return combineCodec(
    getSetFeeInstructionDataEncoder(),
    getSetFeeInstructionDataDecoder(),
  );
}

export interface SetFeeInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Manager */
  manager: TransactionSigner<TAccountManager>;
  fee: SetFeeInstructionDataArgs["fee"];
}

export function getSetFeeInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetFeeInput<TAccountStakePool, TAccountManager>,
  config?: { programAddress?: TProgramAddress },
): SetFeeInstruction<TProgramAddress, TAccountStakePool, TAccountManager> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
    ],
    data: getSetFeeInstructionDataEncoder().encode(
      args as SetFeeInstructionDataArgs,
    ),
    programAddress,
  } as SetFeeInstruction<TProgramAddress, TAccountStakePool, TAccountManager>);
}

export interface ParsedSetFeeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Manager */
    manager: TAccountMetas[1];
  };
  data: SetFeeInstructionData;
}

export function parseSetFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { stakePool: getNextAccount(), manager: getNextAccount() },
    data: getSetFeeInstructionDataDecoder().decode(instruction.data),
  };
}
