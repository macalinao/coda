/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_MANAGER_DISCRIMINATOR = 11;

export function getSetManagerDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_MANAGER_DISCRIMINATOR);
}

export type SetManagerInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountManager extends string | AccountMeta = string,
  TAccountNewManager extends string | AccountMeta = string,
  TAccountNewManagerFeeAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            AccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountNewManager extends string
        ? ReadonlySignerAccount<TAccountNewManager> &
            AccountSignerMeta<TAccountNewManager>
        : TAccountNewManager,
      TAccountNewManagerFeeAccount extends string
        ? ReadonlyAccount<TAccountNewManagerFeeAccount>
        : TAccountNewManagerFeeAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface SetManagerInstructionData {
  discriminator: number;
}

export interface SetManagerInstructionDataArgs {}

export function getSetManagerInstructionDataEncoder(): FixedSizeEncoder<SetManagerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SET_MANAGER_DISCRIMINATOR }),
  );
}

export function getSetManagerInstructionDataDecoder(): FixedSizeDecoder<SetManagerInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getSetManagerInstructionDataCodec(): FixedSizeCodec<
  SetManagerInstructionDataArgs,
  SetManagerInstructionData
> {
  return combineCodec(
    getSetManagerInstructionDataEncoder(),
    getSetManagerInstructionDataDecoder(),
  );
}

export interface SetManagerInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountNewManager extends string = string,
  TAccountNewManagerFeeAccount extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Manager */
  manager: TransactionSigner<TAccountManager>;
  /** New manager */
  newManager: TransactionSigner<TAccountNewManager>;
  /** New manager fee account */
  newManagerFeeAccount: Address<TAccountNewManagerFeeAccount>;
}

export function getSetManagerInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountNewManager extends string,
  TAccountNewManagerFeeAccount extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetManagerInput<
    TAccountStakePool,
    TAccountManager,
    TAccountNewManager,
    TAccountNewManagerFeeAccount
  >,
  config?: { programAddress?: TProgramAddress },
): SetManagerInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountNewManager,
  TAccountNewManagerFeeAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
    newManager: { value: input.newManager ?? null, isWritable: false },
    newManagerFeeAccount: {
      value: input.newManagerFeeAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.newManager),
      getAccountMeta(accounts.newManagerFeeAccount),
    ],
    data: getSetManagerInstructionDataEncoder().encode({}),
    programAddress,
  } as SetManagerInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountNewManager,
    TAccountNewManagerFeeAccount
  >);
}

export interface ParsedSetManagerInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Manager */
    manager: TAccountMetas[1];
    /** New manager */
    newManager: TAccountMetas[2];
    /** New manager fee account */
    newManagerFeeAccount: TAccountMetas[3];
  };
  data: SetManagerInstructionData;
}

export function parseSetManagerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetManagerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      newManager: getNextAccount(),
      newManagerFeeAccount: getNextAccount(),
    },
    data: getSetManagerInstructionDataDecoder().decode(instruction.data),
  };
}
