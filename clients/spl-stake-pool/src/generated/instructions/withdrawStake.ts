/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_STAKE_DISCRIMINATOR = 10;

export function getWithdrawStakeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(WITHDRAW_STAKE_DISCRIMINATOR);
}

export type WithdrawStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountSourceStakeAccount extends string | AccountMeta = string,
  TAccountDestinationStakeAccount extends string | AccountMeta = string,
  TAccountNewWithdrawAuthority extends string | AccountMeta = string,
  TAccountUserTransferAuthority extends string | AccountMeta = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountSourceStakeAccount extends string
        ? WritableAccount<TAccountSourceStakeAccount>
        : TAccountSourceStakeAccount,
      TAccountDestinationStakeAccount extends string
        ? WritableAccount<TAccountDestinationStakeAccount>
        : TAccountDestinationStakeAccount,
      TAccountNewWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountNewWithdrawAuthority>
        : TAccountNewWithdrawAuthority,
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            AccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountFeeAccount extends string
        ? WritableAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawStakeInstructionData {
  discriminator: number;
  args: bigint;
}

export interface WithdrawStakeInstructionDataArgs {
  args: number | bigint;
}

export function getWithdrawStakeInstructionDataEncoder(): FixedSizeEncoder<WithdrawStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["args", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_STAKE_DISCRIMINATOR }),
  );
}

export function getWithdrawStakeInstructionDataDecoder(): FixedSizeDecoder<WithdrawStakeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["args", getU64Decoder()],
  ]);
}

export function getWithdrawStakeInstructionDataCodec(): FixedSizeCodec<
  WithdrawStakeInstructionDataArgs,
  WithdrawStakeInstructionData
> {
  return combineCodec(
    getWithdrawStakeInstructionDataEncoder(),
    getWithdrawStakeInstructionDataDecoder(),
  );
}

export interface WithdrawStakeAsyncInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountSourceStakeAccount extends string = string,
  TAccountDestinationStakeAccount extends string = string,
  TAccountNewWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Validator list */
  validatorList: Address<TAccountValidatorList>;
  /** Withdraw authority */
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  /** Source stake account */
  sourceStakeAccount: Address<TAccountSourceStakeAccount>;
  /** Destination stake account */
  destinationStakeAccount: Address<TAccountDestinationStakeAccount>;
  /** New withdraw authority */
  newWithdrawAuthority: Address<TAccountNewWithdrawAuthority>;
  /** User transfer authority */
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  /** User pool token account */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Fee account */
  feeAccount: Address<TAccountFeeAccount>;
  /** Pool mint */
  poolMint: Address<TAccountPoolMint>;
  /** Clock sysvar */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Stake program */
  stakeProgram?: Address<TAccountStakeProgram>;
  args: WithdrawStakeInstructionDataArgs["args"];
}

export async function getWithdrawStakeInstructionAsync<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountWithdrawAuthority extends string,
  TAccountSourceStakeAccount extends string,
  TAccountDestinationStakeAccount extends string,
  TAccountNewWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeAsyncInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  WithdrawStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    sourceStakeAccount: {
      value: input.sourceStakeAccount ?? null,
      isWritable: true,
    },
    destinationStakeAccount: {
      value: input.destinationStakeAccount ?? null,
      isWritable: true,
    },
    newWithdrawAuthority: {
      value: input.newWithdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.sourceStakeAccount),
      getAccountMeta(accounts.destinationStakeAccount),
      getAccountMeta(accounts.newWithdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getWithdrawStakeInstructionDataEncoder().encode(
      args as WithdrawStakeInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >);
}

export interface WithdrawStakeInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountSourceStakeAccount extends string = string,
  TAccountDestinationStakeAccount extends string = string,
  TAccountNewWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Validator list */
  validatorList: Address<TAccountValidatorList>;
  /** Withdraw authority */
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  /** Source stake account */
  sourceStakeAccount: Address<TAccountSourceStakeAccount>;
  /** Destination stake account */
  destinationStakeAccount: Address<TAccountDestinationStakeAccount>;
  /** New withdraw authority */
  newWithdrawAuthority: Address<TAccountNewWithdrawAuthority>;
  /** User transfer authority */
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  /** User pool token account */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Fee account */
  feeAccount: Address<TAccountFeeAccount>;
  /** Pool mint */
  poolMint: Address<TAccountPoolMint>;
  /** Clock sysvar */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Stake program */
  stakeProgram?: Address<TAccountStakeProgram>;
  args: WithdrawStakeInstructionDataArgs["args"];
}

export function getWithdrawStakeInstruction<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountWithdrawAuthority extends string,
  TAccountSourceStakeAccount extends string,
  TAccountDestinationStakeAccount extends string,
  TAccountNewWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorList,
  TAccountWithdrawAuthority,
  TAccountSourceStakeAccount,
  TAccountDestinationStakeAccount,
  TAccountNewWithdrawAuthority,
  TAccountUserTransferAuthority,
  TAccountUserPoolTokenAccount,
  TAccountFeeAccount,
  TAccountPoolMint,
  TAccountClockSysvar,
  TAccountTokenProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    sourceStakeAccount: {
      value: input.sourceStakeAccount ?? null,
      isWritable: true,
    },
    destinationStakeAccount: {
      value: input.destinationStakeAccount ?? null,
      isWritable: true,
    },
    newWithdrawAuthority: {
      value: input.newWithdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.sourceStakeAccount),
      getAccountMeta(accounts.destinationStakeAccount),
      getAccountMeta(accounts.newWithdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getWithdrawStakeInstructionDataEncoder().encode(
      args as WithdrawStakeInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedWithdrawStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Validator list */
    validatorList: TAccountMetas[1];
    /** Withdraw authority */
    withdrawAuthority: TAccountMetas[2];
    /** Source stake account */
    sourceStakeAccount: TAccountMetas[3];
    /** Destination stake account */
    destinationStakeAccount: TAccountMetas[4];
    /** New withdraw authority */
    newWithdrawAuthority: TAccountMetas[5];
    /** User transfer authority */
    userTransferAuthority: TAccountMetas[6];
    /** User pool token account */
    userPoolTokenAccount: TAccountMetas[7];
    /** Fee account */
    feeAccount: TAccountMetas[8];
    /** Pool mint */
    poolMint: TAccountMetas[9];
    /** Clock sysvar */
    clockSysvar: TAccountMetas[10];
    /** Token program */
    tokenProgram: TAccountMetas[11];
    /** Stake program */
    stakeProgram: TAccountMetas[12];
  };
  data: WithdrawStakeInstructionData;
}

export function parseWithdrawStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      sourceStakeAccount: getNextAccount(),
      destinationStakeAccount: getNextAccount(),
      newWithdrawAuthority: getNextAccount(),
      userTransferAuthority: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      feeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clockSysvar: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getWithdrawStakeInstructionDataDecoder().decode(instruction.data),
  };
}
