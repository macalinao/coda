/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_TOKEN_METADATA_DISCRIMINATOR = 18;

export function getUpdateTokenMetadataDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(UPDATE_TOKEN_METADATA_DISCRIMINATOR);
}

export type UpdateTokenMetadataInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountManager extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountMetadataAccount extends string | AccountMeta = string,
  TAccountMetadataProgram extends
    | string
    | AccountMeta = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            AccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountMetadataAccount extends string
        ? WritableAccount<TAccountMetadataAccount>
        : TAccountMetadataAccount,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateTokenMetadataInstructionData {
  discriminator: number;
  name: string;
  symbol: string;
  uri: string;
}

export interface UpdateTokenMetadataInstructionDataArgs {
  name: string;
  symbol: string;
  uri: string;
}

export function getUpdateTokenMetadataInstructionDataEncoder(): Encoder<UpdateTokenMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["symbol", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["uri", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_TOKEN_METADATA_DISCRIMINATOR,
    }),
  );
}

export function getUpdateTokenMetadataInstructionDataDecoder(): Decoder<UpdateTokenMetadataInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getUpdateTokenMetadataInstructionDataCodec(): Codec<
  UpdateTokenMetadataInstructionDataArgs,
  UpdateTokenMetadataInstructionData
> {
  return combineCodec(
    getUpdateTokenMetadataInstructionDataEncoder(),
    getUpdateTokenMetadataInstructionDataDecoder(),
  );
}

export interface UpdateTokenMetadataAsyncInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountMetadataAccount extends string = string,
  TAccountMetadataProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  metadataAccount: Address<TAccountMetadataAccount>;
  metadataProgram?: Address<TAccountMetadataProgram>;
  name: UpdateTokenMetadataInstructionDataArgs["name"];
  symbol: UpdateTokenMetadataInstructionDataArgs["symbol"];
  uri: UpdateTokenMetadataInstructionDataArgs["uri"];
}

export async function getUpdateTokenMetadataInstructionAsync<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountWithdrawAuthority extends string,
  TAccountMetadataAccount extends string,
  TAccountMetadataProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateTokenMetadataAsyncInput<
    TAccountStakePool,
    TAccountManager,
    TAccountWithdrawAuthority,
    TAccountMetadataAccount,
    TAccountMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  UpdateTokenMetadataInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountWithdrawAuthority,
    TAccountMetadataAccount,
    TAccountMetadataProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    manager: { value: input.manager ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    metadataAccount: { value: input.metadataAccount ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" as Address<"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.metadataAccount),
      getAccountMeta(accounts.metadataProgram),
    ],
    data: getUpdateTokenMetadataInstructionDataEncoder().encode(
      args as UpdateTokenMetadataInstructionDataArgs,
    ),
    programAddress,
  } as UpdateTokenMetadataInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountWithdrawAuthority,
    TAccountMetadataAccount,
    TAccountMetadataProgram
  >);
}

export interface UpdateTokenMetadataInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountMetadataAccount extends string = string,
  TAccountMetadataProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  metadataAccount: Address<TAccountMetadataAccount>;
  metadataProgram?: Address<TAccountMetadataProgram>;
  name: UpdateTokenMetadataInstructionDataArgs["name"];
  symbol: UpdateTokenMetadataInstructionDataArgs["symbol"];
  uri: UpdateTokenMetadataInstructionDataArgs["uri"];
}

export function getUpdateTokenMetadataInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountWithdrawAuthority extends string,
  TAccountMetadataAccount extends string,
  TAccountMetadataProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateTokenMetadataInput<
    TAccountStakePool,
    TAccountManager,
    TAccountWithdrawAuthority,
    TAccountMetadataAccount,
    TAccountMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateTokenMetadataInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountWithdrawAuthority,
  TAccountMetadataAccount,
  TAccountMetadataProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    manager: { value: input.manager ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    metadataAccount: { value: input.metadataAccount ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" as Address<"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.metadataAccount),
      getAccountMeta(accounts.metadataProgram),
    ],
    data: getUpdateTokenMetadataInstructionDataEncoder().encode(
      args as UpdateTokenMetadataInstructionDataArgs,
    ),
    programAddress,
  } as UpdateTokenMetadataInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountWithdrawAuthority,
    TAccountMetadataAccount,
    TAccountMetadataProgram
  >);
}

export interface ParsedUpdateTokenMetadataInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    manager: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    metadataAccount: TAccountMetas[3];
    metadataProgram: TAccountMetas[4];
  };
  data: UpdateTokenMetadataInstructionData;
}

export function parseUpdateTokenMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateTokenMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      metadataAccount: getNextAccount(),
      metadataProgram: getNextAccount(),
    },
    data: getUpdateTokenMetadataInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
