/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_SOL_WITH_SLIPPAGE_DISCRIMINATOR = 26;

export function getWithdrawSolWithSlippageDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(WITHDRAW_SOL_WITH_SLIPPAGE_DISCRIMINATOR);
}

export type WithdrawSolWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountUserTransferAuthority extends string | AccountMeta = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountDestinationSystemAccount extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSolWithdrawAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            AccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountDestinationSystemAccount extends string
        ? WritableAccount<TAccountDestinationSystemAccount>
        : TAccountDestinationSystemAccount,
      TAccountFeeAccount extends string
        ? WritableAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSolWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountSolWithdrawAuthority>
        : TAccountSolWithdrawAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawSolWithSlippageInstructionData {
  discriminator: number;
  poolTokensIn: bigint;
  minimumLamportsOut: bigint;
}

export interface WithdrawSolWithSlippageInstructionDataArgs {
  poolTokensIn: number | bigint;
  minimumLamportsOut: number | bigint;
}

export function getWithdrawSolWithSlippageInstructionDataEncoder(): FixedSizeEncoder<WithdrawSolWithSlippageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["poolTokensIn", getU64Encoder()],
      ["minimumLamportsOut", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_SOL_WITH_SLIPPAGE_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawSolWithSlippageInstructionDataDecoder(): FixedSizeDecoder<WithdrawSolWithSlippageInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["poolTokensIn", getU64Decoder()],
    ["minimumLamportsOut", getU64Decoder()],
  ]);
}

export function getWithdrawSolWithSlippageInstructionDataCodec(): FixedSizeCodec<
  WithdrawSolWithSlippageInstructionDataArgs,
  WithdrawSolWithSlippageInstructionData
> {
  return combineCodec(
    getWithdrawSolWithSlippageInstructionDataEncoder(),
    getWithdrawSolWithSlippageInstructionDataDecoder(),
  );
}

export interface WithdrawSolWithSlippageAsyncInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountReserveStake extends string = string,
  TAccountDestinationSystemAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSolWithdrawAuthority extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Stake pool withdraw authority */
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  /** User transfer authority */
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  /** User pool token account */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Reserve stake */
  reserveStake: Address<TAccountReserveStake>;
  /** Destination system account */
  destinationSystemAccount: Address<TAccountDestinationSystemAccount>;
  /** Fee account */
  feeAccount: Address<TAccountFeeAccount>;
  /** Pool mint */
  poolMint: Address<TAccountPoolMint>;
  /** Clock sysvar */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Stake history sysvar */
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  /** Stake program */
  stakeProgram?: Address<TAccountStakeProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Stake pool sol withdraw authority */
  solWithdrawAuthority:
    | Address<TAccountSolWithdrawAuthority>
    | TransactionSigner<TAccountSolWithdrawAuthority>;
  poolTokensIn: WithdrawSolWithSlippageInstructionDataArgs["poolTokensIn"];
  minimumLamportsOut: WithdrawSolWithSlippageInstructionDataArgs["minimumLamportsOut"];
}

export async function getWithdrawSolWithSlippageInstructionAsync<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountReserveStake extends string,
  TAccountDestinationSystemAccount extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSolWithdrawAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawSolWithSlippageAsyncInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountReserveStake,
    TAccountDestinationSystemAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram,
    TAccountTokenProgram,
    TAccountSolWithdrawAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  WithdrawSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountReserveStake,
    TAccountDestinationSystemAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram,
    TAccountTokenProgram,
    (typeof input)["solWithdrawAuthority"] extends TransactionSigner<TAccountSolWithdrawAuthority>
      ? ReadonlySignerAccount<TAccountSolWithdrawAuthority> &
          AccountSignerMeta<TAccountSolWithdrawAuthority>
      : TAccountSolWithdrawAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    destinationSystemAccount: {
      value: input.destinationSystemAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    solWithdrawAuthority: {
      value: input.solWithdrawAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.destinationSystemAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.solWithdrawAuthority),
    ],
    data: getWithdrawSolWithSlippageInstructionDataEncoder().encode(
      args as WithdrawSolWithSlippageInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountReserveStake,
    TAccountDestinationSystemAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram,
    TAccountTokenProgram,
    (typeof input)["solWithdrawAuthority"] extends TransactionSigner<TAccountSolWithdrawAuthority>
      ? ReadonlySignerAccount<TAccountSolWithdrawAuthority> &
          AccountSignerMeta<TAccountSolWithdrawAuthority>
      : TAccountSolWithdrawAuthority
  >);
}

export interface WithdrawSolWithSlippageInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountReserveStake extends string = string,
  TAccountDestinationSystemAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSolWithdrawAuthority extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Stake pool withdraw authority */
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  /** User transfer authority */
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  /** User pool token account */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Reserve stake */
  reserveStake: Address<TAccountReserveStake>;
  /** Destination system account */
  destinationSystemAccount: Address<TAccountDestinationSystemAccount>;
  /** Fee account */
  feeAccount: Address<TAccountFeeAccount>;
  /** Pool mint */
  poolMint: Address<TAccountPoolMint>;
  /** Clock sysvar */
  clockSysvar?: Address<TAccountClockSysvar>;
  /** Stake history sysvar */
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  /** Stake program */
  stakeProgram?: Address<TAccountStakeProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Stake pool sol withdraw authority */
  solWithdrawAuthority:
    | Address<TAccountSolWithdrawAuthority>
    | TransactionSigner<TAccountSolWithdrawAuthority>;
  poolTokensIn: WithdrawSolWithSlippageInstructionDataArgs["poolTokensIn"];
  minimumLamportsOut: WithdrawSolWithSlippageInstructionDataArgs["minimumLamportsOut"];
}

export function getWithdrawSolWithSlippageInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountReserveStake extends string,
  TAccountDestinationSystemAccount extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSolWithdrawAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawSolWithSlippageInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountReserveStake,
    TAccountDestinationSystemAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram,
    TAccountTokenProgram,
    TAccountSolWithdrawAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawSolWithSlippageInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountUserTransferAuthority,
  TAccountUserPoolTokenAccount,
  TAccountReserveStake,
  TAccountDestinationSystemAccount,
  TAccountFeeAccount,
  TAccountPoolMint,
  TAccountClockSysvar,
  TAccountStakeHistorySysvar,
  TAccountStakeProgram,
  TAccountTokenProgram,
  (typeof input)["solWithdrawAuthority"] extends TransactionSigner<TAccountSolWithdrawAuthority>
    ? ReadonlySignerAccount<TAccountSolWithdrawAuthority> &
        AccountSignerMeta<TAccountSolWithdrawAuthority>
    : TAccountSolWithdrawAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    destinationSystemAccount: {
      value: input.destinationSystemAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    solWithdrawAuthority: {
      value: input.solWithdrawAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.destinationSystemAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.solWithdrawAuthority),
    ],
    data: getWithdrawSolWithSlippageInstructionDataEncoder().encode(
      args as WithdrawSolWithSlippageInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawSolWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountReserveStake,
    TAccountDestinationSystemAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeProgram,
    TAccountTokenProgram,
    (typeof input)["solWithdrawAuthority"] extends TransactionSigner<TAccountSolWithdrawAuthority>
      ? ReadonlySignerAccount<TAccountSolWithdrawAuthority> &
          AccountSignerMeta<TAccountSolWithdrawAuthority>
      : TAccountSolWithdrawAuthority
  >);
}

export interface ParsedWithdrawSolWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Stake pool withdraw authority */
    withdrawAuthority: TAccountMetas[1];
    /** User transfer authority */
    userTransferAuthority: TAccountMetas[2];
    /** User pool token account */
    userPoolTokenAccount: TAccountMetas[3];
    /** Reserve stake */
    reserveStake: TAccountMetas[4];
    /** Destination system account */
    destinationSystemAccount: TAccountMetas[5];
    /** Fee account */
    feeAccount: TAccountMetas[6];
    /** Pool mint */
    poolMint: TAccountMetas[7];
    /** Clock sysvar */
    clockSysvar: TAccountMetas[8];
    /** Stake history sysvar */
    stakeHistorySysvar: TAccountMetas[9];
    /** Stake program */
    stakeProgram: TAccountMetas[10];
    /** Token program */
    tokenProgram: TAccountMetas[11];
    /** Stake pool sol withdraw authority */
    solWithdrawAuthority: TAccountMetas[12];
  };
  data: WithdrawSolWithSlippageInstructionData;
}

export function parseWithdrawSolWithSlippageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawSolWithSlippageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      userTransferAuthority: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      reserveStake: getNextAccount(),
      destinationSystemAccount: getNextAccount(),
      feeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      stakeProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      solWithdrawAuthority: getNextAccount(),
    },
    data: getWithdrawSolWithSlippageInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
