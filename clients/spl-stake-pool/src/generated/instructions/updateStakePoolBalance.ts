/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR = 7;

export function getUpdateStakePoolBalanceDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR);
}

export type UpdateStakePoolBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? ReadonlyAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountFeeAccount extends string
        ? WritableAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateStakePoolBalanceInstructionData {
  discriminator: number;
}

export interface UpdateStakePoolBalanceInstructionDataArgs {}

export function getUpdateStakePoolBalanceInstructionDataEncoder(): FixedSizeEncoder<UpdateStakePoolBalanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_STAKE_POOL_BALANCE_DISCRIMINATOR,
    }),
  );
}

export function getUpdateStakePoolBalanceInstructionDataDecoder(): FixedSizeDecoder<UpdateStakePoolBalanceInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getUpdateStakePoolBalanceInstructionDataCodec(): FixedSizeCodec<
  UpdateStakePoolBalanceInstructionDataArgs,
  UpdateStakePoolBalanceInstructionData
> {
  return combineCodec(
    getUpdateStakePoolBalanceInstructionDataEncoder(),
    getUpdateStakePoolBalanceInstructionDataDecoder(),
  );
}

export interface UpdateStakePoolBalanceAsyncInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountTokenProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  feeAccount: Address<TAccountFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
}

export async function getUpdateStakePoolBalanceInstructionAsync<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateStakePoolBalanceAsyncInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  UpdateStakePoolBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getUpdateStakePoolBalanceInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateStakePoolBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountTokenProgram
  >);
}

export interface UpdateStakePoolBalanceInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountTokenProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  feeAccount: Address<TAccountFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
}

export function getUpdateStakePoolBalanceInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UpdateStakePoolBalanceInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateStakePoolBalanceInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountFeeAccount,
  TAccountPoolMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getUpdateStakePoolBalanceInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateStakePoolBalanceInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountTokenProgram
  >);
}

export interface ParsedUpdateStakePoolBalanceInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    withdrawAuthority: TAccountMetas[1];
    validatorList: TAccountMetas[2];
    reserveStake: TAccountMetas[3];
    feeAccount: TAccountMetas[4];
    poolMint: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: UpdateStakePoolBalanceInstructionData;
}

export function parseUpdateStakePoolBalanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateStakePoolBalanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      feeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getUpdateStakePoolBalanceInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
