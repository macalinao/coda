/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  Option,
  OptionOrNullable,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  PreferredValidatorType,
  PreferredValidatorTypeArgs,
} from "../types/index.js";
import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getPreferredValidatorTypeDecoder,
  getPreferredValidatorTypeEncoder,
} from "../types/index.js";

export const SET_PREFERRED_VALIDATOR_DISCRIMINATOR = 5;

export function getSetPreferredValidatorDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(SET_PREFERRED_VALIDATOR_DISCRIMINATOR);
}

export type SetPreferredValidatorInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountValidatorList extends string
        ? ReadonlyAccount<TAccountValidatorList>
        : TAccountValidatorList,
      ...TRemainingAccounts,
    ]
  >;

export interface SetPreferredValidatorInstructionData {
  discriminator: number;
  validatorType: PreferredValidatorType;
  validatorVoteAddress: Option<Address>;
}

export interface SetPreferredValidatorInstructionDataArgs {
  validatorType: PreferredValidatorTypeArgs;
  validatorVoteAddress: OptionOrNullable<Address>;
}

export function getSetPreferredValidatorInstructionDataEncoder(): Encoder<SetPreferredValidatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["validatorType", getPreferredValidatorTypeEncoder()],
      ["validatorVoteAddress", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PREFERRED_VALIDATOR_DISCRIMINATOR,
    }),
  );
}

export function getSetPreferredValidatorInstructionDataDecoder(): Decoder<SetPreferredValidatorInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["validatorType", getPreferredValidatorTypeDecoder()],
    ["validatorVoteAddress", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getSetPreferredValidatorInstructionDataCodec(): Codec<
  SetPreferredValidatorInstructionDataArgs,
  SetPreferredValidatorInstructionData
> {
  return combineCodec(
    getSetPreferredValidatorInstructionDataEncoder(),
    getSetPreferredValidatorInstructionDataDecoder(),
  );
}

export interface SetPreferredValidatorInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountValidatorList extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  validatorList: Address<TAccountValidatorList>;
  validatorType: SetPreferredValidatorInstructionDataArgs["validatorType"];
  validatorVoteAddress: SetPreferredValidatorInstructionDataArgs["validatorVoteAddress"];
}

export function getSetPreferredValidatorInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountValidatorList extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: SetPreferredValidatorInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountValidatorList
  >,
  config?: { programAddress?: TProgramAddress },
): SetPreferredValidatorInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountValidatorList
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: false },
    validatorList: { value: input.validatorList ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.validatorList),
    ],
    data: getSetPreferredValidatorInstructionDataEncoder().encode(
      args as SetPreferredValidatorInstructionDataArgs,
    ),
    programAddress,
  } as SetPreferredValidatorInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountValidatorList
  >);
}

export interface ParsedSetPreferredValidatorInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    validatorList: TAccountMetas[2];
  };
  data: SetPreferredValidatorInstructionData;
}

export function parseSetPreferredValidatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetPreferredValidatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      validatorList: getNextAccount(),
    },
    data: getSetPreferredValidatorInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
