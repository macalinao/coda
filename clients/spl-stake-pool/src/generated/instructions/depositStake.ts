/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_STAKE_DISCRIMINATOR = 9;

export function getDepositStakeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(DEPOSIT_STAKE_DISCRIMINATOR);
}

export type DepositStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountDepositAuthority extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountStakeToMerge extends string | AccountMeta = string,
  TAccountValidatorStakeAccount extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountReferralFeeAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountDepositAuthority extends string
        ? ReadonlyAccount<TAccountDepositAuthority>
        : TAccountDepositAuthority,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountStakeToMerge extends string
        ? WritableAccount<TAccountStakeToMerge>
        : TAccountStakeToMerge,
      TAccountValidatorStakeAccount extends string
        ? WritableAccount<TAccountValidatorStakeAccount>
        : TAccountValidatorStakeAccount,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountFeeAccount extends string
        ? WritableAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountReferralFeeAccount extends string
        ? WritableAccount<TAccountReferralFeeAccount>
        : TAccountReferralFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositStakeInstructionData {
  discriminator: number;
}

export interface DepositStakeInstructionDataArgs {}

export function getDepositStakeInstructionDataEncoder(): FixedSizeEncoder<DepositStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", getU8Encoder()]]),
    (value) => ({ ...value, discriminator: DEPOSIT_STAKE_DISCRIMINATOR }),
  );
}

export function getDepositStakeInstructionDataDecoder(): FixedSizeDecoder<DepositStakeInstructionData> {
  return getStructDecoder([["discriminator", getU8Decoder()]]);
}

export function getDepositStakeInstructionDataCodec(): FixedSizeCodec<
  DepositStakeInstructionDataArgs,
  DepositStakeInstructionData
> {
  return combineCodec(
    getDepositStakeInstructionDataEncoder(),
    getDepositStakeInstructionDataDecoder(),
  );
}

export interface DepositStakeAsyncInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountDepositAuthority extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountStakeToMerge extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountReserveStake extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountReferralFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  depositAuthority:
    | Address<TAccountDepositAuthority>
    | TransactionSigner<TAccountDepositAuthority>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  stakeToMerge: Address<TAccountStakeToMerge>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  reserveStake: Address<TAccountReserveStake>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  feeAccount: Address<TAccountFeeAccount>;
  referralFeeAccount: Address<TAccountReferralFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  tokenProgram?: Address<TAccountTokenProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
}

export async function getDepositStakeInstructionAsync<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountDepositAuthority extends string,
  TAccountWithdrawAuthority extends string,
  TAccountStakeToMerge extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountReserveStake extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountReferralFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositStakeAsyncInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStakeToMerge,
    TAccountValidatorStakeAccount,
    TAccountReserveStake,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DepositStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
      ? ReadonlySignerAccount<TAccountDepositAuthority> &
          AccountSignerMeta<TAccountDepositAuthority>
      : TAccountDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStakeToMerge,
    TAccountValidatorStakeAccount,
    TAccountReserveStake,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    depositAuthority: {
      value: input.depositAuthority ?? null,
      isWritable: false,
    },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    stakeToMerge: { value: input.stakeToMerge ?? null, isWritable: true },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: true,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    referralFeeAccount: {
      value: input.referralFeeAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.depositAuthority),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.stakeToMerge),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.referralFeeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getDepositStakeInstructionDataEncoder().encode({}),
    programAddress,
  } as DepositStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
      ? ReadonlySignerAccount<TAccountDepositAuthority> &
          AccountSignerMeta<TAccountDepositAuthority>
      : TAccountDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStakeToMerge,
    TAccountValidatorStakeAccount,
    TAccountReserveStake,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >);
}

export interface DepositStakeInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountDepositAuthority extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountStakeToMerge extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountReserveStake extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountReferralFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  depositAuthority:
    | Address<TAccountDepositAuthority>
    | TransactionSigner<TAccountDepositAuthority>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  stakeToMerge: Address<TAccountStakeToMerge>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  reserveStake: Address<TAccountReserveStake>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  feeAccount: Address<TAccountFeeAccount>;
  referralFeeAccount: Address<TAccountReferralFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  tokenProgram?: Address<TAccountTokenProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
}

export function getDepositStakeInstruction<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountDepositAuthority extends string,
  TAccountWithdrawAuthority extends string,
  TAccountStakeToMerge extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountReserveStake extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountReferralFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositStakeInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStakeToMerge,
    TAccountValidatorStakeAccount,
    TAccountReserveStake,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorList,
  (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
    ? ReadonlySignerAccount<TAccountDepositAuthority> &
        AccountSignerMeta<TAccountDepositAuthority>
    : TAccountDepositAuthority,
  TAccountWithdrawAuthority,
  TAccountStakeToMerge,
  TAccountValidatorStakeAccount,
  TAccountReserveStake,
  TAccountUserPoolTokenAccount,
  TAccountFeeAccount,
  TAccountReferralFeeAccount,
  TAccountPoolMint,
  TAccountClockSysvar,
  TAccountStakeHistorySysvar,
  TAccountTokenProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    depositAuthority: {
      value: input.depositAuthority ?? null,
      isWritable: false,
    },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    stakeToMerge: { value: input.stakeToMerge ?? null, isWritable: true },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: true,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    referralFeeAccount: {
      value: input.referralFeeAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.depositAuthority),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.stakeToMerge),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.referralFeeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getDepositStakeInstructionDataEncoder().encode({}),
    programAddress,
  } as DepositStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
      ? ReadonlySignerAccount<TAccountDepositAuthority> &
          AccountSignerMeta<TAccountDepositAuthority>
      : TAccountDepositAuthority,
    TAccountWithdrawAuthority,
    TAccountStakeToMerge,
    TAccountValidatorStakeAccount,
    TAccountReserveStake,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountReferralFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedDepositStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorList: TAccountMetas[1];
    depositAuthority: TAccountMetas[2];
    withdrawAuthority: TAccountMetas[3];
    stakeToMerge: TAccountMetas[4];
    validatorStakeAccount: TAccountMetas[5];
    reserveStake: TAccountMetas[6];
    userPoolTokenAccount: TAccountMetas[7];
    feeAccount: TAccountMetas[8];
    referralFeeAccount: TAccountMetas[9];
    poolMint: TAccountMetas[10];
    clockSysvar: TAccountMetas[11];
    stakeHistorySysvar: TAccountMetas[12];
    tokenProgram: TAccountMetas[13];
    stakeProgram: TAccountMetas[14];
  };
  data: DepositStakeInstructionData;
}

export function parseDepositStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
      depositAuthority: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      stakeToMerge: getNextAccount(),
      validatorStakeAccount: getNextAccount(),
      reserveStake: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      feeAccount: getNextAccount(),
      referralFeeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getDepositStakeInstructionDataDecoder().decode(instruction.data),
  };
}
