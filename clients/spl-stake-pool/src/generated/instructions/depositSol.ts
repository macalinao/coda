/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_SOL_DISCRIMINATOR = 14;

export function getDepositSolDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(DEPOSIT_SOL_DISCRIMINATOR);
}

export type DepositSolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta = string,
  TAccountManagerFeeAccount extends string | AccountMeta = string,
  TAccountReferralPoolAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountDepositAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountManagerFeeAccount extends string
        ? WritableAccount<TAccountManagerFeeAccount>
        : TAccountManagerFeeAccount,
      TAccountReferralPoolAccount extends string
        ? WritableAccount<TAccountReferralPoolAccount>
        : TAccountReferralPoolAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountDepositAuthority extends string
        ? ReadonlySignerAccount<TAccountDepositAuthority> &
            AccountSignerMeta<TAccountDepositAuthority>
        : TAccountDepositAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositSolInstructionData {
  discriminator: number;
  args: bigint;
}

export interface DepositSolInstructionDataArgs {
  args: number | bigint;
}

export function getDepositSolInstructionDataEncoder(): FixedSizeEncoder<DepositSolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["args", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_SOL_DISCRIMINATOR }),
  );
}

export function getDepositSolInstructionDataDecoder(): FixedSizeDecoder<DepositSolInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["args", getU64Decoder()],
  ]);
}

export function getDepositSolInstructionDataCodec(): FixedSizeCodec<
  DepositSolInstructionDataArgs,
  DepositSolInstructionData
> {
  return combineCodec(
    getDepositSolInstructionDataEncoder(),
    getDepositSolInstructionDataDecoder(),
  );
}

export interface DepositSolAsyncInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPayer extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountManagerFeeAccount extends string = string,
  TAccountReferralPoolAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountDepositAuthority extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Stake pool withdraw authority */
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  /** Reserve stake account, to deposit SOL */
  reserveStake: Address<TAccountReserveStake>;
  /** Account providing the lamports to be deposited into the pool */
  payer: TransactionSigner<TAccountPayer>;
  /** User account to receive pool tokens */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Account to receive fee tokens */
  managerFeeAccount: Address<TAccountManagerFeeAccount>;
  /** Account to receive a portion of fee as referral fees */
  referralPoolAccount: Address<TAccountReferralPoolAccount>;
  /** Pool token mint account */
  poolMint: Address<TAccountPoolMint>;
  /** System program account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program id */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** (Optional) Stake pool sol deposit authority. */
  depositAuthority?: TransactionSigner<TAccountDepositAuthority>;
  args: DepositSolInstructionDataArgs["args"];
}

export async function getDepositSolInstructionAsync<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountReserveStake extends string,
  TAccountPayer extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountManagerFeeAccount extends string,
  TAccountReferralPoolAccount extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountDepositAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositSolAsyncInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountReferralPoolAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DepositSolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountReferralPoolAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    managerFeeAccount: {
      value: input.managerFeeAccount ?? null,
      isWritable: true,
    },
    referralPoolAccount: {
      value: input.referralPoolAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    depositAuthority: {
      value: input.depositAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.managerFeeAccount),
      getAccountMeta(accounts.referralPoolAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.depositAuthority),
    ],
    data: getDepositSolInstructionDataEncoder().encode(
      args as DepositSolInstructionDataArgs,
    ),
    programAddress,
  } as DepositSolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountReferralPoolAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >);
}

export interface DepositSolInput<
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPayer extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountManagerFeeAccount extends string = string,
  TAccountReferralPoolAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountDepositAuthority extends string = string,
> {
  /** Stake pool */
  stakePool: Address<TAccountStakePool>;
  /** Stake pool withdraw authority */
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  /** Reserve stake account, to deposit SOL */
  reserveStake: Address<TAccountReserveStake>;
  /** Account providing the lamports to be deposited into the pool */
  payer: TransactionSigner<TAccountPayer>;
  /** User account to receive pool tokens */
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  /** Account to receive fee tokens */
  managerFeeAccount: Address<TAccountManagerFeeAccount>;
  /** Account to receive a portion of fee as referral fees */
  referralPoolAccount: Address<TAccountReferralPoolAccount>;
  /** Pool token mint account */
  poolMint: Address<TAccountPoolMint>;
  /** System program account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program id */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** (Optional) Stake pool sol deposit authority. */
  depositAuthority?: TransactionSigner<TAccountDepositAuthority>;
  args: DepositSolInstructionDataArgs["args"];
}

export function getDepositSolInstruction<
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountReserveStake extends string,
  TAccountPayer extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountManagerFeeAccount extends string,
  TAccountReferralPoolAccount extends string,
  TAccountPoolMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountDepositAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositSolInput<
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountReferralPoolAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): DepositSolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountReserveStake,
  TAccountPayer,
  TAccountUserPoolTokenAccount,
  TAccountManagerFeeAccount,
  TAccountReferralPoolAccount,
  TAccountPoolMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountDepositAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    managerFeeAccount: {
      value: input.managerFeeAccount ?? null,
      isWritable: true,
    },
    referralPoolAccount: {
      value: input.referralPoolAccount ?? null,
      isWritable: true,
    },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    depositAuthority: {
      value: input.depositAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.managerFeeAccount),
      getAccountMeta(accounts.referralPoolAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.depositAuthority),
    ],
    data: getDepositSolInstructionDataEncoder().encode(
      args as DepositSolInstructionDataArgs,
    ),
    programAddress,
  } as DepositSolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountReserveStake,
    TAccountPayer,
    TAccountUserPoolTokenAccount,
    TAccountManagerFeeAccount,
    TAccountReferralPoolAccount,
    TAccountPoolMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >);
}

export interface ParsedDepositSolInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake pool */
    stakePool: TAccountMetas[0];
    /** Stake pool withdraw authority */
    withdrawAuthority: TAccountMetas[1];
    /** Reserve stake account, to deposit SOL */
    reserveStake: TAccountMetas[2];
    /** Account providing the lamports to be deposited into the pool */
    payer: TAccountMetas[3];
    /** User account to receive pool tokens */
    userPoolTokenAccount: TAccountMetas[4];
    /** Account to receive fee tokens */
    managerFeeAccount: TAccountMetas[5];
    /** Account to receive a portion of fee as referral fees */
    referralPoolAccount: TAccountMetas[6];
    /** Pool token mint account */
    poolMint: TAccountMetas[7];
    /** System program account */
    systemProgram: TAccountMetas[8];
    /** Token program id */
    tokenProgram: TAccountMetas[9];
    /** (Optional) Stake pool sol deposit authority. */
    depositAuthority?: TAccountMetas[10] | undefined;
  };
  data: DepositSolInstructionData;
}

export function parseDepositSolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositSolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SPL_STAKE_POOL_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      reserveStake: getNextAccount(),
      payer: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      managerFeeAccount: getNextAccount(),
      referralPoolAccount: getNextAccount(),
      poolMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      depositAuthority: getNextOptionalAccount(),
    },
    data: getDepositSolInstructionDataDecoder().decode(instruction.data),
  };
}
