/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const DECREASE_VALIDATOR_STAKE_WITH_RESERVE_DISCRIMINATOR = 21;

export function getDecreaseValidatorStakeWithReserveDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(
    DECREASE_VALIDATOR_STAKE_WITH_RESERVE_DISCRIMINATOR,
  );
}

export type DecreaseValidatorStakeWithReserveInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountCanonicalStake extends string | AccountMeta = string,
  TAccountTransientStake extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountCanonicalStake extends string
        ? WritableAccount<TAccountCanonicalStake>
        : TAccountCanonicalStake,
      TAccountTransientStake extends string
        ? WritableAccount<TAccountTransientStake>
        : TAccountTransientStake,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DecreaseValidatorStakeWithReserveInstructionData {
  discriminator: number;
  lamports: bigint;
  transientStakeSeed: bigint;
}

export interface DecreaseValidatorStakeWithReserveInstructionDataArgs {
  lamports: number | bigint;
  transientStakeSeed: number | bigint;
}

export function getDecreaseValidatorStakeWithReserveInstructionDataEncoder(): FixedSizeEncoder<DecreaseValidatorStakeWithReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["lamports", getU64Encoder()],
      ["transientStakeSeed", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DECREASE_VALIDATOR_STAKE_WITH_RESERVE_DISCRIMINATOR,
    }),
  );
}

export function getDecreaseValidatorStakeWithReserveInstructionDataDecoder(): FixedSizeDecoder<DecreaseValidatorStakeWithReserveInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["lamports", getU64Decoder()],
    ["transientStakeSeed", getU64Decoder()],
  ]);
}

export function getDecreaseValidatorStakeWithReserveInstructionDataCodec(): FixedSizeCodec<
  DecreaseValidatorStakeWithReserveInstructionDataArgs,
  DecreaseValidatorStakeWithReserveInstructionData
> {
  return combineCodec(
    getDecreaseValidatorStakeWithReserveInstructionDataEncoder(),
    getDecreaseValidatorStakeWithReserveInstructionDataDecoder(),
  );
}

export interface DecreaseValidatorStakeWithReserveAsyncInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountCanonicalStake extends string = string,
  TAccountTransientStake extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  canonicalStake: Address<TAccountCanonicalStake>;
  transientStake: Address<TAccountTransientStake>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: DecreaseValidatorStakeWithReserveInstructionDataArgs["lamports"];
  transientStakeSeed: DecreaseValidatorStakeWithReserveInstructionDataArgs["transientStakeSeed"];
}

export async function getDecreaseValidatorStakeWithReserveInstructionAsync<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountCanonicalStake extends string,
  TAccountTransientStake extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DecreaseValidatorStakeWithReserveAsyncInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountCanonicalStake,
    TAccountTransientStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DecreaseValidatorStakeWithReserveInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountCanonicalStake,
    TAccountTransientStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    canonicalStake: { value: input.canonicalStake ?? null, isWritable: true },
    transientStake: { value: input.transientStake ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.canonicalStake),
      getAccountMeta(accounts.transientStake),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getDecreaseValidatorStakeWithReserveInstructionDataEncoder().encode(
      args as DecreaseValidatorStakeWithReserveInstructionDataArgs,
    ),
    programAddress,
  } as DecreaseValidatorStakeWithReserveInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountCanonicalStake,
    TAccountTransientStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface DecreaseValidatorStakeWithReserveInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountCanonicalStake extends string = string,
  TAccountTransientStake extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  canonicalStake: Address<TAccountCanonicalStake>;
  transientStake: Address<TAccountTransientStake>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: DecreaseValidatorStakeWithReserveInstructionDataArgs["lamports"];
  transientStakeSeed: DecreaseValidatorStakeWithReserveInstructionDataArgs["transientStakeSeed"];
}

export function getDecreaseValidatorStakeWithReserveInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountCanonicalStake extends string,
  TAccountTransientStake extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DecreaseValidatorStakeWithReserveInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountCanonicalStake,
    TAccountTransientStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DecreaseValidatorStakeWithReserveInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountCanonicalStake,
  TAccountTransientStake,
  TAccountClockSysvar,
  TAccountStakeHistorySysvar,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    canonicalStake: { value: input.canonicalStake ?? null, isWritable: true },
    transientStake: { value: input.transientStake ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.canonicalStake),
      getAccountMeta(accounts.transientStake),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getDecreaseValidatorStakeWithReserveInstructionDataEncoder().encode(
      args as DecreaseValidatorStakeWithReserveInstructionDataArgs,
    ),
    programAddress,
  } as DecreaseValidatorStakeWithReserveInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountCanonicalStake,
    TAccountTransientStake,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedDecreaseValidatorStakeWithReserveInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    canonicalStake: TAccountMetas[5];
    transientStake: TAccountMetas[6];
    clockSysvar: TAccountMetas[7];
    stakeHistorySysvar: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    stakeProgram: TAccountMetas[10];
  };
  data: DecreaseValidatorStakeWithReserveInstructionData;
}

export function parseDecreaseValidatorStakeWithReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDecreaseValidatorStakeWithReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      canonicalStake: getNextAccount(),
      transientStake: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getDecreaseValidatorStakeWithReserveInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
