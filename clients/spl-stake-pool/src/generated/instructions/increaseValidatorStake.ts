/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const INCREASE_VALIDATOR_STAKE_DISCRIMINATOR = 4;

export function getIncreaseValidatorStakeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(INCREASE_VALIDATOR_STAKE_DISCRIMINATOR);
}

export type IncreaseValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountTransientStakeAccount extends string | AccountMeta = string,
  TAccountValidatorStakeAccount extends string | AccountMeta = string,
  TAccountValidatorVoteAccount extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountRentSysvar extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountStakeConfigSysvar extends
    | string
    | AccountMeta = "StakeConfig11111111111111111111111111111111",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountValidatorStakeAccount extends string
        ? ReadonlyAccount<TAccountValidatorStakeAccount>
        : TAccountValidatorStakeAccount,
      TAccountValidatorVoteAccount extends string
        ? ReadonlyAccount<TAccountValidatorVoteAccount>
        : TAccountValidatorVoteAccount,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountRentSysvar extends string
        ? ReadonlyAccount<TAccountRentSysvar>
        : TAccountRentSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountStakeConfigSysvar extends string
        ? ReadonlyAccount<TAccountStakeConfigSysvar>
        : TAccountStakeConfigSysvar,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface IncreaseValidatorStakeInstructionData {
  discriminator: number;
  lamports: bigint;
  transientStakeSeed: bigint;
}

export interface IncreaseValidatorStakeInstructionDataArgs {
  lamports: number | bigint;
  transientStakeSeed: number | bigint;
}

export function getIncreaseValidatorStakeInstructionDataEncoder(): FixedSizeEncoder<IncreaseValidatorStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["lamports", getU64Encoder()],
      ["transientStakeSeed", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREASE_VALIDATOR_STAKE_DISCRIMINATOR,
    }),
  );
}

export function getIncreaseValidatorStakeInstructionDataDecoder(): FixedSizeDecoder<IncreaseValidatorStakeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["lamports", getU64Decoder()],
    ["transientStakeSeed", getU64Decoder()],
  ]);
}

export function getIncreaseValidatorStakeInstructionDataCodec(): FixedSizeCodec<
  IncreaseValidatorStakeInstructionDataArgs,
  IncreaseValidatorStakeInstructionData
> {
  return combineCodec(
    getIncreaseValidatorStakeInstructionDataEncoder(),
    getIncreaseValidatorStakeInstructionDataDecoder(),
  );
}

export interface IncreaseValidatorStakeAsyncInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountValidatorVoteAccount extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountRentSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeConfigSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  validatorVoteAccount: Address<TAccountValidatorVoteAccount>;
  clockSysvar?: Address<TAccountClockSysvar>;
  rentSysvar?: Address<TAccountRentSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeConfigSysvar?: Address<TAccountStakeConfigSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: IncreaseValidatorStakeInstructionDataArgs["lamports"];
  transientStakeSeed: IncreaseValidatorStakeInstructionDataArgs["transientStakeSeed"];
}

export async function getIncreaseValidatorStakeInstructionAsync<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountTransientStakeAccount extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountValidatorVoteAccount extends string,
  TAccountClockSysvar extends string,
  TAccountRentSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeConfigSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: IncreaseValidatorStakeAsyncInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountValidatorVoteAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  IncreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountValidatorVoteAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: false,
    },
    validatorVoteAccount: {
      value: input.validatorVoteAccount ?? null,
      isWritable: false,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeConfigSysvar: {
      value: input.stakeConfigSysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeConfigSysvar.value) {
    accounts.stakeConfigSysvar.value =
      "StakeConfig11111111111111111111111111111111" as Address<"StakeConfig11111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.validatorVoteAccount),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.rentSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeConfigSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getIncreaseValidatorStakeInstructionDataEncoder().encode(
      args as IncreaseValidatorStakeInstructionDataArgs,
    ),
    programAddress,
  } as IncreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountValidatorVoteAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface IncreaseValidatorStakeInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountValidatorStakeAccount extends string = string,
  TAccountValidatorVoteAccount extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountRentSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeConfigSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  validatorStakeAccount: Address<TAccountValidatorStakeAccount>;
  validatorVoteAccount: Address<TAccountValidatorVoteAccount>;
  clockSysvar?: Address<TAccountClockSysvar>;
  rentSysvar?: Address<TAccountRentSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeConfigSysvar?: Address<TAccountStakeConfigSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: IncreaseValidatorStakeInstructionDataArgs["lamports"];
  transientStakeSeed: IncreaseValidatorStakeInstructionDataArgs["transientStakeSeed"];
}

export function getIncreaseValidatorStakeInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountTransientStakeAccount extends string,
  TAccountValidatorStakeAccount extends string,
  TAccountValidatorVoteAccount extends string,
  TAccountClockSysvar extends string,
  TAccountRentSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeConfigSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: IncreaseValidatorStakeInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountValidatorVoteAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): IncreaseValidatorStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountTransientStakeAccount,
  TAccountValidatorStakeAccount,
  TAccountValidatorVoteAccount,
  TAccountClockSysvar,
  TAccountRentSysvar,
  TAccountStakeHistorySysvar,
  TAccountStakeConfigSysvar,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    validatorStakeAccount: {
      value: input.validatorStakeAccount ?? null,
      isWritable: false,
    },
    validatorVoteAccount: {
      value: input.validatorVoteAccount ?? null,
      isWritable: false,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeConfigSysvar: {
      value: input.stakeConfigSysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeConfigSysvar.value) {
    accounts.stakeConfigSysvar.value =
      "StakeConfig11111111111111111111111111111111" as Address<"StakeConfig11111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.validatorStakeAccount),
      getAccountMeta(accounts.validatorVoteAccount),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.rentSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeConfigSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getIncreaseValidatorStakeInstructionDataEncoder().encode(
      args as IncreaseValidatorStakeInstructionDataArgs,
    ),
    programAddress,
  } as IncreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountTransientStakeAccount,
    TAccountValidatorStakeAccount,
    TAccountValidatorVoteAccount,
    TAccountClockSysvar,
    TAccountRentSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedIncreaseValidatorStakeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    transientStakeAccount: TAccountMetas[5];
    validatorStakeAccount: TAccountMetas[6];
    validatorVoteAccount: TAccountMetas[7];
    clockSysvar: TAccountMetas[8];
    rentSysvar: TAccountMetas[9];
    stakeHistorySysvar: TAccountMetas[10];
    stakeConfigSysvar: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
    stakeProgram: TAccountMetas[13];
  };
  data: IncreaseValidatorStakeInstructionData;
}

export function parseIncreaseValidatorStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedIncreaseValidatorStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      validatorStakeAccount: getNextAccount(),
      validatorVoteAccount: getNextAccount(),
      clockSysvar: getNextAccount(),
      rentSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      stakeConfigSysvar: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getIncreaseValidatorStakeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
