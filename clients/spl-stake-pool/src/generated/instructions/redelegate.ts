/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const REDELEGATE_DISCRIMINATOR = 22;

export function getRedelegateDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(REDELEGATE_DISCRIMINATOR);
}

export type RedelegateInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountSourceCanonicalStake extends string | AccountMeta = string,
  TAccountSourceTransientStake extends string | AccountMeta = string,
  TAccountEphemeralStake extends string | AccountMeta = string,
  TAccountDestinationTransientStake extends string | AccountMeta = string,
  TAccountDestinationStake extends string | AccountMeta = string,
  TAccountDestinationVote extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountStakeHistorySysvar extends
    | string
    | AccountMeta = "SysvarStakeHistory1111111111111111111111111",
  TAccountStakeConfigSysvar extends
    | string
    | AccountMeta = "StakeConfig11111111111111111111111111111111",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStaker extends string
        ? ReadonlySignerAccount<TAccountStaker> &
            AccountSignerMeta<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountSourceCanonicalStake extends string
        ? WritableAccount<TAccountSourceCanonicalStake>
        : TAccountSourceCanonicalStake,
      TAccountSourceTransientStake extends string
        ? WritableAccount<TAccountSourceTransientStake>
        : TAccountSourceTransientStake,
      TAccountEphemeralStake extends string
        ? WritableAccount<TAccountEphemeralStake>
        : TAccountEphemeralStake,
      TAccountDestinationTransientStake extends string
        ? WritableAccount<TAccountDestinationTransientStake>
        : TAccountDestinationTransientStake,
      TAccountDestinationStake extends string
        ? ReadonlyAccount<TAccountDestinationStake>
        : TAccountDestinationStake,
      TAccountDestinationVote extends string
        ? ReadonlyAccount<TAccountDestinationVote>
        : TAccountDestinationVote,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountStakeHistorySysvar extends string
        ? ReadonlyAccount<TAccountStakeHistorySysvar>
        : TAccountStakeHistorySysvar,
      TAccountStakeConfigSysvar extends string
        ? ReadonlyAccount<TAccountStakeConfigSysvar>
        : TAccountStakeConfigSysvar,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RedelegateInstructionData {
  discriminator: number;
  lamports: bigint;
  sourceTransientStakeSeed: bigint;
  ephemeralStakeSeed: bigint;
  destinationTransientStakeSeed: bigint;
}

export interface RedelegateInstructionDataArgs {
  lamports: number | bigint;
  sourceTransientStakeSeed: number | bigint;
  ephemeralStakeSeed: number | bigint;
  destinationTransientStakeSeed: number | bigint;
}

export function getRedelegateInstructionDataEncoder(): FixedSizeEncoder<RedelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["lamports", getU64Encoder()],
      ["sourceTransientStakeSeed", getU64Encoder()],
      ["ephemeralStakeSeed", getU64Encoder()],
      ["destinationTransientStakeSeed", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REDELEGATE_DISCRIMINATOR }),
  );
}

export function getRedelegateInstructionDataDecoder(): FixedSizeDecoder<RedelegateInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["lamports", getU64Decoder()],
    ["sourceTransientStakeSeed", getU64Decoder()],
    ["ephemeralStakeSeed", getU64Decoder()],
    ["destinationTransientStakeSeed", getU64Decoder()],
  ]);
}

export function getRedelegateInstructionDataCodec(): FixedSizeCodec<
  RedelegateInstructionDataArgs,
  RedelegateInstructionData
> {
  return combineCodec(
    getRedelegateInstructionDataEncoder(),
    getRedelegateInstructionDataDecoder(),
  );
}

export interface RedelegateAsyncInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountSourceCanonicalStake extends string = string,
  TAccountSourceTransientStake extends string = string,
  TAccountEphemeralStake extends string = string,
  TAccountDestinationTransientStake extends string = string,
  TAccountDestinationStake extends string = string,
  TAccountDestinationVote extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeConfigSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  sourceCanonicalStake: Address<TAccountSourceCanonicalStake>;
  sourceTransientStake: Address<TAccountSourceTransientStake>;
  ephemeralStake: Address<TAccountEphemeralStake>;
  destinationTransientStake: Address<TAccountDestinationTransientStake>;
  destinationStake: Address<TAccountDestinationStake>;
  destinationVote: Address<TAccountDestinationVote>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeConfigSysvar?: Address<TAccountStakeConfigSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: RedelegateInstructionDataArgs["lamports"];
  sourceTransientStakeSeed: RedelegateInstructionDataArgs["sourceTransientStakeSeed"];
  ephemeralStakeSeed: RedelegateInstructionDataArgs["ephemeralStakeSeed"];
  destinationTransientStakeSeed: RedelegateInstructionDataArgs["destinationTransientStakeSeed"];
}

export async function getRedelegateInstructionAsync<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountSourceCanonicalStake extends string,
  TAccountSourceTransientStake extends string,
  TAccountEphemeralStake extends string,
  TAccountDestinationTransientStake extends string,
  TAccountDestinationStake extends string,
  TAccountDestinationVote extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeConfigSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RedelegateAsyncInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountSourceCanonicalStake,
    TAccountSourceTransientStake,
    TAccountEphemeralStake,
    TAccountDestinationTransientStake,
    TAccountDestinationStake,
    TAccountDestinationVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  RedelegateInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountSourceCanonicalStake,
    TAccountSourceTransientStake,
    TAccountEphemeralStake,
    TAccountDestinationTransientStake,
    TAccountDestinationStake,
    TAccountDestinationVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    sourceCanonicalStake: {
      value: input.sourceCanonicalStake ?? null,
      isWritable: true,
    },
    sourceTransientStake: {
      value: input.sourceTransientStake ?? null,
      isWritable: true,
    },
    ephemeralStake: { value: input.ephemeralStake ?? null, isWritable: true },
    destinationTransientStake: {
      value: input.destinationTransientStake ?? null,
      isWritable: true,
    },
    destinationStake: {
      value: input.destinationStake ?? null,
      isWritable: false,
    },
    destinationVote: {
      value: input.destinationVote ?? null,
      isWritable: false,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeConfigSysvar: {
      value: input.stakeConfigSysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeConfigSysvar.value) {
    accounts.stakeConfigSysvar.value =
      "StakeConfig11111111111111111111111111111111" as Address<"StakeConfig11111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.sourceCanonicalStake),
      getAccountMeta(accounts.sourceTransientStake),
      getAccountMeta(accounts.ephemeralStake),
      getAccountMeta(accounts.destinationTransientStake),
      getAccountMeta(accounts.destinationStake),
      getAccountMeta(accounts.destinationVote),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeConfigSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getRedelegateInstructionDataEncoder().encode(
      args as RedelegateInstructionDataArgs,
    ),
    programAddress,
  } as RedelegateInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountSourceCanonicalStake,
    TAccountSourceTransientStake,
    TAccountEphemeralStake,
    TAccountDestinationTransientStake,
    TAccountDestinationStake,
    TAccountDestinationVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface RedelegateInput<
  TAccountStakePool extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountSourceCanonicalStake extends string = string,
  TAccountSourceTransientStake extends string = string,
  TAccountEphemeralStake extends string = string,
  TAccountDestinationTransientStake extends string = string,
  TAccountDestinationStake extends string = string,
  TAccountDestinationVote extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountStakeHistorySysvar extends string = string,
  TAccountStakeConfigSysvar extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  staker: TransactionSigner<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  sourceCanonicalStake: Address<TAccountSourceCanonicalStake>;
  sourceTransientStake: Address<TAccountSourceTransientStake>;
  ephemeralStake: Address<TAccountEphemeralStake>;
  destinationTransientStake: Address<TAccountDestinationTransientStake>;
  destinationStake: Address<TAccountDestinationStake>;
  destinationVote: Address<TAccountDestinationVote>;
  clockSysvar?: Address<TAccountClockSysvar>;
  stakeHistorySysvar?: Address<TAccountStakeHistorySysvar>;
  stakeConfigSysvar?: Address<TAccountStakeConfigSysvar>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  lamports: RedelegateInstructionDataArgs["lamports"];
  sourceTransientStakeSeed: RedelegateInstructionDataArgs["sourceTransientStakeSeed"];
  ephemeralStakeSeed: RedelegateInstructionDataArgs["ephemeralStakeSeed"];
  destinationTransientStakeSeed: RedelegateInstructionDataArgs["destinationTransientStakeSeed"];
}

export function getRedelegateInstruction<
  TAccountStakePool extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountSourceCanonicalStake extends string,
  TAccountSourceTransientStake extends string,
  TAccountEphemeralStake extends string,
  TAccountDestinationTransientStake extends string,
  TAccountDestinationStake extends string,
  TAccountDestinationVote extends string,
  TAccountClockSysvar extends string,
  TAccountStakeHistorySysvar extends string,
  TAccountStakeConfigSysvar extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RedelegateInput<
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountSourceCanonicalStake,
    TAccountSourceTransientStake,
    TAccountEphemeralStake,
    TAccountDestinationTransientStake,
    TAccountDestinationStake,
    TAccountDestinationVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RedelegateInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountSourceCanonicalStake,
  TAccountSourceTransientStake,
  TAccountEphemeralStake,
  TAccountDestinationTransientStake,
  TAccountDestinationStake,
  TAccountDestinationVote,
  TAccountClockSysvar,
  TAccountStakeHistorySysvar,
  TAccountStakeConfigSysvar,
  TAccountSystemProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    sourceCanonicalStake: {
      value: input.sourceCanonicalStake ?? null,
      isWritable: true,
    },
    sourceTransientStake: {
      value: input.sourceTransientStake ?? null,
      isWritable: true,
    },
    ephemeralStake: { value: input.ephemeralStake ?? null, isWritable: true },
    destinationTransientStake: {
      value: input.destinationTransientStake ?? null,
      isWritable: true,
    },
    destinationStake: {
      value: input.destinationStake ?? null,
      isWritable: false,
    },
    destinationVote: {
      value: input.destinationVote ?? null,
      isWritable: false,
    },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    stakeHistorySysvar: {
      value: input.stakeHistorySysvar ?? null,
      isWritable: false,
    },
    stakeConfigSysvar: {
      value: input.stakeConfigSysvar ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.stakeHistorySysvar.value) {
    accounts.stakeHistorySysvar.value =
      "SysvarStakeHistory1111111111111111111111111" as Address<"SysvarStakeHistory1111111111111111111111111">;
  }
  if (!accounts.stakeConfigSysvar.value) {
    accounts.stakeConfigSysvar.value =
      "StakeConfig11111111111111111111111111111111" as Address<"StakeConfig11111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.sourceCanonicalStake),
      getAccountMeta(accounts.sourceTransientStake),
      getAccountMeta(accounts.ephemeralStake),
      getAccountMeta(accounts.destinationTransientStake),
      getAccountMeta(accounts.destinationStake),
      getAccountMeta(accounts.destinationVote),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.stakeHistorySysvar),
      getAccountMeta(accounts.stakeConfigSysvar),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getRedelegateInstructionDataEncoder().encode(
      args as RedelegateInstructionDataArgs,
    ),
    programAddress,
  } as RedelegateInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountSourceCanonicalStake,
    TAccountSourceTransientStake,
    TAccountEphemeralStake,
    TAccountDestinationTransientStake,
    TAccountDestinationStake,
    TAccountDestinationVote,
    TAccountClockSysvar,
    TAccountStakeHistorySysvar,
    TAccountStakeConfigSysvar,
    TAccountSystemProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedRedelegateInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    staker: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    sourceCanonicalStake: TAccountMetas[5];
    sourceTransientStake: TAccountMetas[6];
    ephemeralStake: TAccountMetas[7];
    destinationTransientStake: TAccountMetas[8];
    destinationStake: TAccountMetas[9];
    destinationVote: TAccountMetas[10];
    clockSysvar: TAccountMetas[11];
    stakeHistorySysvar: TAccountMetas[12];
    stakeConfigSysvar: TAccountMetas[13];
    systemProgram: TAccountMetas[14];
    stakeProgram: TAccountMetas[15];
  };
  data: RedelegateInstructionData;
}

export function parseRedelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRedelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      sourceCanonicalStake: getNextAccount(),
      sourceTransientStake: getNextAccount(),
      ephemeralStake: getNextAccount(),
      destinationTransientStake: getNextAccount(),
      destinationStake: getNextAccount(),
      destinationVote: getNextAccount(),
      clockSysvar: getNextAccount(),
      stakeHistorySysvar: getNextAccount(),
      stakeConfigSysvar: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getRedelegateInstructionDataDecoder().decode(instruction.data),
  };
}
