/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_STAKE_WITH_SLIPPAGE_DISCRIMINATOR = 24;

export function getWithdrawStakeWithSlippageDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(WITHDRAW_STAKE_WITH_SLIPPAGE_DISCRIMINATOR);
}

export type WithdrawStakeWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountSourceStakeAccount extends string | AccountMeta = string,
  TAccountDestinationStakeAccount extends string | AccountMeta = string,
  TAccountNewWithdrawAuthority extends string | AccountMeta = string,
  TAccountUserTransferAuthority extends string | AccountMeta = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountClockSysvar extends
    | string
    | AccountMeta = "SysvarC1ock11111111111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountStakeProgram extends
    | string
    | AccountMeta = "Stake11111111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountSourceStakeAccount extends string
        ? WritableAccount<TAccountSourceStakeAccount>
        : TAccountSourceStakeAccount,
      TAccountDestinationStakeAccount extends string
        ? WritableAccount<TAccountDestinationStakeAccount>
        : TAccountDestinationStakeAccount,
      TAccountNewWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountNewWithdrawAuthority>
        : TAccountNewWithdrawAuthority,
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            AccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountFeeAccount extends string
        ? WritableAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountPoolMint extends string
        ? WritableAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountClockSysvar extends string
        ? ReadonlyAccount<TAccountClockSysvar>
        : TAccountClockSysvar,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawStakeWithSlippageInstructionData {
  discriminator: number;
  poolTokensIn: bigint;
  minimumLamportsOut: bigint;
}

export interface WithdrawStakeWithSlippageInstructionDataArgs {
  poolTokensIn: number | bigint;
  minimumLamportsOut: number | bigint;
}

export function getWithdrawStakeWithSlippageInstructionDataEncoder(): FixedSizeEncoder<WithdrawStakeWithSlippageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["poolTokensIn", getU64Encoder()],
      ["minimumLamportsOut", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_STAKE_WITH_SLIPPAGE_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawStakeWithSlippageInstructionDataDecoder(): FixedSizeDecoder<WithdrawStakeWithSlippageInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["poolTokensIn", getU64Decoder()],
    ["minimumLamportsOut", getU64Decoder()],
  ]);
}

export function getWithdrawStakeWithSlippageInstructionDataCodec(): FixedSizeCodec<
  WithdrawStakeWithSlippageInstructionDataArgs,
  WithdrawStakeWithSlippageInstructionData
> {
  return combineCodec(
    getWithdrawStakeWithSlippageInstructionDataEncoder(),
    getWithdrawStakeWithSlippageInstructionDataDecoder(),
  );
}

export interface WithdrawStakeWithSlippageAsyncInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountSourceStakeAccount extends string = string,
  TAccountDestinationStakeAccount extends string = string,
  TAccountNewWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  sourceStakeAccount: Address<TAccountSourceStakeAccount>;
  destinationStakeAccount: Address<TAccountDestinationStakeAccount>;
  newWithdrawAuthority: Address<TAccountNewWithdrawAuthority>;
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  feeAccount: Address<TAccountFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  clockSysvar?: Address<TAccountClockSysvar>;
  tokenProgram?: Address<TAccountTokenProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  poolTokensIn: WithdrawStakeWithSlippageInstructionDataArgs["poolTokensIn"];
  minimumLamportsOut: WithdrawStakeWithSlippageInstructionDataArgs["minimumLamportsOut"];
}

export async function getWithdrawStakeWithSlippageInstructionAsync<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountWithdrawAuthority extends string,
  TAccountSourceStakeAccount extends string,
  TAccountDestinationStakeAccount extends string,
  TAccountNewWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeWithSlippageAsyncInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  WithdrawStakeWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    sourceStakeAccount: {
      value: input.sourceStakeAccount ?? null,
      isWritable: true,
    },
    destinationStakeAccount: {
      value: input.destinationStakeAccount ?? null,
      isWritable: true,
    },
    newWithdrawAuthority: {
      value: input.newWithdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.sourceStakeAccount),
      getAccountMeta(accounts.destinationStakeAccount),
      getAccountMeta(accounts.newWithdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getWithdrawStakeWithSlippageInstructionDataEncoder().encode(
      args as WithdrawStakeWithSlippageInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawStakeWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >);
}

export interface WithdrawStakeWithSlippageInput<
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountSourceStakeAccount extends string = string,
  TAccountDestinationStakeAccount extends string = string,
  TAccountNewWithdrawAuthority extends string = string,
  TAccountUserTransferAuthority extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountPoolMint extends string = string,
  TAccountClockSysvar extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountStakeProgram extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  sourceStakeAccount: Address<TAccountSourceStakeAccount>;
  destinationStakeAccount: Address<TAccountDestinationStakeAccount>;
  newWithdrawAuthority: Address<TAccountNewWithdrawAuthority>;
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  feeAccount: Address<TAccountFeeAccount>;
  poolMint: Address<TAccountPoolMint>;
  clockSysvar?: Address<TAccountClockSysvar>;
  tokenProgram?: Address<TAccountTokenProgram>;
  stakeProgram?: Address<TAccountStakeProgram>;
  poolTokensIn: WithdrawStakeWithSlippageInstructionDataArgs["poolTokensIn"];
  minimumLamportsOut: WithdrawStakeWithSlippageInstructionDataArgs["minimumLamportsOut"];
}

export function getWithdrawStakeWithSlippageInstruction<
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountWithdrawAuthority extends string,
  TAccountSourceStakeAccount extends string,
  TAccountDestinationStakeAccount extends string,
  TAccountNewWithdrawAuthority extends string,
  TAccountUserTransferAuthority extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountFeeAccount extends string,
  TAccountPoolMint extends string,
  TAccountClockSysvar extends string,
  TAccountTokenProgram extends string,
  TAccountStakeProgram extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeWithSlippageInput<
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawStakeWithSlippageInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountValidatorList,
  TAccountWithdrawAuthority,
  TAccountSourceStakeAccount,
  TAccountDestinationStakeAccount,
  TAccountNewWithdrawAuthority,
  TAccountUserTransferAuthority,
  TAccountUserPoolTokenAccount,
  TAccountFeeAccount,
  TAccountPoolMint,
  TAccountClockSysvar,
  TAccountTokenProgram,
  TAccountStakeProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    sourceStakeAccount: {
      value: input.sourceStakeAccount ?? null,
      isWritable: true,
    },
    destinationStakeAccount: {
      value: input.destinationStakeAccount ?? null,
      isWritable: true,
    },
    newWithdrawAuthority: {
      value: input.newWithdrawAuthority ?? null,
      isWritable: false,
    },
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    feeAccount: { value: input.feeAccount ?? null, isWritable: true },
    poolMint: { value: input.poolMint ?? null, isWritable: true },
    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clockSysvar.value) {
    accounts.clockSysvar.value =
      "SysvarC1ock11111111111111111111111111111111" as Address<"SysvarC1ock11111111111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.stakeProgram.value) {
    accounts.stakeProgram.value =
      "Stake11111111111111111111111111111111111111" as Address<"Stake11111111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.sourceStakeAccount),
      getAccountMeta(accounts.destinationStakeAccount),
      getAccountMeta(accounts.newWithdrawAuthority),
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.clockSysvar),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.stakeProgram),
    ],
    data: getWithdrawStakeWithSlippageInstructionDataEncoder().encode(
      args as WithdrawStakeWithSlippageInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawStakeWithSlippageInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountWithdrawAuthority,
    TAccountSourceStakeAccount,
    TAccountDestinationStakeAccount,
    TAccountNewWithdrawAuthority,
    TAccountUserTransferAuthority,
    TAccountUserPoolTokenAccount,
    TAccountFeeAccount,
    TAccountPoolMint,
    TAccountClockSysvar,
    TAccountTokenProgram,
    TAccountStakeProgram
  >);
}

export interface ParsedWithdrawStakeWithSlippageInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    validatorList: TAccountMetas[1];
    withdrawAuthority: TAccountMetas[2];
    sourceStakeAccount: TAccountMetas[3];
    destinationStakeAccount: TAccountMetas[4];
    newWithdrawAuthority: TAccountMetas[5];
    userTransferAuthority: TAccountMetas[6];
    userPoolTokenAccount: TAccountMetas[7];
    feeAccount: TAccountMetas[8];
    poolMint: TAccountMetas[9];
    clockSysvar: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    stakeProgram: TAccountMetas[12];
  };
  data: WithdrawStakeWithSlippageInstructionData;
}

export function parseWithdrawStakeWithSlippageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawStakeWithSlippageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      sourceStakeAccount: getNextAccount(),
      destinationStakeAccount: getNextAccount(),
      newWithdrawAuthority: getNextAccount(),
      userTransferAuthority: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      feeAccount: getNextAccount(),
      poolMint: getNextAccount(),
      clockSysvar: getNextAccount(),
      tokenProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
    },
    data: getWithdrawStakeWithSlippageInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
