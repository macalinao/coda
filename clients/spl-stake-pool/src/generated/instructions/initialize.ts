/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type { Fee, FeeArgs } from "../types/index.js";
import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import { findWithdrawAuthorityPda } from "../pdas/index.js";
import { SPL_STAKE_POOL_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";
import { getFeeDecoder, getFeeEncoder } from "../types/index.js";

export const INITIALIZE_DISCRIMINATOR = 0;

export function getInitializeDiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta = string,
  TAccountManager extends string | AccountMeta = string,
  TAccountStaker extends string | AccountMeta = string,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountValidatorList extends string | AccountMeta = string,
  TAccountReserveStake extends string | AccountMeta = string,
  TAccountPoolMint extends string | AccountMeta = string,
  TAccountFeeAccount extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountDepositAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? ReadonlySignerAccount<TAccountManager> &
            AccountSignerMeta<TAccountManager>
        : TAccountManager,
      TAccountStaker extends string
        ? ReadonlyAccount<TAccountStaker>
        : TAccountStaker,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? ReadonlyAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountPoolMint extends string
        ? ReadonlyAccount<TAccountPoolMint>
        : TAccountPoolMint,
      TAccountFeeAccount extends string
        ? ReadonlyAccount<TAccountFeeAccount>
        : TAccountFeeAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountDepositAuthority extends string
        ? ReadonlyAccount<TAccountDepositAuthority>
        : TAccountDepositAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeInstructionData {
  discriminator: number;
  fee: Fee;
  withdrawalFee: Fee;
  depositFee: Fee;
  referralFee: number;
  maxValidators: number;
}

export interface InitializeInstructionDataArgs {
  fee: FeeArgs;
  withdrawalFee: FeeArgs;
  depositFee: FeeArgs;
  referralFee: number;
  maxValidators: number;
}

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["fee", getFeeEncoder()],
      ["withdrawalFee", getFeeEncoder()],
      ["depositFee", getFeeEncoder()],
      ["referralFee", getU8Encoder()],
      ["maxValidators", getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR }),
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["fee", getFeeDecoder()],
    ["withdrawalFee", getFeeDecoder()],
    ["depositFee", getFeeDecoder()],
    ["referralFee", getU8Decoder()],
    ["maxValidators", getU32Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder(),
  );
}

export interface InitializeAsyncInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPoolMint extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountDepositAuthority extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  staker: Address<TAccountStaker>;
  withdrawAuthority?: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  poolMint: Address<TAccountPoolMint>;
  feeAccount: Address<TAccountFeeAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  depositAuthority:
    | Address<TAccountDepositAuthority>
    | TransactionSigner<TAccountDepositAuthority>;
  fee: InitializeInstructionDataArgs["fee"];
  withdrawalFee: InitializeInstructionDataArgs["withdrawalFee"];
  depositFee: InitializeInstructionDataArgs["depositFee"];
  referralFee: InitializeInstructionDataArgs["referralFee"];
  maxValidators: InitializeInstructionDataArgs["maxValidators"];
}

export async function getInitializeInstructionAsync<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountPoolMint extends string,
  TAccountFeeAccount extends string,
  TAccountTokenProgram extends string,
  TAccountDepositAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountFeeAccount,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountFeeAccount,
    TAccountTokenProgram,
    (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
      ? ReadonlySignerAccount<TAccountDepositAuthority> &
          AccountSignerMeta<TAccountDepositAuthority>
      : TAccountDepositAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    poolMint: { value: input.poolMint ?? null, isWritable: false },
    feeAccount: { value: input.feeAccount ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    depositAuthority: {
      value: input.depositAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAuthority.value) {
    accounts.withdrawAuthority.value = await findWithdrawAuthorityPda({
      stakePoolAddress: expectAddress(accounts.stakePool.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.depositAuthority),
    ],
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs,
    ),
    programAddress,
  } as InitializeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountFeeAccount,
    TAccountTokenProgram,
    (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
      ? ReadonlySignerAccount<TAccountDepositAuthority> &
          AccountSignerMeta<TAccountDepositAuthority>
      : TAccountDepositAuthority
  >);
}

export interface InitializeInput<
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
  TAccountStaker extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountPoolMint extends string = string,
  TAccountFeeAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountDepositAuthority extends string = string,
> {
  stakePool: Address<TAccountStakePool>;
  manager: TransactionSigner<TAccountManager>;
  staker: Address<TAccountStaker>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  poolMint: Address<TAccountPoolMint>;
  feeAccount: Address<TAccountFeeAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  depositAuthority:
    | Address<TAccountDepositAuthority>
    | TransactionSigner<TAccountDepositAuthority>;
  fee: InitializeInstructionDataArgs["fee"];
  withdrawalFee: InitializeInstructionDataArgs["withdrawalFee"];
  depositFee: InitializeInstructionDataArgs["depositFee"];
  referralFee: InitializeInstructionDataArgs["referralFee"];
  maxValidators: InitializeInstructionDataArgs["maxValidators"];
}

export function getInitializeInstruction<
  TAccountStakePool extends string,
  TAccountManager extends string,
  TAccountStaker extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountPoolMint extends string,
  TAccountFeeAccount extends string,
  TAccountTokenProgram extends string,
  TAccountDepositAuthority extends string,
  TProgramAddress extends Address = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountFeeAccount,
    TAccountTokenProgram,
    TAccountDepositAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountManager,
  TAccountStaker,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountPoolMint,
  TAccountFeeAccount,
  TAccountTokenProgram,
  (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
    ? ReadonlySignerAccount<TAccountDepositAuthority> &
        AccountSignerMeta<TAccountDepositAuthority>
    : TAccountDepositAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    manager: { value: input.manager ?? null, isWritable: false },
    staker: { value: input.staker ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: false },
    poolMint: { value: input.poolMint ?? null, isWritable: false },
    feeAccount: { value: input.feeAccount ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    depositAuthority: {
      value: input.depositAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.poolMint),
      getAccountMeta(accounts.feeAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.depositAuthority),
    ],
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs,
    ),
    programAddress,
  } as InitializeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountManager,
    TAccountStaker,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountPoolMint,
    TAccountFeeAccount,
    TAccountTokenProgram,
    (typeof input)["depositAuthority"] extends TransactionSigner<TAccountDepositAuthority>
      ? ReadonlySignerAccount<TAccountDepositAuthority> &
          AccountSignerMeta<TAccountDepositAuthority>
      : TAccountDepositAuthority
  >);
}

export interface ParsedInitializeInstruction<
  TProgram extends string = typeof SPL_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    manager: TAccountMetas[1];
    staker: TAccountMetas[2];
    withdrawAuthority: TAccountMetas[3];
    validatorList: TAccountMetas[4];
    reserveStake: TAccountMetas[5];
    poolMint: TAccountMetas[6];
    feeAccount: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    depositAuthority: TAccountMetas[9];
  };
  data: InitializeInstructionData;
}

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      manager: getNextAccount(),
      staker: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      poolMint: getNextAccount(),
      feeAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      depositAuthority: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
