/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "@solana/kit";
import type {
  ParsedAddValidatorToPoolInstruction,
  ParsedCleanupRemovedValidatorEntriesInstruction,
  ParsedCreateTokenMetadataInstruction,
  ParsedDecreaseAdditionalValidatorStakeInstruction,
  ParsedDecreaseValidatorStakeInstruction,
  ParsedDecreaseValidatorStakeWithReserveInstruction,
  ParsedDepositSolInstruction,
  ParsedDepositSolWithSlippageInstruction,
  ParsedDepositStakeInstruction,
  ParsedDepositStakeWithSlippageInstruction,
  ParsedIncreaseAdditionalValidatorStakeInstruction,
  ParsedIncreaseValidatorStakeInstruction,
  ParsedInitializeInstruction,
  ParsedRedelegateInstruction,
  ParsedRemoveValidatorFromPoolInstruction,
  ParsedSetFeeInstruction,
  ParsedSetFundingAuthorityInstruction,
  ParsedSetManagerInstruction,
  ParsedSetPreferredValidatorInstruction,
  ParsedSetStakerInstruction,
  ParsedUpdateStakePoolBalanceInstruction,
  ParsedUpdateTokenMetadataInstruction,
  ParsedUpdateValidatorListBalanceInstruction,
  ParsedWithdrawSolInstruction,
  ParsedWithdrawSolWithSlippageInstruction,
  ParsedWithdrawStakeInstruction,
  ParsedWithdrawStakeWithSlippageInstruction,
} from "../instructions/index.js";
import { containsBytes, getU8Encoder } from "@solana/kit";
import { AccountType, getAccountTypeEncoder } from "../types/index.js";

export const SPL_STAKE_POOL_PROGRAM_ADDRESS =
  "SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy" as Address<"SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy">;

export enum SplStakePoolAccount {
  StakePool = 0,
  ValidatorList = 1,
}

export function identifySplStakePoolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SplStakePoolAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      getAccountTypeEncoder().encode(AccountType.StakePool),
      0,
    )
  ) {
    return SplStakePoolAccount.StakePool;
  }
  if (
    containsBytes(
      data,
      getAccountTypeEncoder().encode(AccountType.ValidatorList),
      0,
    )
  ) {
    return SplStakePoolAccount.ValidatorList;
  }
  throw new Error(
    "The provided account could not be identified as a splStakePool account.",
  );
}

export enum SplStakePoolInstruction {
  Initialize = 0,
  AddValidatorToPool = 1,
  RemoveValidatorFromPool = 2,
  DecreaseValidatorStake = 3,
  IncreaseValidatorStake = 4,
  SetPreferredValidator = 5,
  UpdateValidatorListBalance = 6,
  UpdateStakePoolBalance = 7,
  CleanupRemovedValidatorEntries = 8,
  DepositStake = 9,
  WithdrawStake = 10,
  SetManager = 11,
  SetFee = 12,
  SetStaker = 13,
  DepositSol = 14,
  SetFundingAuthority = 15,
  WithdrawSol = 16,
  CreateTokenMetadata = 17,
  UpdateTokenMetadata = 18,
  IncreaseAdditionalValidatorStake = 19,
  DecreaseAdditionalValidatorStake = 20,
  DecreaseValidatorStakeWithReserve = 21,
  Redelegate = 22,
  DepositStakeWithSlippage = 23,
  WithdrawStakeWithSlippage = 24,
  DepositSolWithSlippage = 25,
  WithdrawSolWithSlippage = 26,
}

export function identifySplStakePoolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SplStakePoolInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SplStakePoolInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SplStakePoolInstruction.AddValidatorToPool;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SplStakePoolInstruction.RemoveValidatorFromPool;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return SplStakePoolInstruction.DecreaseValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return SplStakePoolInstruction.IncreaseValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return SplStakePoolInstruction.SetPreferredValidator;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return SplStakePoolInstruction.UpdateValidatorListBalance;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return SplStakePoolInstruction.UpdateStakePoolBalance;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return SplStakePoolInstruction.CleanupRemovedValidatorEntries;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return SplStakePoolInstruction.DepositStake;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return SplStakePoolInstruction.WithdrawStake;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return SplStakePoolInstruction.SetManager;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return SplStakePoolInstruction.SetFee;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return SplStakePoolInstruction.SetStaker;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return SplStakePoolInstruction.DepositSol;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return SplStakePoolInstruction.SetFundingAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return SplStakePoolInstruction.WithdrawSol;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return SplStakePoolInstruction.CreateTokenMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return SplStakePoolInstruction.UpdateTokenMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return SplStakePoolInstruction.IncreaseAdditionalValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return SplStakePoolInstruction.DecreaseAdditionalValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return SplStakePoolInstruction.DecreaseValidatorStakeWithReserve;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return SplStakePoolInstruction.Redelegate;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return SplStakePoolInstruction.DepositStakeWithSlippage;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return SplStakePoolInstruction.WithdrawStakeWithSlippage;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return SplStakePoolInstruction.DepositSolWithSlippage;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return SplStakePoolInstruction.WithdrawSolWithSlippage;
  }
  throw new Error(
    "The provided instruction could not be identified as a splStakePool instruction.",
  );
}

export type ParsedSplStakePoolInstruction<
  TProgram extends string = "SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy",
> =
  | ({
      instructionType: SplStakePoolInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.AddValidatorToPool;
    } & ParsedAddValidatorToPoolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.RemoveValidatorFromPool;
    } & ParsedRemoveValidatorFromPoolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseValidatorStake;
    } & ParsedDecreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.IncreaseValidatorStake;
    } & ParsedIncreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetPreferredValidator;
    } & ParsedSetPreferredValidatorInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateValidatorListBalance;
    } & ParsedUpdateValidatorListBalanceInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateStakePoolBalance;
    } & ParsedUpdateStakePoolBalanceInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.CleanupRemovedValidatorEntries;
    } & ParsedCleanupRemovedValidatorEntriesInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositStake;
    } & ParsedDepositStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawStake;
    } & ParsedWithdrawStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetManager;
    } & ParsedSetManagerInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetFee;
    } & ParsedSetFeeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetStaker;
    } & ParsedSetStakerInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositSol;
    } & ParsedDepositSolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.SetFundingAuthority;
    } & ParsedSetFundingAuthorityInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawSol;
    } & ParsedWithdrawSolInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.CreateTokenMetadata;
    } & ParsedCreateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.UpdateTokenMetadata;
    } & ParsedUpdateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.IncreaseAdditionalValidatorStake;
    } & ParsedIncreaseAdditionalValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseAdditionalValidatorStake;
    } & ParsedDecreaseAdditionalValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DecreaseValidatorStakeWithReserve;
    } & ParsedDecreaseValidatorStakeWithReserveInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.Redelegate;
    } & ParsedRedelegateInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositStakeWithSlippage;
    } & ParsedDepositStakeWithSlippageInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawStakeWithSlippage;
    } & ParsedWithdrawStakeWithSlippageInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.DepositSolWithSlippage;
    } & ParsedDepositSolWithSlippageInstruction<TProgram>)
  | ({
      instructionType: SplStakePoolInstruction.WithdrawSolWithSlippage;
    } & ParsedWithdrawSolWithSlippageInstruction<TProgram>);
