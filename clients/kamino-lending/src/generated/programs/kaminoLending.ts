/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "@solana/kit";
import type {
  ParsedBorrowObligationLiquidityInstruction,
  ParsedBorrowObligationLiquidityV2Instruction,
  ParsedDeleteReferrerStateAndShortUrlInstruction,
  ParsedDepositAndWithdrawInstruction,
  ParsedDepositObligationCollateralInstruction,
  ParsedDepositObligationCollateralV2Instruction,
  ParsedDepositReserveLiquidityAndObligationCollateralInstruction,
  ParsedDepositReserveLiquidityAndObligationCollateralV2Instruction,
  ParsedDepositReserveLiquidityInstruction,
  ParsedFlashBorrowReserveLiquidityInstruction,
  ParsedFlashRepayReserveLiquidityInstruction,
  ParsedIdlMissingTypesInstruction,
  ParsedInitFarmsForReserveInstruction,
  ParsedInitLendingMarketInstruction,
  ParsedInitObligationFarmsForReserveInstruction,
  ParsedInitObligationInstruction,
  ParsedInitReferrerStateAndShortUrlInstruction,
  ParsedInitReferrerTokenStateInstruction,
  ParsedInitReserveInstruction,
  ParsedInitUserMetadataInstruction,
  ParsedLiquidateObligationAndRedeemReserveCollateralInstruction,
  ParsedLiquidateObligationAndRedeemReserveCollateralV2Instruction,
  ParsedMarkObligationForDeleveragingInstruction,
  ParsedRedeemFeesInstruction,
  ParsedRedeemReserveCollateralInstruction,
  ParsedRefreshObligationFarmsForReserveInstruction,
  ParsedRefreshObligationInstruction,
  ParsedRefreshReserveInstruction,
  ParsedRefreshReservesBatchInstruction,
  ParsedRepayAndWithdrawAndRedeemInstruction,
  ParsedRepayObligationLiquidityInstruction,
  ParsedRepayObligationLiquidityV2Instruction,
  ParsedRequestElevationGroupInstruction,
  ParsedSocializeLossInstruction,
  ParsedSocializeLossV2Instruction,
  ParsedUpdateLendingMarketInstruction,
  ParsedUpdateLendingMarketOwnerInstruction,
  ParsedUpdateReserveConfigInstruction,
  ParsedWithdrawObligationCollateralAndRedeemReserveCollateralInstruction,
  ParsedWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction,
  ParsedWithdrawObligationCollateralInstruction,
  ParsedWithdrawObligationCollateralV2Instruction,
  ParsedWithdrawProtocolFeeInstruction,
  ParsedWithdrawReferrerFeesInstruction,
} from "../instructions/index.js";
import { containsBytes, fixEncoderSize, getBytesEncoder } from "@solana/kit";

export const KAMINO_LENDING_PROGRAM_ADDRESS =
  "KLend2g3cP87fffoy8q1mQqGKjrxjC8boSyAYavgmjD" as Address<"KLend2g3cP87fffoy8q1mQqGKjrxjC8boSyAYavgmjD">;

export enum KaminoLendingAccount {
  UserState = 0,
  LendingGlobalConfig = 1,
  LendingMarket = 2,
  Obligation = 3,
  ReferrerState = 4,
  ReferrerTokenState = 5,
  ShortUrl = 6,
  UserMetadata = 7,
  Reserve = 8,
}

export function identifyKaminoLendingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): KaminoLendingAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([72, 177, 85, 249, 76, 167, 186, 126]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.UserState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 8, 156, 202, 160, 252, 176, 217]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.LendingGlobalConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 114, 50, 98, 72, 157, 28, 120]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.LendingMarket;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 206, 141, 106, 88, 76, 172, 167]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.Obligation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 81, 217, 103, 12, 19, 12, 66]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.ReferrerState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 15, 208, 77, 32, 195, 105, 56]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.ReferrerTokenState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([28, 89, 174, 25, 226, 124, 126, 212]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.ShortUrl;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([157, 214, 220, 235, 98, 135, 171, 28]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.UserMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 242, 204, 202, 26, 247, 59, 127]),
      ),
      0,
    )
  ) {
    return KaminoLendingAccount.Reserve;
  }
  throw new Error(
    "The provided account could not be identified as a kaminoLending account.",
  );
}

export enum KaminoLendingInstruction {
  InitLendingMarket = 0,
  UpdateLendingMarket = 1,
  UpdateLendingMarketOwner = 2,
  InitReserve = 3,
  InitFarmsForReserve = 4,
  UpdateReserveConfig = 5,
  RedeemFees = 6,
  WithdrawProtocolFee = 7,
  SocializeLoss = 8,
  SocializeLossV2 = 9,
  MarkObligationForDeleveraging = 10,
  RefreshReservesBatch = 11,
  RefreshReserve = 12,
  DepositReserveLiquidity = 13,
  RedeemReserveCollateral = 14,
  InitObligation = 15,
  InitObligationFarmsForReserve = 16,
  RefreshObligationFarmsForReserve = 17,
  RefreshObligation = 18,
  DepositObligationCollateral = 19,
  DepositObligationCollateralV2 = 20,
  WithdrawObligationCollateral = 21,
  WithdrawObligationCollateralV2 = 22,
  BorrowObligationLiquidity = 23,
  BorrowObligationLiquidityV2 = 24,
  RepayObligationLiquidity = 25,
  RepayObligationLiquidityV2 = 26,
  RepayAndWithdrawAndRedeem = 27,
  DepositAndWithdraw = 28,
  DepositReserveLiquidityAndObligationCollateral = 29,
  DepositReserveLiquidityAndObligationCollateralV2 = 30,
  WithdrawObligationCollateralAndRedeemReserveCollateral = 31,
  WithdrawObligationCollateralAndRedeemReserveCollateralV2 = 32,
  LiquidateObligationAndRedeemReserveCollateral = 33,
  LiquidateObligationAndRedeemReserveCollateralV2 = 34,
  FlashRepayReserveLiquidity = 35,
  FlashBorrowReserveLiquidity = 36,
  RequestElevationGroup = 37,
  InitReferrerTokenState = 38,
  InitUserMetadata = 39,
  WithdrawReferrerFees = 40,
  InitReferrerStateAndShortUrl = 41,
  DeleteReferrerStateAndShortUrl = 42,
  IdlMissingTypes = 43,
}

export function identifyKaminoLendingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): KaminoLendingInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 162, 116, 14, 101, 137, 94, 239]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitLendingMarket;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([209, 157, 53, 210, 97, 180, 31, 45]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.UpdateLendingMarket;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([118, 224, 10, 62, 196, 230, 184, 89]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.UpdateLendingMarketOwner;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 245, 71, 225, 153, 4, 3, 43]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitReserve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 6, 62, 233, 1, 33, 232, 82]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitFarmsForReserve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([61, 148, 100, 70, 143, 107, 17, 13]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.UpdateReserveConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 39, 180, 41, 173, 46, 248, 220]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RedeemFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 201, 158, 189, 33, 93, 162, 103]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.WithdrawProtocolFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 75, 91, 0, 236, 97, 19, 3]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.SocializeLoss;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 95, 98, 220, 187, 40, 204, 154]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.SocializeLossV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 35, 182, 19, 0, 116, 243, 127]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.MarkObligationForDeleveraging;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 110, 26, 103, 162, 204, 252, 147]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RefreshReservesBatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 218, 138, 235, 79, 201, 25, 102]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RefreshReserve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 201, 30, 126, 6, 205, 102, 68]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DepositReserveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([234, 117, 181, 125, 185, 142, 220, 29]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RedeemReserveCollateral;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 10, 231, 76, 27, 11, 159, 96]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitObligation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 63, 15, 186, 211, 152, 168, 164]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitObligationFarmsForReserve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 144, 253, 21, 10, 74, 248, 3]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RefreshObligationFarmsForReserve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 132, 147, 228, 151, 192, 72, 89]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RefreshObligation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 209, 4, 72, 21, 22, 118, 133]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DepositObligationCollateral;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 145, 151, 94, 167, 113, 4, 145]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DepositObligationCollateralV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([37, 116, 205, 103, 243, 192, 92, 198]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.WithdrawObligationCollateral;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([202, 249, 117, 114, 231, 192, 47, 138]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.WithdrawObligationCollateralV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 127, 18, 204, 73, 245, 225, 65]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.BorrowObligationLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 128, 143, 245, 171, 199, 194, 6]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.BorrowObligationLiquidityV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 178, 13, 225, 76, 240, 147, 72]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RepayObligationLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 174, 213, 76, 180, 53, 210, 144]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RepayObligationLiquidityV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 54, 152, 3, 148, 96, 109, 218]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RepayAndWithdrawAndRedeem;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([141, 153, 39, 15, 64, 61, 88, 84]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DepositAndWithdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 199, 4, 2, 222, 39, 26, 46]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DepositReserveLiquidityAndObligationCollateral;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 224, 191, 27, 204, 151, 102, 175]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DepositReserveLiquidityAndObligationCollateralV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([75, 93, 93, 220, 34, 150, 218, 196]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.WithdrawObligationCollateralAndRedeemReserveCollateral;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([235, 52, 119, 152, 149, 197, 20, 7]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.WithdrawObligationCollateralAndRedeemReserveCollateralV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 71, 154, 188, 226, 133, 74, 55]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.LiquidateObligationAndRedeemReserveCollateral;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([162, 161, 35, 143, 30, 187, 185, 103]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.LiquidateObligationAndRedeemReserveCollateralV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 117, 0, 203, 96, 245, 180, 186]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.FlashRepayReserveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 231, 52, 167, 7, 52, 212, 193]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.FlashBorrowReserveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([36, 119, 251, 129, 34, 240, 7, 147]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.RequestElevationGroup;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 45, 66, 148, 58, 13, 218, 115]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitReferrerTokenState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 169, 176, 69, 197, 23, 15, 162]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitUserMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 118, 121, 201, 233, 140, 23, 228]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.WithdrawReferrerFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 19, 25, 127, 100, 55, 31, 90]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.InitReferrerStateAndShortUrl;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([153, 185, 99, 28, 228, 179, 187, 150]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.DeleteReferrerStateAndShortUrl;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([130, 80, 38, 153, 80, 212, 182, 253]),
      ),
      0,
    )
  ) {
    return KaminoLendingInstruction.IdlMissingTypes;
  }
  throw new Error(
    "The provided instruction could not be identified as a kaminoLending instruction.",
  );
}

export type ParsedKaminoLendingInstruction<
  TProgram extends string = "KLend2g3cP87fffoy8q1mQqGKjrxjC8boSyAYavgmjD",
> =
  | ({
      instructionType: KaminoLendingInstruction.InitLendingMarket;
    } & ParsedInitLendingMarketInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.UpdateLendingMarket;
    } & ParsedUpdateLendingMarketInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.UpdateLendingMarketOwner;
    } & ParsedUpdateLendingMarketOwnerInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitReserve;
    } & ParsedInitReserveInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitFarmsForReserve;
    } & ParsedInitFarmsForReserveInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.UpdateReserveConfig;
    } & ParsedUpdateReserveConfigInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RedeemFees;
    } & ParsedRedeemFeesInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.WithdrawProtocolFee;
    } & ParsedWithdrawProtocolFeeInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.SocializeLoss;
    } & ParsedSocializeLossInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.SocializeLossV2;
    } & ParsedSocializeLossV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.MarkObligationForDeleveraging;
    } & ParsedMarkObligationForDeleveragingInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RefreshReservesBatch;
    } & ParsedRefreshReservesBatchInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RefreshReserve;
    } & ParsedRefreshReserveInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DepositReserveLiquidity;
    } & ParsedDepositReserveLiquidityInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RedeemReserveCollateral;
    } & ParsedRedeemReserveCollateralInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitObligation;
    } & ParsedInitObligationInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitObligationFarmsForReserve;
    } & ParsedInitObligationFarmsForReserveInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RefreshObligationFarmsForReserve;
    } & ParsedRefreshObligationFarmsForReserveInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RefreshObligation;
    } & ParsedRefreshObligationInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DepositObligationCollateral;
    } & ParsedDepositObligationCollateralInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DepositObligationCollateralV2;
    } & ParsedDepositObligationCollateralV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.WithdrawObligationCollateral;
    } & ParsedWithdrawObligationCollateralInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.WithdrawObligationCollateralV2;
    } & ParsedWithdrawObligationCollateralV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.BorrowObligationLiquidity;
    } & ParsedBorrowObligationLiquidityInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.BorrowObligationLiquidityV2;
    } & ParsedBorrowObligationLiquidityV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RepayObligationLiquidity;
    } & ParsedRepayObligationLiquidityInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RepayObligationLiquidityV2;
    } & ParsedRepayObligationLiquidityV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RepayAndWithdrawAndRedeem;
    } & ParsedRepayAndWithdrawAndRedeemInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DepositAndWithdraw;
    } & ParsedDepositAndWithdrawInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DepositReserveLiquidityAndObligationCollateral;
    } & ParsedDepositReserveLiquidityAndObligationCollateralInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DepositReserveLiquidityAndObligationCollateralV2;
    } & ParsedDepositReserveLiquidityAndObligationCollateralV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.WithdrawObligationCollateralAndRedeemReserveCollateral;
    } & ParsedWithdrawObligationCollateralAndRedeemReserveCollateralInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.WithdrawObligationCollateralAndRedeemReserveCollateralV2;
    } & ParsedWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.LiquidateObligationAndRedeemReserveCollateral;
    } & ParsedLiquidateObligationAndRedeemReserveCollateralInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.LiquidateObligationAndRedeemReserveCollateralV2;
    } & ParsedLiquidateObligationAndRedeemReserveCollateralV2Instruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.FlashRepayReserveLiquidity;
    } & ParsedFlashRepayReserveLiquidityInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.FlashBorrowReserveLiquidity;
    } & ParsedFlashBorrowReserveLiquidityInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.RequestElevationGroup;
    } & ParsedRequestElevationGroupInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitReferrerTokenState;
    } & ParsedInitReferrerTokenStateInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitUserMetadata;
    } & ParsedInitUserMetadataInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.WithdrawReferrerFees;
    } & ParsedWithdrawReferrerFeesInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.InitReferrerStateAndShortUrl;
    } & ParsedInitReferrerStateAndShortUrlInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.DeleteReferrerStateAndShortUrl;
    } & ParsedDeleteReferrerStateAndShortUrlInstruction<TProgram>)
  | ({
      instructionType: KaminoLendingInstruction.IdlMissingTypes;
    } & ParsedIdlMissingTypesInstruction<TProgram>);
