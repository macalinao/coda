/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
} from "@solana/kit";
import type { BigFractionBytes, BigFractionBytesArgs } from "./index.js";
import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
} from "@solana/kit";
import {
  getBigFractionBytesDecoder,
  getBigFractionBytesEncoder,
} from "./index.js";

export interface ReserveLiquidity {
  mintPubkey: Address;
  supplyVault: Address;
  feeVault: Address;
  availableAmount: bigint;
  borrowedAmountSf: bigint;
  marketPriceSf: bigint;
  marketPriceLastUpdatedTs: bigint;
  mintDecimals: bigint;
  depositLimitCrossedTimestamp: bigint;
  borrowLimitCrossedTimestamp: bigint;
  cumulativeBorrowRateBsf: BigFractionBytes;
  accumulatedProtocolFeesSf: bigint;
  accumulatedReferrerFeesSf: bigint;
  pendingReferrerFeesSf: bigint;
  absoluteReferralRateSf: bigint;
  tokenProgram: Address;
  padding2: bigint[];
  padding3: bigint[];
}

export interface ReserveLiquidityArgs {
  mintPubkey: Address;
  supplyVault: Address;
  feeVault: Address;
  availableAmount: number | bigint;
  borrowedAmountSf: number | bigint;
  marketPriceSf: number | bigint;
  marketPriceLastUpdatedTs: number | bigint;
  mintDecimals: number | bigint;
  depositLimitCrossedTimestamp: number | bigint;
  borrowLimitCrossedTimestamp: number | bigint;
  cumulativeBorrowRateBsf: BigFractionBytesArgs;
  accumulatedProtocolFeesSf: number | bigint;
  accumulatedReferrerFeesSf: number | bigint;
  pendingReferrerFeesSf: number | bigint;
  absoluteReferralRateSf: number | bigint;
  tokenProgram: Address;
  padding2: (number | bigint)[];
  padding3: (number | bigint)[];
}

export function getReserveLiquidityEncoder(): FixedSizeEncoder<ReserveLiquidityArgs> {
  return getStructEncoder([
    ["mintPubkey", getAddressEncoder()],
    ["supplyVault", getAddressEncoder()],
    ["feeVault", getAddressEncoder()],
    ["availableAmount", getU64Encoder()],
    ["borrowedAmountSf", getU128Encoder()],
    ["marketPriceSf", getU128Encoder()],
    ["marketPriceLastUpdatedTs", getU64Encoder()],
    ["mintDecimals", getU64Encoder()],
    ["depositLimitCrossedTimestamp", getU64Encoder()],
    ["borrowLimitCrossedTimestamp", getU64Encoder()],
    ["cumulativeBorrowRateBsf", getBigFractionBytesEncoder()],
    ["accumulatedProtocolFeesSf", getU128Encoder()],
    ["accumulatedReferrerFeesSf", getU128Encoder()],
    ["pendingReferrerFeesSf", getU128Encoder()],
    ["absoluteReferralRateSf", getU128Encoder()],
    ["tokenProgram", getAddressEncoder()],
    ["padding2", getArrayEncoder(getU64Encoder(), { size: 51 })],
    ["padding3", getArrayEncoder(getU128Encoder(), { size: 32 })],
  ]);
}

export function getReserveLiquidityDecoder(): FixedSizeDecoder<ReserveLiquidity> {
  return getStructDecoder([
    ["mintPubkey", getAddressDecoder()],
    ["supplyVault", getAddressDecoder()],
    ["feeVault", getAddressDecoder()],
    ["availableAmount", getU64Decoder()],
    ["borrowedAmountSf", getU128Decoder()],
    ["marketPriceSf", getU128Decoder()],
    ["marketPriceLastUpdatedTs", getU64Decoder()],
    ["mintDecimals", getU64Decoder()],
    ["depositLimitCrossedTimestamp", getU64Decoder()],
    ["borrowLimitCrossedTimestamp", getU64Decoder()],
    ["cumulativeBorrowRateBsf", getBigFractionBytesDecoder()],
    ["accumulatedProtocolFeesSf", getU128Decoder()],
    ["accumulatedReferrerFeesSf", getU128Decoder()],
    ["pendingReferrerFeesSf", getU128Decoder()],
    ["absoluteReferralRateSf", getU128Decoder()],
    ["tokenProgram", getAddressDecoder()],
    ["padding2", getArrayDecoder(getU64Decoder(), { size: 51 })],
    ["padding3", getArrayDecoder(getU128Decoder(), { size: 32 })],
  ]);
}

export function getReserveLiquidityCodec(): FixedSizeCodec<
  ReserveLiquidityArgs,
  ReserveLiquidity
> {
  return combineCodec(
    getReserveLiquidityEncoder(),
    getReserveLiquidityDecoder(),
  );
}
