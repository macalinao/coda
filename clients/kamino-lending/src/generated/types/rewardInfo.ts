/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
} from "@solana/kit";
import type {
  FarmsTokenInfo,
  FarmsTokenInfoArgs,
  RewardScheduleCurve,
  RewardScheduleCurveArgs,
} from "./index.js";
import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
} from "@solana/kit";
import {
  getFarmsTokenInfoDecoder,
  getFarmsTokenInfoEncoder,
  getRewardScheduleCurveDecoder,
  getRewardScheduleCurveEncoder,
} from "./index.js";

export interface RewardInfo {
  token: FarmsTokenInfo;
  rewardsVault: Address;
  rewardsAvailable: bigint;
  rewardScheduleCurve: RewardScheduleCurve;
  minClaimDurationSeconds: bigint;
  lastIssuanceTs: bigint;
  rewardsIssuedUnclaimed: bigint;
  rewardsIssuedCumulative: bigint;
  rewardPerShareScaled: bigint;
  placeholder0: bigint;
  rewardType: number;
  rewardsPerSecondDecimals: number;
  padding0: number[];
  padding1: bigint[];
}

export interface RewardInfoArgs {
  token: FarmsTokenInfoArgs;
  rewardsVault: Address;
  rewardsAvailable: number | bigint;
  rewardScheduleCurve: RewardScheduleCurveArgs;
  minClaimDurationSeconds: number | bigint;
  lastIssuanceTs: number | bigint;
  rewardsIssuedUnclaimed: number | bigint;
  rewardsIssuedCumulative: number | bigint;
  rewardPerShareScaled: number | bigint;
  placeholder0: number | bigint;
  rewardType: number;
  rewardsPerSecondDecimals: number;
  padding0: number[];
  padding1: (number | bigint)[];
}

export function getRewardInfoEncoder(): FixedSizeEncoder<RewardInfoArgs> {
  return getStructEncoder([
    ["token", getFarmsTokenInfoEncoder()],
    ["rewardsVault", getAddressEncoder()],
    ["rewardsAvailable", getU64Encoder()],
    ["rewardScheduleCurve", getRewardScheduleCurveEncoder()],
    ["minClaimDurationSeconds", getU64Encoder()],
    ["lastIssuanceTs", getU64Encoder()],
    ["rewardsIssuedUnclaimed", getU64Encoder()],
    ["rewardsIssuedCumulative", getU64Encoder()],
    ["rewardPerShareScaled", getU128Encoder()],
    ["placeholder0", getU64Encoder()],
    ["rewardType", getU8Encoder()],
    ["rewardsPerSecondDecimals", getU8Encoder()],
    ["padding0", getArrayEncoder(getU8Encoder(), { size: 6 })],
    ["padding1", getArrayEncoder(getU64Encoder(), { size: 20 })],
  ]);
}

export function getRewardInfoDecoder(): FixedSizeDecoder<RewardInfo> {
  return getStructDecoder([
    ["token", getFarmsTokenInfoDecoder()],
    ["rewardsVault", getAddressDecoder()],
    ["rewardsAvailable", getU64Decoder()],
    ["rewardScheduleCurve", getRewardScheduleCurveDecoder()],
    ["minClaimDurationSeconds", getU64Decoder()],
    ["lastIssuanceTs", getU64Decoder()],
    ["rewardsIssuedUnclaimed", getU64Decoder()],
    ["rewardsIssuedCumulative", getU64Decoder()],
    ["rewardPerShareScaled", getU128Decoder()],
    ["placeholder0", getU64Decoder()],
    ["rewardType", getU8Decoder()],
    ["rewardsPerSecondDecimals", getU8Decoder()],
    ["padding0", getArrayDecoder(getU8Decoder(), { size: 6 })],
    ["padding1", getArrayDecoder(getU64Decoder(), { size: 20 })],
  ]);
}

export function getRewardInfoCodec(): FixedSizeCodec<
  RewardInfoArgs,
  RewardInfo
> {
  return combineCodec(getRewardInfoEncoder(), getRewardInfoDecoder());
}
