/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, Codec, Decoder, Encoder } from "@solana/kit";
import type {
  RewardScheduleCurve,
  RewardScheduleCurveArgs,
  TokenInfo,
  TokenInfoArgs,
} from "./index.js";
import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
} from "@solana/kit";
import {
  getRewardScheduleCurveDecoder,
  getRewardScheduleCurveEncoder,
  getTokenInfoDecoder,
  getTokenInfoEncoder,
} from "./index.js";

export interface RewardInfo {
  token: TokenInfo;
  rewardsVault: Address;
  rewardsAvailable: bigint;
  rewardScheduleCurve: RewardScheduleCurve;
  minClaimDurationSeconds: bigint;
  lastIssuanceTs: bigint;
  rewardsIssuedUnclaimed: bigint;
  rewardsIssuedCumulative: bigint;
  rewardPerShareScaled: bigint;
  placeholder0: bigint;
  rewardType: number;
  rewardsPerSecondDecimals: number;
  padding0: number[];
  padding1: bigint[];
}

export interface RewardInfoArgs {
  token: TokenInfoArgs;
  rewardsVault: Address;
  rewardsAvailable: number | bigint;
  rewardScheduleCurve: RewardScheduleCurveArgs;
  minClaimDurationSeconds: number | bigint;
  lastIssuanceTs: number | bigint;
  rewardsIssuedUnclaimed: number | bigint;
  rewardsIssuedCumulative: number | bigint;
  rewardPerShareScaled: number | bigint;
  placeholder0: number | bigint;
  rewardType: number;
  rewardsPerSecondDecimals: number;
  padding0: number[];
  padding1: (number | bigint)[];
}

export function getRewardInfoEncoder(): Encoder<RewardInfoArgs> {
  return getStructEncoder([
    ["token", getTokenInfoEncoder()],
    ["rewardsVault", getAddressEncoder()],
    ["rewardsAvailable", getU64Encoder()],
    ["rewardScheduleCurve", getRewardScheduleCurveEncoder()],
    ["minClaimDurationSeconds", getU64Encoder()],
    ["lastIssuanceTs", getU64Encoder()],
    ["rewardsIssuedUnclaimed", getU64Encoder()],
    ["rewardsIssuedCumulative", getU64Encoder()],
    ["rewardPerShareScaled", getU128Encoder()],
    ["placeholder0", getU64Encoder()],
    ["rewardType", getU8Encoder()],
    ["rewardsPerSecondDecimals", getU8Encoder()],
    ["padding0", getArrayEncoder(getU8Encoder(), { size: 6 })],
    ["padding1", getArrayEncoder(getU64Encoder(), { size: 20 })],
  ]);
}

export function getRewardInfoDecoder(): Decoder<RewardInfo> {
  return getStructDecoder([
    ["token", getTokenInfoDecoder()],
    ["rewardsVault", getAddressDecoder()],
    ["rewardsAvailable", getU64Decoder()],
    ["rewardScheduleCurve", getRewardScheduleCurveDecoder()],
    ["minClaimDurationSeconds", getU64Decoder()],
    ["lastIssuanceTs", getU64Decoder()],
    ["rewardsIssuedUnclaimed", getU64Decoder()],
    ["rewardsIssuedCumulative", getU64Decoder()],
    ["rewardPerShareScaled", getU128Decoder()],
    ["placeholder0", getU64Decoder()],
    ["rewardType", getU8Decoder()],
    ["rewardsPerSecondDecimals", getU8Decoder()],
    ["padding0", getArrayDecoder(getU8Decoder(), { size: 6 })],
    ["padding1", getArrayDecoder(getU64Decoder(), { size: 20 })],
  ]);
}

export function getRewardInfoCodec(): Codec<RewardInfoArgs, RewardInfo> {
  return combineCodec(getRewardInfoEncoder(), getRewardInfoDecoder());
}
