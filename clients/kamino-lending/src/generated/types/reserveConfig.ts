/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
} from "@solana/kit";
import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";
import type {
  BorrowRateCurve,
  BorrowRateCurveArgs,
  ReserveFees,
  ReserveFeesArgs,
  TokenInfo,
  TokenInfoArgs,
  WithdrawalCaps,
  WithdrawalCapsArgs,
} from "./index.js";
import {
  getBorrowRateCurveDecoder,
  getBorrowRateCurveEncoder,
  getReserveFeesDecoder,
  getReserveFeesEncoder,
  getTokenInfoDecoder,
  getTokenInfoEncoder,
  getWithdrawalCapsDecoder,
  getWithdrawalCapsEncoder,
} from "./index.js";

export interface ReserveConfig {
  status: number;
  assetTier: number;
  hostFixedInterestRateBps: number;
  reserved2: number[];
  reserved3: number[];
  protocolTakeRatePct: number;
  protocolLiquidationFeePct: number;
  loanToValuePct: number;
  liquidationThresholdPct: number;
  minLiquidationBonusBps: number;
  maxLiquidationBonusBps: number;
  badDebtLiquidationBonusBps: number;
  deleveragingMarginCallPeriodSecs: bigint;
  deleveragingThresholdDecreaseBpsPerDay: bigint;
  fees: ReserveFees;
  borrowRateCurve: BorrowRateCurve;
  borrowFactorPct: bigint;
  depositLimit: bigint;
  borrowLimit: bigint;
  tokenInfo: TokenInfo;
  depositWithdrawalCap: WithdrawalCaps;
  debtWithdrawalCap: WithdrawalCaps;
  elevationGroups: number[];
  disableUsageAsCollOutsideEmode: number;
  utilizationLimitBlockBorrowingAbovePct: number;
  autodeleverageEnabled: number;
  reserved1: number[];
  borrowLimitOutsideElevationGroup: bigint;
  borrowLimitAgainstThisCollateralInElevationGroup: bigint[];
  deleveragingBonusIncreaseBpsPerDay: bigint;
}

export interface ReserveConfigArgs {
  status: number;
  assetTier: number;
  hostFixedInterestRateBps: number;
  reserved2: number[];
  reserved3: number[];
  protocolTakeRatePct: number;
  protocolLiquidationFeePct: number;
  loanToValuePct: number;
  liquidationThresholdPct: number;
  minLiquidationBonusBps: number;
  maxLiquidationBonusBps: number;
  badDebtLiquidationBonusBps: number;
  deleveragingMarginCallPeriodSecs: number | bigint;
  deleveragingThresholdDecreaseBpsPerDay: number | bigint;
  fees: ReserveFeesArgs;
  borrowRateCurve: BorrowRateCurveArgs;
  borrowFactorPct: number | bigint;
  depositLimit: number | bigint;
  borrowLimit: number | bigint;
  tokenInfo: TokenInfoArgs;
  depositWithdrawalCap: WithdrawalCapsArgs;
  debtWithdrawalCap: WithdrawalCapsArgs;
  elevationGroups: number[];
  disableUsageAsCollOutsideEmode: number;
  utilizationLimitBlockBorrowingAbovePct: number;
  autodeleverageEnabled: number;
  reserved1: number[];
  borrowLimitOutsideElevationGroup: number | bigint;
  borrowLimitAgainstThisCollateralInElevationGroup: (number | bigint)[];
  deleveragingBonusIncreaseBpsPerDay: number | bigint;
}

export function getReserveConfigEncoder(): FixedSizeEncoder<ReserveConfigArgs> {
  return getStructEncoder([
    ["status", getU8Encoder()],
    ["assetTier", getU8Encoder()],
    ["hostFixedInterestRateBps", getU16Encoder()],
    ["reserved2", getArrayEncoder(getU8Encoder(), { size: 2 })],
    ["reserved3", getArrayEncoder(getU8Encoder(), { size: 8 })],
    ["protocolTakeRatePct", getU8Encoder()],
    ["protocolLiquidationFeePct", getU8Encoder()],
    ["loanToValuePct", getU8Encoder()],
    ["liquidationThresholdPct", getU8Encoder()],
    ["minLiquidationBonusBps", getU16Encoder()],
    ["maxLiquidationBonusBps", getU16Encoder()],
    ["badDebtLiquidationBonusBps", getU16Encoder()],
    ["deleveragingMarginCallPeriodSecs", getU64Encoder()],
    ["deleveragingThresholdDecreaseBpsPerDay", getU64Encoder()],
    ["fees", getReserveFeesEncoder()],
    ["borrowRateCurve", getBorrowRateCurveEncoder()],
    ["borrowFactorPct", getU64Encoder()],
    ["depositLimit", getU64Encoder()],
    ["borrowLimit", getU64Encoder()],
    ["tokenInfo", getTokenInfoEncoder()],
    ["depositWithdrawalCap", getWithdrawalCapsEncoder()],
    ["debtWithdrawalCap", getWithdrawalCapsEncoder()],
    ["elevationGroups", getArrayEncoder(getU8Encoder(), { size: 20 })],
    ["disableUsageAsCollOutsideEmode", getU8Encoder()],
    ["utilizationLimitBlockBorrowingAbovePct", getU8Encoder()],
    ["autodeleverageEnabled", getU8Encoder()],
    ["reserved1", getArrayEncoder(getU8Encoder(), { size: 1 })],
    ["borrowLimitOutsideElevationGroup", getU64Encoder()],
    [
      "borrowLimitAgainstThisCollateralInElevationGroup",
      getArrayEncoder(getU64Encoder(), { size: 32 }),
    ],
    ["deleveragingBonusIncreaseBpsPerDay", getU64Encoder()],
  ]);
}

export function getReserveConfigDecoder(): FixedSizeDecoder<ReserveConfig> {
  return getStructDecoder([
    ["status", getU8Decoder()],
    ["assetTier", getU8Decoder()],
    ["hostFixedInterestRateBps", getU16Decoder()],
    ["reserved2", getArrayDecoder(getU8Decoder(), { size: 2 })],
    ["reserved3", getArrayDecoder(getU8Decoder(), { size: 8 })],
    ["protocolTakeRatePct", getU8Decoder()],
    ["protocolLiquidationFeePct", getU8Decoder()],
    ["loanToValuePct", getU8Decoder()],
    ["liquidationThresholdPct", getU8Decoder()],
    ["minLiquidationBonusBps", getU16Decoder()],
    ["maxLiquidationBonusBps", getU16Decoder()],
    ["badDebtLiquidationBonusBps", getU16Decoder()],
    ["deleveragingMarginCallPeriodSecs", getU64Decoder()],
    ["deleveragingThresholdDecreaseBpsPerDay", getU64Decoder()],
    ["fees", getReserveFeesDecoder()],
    ["borrowRateCurve", getBorrowRateCurveDecoder()],
    ["borrowFactorPct", getU64Decoder()],
    ["depositLimit", getU64Decoder()],
    ["borrowLimit", getU64Decoder()],
    ["tokenInfo", getTokenInfoDecoder()],
    ["depositWithdrawalCap", getWithdrawalCapsDecoder()],
    ["debtWithdrawalCap", getWithdrawalCapsDecoder()],
    ["elevationGroups", getArrayDecoder(getU8Decoder(), { size: 20 })],
    ["disableUsageAsCollOutsideEmode", getU8Decoder()],
    ["utilizationLimitBlockBorrowingAbovePct", getU8Decoder()],
    ["autodeleverageEnabled", getU8Decoder()],
    ["reserved1", getArrayDecoder(getU8Decoder(), { size: 1 })],
    ["borrowLimitOutsideElevationGroup", getU64Decoder()],
    [
      "borrowLimitAgainstThisCollateralInElevationGroup",
      getArrayDecoder(getU64Decoder(), { size: 32 }),
    ],
    ["deleveragingBonusIncreaseBpsPerDay", getU64Decoder()],
  ]);
}

export function getReserveConfigCodec(): FixedSizeCodec<
  ReserveConfigArgs,
  ReserveConfig
> {
  return combineCodec(getReserveConfigEncoder(), getReserveConfigDecoder());
}
