/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
} from "@solana/kit";
import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
} from "@solana/kit";
import type {
  PriceHeuristic,
  PriceHeuristicArgs,
  PythConfiguration,
  PythConfigurationArgs,
  ScopeConfiguration,
  ScopeConfigurationArgs,
  SwitchboardConfiguration,
  SwitchboardConfigurationArgs,
} from "./index.js";
import {
  getPriceHeuristicDecoder,
  getPriceHeuristicEncoder,
  getPythConfigurationDecoder,
  getPythConfigurationEncoder,
  getScopeConfigurationDecoder,
  getScopeConfigurationEncoder,
  getSwitchboardConfigurationDecoder,
  getSwitchboardConfigurationEncoder,
} from "./index.js";

export interface TokenInfo {
  name: number[];
  heuristic: PriceHeuristic;
  maxTwapDivergenceBps: bigint;
  maxAgePriceSeconds: bigint;
  maxAgeTwapSeconds: bigint;
  scopeConfiguration: ScopeConfiguration;
  switchboardConfiguration: SwitchboardConfiguration;
  pythConfiguration: PythConfiguration;
  blockPriceUsage: number;
  reserved: number[];
  padding: bigint[];
}

export interface TokenInfoArgs {
  name: number[];
  heuristic: PriceHeuristicArgs;
  maxTwapDivergenceBps: number | bigint;
  maxAgePriceSeconds: number | bigint;
  maxAgeTwapSeconds: number | bigint;
  scopeConfiguration: ScopeConfigurationArgs;
  switchboardConfiguration: SwitchboardConfigurationArgs;
  pythConfiguration: PythConfigurationArgs;
  blockPriceUsage: number;
  reserved: number[];
  padding: (number | bigint)[];
}

export function getTokenInfoEncoder(): FixedSizeEncoder<TokenInfoArgs> {
  return getStructEncoder([
    ["name", getArrayEncoder(getU8Encoder(), { size: 32 })],
    ["heuristic", getPriceHeuristicEncoder()],
    ["maxTwapDivergenceBps", getU64Encoder()],
    ["maxAgePriceSeconds", getU64Encoder()],
    ["maxAgeTwapSeconds", getU64Encoder()],
    ["scopeConfiguration", getScopeConfigurationEncoder()],
    ["switchboardConfiguration", getSwitchboardConfigurationEncoder()],
    ["pythConfiguration", getPythConfigurationEncoder()],
    ["blockPriceUsage", getU8Encoder()],
    ["reserved", getArrayEncoder(getU8Encoder(), { size: 7 })],
    ["padding", getArrayEncoder(getU64Encoder(), { size: 19 })],
  ]);
}

export function getTokenInfoDecoder(): FixedSizeDecoder<TokenInfo> {
  return getStructDecoder([
    ["name", getArrayDecoder(getU8Decoder(), { size: 32 })],
    ["heuristic", getPriceHeuristicDecoder()],
    ["maxTwapDivergenceBps", getU64Decoder()],
    ["maxAgePriceSeconds", getU64Decoder()],
    ["maxAgeTwapSeconds", getU64Decoder()],
    ["scopeConfiguration", getScopeConfigurationDecoder()],
    ["switchboardConfiguration", getSwitchboardConfigurationDecoder()],
    ["pythConfiguration", getPythConfigurationDecoder()],
    ["blockPriceUsage", getU8Decoder()],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 7 })],
    ["padding", getArrayDecoder(getU64Decoder(), { size: 19 })],
  ]);
}

export function getTokenInfoCodec(): FixedSizeCodec<TokenInfoArgs, TokenInfo> {
  return combineCodec(getTokenInfoEncoder(), getTokenInfoDecoder());
}
