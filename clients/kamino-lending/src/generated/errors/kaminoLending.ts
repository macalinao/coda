/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  SolanaError,
} from "@solana/kit";
import { isProgramError } from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";

/** InvalidMarketAuthority: Market authority is invalid */
export const KAMINO_LENDING_ERROR__INVALID_MARKET_AUTHORITY = 0x1770; // 6000
/** InvalidMarketOwner: Market owner is invalid */
export const KAMINO_LENDING_ERROR__INVALID_MARKET_OWNER = 0x1771; // 6001
/** InvalidAccountOwner: Input account owner is not the program address */
export const KAMINO_LENDING_ERROR__INVALID_ACCOUNT_OWNER = 0x1772; // 6002
/** InvalidAmount: Input amount is invalid */
export const KAMINO_LENDING_ERROR__INVALID_AMOUNT = 0x1773; // 6003
/** InvalidConfig: Input config value is invalid */
export const KAMINO_LENDING_ERROR__INVALID_CONFIG = 0x1774; // 6004
/** InvalidSigner: Input account must be a signer */
export const KAMINO_LENDING_ERROR__INVALID_SIGNER = 0x1775; // 6005
/** InvalidAccountInput: Invalid account input */
export const KAMINO_LENDING_ERROR__INVALID_ACCOUNT_INPUT = 0x1776; // 6006
/** MathOverflow: Math operation overflow */
export const KAMINO_LENDING_ERROR__MATH_OVERFLOW = 0x1777; // 6007
/** InsufficientLiquidity: Insufficient liquidity available */
export const KAMINO_LENDING_ERROR__INSUFFICIENT_LIQUIDITY = 0x1778; // 6008
/** ReserveStale: Reserve state needs to be refreshed */
export const KAMINO_LENDING_ERROR__RESERVE_STALE = 0x1779; // 6009
/** WithdrawTooSmall: Withdraw amount too small */
export const KAMINO_LENDING_ERROR__WITHDRAW_TOO_SMALL = 0x177a; // 6010
/** WithdrawTooLarge: Withdraw amount too large */
export const KAMINO_LENDING_ERROR__WITHDRAW_TOO_LARGE = 0x177b; // 6011
/** BorrowTooSmall: Borrow amount too small to receive liquidity after fees */
export const KAMINO_LENDING_ERROR__BORROW_TOO_SMALL = 0x177c; // 6012
/** BorrowTooLarge: Borrow amount too large for deposited collateral */
export const KAMINO_LENDING_ERROR__BORROW_TOO_LARGE = 0x177d; // 6013
/** RepayTooSmall: Repay amount too small to transfer liquidity */
export const KAMINO_LENDING_ERROR__REPAY_TOO_SMALL = 0x177e; // 6014
/** LiquidationTooSmall: Liquidation amount too small to receive collateral */
export const KAMINO_LENDING_ERROR__LIQUIDATION_TOO_SMALL = 0x177f; // 6015
/** ObligationHealthy: Cannot liquidate healthy obligations */
export const KAMINO_LENDING_ERROR__OBLIGATION_HEALTHY = 0x1780; // 6016
/** ObligationStale: Obligation state needs to be refreshed */
export const KAMINO_LENDING_ERROR__OBLIGATION_STALE = 0x1781; // 6017
/** ObligationReserveLimit: Obligation reserve limit exceeded */
export const KAMINO_LENDING_ERROR__OBLIGATION_RESERVE_LIMIT = 0x1782; // 6018
/** InvalidObligationOwner: Obligation owner is invalid */
export const KAMINO_LENDING_ERROR__INVALID_OBLIGATION_OWNER = 0x1783; // 6019
/** ObligationDepositsEmpty: Obligation deposits are empty */
export const KAMINO_LENDING_ERROR__OBLIGATION_DEPOSITS_EMPTY = 0x1784; // 6020
/** ObligationBorrowsEmpty: Obligation borrows are empty */
export const KAMINO_LENDING_ERROR__OBLIGATION_BORROWS_EMPTY = 0x1785; // 6021
/** ObligationDepositsZero: Obligation deposits have zero value */
export const KAMINO_LENDING_ERROR__OBLIGATION_DEPOSITS_ZERO = 0x1786; // 6022
/** ObligationBorrowsZero: Obligation borrows have zero value */
export const KAMINO_LENDING_ERROR__OBLIGATION_BORROWS_ZERO = 0x1787; // 6023
/** InvalidObligationCollateral: Invalid obligation collateral */
export const KAMINO_LENDING_ERROR__INVALID_OBLIGATION_COLLATERAL = 0x1788; // 6024
/** InvalidObligationLiquidity: Invalid obligation liquidity */
export const KAMINO_LENDING_ERROR__INVALID_OBLIGATION_LIQUIDITY = 0x1789; // 6025
/** ObligationCollateralEmpty: Obligation collateral is empty */
export const KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_EMPTY = 0x178a; // 6026
/** ObligationLiquidityEmpty: Obligation liquidity is empty */
export const KAMINO_LENDING_ERROR__OBLIGATION_LIQUIDITY_EMPTY = 0x178b; // 6027
/** NegativeInterestRate: Interest rate is negative */
export const KAMINO_LENDING_ERROR__NEGATIVE_INTEREST_RATE = 0x178c; // 6028
/** InvalidOracleConfig: Input oracle config is invalid */
export const KAMINO_LENDING_ERROR__INVALID_ORACLE_CONFIG = 0x178d; // 6029
/** InsufficientProtocolFeesToRedeem: Insufficient protocol fees to claim or no liquidity available */
export const KAMINO_LENDING_ERROR__INSUFFICIENT_PROTOCOL_FEES_TO_REDEEM = 0x178e; // 6030
/** FlashBorrowCpi: No cpi flash borrows allowed */
export const KAMINO_LENDING_ERROR__FLASH_BORROW_CPI = 0x178f; // 6031
/** NoFlashRepayFound: No corresponding repay found for flash borrow */
export const KAMINO_LENDING_ERROR__NO_FLASH_REPAY_FOUND = 0x1790; // 6032
/** InvalidFlashRepay: Invalid repay found */
export const KAMINO_LENDING_ERROR__INVALID_FLASH_REPAY = 0x1791; // 6033
/** FlashRepayCpi: No cpi flash repays allowed */
export const KAMINO_LENDING_ERROR__FLASH_REPAY_CPI = 0x1792; // 6034
/** MultipleFlashBorrows: Multiple flash borrows not allowed in the same transaction */
export const KAMINO_LENDING_ERROR__MULTIPLE_FLASH_BORROWS = 0x1793; // 6035
/** FlashLoansDisabled: Flash loans are disabled for this reserve */
export const KAMINO_LENDING_ERROR__FLASH_LOANS_DISABLED = 0x1794; // 6036
/** SwitchboardV2Error: Switchboard error */
export const KAMINO_LENDING_ERROR__SWITCHBOARD_V2_ERROR = 0x1795; // 6037
/** CouldNotDeserializeScope: Cannot deserialize the scope price account */
export const KAMINO_LENDING_ERROR__COULD_NOT_DESERIALIZE_SCOPE = 0x1796; // 6038
/** PriceTooOld: Price too old */
export const KAMINO_LENDING_ERROR__PRICE_TOO_OLD = 0x1797; // 6039
/** PriceTooDivergentFromTwap: Price too divergent from twap */
export const KAMINO_LENDING_ERROR__PRICE_TOO_DIVERGENT_FROM_TWAP = 0x1798; // 6040
/** InvalidTwapPrice: Invalid twap price */
export const KAMINO_LENDING_ERROR__INVALID_TWAP_PRICE = 0x1799; // 6041
/** GlobalEmergencyMode: Emergency mode is enabled */
export const KAMINO_LENDING_ERROR__GLOBAL_EMERGENCY_MODE = 0x179a; // 6042
/** InvalidFlag: Invalid lending market config */
export const KAMINO_LENDING_ERROR__INVALID_FLAG = 0x179b; // 6043
/** PriceNotValid: Price is not valid */
export const KAMINO_LENDING_ERROR__PRICE_NOT_VALID = 0x179c; // 6044
/** PriceIsBiggerThanHeuristic: Price is bigger than allowed by heuristic */
export const KAMINO_LENDING_ERROR__PRICE_IS_BIGGER_THAN_HEURISTIC = 0x179d; // 6045
/** PriceIsLowerThanHeuristic: Price lower than allowed by heuristic */
export const KAMINO_LENDING_ERROR__PRICE_IS_LOWER_THAN_HEURISTIC = 0x179e; // 6046
/** PriceIsZero: Price is zero */
export const KAMINO_LENDING_ERROR__PRICE_IS_ZERO = 0x179f; // 6047
/** PriceConfidenceTooWide: Price confidence too wide */
export const KAMINO_LENDING_ERROR__PRICE_CONFIDENCE_TOO_WIDE = 0x17a0; // 6048
/** IntegerOverflow: Conversion between integers failed */
export const KAMINO_LENDING_ERROR__INTEGER_OVERFLOW = 0x17a1; // 6049
/** NoFarmForReserve: This reserve does not have a farm */
export const KAMINO_LENDING_ERROR__NO_FARM_FOR_RESERVE = 0x17a2; // 6050
/** IncorrectInstructionInPosition: Wrong instruction at expected position */
export const KAMINO_LENDING_ERROR__INCORRECT_INSTRUCTION_IN_POSITION = 0x17a3; // 6051
/** NoPriceFound: No price found */
export const KAMINO_LENDING_ERROR__NO_PRICE_FOUND = 0x17a4; // 6052
/** InvalidTwapConfig: Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap */
export const KAMINO_LENDING_ERROR__INVALID_TWAP_CONFIG = 0x17a5; // 6053
/** InvalidPythPriceAccount: Pyth price account does not match configuration */
export const KAMINO_LENDING_ERROR__INVALID_PYTH_PRICE_ACCOUNT = 0x17a6; // 6054
/** InvalidSwitchboardAccount: Switchboard account(s) do not match configuration */
export const KAMINO_LENDING_ERROR__INVALID_SWITCHBOARD_ACCOUNT = 0x17a7; // 6055
/** InvalidScopePriceAccount: Scope price account does not match configuration */
export const KAMINO_LENDING_ERROR__INVALID_SCOPE_PRICE_ACCOUNT = 0x17a8; // 6056
/** ObligationCollateralLtvZero: The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals */
export const KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_LTV_ZERO = 0x17a9; // 6057
/** InvalidObligationSeedsValue: Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2 */
export const KAMINO_LENDING_ERROR__INVALID_OBLIGATION_SEEDS_VALUE = 0x17aa; // 6058
/** DeprecatedInvalidObligationId: [DEPRECATED] Obligation id must be 0 */
export const KAMINO_LENDING_ERROR__DEPRECATED_INVALID_OBLIGATION_ID = 0x17ab; // 6059
/** InvalidBorrowRateCurvePoint: Invalid borrow rate curve point */
export const KAMINO_LENDING_ERROR__INVALID_BORROW_RATE_CURVE_POINT = 0x17ac; // 6060
/** InvalidUtilizationRate: Invalid utilization rate */
export const KAMINO_LENDING_ERROR__INVALID_UTILIZATION_RATE = 0x17ad; // 6061
/** CannotSocializeObligationWithCollateral: Obligation hasn't been fully liquidated and debt cannot be socialized. */
export const KAMINO_LENDING_ERROR__CANNOT_SOCIALIZE_OBLIGATION_WITH_COLLATERAL = 0x17ae; // 6062
/** ObligationEmpty: Obligation has no borrows or deposits. */
export const KAMINO_LENDING_ERROR__OBLIGATION_EMPTY = 0x17af; // 6063
/** WithdrawalCapReached: Withdrawal cap is reached */
export const KAMINO_LENDING_ERROR__WITHDRAWAL_CAP_REACHED = 0x17b0; // 6064
/** LastTimestampGreaterThanCurrent: The last interval start timestamp is greater than the current timestamp */
export const KAMINO_LENDING_ERROR__LAST_TIMESTAMP_GREATER_THAN_CURRENT = 0x17b1; // 6065
/** LiquidationRewardTooSmall: The reward amount is less than the minimum acceptable received liquidity */
export const KAMINO_LENDING_ERROR__LIQUIDATION_REWARD_TOO_SMALL = 0x17b2; // 6066
/** IsolatedAssetTierViolation: Isolated Asset Tier Violation */
export const KAMINO_LENDING_ERROR__ISOLATED_ASSET_TIER_VIOLATION = 0x17b3; // 6067
/** InconsistentElevationGroup: The obligation's elevation group and the reserve's are not the same */
export const KAMINO_LENDING_ERROR__INCONSISTENT_ELEVATION_GROUP = 0x17b4; // 6068
/** InvalidElevationGroup: The elevation group chosen for the reserve does not exist in the lending market */
export const KAMINO_LENDING_ERROR__INVALID_ELEVATION_GROUP = 0x17b5; // 6069
/** InvalidElevationGroupConfig: The elevation group updated has wrong parameters set */
export const KAMINO_LENDING_ERROR__INVALID_ELEVATION_GROUP_CONFIG = 0x17b6; // 6070
/** UnhealthyElevationGroupLtv: The current obligation must have most or all its debt repaid before changing the elevation group */
export const KAMINO_LENDING_ERROR__UNHEALTHY_ELEVATION_GROUP_LTV = 0x17b7; // 6071
/** ElevationGroupNewLoansDisabled: Elevation group does not accept any new loans or any new borrows/withdrawals */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_NEW_LOANS_DISABLED = 0x17b8; // 6072
/** ReserveDeprecated: Reserve was deprecated, no longer usable */
export const KAMINO_LENDING_ERROR__RESERVE_DEPRECATED = 0x17b9; // 6073
/** ReferrerAccountNotInitialized: Referrer account not initialized */
export const KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_NOT_INITIALIZED = 0x17ba; // 6074
/** ReferrerAccountMintMissmatch: Referrer account mint does not match the operation reserve mint */
export const KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_MINT_MISSMATCH = 0x17bb; // 6075
/** ReferrerAccountWrongAddress: Referrer account address is not a valid program address */
export const KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_WRONG_ADDRESS = 0x17bc; // 6076
/** ReferrerAccountReferrerMissmatch: Referrer account referrer does not match the owner referrer */
export const KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_REFERRER_MISSMATCH = 0x17bd; // 6077
/** ReferrerAccountMissing: Referrer account missing for obligation with referrer */
export const KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_MISSING = 0x17be; // 6078
/** InsufficientReferralFeesToRedeem: Insufficient referral fees to claim or no liquidity available */
export const KAMINO_LENDING_ERROR__INSUFFICIENT_REFERRAL_FEES_TO_REDEEM = 0x17bf; // 6079
/** CpiDisabled: CPI disabled for this instruction */
export const KAMINO_LENDING_ERROR__CPI_DISABLED = 0x17c0; // 6080
/** ShortUrlNotAsciiAlphanumeric: Referrer short_url is not ascii alphanumeric */
export const KAMINO_LENDING_ERROR__SHORT_URL_NOT_ASCII_ALPHANUMERIC = 0x17c1; // 6081
/** ReserveObsolete: Reserve is marked as obsolete */
export const KAMINO_LENDING_ERROR__RESERVE_OBSOLETE = 0x17c2; // 6082
/** ElevationGroupAlreadyActivated: Obligation already part of the same elevation group */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_ALREADY_ACTIVATED = 0x17c3; // 6083
/** ObligationInDeprecatedReserve: Obligation has a deposit in a deprecated reserve */
export const KAMINO_LENDING_ERROR__OBLIGATION_IN_DEPRECATED_RESERVE = 0x17c4; // 6084
/** ReferrerStateOwnerMismatch: Referrer state owner does not match the given signer */
export const KAMINO_LENDING_ERROR__REFERRER_STATE_OWNER_MISMATCH = 0x17c5; // 6085
/** UserMetadataOwnerAlreadySet: User metadata owner is already set */
export const KAMINO_LENDING_ERROR__USER_METADATA_OWNER_ALREADY_SET = 0x17c6; // 6086
/** CollateralNonLiquidatable: This collateral cannot be liquidated (LTV set to 0) */
export const KAMINO_LENDING_ERROR__COLLATERAL_NON_LIQUIDATABLE = 0x17c7; // 6087
/** BorrowingDisabled: Borrowing is disabled */
export const KAMINO_LENDING_ERROR__BORROWING_DISABLED = 0x17c8; // 6088
/** BorrowLimitExceeded: Cannot borrow above borrow limit */
export const KAMINO_LENDING_ERROR__BORROW_LIMIT_EXCEEDED = 0x17c9; // 6089
/** DepositLimitExceeded: Cannot deposit above deposit limit */
export const KAMINO_LENDING_ERROR__DEPOSIT_LIMIT_EXCEEDED = 0x17ca; // 6090
/** BorrowingDisabledOutsideElevationGroup: Reserve does not accept any new borrows outside elevation group */
export const KAMINO_LENDING_ERROR__BORROWING_DISABLED_OUTSIDE_ELEVATION_GROUP = 0x17cb; // 6091
/** NetValueRemainingTooSmall: Net value remaining too small */
export const KAMINO_LENDING_ERROR__NET_VALUE_REMAINING_TOO_SMALL = 0x17cc; // 6092
/** WorseLTVBlocked: Cannot get the obligation in a worse position */
export const KAMINO_LENDING_ERROR__WORSE_L_T_V_BLOCKED = 0x17cd; // 6093
/** LiabilitiesBiggerThanAssets: Cannot have more liabilities than assets in a position */
export const KAMINO_LENDING_ERROR__LIABILITIES_BIGGER_THAN_ASSETS = 0x17ce; // 6094
/** ReserveTokenBalanceMismatch: Reserve state and token account cannot drift */
export const KAMINO_LENDING_ERROR__RESERVE_TOKEN_BALANCE_MISMATCH = 0x17cf; // 6095
/** ReserveVaultBalanceMismatch: Reserve token account has been unexpectedly modified */
export const KAMINO_LENDING_ERROR__RESERVE_VAULT_BALANCE_MISMATCH = 0x17d0; // 6096
/** ReserveAccountingMismatch: Reserve internal state accounting has been unexpectedly modified */
export const KAMINO_LENDING_ERROR__RESERVE_ACCOUNTING_MISMATCH = 0x17d1; // 6097
/** BorrowingAboveUtilizationRateDisabled: Borrowing above set utilization rate is disabled */
export const KAMINO_LENDING_ERROR__BORROWING_ABOVE_UTILIZATION_RATE_DISABLED = 0x17d2; // 6098
/** LiquidationBorrowFactorPriority: Liquidation must prioritize the debt with the highest borrow factor */
export const KAMINO_LENDING_ERROR__LIQUIDATION_BORROW_FACTOR_PRIORITY = 0x17d3; // 6099
/** LiquidationLowestLTVPriority: Liquidation must prioritize the collateral with the lowest LTV */
export const KAMINO_LENDING_ERROR__LIQUIDATION_LOWEST_L_T_V_PRIORITY = 0x17d4; // 6100
/** ElevationGroupBorrowLimitExceeded: Elevation group borrow limit exceeded */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_BORROW_LIMIT_EXCEEDED = 0x17d5; // 6101
/** ElevationGroupWithoutDebtReserve: The elevation group does not have a debt reserve defined */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_WITHOUT_DEBT_RESERVE = 0x17d6; // 6102
/** ElevationGroupMaxCollateralReserveZero: The elevation group does not allow any collateral reserves */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_MAX_COLLATERAL_RESERVE_ZERO = 0x17d7; // 6103
/** ElevationGroupHasAnotherDebtReserve: In elevation group attempt to borrow from a reserve that is not the debt reserve */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_HAS_ANOTHER_DEBT_RESERVE = 0x17d8; // 6104
/** ElevationGroupDebtReserveAsCollateral: The elevation group's debt reserve cannot be used as a collateral reserve */
export const KAMINO_LENDING_ERROR__ELEVATION_GROUP_DEBT_RESERVE_AS_COLLATERAL = 0x17d9; // 6105
/** ObligationCollateralExceedsElevationGroupLimit: Obligation have more collateral than the maximum allowed by the elevation group */
export const KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_EXCEEDS_ELEVATION_GROUP_LIMIT = 0x17da; // 6106
/** ObligationElevationGroupMultipleDebtReserve: Obligation is an elevation group but have more than one debt reserve */
export const KAMINO_LENDING_ERROR__OBLIGATION_ELEVATION_GROUP_MULTIPLE_DEBT_RESERVE = 0x17db; // 6107
/** UnsupportedTokenExtension: Mint has a token (2022) extension that is not supported */
export const KAMINO_LENDING_ERROR__UNSUPPORTED_TOKEN_EXTENSION = 0x17dc; // 6108
/** InvalidTokenAccount: Can't have an spl token mint with a t22 account */
export const KAMINO_LENDING_ERROR__INVALID_TOKEN_ACCOUNT = 0x17dd; // 6109
/** DepositDisabledOutsideElevationGroup: Can't deposit into this reserve outside elevation group */
export const KAMINO_LENDING_ERROR__DEPOSIT_DISABLED_OUTSIDE_ELEVATION_GROUP = 0x17de; // 6110
/** CannotCalculateReferralAmountDueToSlotsMismatch: Cannot calculate referral amount due to slots mismatch */
export const KAMINO_LENDING_ERROR__CANNOT_CALCULATE_REFERRAL_AMOUNT_DUE_TO_SLOTS_MISMATCH = 0x17df; // 6111
/** ObligationOwnersMustMatch: Obligation owners must match */
export const KAMINO_LENDING_ERROR__OBLIGATION_OWNERS_MUST_MATCH = 0x17e0; // 6112
/** ObligationsMustMatch: Obligations must match */
export const KAMINO_LENDING_ERROR__OBLIGATIONS_MUST_MATCH = 0x17e1; // 6113
/** LendingMarketsMustMatch: Lending markets must match */
export const KAMINO_LENDING_ERROR__LENDING_MARKETS_MUST_MATCH = 0x17e2; // 6114
/** ObligationCurrentlyMarkedForDeleveraging: Obligation is already marked for deleveraging */
export const KAMINO_LENDING_ERROR__OBLIGATION_CURRENTLY_MARKED_FOR_DELEVERAGING = 0x17e3; // 6115
/** MaximumWithdrawValueZero: Maximum withdrawable value of this collateral is zero, LTV needs improved */
export const KAMINO_LENDING_ERROR__MAXIMUM_WITHDRAW_VALUE_ZERO = 0x17e4; // 6116
/** ZeroMaxLtvAssetsInDeposits: No max LTV 0 assets allowed in deposits for repay and withdraw */
export const KAMINO_LENDING_ERROR__ZERO_MAX_LTV_ASSETS_IN_DEPOSITS = 0x17e5; // 6117
/** MinLtvAssetsPriority: The operation must prioritize the collateral with the lowest LTV */
export const KAMINO_LENDING_ERROR__MIN_LTV_ASSETS_PRIORITY = 0x17e6; // 6118
/** WorseLTVThanUnhealthyLTV: Cannot get the obligation liquidatable */
export const KAMINO_LENDING_ERROR__WORSE_L_T_V_THAN_UNHEALTHY_L_T_V = 0x17e7; // 6119
/** FarmAccountsMissing: Farm accounts to refresh are missing */
export const KAMINO_LENDING_ERROR__FARM_ACCOUNTS_MISSING = 0x17e8; // 6120
/** RepayTooSmallForFullLiquidation: Repay amount is too small to satisfy the mandatory full liquidation */
export const KAMINO_LENDING_ERROR__REPAY_TOO_SMALL_FOR_FULL_LIQUIDATION = 0x17e9; // 6121
/** InsufficientRepayAmount: Liquidator provided repay amount lower than required by liquidation rules */
export const KAMINO_LENDING_ERROR__INSUFFICIENT_REPAY_AMOUNT = 0x17ea; // 6122

export type KaminoLendingError =
  | typeof KAMINO_LENDING_ERROR__BORROWING_ABOVE_UTILIZATION_RATE_DISABLED
  | typeof KAMINO_LENDING_ERROR__BORROWING_DISABLED
  | typeof KAMINO_LENDING_ERROR__BORROWING_DISABLED_OUTSIDE_ELEVATION_GROUP
  | typeof KAMINO_LENDING_ERROR__BORROW_LIMIT_EXCEEDED
  | typeof KAMINO_LENDING_ERROR__BORROW_TOO_LARGE
  | typeof KAMINO_LENDING_ERROR__BORROW_TOO_SMALL
  | typeof KAMINO_LENDING_ERROR__CANNOT_CALCULATE_REFERRAL_AMOUNT_DUE_TO_SLOTS_MISMATCH
  | typeof KAMINO_LENDING_ERROR__CANNOT_SOCIALIZE_OBLIGATION_WITH_COLLATERAL
  | typeof KAMINO_LENDING_ERROR__COLLATERAL_NON_LIQUIDATABLE
  | typeof KAMINO_LENDING_ERROR__COULD_NOT_DESERIALIZE_SCOPE
  | typeof KAMINO_LENDING_ERROR__CPI_DISABLED
  | typeof KAMINO_LENDING_ERROR__DEPOSIT_DISABLED_OUTSIDE_ELEVATION_GROUP
  | typeof KAMINO_LENDING_ERROR__DEPOSIT_LIMIT_EXCEEDED
  | typeof KAMINO_LENDING_ERROR__DEPRECATED_INVALID_OBLIGATION_ID
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_ALREADY_ACTIVATED
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_BORROW_LIMIT_EXCEEDED
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_DEBT_RESERVE_AS_COLLATERAL
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_HAS_ANOTHER_DEBT_RESERVE
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_MAX_COLLATERAL_RESERVE_ZERO
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_NEW_LOANS_DISABLED
  | typeof KAMINO_LENDING_ERROR__ELEVATION_GROUP_WITHOUT_DEBT_RESERVE
  | typeof KAMINO_LENDING_ERROR__FARM_ACCOUNTS_MISSING
  | typeof KAMINO_LENDING_ERROR__FLASH_BORROW_CPI
  | typeof KAMINO_LENDING_ERROR__FLASH_LOANS_DISABLED
  | typeof KAMINO_LENDING_ERROR__FLASH_REPAY_CPI
  | typeof KAMINO_LENDING_ERROR__GLOBAL_EMERGENCY_MODE
  | typeof KAMINO_LENDING_ERROR__INCONSISTENT_ELEVATION_GROUP
  | typeof KAMINO_LENDING_ERROR__INCORRECT_INSTRUCTION_IN_POSITION
  | typeof KAMINO_LENDING_ERROR__INSUFFICIENT_LIQUIDITY
  | typeof KAMINO_LENDING_ERROR__INSUFFICIENT_PROTOCOL_FEES_TO_REDEEM
  | typeof KAMINO_LENDING_ERROR__INSUFFICIENT_REFERRAL_FEES_TO_REDEEM
  | typeof KAMINO_LENDING_ERROR__INSUFFICIENT_REPAY_AMOUNT
  | typeof KAMINO_LENDING_ERROR__INTEGER_OVERFLOW
  | typeof KAMINO_LENDING_ERROR__INVALID_ACCOUNT_INPUT
  | typeof KAMINO_LENDING_ERROR__INVALID_ACCOUNT_OWNER
  | typeof KAMINO_LENDING_ERROR__INVALID_AMOUNT
  | typeof KAMINO_LENDING_ERROR__INVALID_BORROW_RATE_CURVE_POINT
  | typeof KAMINO_LENDING_ERROR__INVALID_CONFIG
  | typeof KAMINO_LENDING_ERROR__INVALID_ELEVATION_GROUP
  | typeof KAMINO_LENDING_ERROR__INVALID_ELEVATION_GROUP_CONFIG
  | typeof KAMINO_LENDING_ERROR__INVALID_FLAG
  | typeof KAMINO_LENDING_ERROR__INVALID_FLASH_REPAY
  | typeof KAMINO_LENDING_ERROR__INVALID_MARKET_AUTHORITY
  | typeof KAMINO_LENDING_ERROR__INVALID_MARKET_OWNER
  | typeof KAMINO_LENDING_ERROR__INVALID_OBLIGATION_COLLATERAL
  | typeof KAMINO_LENDING_ERROR__INVALID_OBLIGATION_LIQUIDITY
  | typeof KAMINO_LENDING_ERROR__INVALID_OBLIGATION_OWNER
  | typeof KAMINO_LENDING_ERROR__INVALID_OBLIGATION_SEEDS_VALUE
  | typeof KAMINO_LENDING_ERROR__INVALID_ORACLE_CONFIG
  | typeof KAMINO_LENDING_ERROR__INVALID_PYTH_PRICE_ACCOUNT
  | typeof KAMINO_LENDING_ERROR__INVALID_SCOPE_PRICE_ACCOUNT
  | typeof KAMINO_LENDING_ERROR__INVALID_SIGNER
  | typeof KAMINO_LENDING_ERROR__INVALID_SWITCHBOARD_ACCOUNT
  | typeof KAMINO_LENDING_ERROR__INVALID_TOKEN_ACCOUNT
  | typeof KAMINO_LENDING_ERROR__INVALID_TWAP_CONFIG
  | typeof KAMINO_LENDING_ERROR__INVALID_TWAP_PRICE
  | typeof KAMINO_LENDING_ERROR__INVALID_UTILIZATION_RATE
  | typeof KAMINO_LENDING_ERROR__ISOLATED_ASSET_TIER_VIOLATION
  | typeof KAMINO_LENDING_ERROR__LAST_TIMESTAMP_GREATER_THAN_CURRENT
  | typeof KAMINO_LENDING_ERROR__LENDING_MARKETS_MUST_MATCH
  | typeof KAMINO_LENDING_ERROR__LIABILITIES_BIGGER_THAN_ASSETS
  | typeof KAMINO_LENDING_ERROR__LIQUIDATION_BORROW_FACTOR_PRIORITY
  | typeof KAMINO_LENDING_ERROR__LIQUIDATION_LOWEST_L_T_V_PRIORITY
  | typeof KAMINO_LENDING_ERROR__LIQUIDATION_REWARD_TOO_SMALL
  | typeof KAMINO_LENDING_ERROR__LIQUIDATION_TOO_SMALL
  | typeof KAMINO_LENDING_ERROR__MATH_OVERFLOW
  | typeof KAMINO_LENDING_ERROR__MAXIMUM_WITHDRAW_VALUE_ZERO
  | typeof KAMINO_LENDING_ERROR__MIN_LTV_ASSETS_PRIORITY
  | typeof KAMINO_LENDING_ERROR__MULTIPLE_FLASH_BORROWS
  | typeof KAMINO_LENDING_ERROR__NEGATIVE_INTEREST_RATE
  | typeof KAMINO_LENDING_ERROR__NET_VALUE_REMAINING_TOO_SMALL
  | typeof KAMINO_LENDING_ERROR__NO_FARM_FOR_RESERVE
  | typeof KAMINO_LENDING_ERROR__NO_FLASH_REPAY_FOUND
  | typeof KAMINO_LENDING_ERROR__NO_PRICE_FOUND
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_BORROWS_EMPTY
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_BORROWS_ZERO
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_EMPTY
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_EXCEEDS_ELEVATION_GROUP_LIMIT
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_LTV_ZERO
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_CURRENTLY_MARKED_FOR_DELEVERAGING
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_DEPOSITS_EMPTY
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_DEPOSITS_ZERO
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_ELEVATION_GROUP_MULTIPLE_DEBT_RESERVE
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_EMPTY
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_HEALTHY
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_IN_DEPRECATED_RESERVE
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_LIQUIDITY_EMPTY
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_OWNERS_MUST_MATCH
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_RESERVE_LIMIT
  | typeof KAMINO_LENDING_ERROR__OBLIGATIONS_MUST_MATCH
  | typeof KAMINO_LENDING_ERROR__OBLIGATION_STALE
  | typeof KAMINO_LENDING_ERROR__PRICE_CONFIDENCE_TOO_WIDE
  | typeof KAMINO_LENDING_ERROR__PRICE_IS_BIGGER_THAN_HEURISTIC
  | typeof KAMINO_LENDING_ERROR__PRICE_IS_LOWER_THAN_HEURISTIC
  | typeof KAMINO_LENDING_ERROR__PRICE_IS_ZERO
  | typeof KAMINO_LENDING_ERROR__PRICE_NOT_VALID
  | typeof KAMINO_LENDING_ERROR__PRICE_TOO_DIVERGENT_FROM_TWAP
  | typeof KAMINO_LENDING_ERROR__PRICE_TOO_OLD
  | typeof KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_MINT_MISSMATCH
  | typeof KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_MISSING
  | typeof KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_NOT_INITIALIZED
  | typeof KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_REFERRER_MISSMATCH
  | typeof KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_WRONG_ADDRESS
  | typeof KAMINO_LENDING_ERROR__REFERRER_STATE_OWNER_MISMATCH
  | typeof KAMINO_LENDING_ERROR__REPAY_TOO_SMALL
  | typeof KAMINO_LENDING_ERROR__REPAY_TOO_SMALL_FOR_FULL_LIQUIDATION
  | typeof KAMINO_LENDING_ERROR__RESERVE_ACCOUNTING_MISMATCH
  | typeof KAMINO_LENDING_ERROR__RESERVE_DEPRECATED
  | typeof KAMINO_LENDING_ERROR__RESERVE_OBSOLETE
  | typeof KAMINO_LENDING_ERROR__RESERVE_STALE
  | typeof KAMINO_LENDING_ERROR__RESERVE_TOKEN_BALANCE_MISMATCH
  | typeof KAMINO_LENDING_ERROR__RESERVE_VAULT_BALANCE_MISMATCH
  | typeof KAMINO_LENDING_ERROR__SHORT_URL_NOT_ASCII_ALPHANUMERIC
  | typeof KAMINO_LENDING_ERROR__SWITCHBOARD_V2_ERROR
  | typeof KAMINO_LENDING_ERROR__UNHEALTHY_ELEVATION_GROUP_LTV
  | typeof KAMINO_LENDING_ERROR__UNSUPPORTED_TOKEN_EXTENSION
  | typeof KAMINO_LENDING_ERROR__USER_METADATA_OWNER_ALREADY_SET
  | typeof KAMINO_LENDING_ERROR__WITHDRAWAL_CAP_REACHED
  | typeof KAMINO_LENDING_ERROR__WITHDRAW_TOO_LARGE
  | typeof KAMINO_LENDING_ERROR__WITHDRAW_TOO_SMALL
  | typeof KAMINO_LENDING_ERROR__WORSE_L_T_V_BLOCKED
  | typeof KAMINO_LENDING_ERROR__WORSE_L_T_V_THAN_UNHEALTHY_L_T_V
  | typeof KAMINO_LENDING_ERROR__ZERO_MAX_LTV_ASSETS_IN_DEPOSITS;

let kaminoLendingErrorMessages: Record<KaminoLendingError, string> | undefined;
if (true) {
  kaminoLendingErrorMessages = {
    [KAMINO_LENDING_ERROR__BORROWING_ABOVE_UTILIZATION_RATE_DISABLED]:
      "Borrowing above set utilization rate is disabled",
    [KAMINO_LENDING_ERROR__BORROWING_DISABLED]: "Borrowing is disabled",
    [KAMINO_LENDING_ERROR__BORROWING_DISABLED_OUTSIDE_ELEVATION_GROUP]:
      "Reserve does not accept any new borrows outside elevation group",
    [KAMINO_LENDING_ERROR__BORROW_LIMIT_EXCEEDED]:
      "Cannot borrow above borrow limit",
    [KAMINO_LENDING_ERROR__BORROW_TOO_LARGE]:
      "Borrow amount too large for deposited collateral",
    [KAMINO_LENDING_ERROR__BORROW_TOO_SMALL]:
      "Borrow amount too small to receive liquidity after fees",
    [KAMINO_LENDING_ERROR__CANNOT_CALCULATE_REFERRAL_AMOUNT_DUE_TO_SLOTS_MISMATCH]:
      "Cannot calculate referral amount due to slots mismatch",
    [KAMINO_LENDING_ERROR__CANNOT_SOCIALIZE_OBLIGATION_WITH_COLLATERAL]: `Obligation hasn't been fully liquidated and debt cannot be socialized.`,
    [KAMINO_LENDING_ERROR__COLLATERAL_NON_LIQUIDATABLE]:
      "This collateral cannot be liquidated (LTV set to 0)",
    [KAMINO_LENDING_ERROR__COULD_NOT_DESERIALIZE_SCOPE]:
      "Cannot deserialize the scope price account",
    [KAMINO_LENDING_ERROR__CPI_DISABLED]: "CPI disabled for this instruction",
    [KAMINO_LENDING_ERROR__DEPOSIT_DISABLED_OUTSIDE_ELEVATION_GROUP]: `Can't deposit into this reserve outside elevation group`,
    [KAMINO_LENDING_ERROR__DEPOSIT_LIMIT_EXCEEDED]:
      "Cannot deposit above deposit limit",
    [KAMINO_LENDING_ERROR__DEPRECATED_INVALID_OBLIGATION_ID]:
      "[DEPRECATED] Obligation id must be 0",
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_ALREADY_ACTIVATED]:
      "Obligation already part of the same elevation group",
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_BORROW_LIMIT_EXCEEDED]:
      "Elevation group borrow limit exceeded",
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_DEBT_RESERVE_AS_COLLATERAL]: `The elevation group's debt reserve cannot be used as a collateral reserve`,
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_HAS_ANOTHER_DEBT_RESERVE]:
      "In elevation group attempt to borrow from a reserve that is not the debt reserve",
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_MAX_COLLATERAL_RESERVE_ZERO]:
      "The elevation group does not allow any collateral reserves",
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_NEW_LOANS_DISABLED]:
      "Elevation group does not accept any new loans or any new borrows/withdrawals",
    [KAMINO_LENDING_ERROR__ELEVATION_GROUP_WITHOUT_DEBT_RESERVE]:
      "The elevation group does not have a debt reserve defined",
    [KAMINO_LENDING_ERROR__FARM_ACCOUNTS_MISSING]:
      "Farm accounts to refresh are missing",
    [KAMINO_LENDING_ERROR__FLASH_BORROW_CPI]: "No cpi flash borrows allowed",
    [KAMINO_LENDING_ERROR__FLASH_LOANS_DISABLED]:
      "Flash loans are disabled for this reserve",
    [KAMINO_LENDING_ERROR__FLASH_REPAY_CPI]: "No cpi flash repays allowed",
    [KAMINO_LENDING_ERROR__GLOBAL_EMERGENCY_MODE]: "Emergency mode is enabled",
    [KAMINO_LENDING_ERROR__INCONSISTENT_ELEVATION_GROUP]: `The obligation's elevation group and the reserve's are not the same`,
    [KAMINO_LENDING_ERROR__INCORRECT_INSTRUCTION_IN_POSITION]:
      "Wrong instruction at expected position",
    [KAMINO_LENDING_ERROR__INSUFFICIENT_LIQUIDITY]:
      "Insufficient liquidity available",
    [KAMINO_LENDING_ERROR__INSUFFICIENT_PROTOCOL_FEES_TO_REDEEM]:
      "Insufficient protocol fees to claim or no liquidity available",
    [KAMINO_LENDING_ERROR__INSUFFICIENT_REFERRAL_FEES_TO_REDEEM]:
      "Insufficient referral fees to claim or no liquidity available",
    [KAMINO_LENDING_ERROR__INSUFFICIENT_REPAY_AMOUNT]:
      "Liquidator provided repay amount lower than required by liquidation rules",
    [KAMINO_LENDING_ERROR__INTEGER_OVERFLOW]:
      "Conversion between integers failed",
    [KAMINO_LENDING_ERROR__INVALID_ACCOUNT_INPUT]: "Invalid account input",
    [KAMINO_LENDING_ERROR__INVALID_ACCOUNT_OWNER]:
      "Input account owner is not the program address",
    [KAMINO_LENDING_ERROR__INVALID_AMOUNT]: "Input amount is invalid",
    [KAMINO_LENDING_ERROR__INVALID_BORROW_RATE_CURVE_POINT]:
      "Invalid borrow rate curve point",
    [KAMINO_LENDING_ERROR__INVALID_CONFIG]: "Input config value is invalid",
    [KAMINO_LENDING_ERROR__INVALID_ELEVATION_GROUP]:
      "The elevation group chosen for the reserve does not exist in the lending market",
    [KAMINO_LENDING_ERROR__INVALID_ELEVATION_GROUP_CONFIG]:
      "The elevation group updated has wrong parameters set",
    [KAMINO_LENDING_ERROR__INVALID_FLAG]: "Invalid lending market config",
    [KAMINO_LENDING_ERROR__INVALID_FLASH_REPAY]: "Invalid repay found",
    [KAMINO_LENDING_ERROR__INVALID_MARKET_AUTHORITY]:
      "Market authority is invalid",
    [KAMINO_LENDING_ERROR__INVALID_MARKET_OWNER]: "Market owner is invalid",
    [KAMINO_LENDING_ERROR__INVALID_OBLIGATION_COLLATERAL]:
      "Invalid obligation collateral",
    [KAMINO_LENDING_ERROR__INVALID_OBLIGATION_LIQUIDITY]:
      "Invalid obligation liquidity",
    [KAMINO_LENDING_ERROR__INVALID_OBLIGATION_OWNER]:
      "Obligation owner is invalid",
    [KAMINO_LENDING_ERROR__INVALID_OBLIGATION_SEEDS_VALUE]:
      "Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2",
    [KAMINO_LENDING_ERROR__INVALID_ORACLE_CONFIG]:
      "Input oracle config is invalid",
    [KAMINO_LENDING_ERROR__INVALID_PYTH_PRICE_ACCOUNT]:
      "Pyth price account does not match configuration",
    [KAMINO_LENDING_ERROR__INVALID_SCOPE_PRICE_ACCOUNT]:
      "Scope price account does not match configuration",
    [KAMINO_LENDING_ERROR__INVALID_SIGNER]: "Input account must be a signer",
    [KAMINO_LENDING_ERROR__INVALID_SWITCHBOARD_ACCOUNT]:
      "Switchboard account(s) do not match configuration",
    [KAMINO_LENDING_ERROR__INVALID_TOKEN_ACCOUNT]: `Can't have an spl token mint with a t22 account`,
    [KAMINO_LENDING_ERROR__INVALID_TWAP_CONFIG]: `Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap`,
    [KAMINO_LENDING_ERROR__INVALID_TWAP_PRICE]: "Invalid twap price",
    [KAMINO_LENDING_ERROR__INVALID_UTILIZATION_RATE]:
      "Invalid utilization rate",
    [KAMINO_LENDING_ERROR__ISOLATED_ASSET_TIER_VIOLATION]:
      "Isolated Asset Tier Violation",
    [KAMINO_LENDING_ERROR__LAST_TIMESTAMP_GREATER_THAN_CURRENT]:
      "The last interval start timestamp is greater than the current timestamp",
    [KAMINO_LENDING_ERROR__LENDING_MARKETS_MUST_MATCH]:
      "Lending markets must match",
    [KAMINO_LENDING_ERROR__LIABILITIES_BIGGER_THAN_ASSETS]:
      "Cannot have more liabilities than assets in a position",
    [KAMINO_LENDING_ERROR__LIQUIDATION_BORROW_FACTOR_PRIORITY]:
      "Liquidation must prioritize the debt with the highest borrow factor",
    [KAMINO_LENDING_ERROR__LIQUIDATION_LOWEST_L_T_V_PRIORITY]:
      "Liquidation must prioritize the collateral with the lowest LTV",
    [KAMINO_LENDING_ERROR__LIQUIDATION_REWARD_TOO_SMALL]:
      "The reward amount is less than the minimum acceptable received liquidity",
    [KAMINO_LENDING_ERROR__LIQUIDATION_TOO_SMALL]:
      "Liquidation amount too small to receive collateral",
    [KAMINO_LENDING_ERROR__MATH_OVERFLOW]: "Math operation overflow",
    [KAMINO_LENDING_ERROR__MAXIMUM_WITHDRAW_VALUE_ZERO]:
      "Maximum withdrawable value of this collateral is zero, LTV needs improved",
    [KAMINO_LENDING_ERROR__MIN_LTV_ASSETS_PRIORITY]:
      "The operation must prioritize the collateral with the lowest LTV",
    [KAMINO_LENDING_ERROR__MULTIPLE_FLASH_BORROWS]:
      "Multiple flash borrows not allowed in the same transaction",
    [KAMINO_LENDING_ERROR__NEGATIVE_INTEREST_RATE]: "Interest rate is negative",
    [KAMINO_LENDING_ERROR__NET_VALUE_REMAINING_TOO_SMALL]:
      "Net value remaining too small",
    [KAMINO_LENDING_ERROR__NO_FARM_FOR_RESERVE]:
      "This reserve does not have a farm",
    [KAMINO_LENDING_ERROR__NO_FLASH_REPAY_FOUND]:
      "No corresponding repay found for flash borrow",
    [KAMINO_LENDING_ERROR__NO_PRICE_FOUND]: "No price found",
    [KAMINO_LENDING_ERROR__OBLIGATION_BORROWS_EMPTY]:
      "Obligation borrows are empty",
    [KAMINO_LENDING_ERROR__OBLIGATION_BORROWS_ZERO]:
      "Obligation borrows have zero value",
    [KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_EMPTY]:
      "Obligation collateral is empty",
    [KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_EXCEEDS_ELEVATION_GROUP_LIMIT]:
      "Obligation have more collateral than the maximum allowed by the elevation group",
    [KAMINO_LENDING_ERROR__OBLIGATION_COLLATERAL_LTV_ZERO]:
      "The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals",
    [KAMINO_LENDING_ERROR__OBLIGATION_CURRENTLY_MARKED_FOR_DELEVERAGING]:
      "Obligation is already marked for deleveraging",
    [KAMINO_LENDING_ERROR__OBLIGATION_DEPOSITS_EMPTY]:
      "Obligation deposits are empty",
    [KAMINO_LENDING_ERROR__OBLIGATION_DEPOSITS_ZERO]:
      "Obligation deposits have zero value",
    [KAMINO_LENDING_ERROR__OBLIGATION_ELEVATION_GROUP_MULTIPLE_DEBT_RESERVE]:
      "Obligation is an elevation group but have more than one debt reserve",
    [KAMINO_LENDING_ERROR__OBLIGATION_EMPTY]:
      "Obligation has no borrows or deposits.",
    [KAMINO_LENDING_ERROR__OBLIGATION_HEALTHY]:
      "Cannot liquidate healthy obligations",
    [KAMINO_LENDING_ERROR__OBLIGATION_IN_DEPRECATED_RESERVE]:
      "Obligation has a deposit in a deprecated reserve",
    [KAMINO_LENDING_ERROR__OBLIGATION_LIQUIDITY_EMPTY]:
      "Obligation liquidity is empty",
    [KAMINO_LENDING_ERROR__OBLIGATION_OWNERS_MUST_MATCH]:
      "Obligation owners must match",
    [KAMINO_LENDING_ERROR__OBLIGATION_RESERVE_LIMIT]:
      "Obligation reserve limit exceeded",
    [KAMINO_LENDING_ERROR__OBLIGATIONS_MUST_MATCH]: "Obligations must match",
    [KAMINO_LENDING_ERROR__OBLIGATION_STALE]:
      "Obligation state needs to be refreshed",
    [KAMINO_LENDING_ERROR__PRICE_CONFIDENCE_TOO_WIDE]:
      "Price confidence too wide",
    [KAMINO_LENDING_ERROR__PRICE_IS_BIGGER_THAN_HEURISTIC]:
      "Price is bigger than allowed by heuristic",
    [KAMINO_LENDING_ERROR__PRICE_IS_LOWER_THAN_HEURISTIC]:
      "Price lower than allowed by heuristic",
    [KAMINO_LENDING_ERROR__PRICE_IS_ZERO]: "Price is zero",
    [KAMINO_LENDING_ERROR__PRICE_NOT_VALID]: "Price is not valid",
    [KAMINO_LENDING_ERROR__PRICE_TOO_DIVERGENT_FROM_TWAP]:
      "Price too divergent from twap",
    [KAMINO_LENDING_ERROR__PRICE_TOO_OLD]: "Price too old",
    [KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_MINT_MISSMATCH]:
      "Referrer account mint does not match the operation reserve mint",
    [KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_MISSING]:
      "Referrer account missing for obligation with referrer",
    [KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_NOT_INITIALIZED]:
      "Referrer account not initialized",
    [KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_REFERRER_MISSMATCH]:
      "Referrer account referrer does not match the owner referrer",
    [KAMINO_LENDING_ERROR__REFERRER_ACCOUNT_WRONG_ADDRESS]:
      "Referrer account address is not a valid program address",
    [KAMINO_LENDING_ERROR__REFERRER_STATE_OWNER_MISMATCH]:
      "Referrer state owner does not match the given signer",
    [KAMINO_LENDING_ERROR__REPAY_TOO_SMALL]:
      "Repay amount too small to transfer liquidity",
    [KAMINO_LENDING_ERROR__REPAY_TOO_SMALL_FOR_FULL_LIQUIDATION]:
      "Repay amount is too small to satisfy the mandatory full liquidation",
    [KAMINO_LENDING_ERROR__RESERVE_ACCOUNTING_MISMATCH]:
      "Reserve internal state accounting has been unexpectedly modified",
    [KAMINO_LENDING_ERROR__RESERVE_DEPRECATED]:
      "Reserve was deprecated, no longer usable",
    [KAMINO_LENDING_ERROR__RESERVE_OBSOLETE]: "Reserve is marked as obsolete",
    [KAMINO_LENDING_ERROR__RESERVE_STALE]:
      "Reserve state needs to be refreshed",
    [KAMINO_LENDING_ERROR__RESERVE_TOKEN_BALANCE_MISMATCH]:
      "Reserve state and token account cannot drift",
    [KAMINO_LENDING_ERROR__RESERVE_VAULT_BALANCE_MISMATCH]:
      "Reserve token account has been unexpectedly modified",
    [KAMINO_LENDING_ERROR__SHORT_URL_NOT_ASCII_ALPHANUMERIC]:
      "Referrer short_url is not ascii alphanumeric",
    [KAMINO_LENDING_ERROR__SWITCHBOARD_V2_ERROR]: "Switchboard error",
    [KAMINO_LENDING_ERROR__UNHEALTHY_ELEVATION_GROUP_LTV]:
      "The current obligation must have most or all its debt repaid before changing the elevation group",
    [KAMINO_LENDING_ERROR__UNSUPPORTED_TOKEN_EXTENSION]:
      "Mint has a token (2022) extension that is not supported",
    [KAMINO_LENDING_ERROR__USER_METADATA_OWNER_ALREADY_SET]:
      "User metadata owner is already set",
    [KAMINO_LENDING_ERROR__WITHDRAWAL_CAP_REACHED]: "Withdrawal cap is reached",
    [KAMINO_LENDING_ERROR__WITHDRAW_TOO_LARGE]: "Withdraw amount too large",
    [KAMINO_LENDING_ERROR__WITHDRAW_TOO_SMALL]: "Withdraw amount too small",
    [KAMINO_LENDING_ERROR__WORSE_L_T_V_BLOCKED]:
      "Cannot get the obligation in a worse position",
    [KAMINO_LENDING_ERROR__WORSE_L_T_V_THAN_UNHEALTHY_L_T_V]:
      "Cannot get the obligation liquidatable",
    [KAMINO_LENDING_ERROR__ZERO_MAX_LTV_ASSETS_IN_DEPOSITS]:
      "No max LTV 0 assets allowed in deposits for repay and withdraw",
  };
}

export function getKaminoLendingErrorMessage(code: KaminoLendingError): string {
  if (true) {
    return kaminoLendingErrorMessages![code];
  }

  return "Error message not available in production bundles.";
}

export function isKaminoLendingError<
  TProgramErrorCode extends KaminoLendingError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    KAMINO_LENDING_PROGRAM_ADDRESS,
    code,
  );
}
