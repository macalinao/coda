/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type {
  LastUpdate,
  LastUpdateArgs,
  ReserveCollateral,
  ReserveCollateralArgs,
  ReserveConfig,
  ReserveConfigArgs,
  ReserveLiquidity,
  ReserveLiquidityArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import {
  getLastUpdateDecoder,
  getLastUpdateEncoder,
  getReserveCollateralDecoder,
  getReserveCollateralEncoder,
  getReserveConfigDecoder,
  getReserveConfigEncoder,
  getReserveLiquidityDecoder,
  getReserveLiquidityEncoder,
} from "../types/index.js";

export const RESERVE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  43, 242, 204, 202, 26, 247, 59, 127,
]);

export function getReserveDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(RESERVE_DISCRIMINATOR);
}

export interface Reserve {
  discriminator: ReadonlyUint8Array;
  version: bigint;
  lastUpdate: LastUpdate;
  lendingMarket: Address;
  farmCollateral: Address;
  farmDebt: Address;
  liquidity: ReserveLiquidity;
  reserveLiquidityPadding: bigint[];
  collateral: ReserveCollateral;
  reserveCollateralPadding: bigint[];
  config: ReserveConfig;
  configPadding: bigint[];
  borrowedAmountOutsideElevationGroup: bigint;
  borrowedAmountsAgainstThisReserveInElevationGroups: bigint[];
  padding: bigint[];
}

export interface ReserveArgs {
  version: number | bigint;
  lastUpdate: LastUpdateArgs;
  lendingMarket: Address;
  farmCollateral: Address;
  farmDebt: Address;
  liquidity: ReserveLiquidityArgs;
  reserveLiquidityPadding: (number | bigint)[];
  collateral: ReserveCollateralArgs;
  reserveCollateralPadding: (number | bigint)[];
  config: ReserveConfigArgs;
  configPadding: (number | bigint)[];
  borrowedAmountOutsideElevationGroup: number | bigint;
  borrowedAmountsAgainstThisReserveInElevationGroups: (number | bigint)[];
  padding: (number | bigint)[];
}

export function getReserveEncoder(): FixedSizeEncoder<ReserveArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["version", getU64Encoder()],
      ["lastUpdate", getLastUpdateEncoder()],
      ["lendingMarket", getAddressEncoder()],
      ["farmCollateral", getAddressEncoder()],
      ["farmDebt", getAddressEncoder()],
      ["liquidity", getReserveLiquidityEncoder()],
      [
        "reserveLiquidityPadding",
        getArrayEncoder(getU64Encoder(), { size: 150 }),
      ],
      ["collateral", getReserveCollateralEncoder()],
      [
        "reserveCollateralPadding",
        getArrayEncoder(getU64Encoder(), { size: 150 }),
      ],
      ["config", getReserveConfigEncoder()],
      ["configPadding", getArrayEncoder(getU64Encoder(), { size: 116 })],
      ["borrowedAmountOutsideElevationGroup", getU64Encoder()],
      [
        "borrowedAmountsAgainstThisReserveInElevationGroups",
        getArrayEncoder(getU64Encoder(), { size: 32 }),
      ],
      ["padding", getArrayEncoder(getU64Encoder(), { size: 207 })],
    ]),
    (value) => ({ ...value, discriminator: RESERVE_DISCRIMINATOR }),
  );
}

export function getReserveDecoder(): FixedSizeDecoder<Reserve> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["version", getU64Decoder()],
    ["lastUpdate", getLastUpdateDecoder()],
    ["lendingMarket", getAddressDecoder()],
    ["farmCollateral", getAddressDecoder()],
    ["farmDebt", getAddressDecoder()],
    ["liquidity", getReserveLiquidityDecoder()],
    [
      "reserveLiquidityPadding",
      getArrayDecoder(getU64Decoder(), { size: 150 }),
    ],
    ["collateral", getReserveCollateralDecoder()],
    [
      "reserveCollateralPadding",
      getArrayDecoder(getU64Decoder(), { size: 150 }),
    ],
    ["config", getReserveConfigDecoder()],
    ["configPadding", getArrayDecoder(getU64Decoder(), { size: 116 })],
    ["borrowedAmountOutsideElevationGroup", getU64Decoder()],
    [
      "borrowedAmountsAgainstThisReserveInElevationGroups",
      getArrayDecoder(getU64Decoder(), { size: 32 }),
    ],
    ["padding", getArrayDecoder(getU64Decoder(), { size: 207 })],
  ]);
}

export function getReserveCodec(): FixedSizeCodec<ReserveArgs, Reserve> {
  return combineCodec(getReserveEncoder(), getReserveDecoder());
}

export function decodeReserve<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Reserve, TAddress>;
export function decodeReserve<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Reserve, TAddress>;
export function decodeReserve<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Reserve, TAddress> | MaybeAccount<Reserve, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReserveDecoder(),
  );
}

export async function fetchReserve<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Reserve, TAddress>> {
  const maybeAccount = await fetchMaybeReserve(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReserve<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Reserve, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReserve(maybeAccount);
}

export async function fetchAllReserve(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Reserve>[]> {
  const maybeAccounts = await fetchAllMaybeReserve(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReserve(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Reserve>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeReserve(maybeAccount));
}
