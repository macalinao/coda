/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";

export const USER_METADATA_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  157, 214, 220, 235, 98, 135, 171, 28,
]);

export function getUserMetadataDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_METADATA_DISCRIMINATOR,
  );
}

export interface UserMetadata {
  discriminator: ReadonlyUint8Array;
  referrer: Address;
  bump: bigint;
  userLookupTable: Address;
  owner: Address;
  padding1: bigint[];
  padding2: bigint[];
}

export interface UserMetadataArgs {
  referrer: Address;
  bump: number | bigint;
  userLookupTable: Address;
  owner: Address;
  padding1: (number | bigint)[];
  padding2: (number | bigint)[];
}

export function getUserMetadataEncoder(): FixedSizeEncoder<UserMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["referrer", getAddressEncoder()],
      ["bump", getU64Encoder()],
      ["userLookupTable", getAddressEncoder()],
      ["owner", getAddressEncoder()],
      ["padding1", getArrayEncoder(getU64Encoder(), { size: 51 })],
      ["padding2", getArrayEncoder(getU64Encoder(), { size: 64 })],
    ]),
    (value) => ({ ...value, discriminator: USER_METADATA_DISCRIMINATOR }),
  );
}

export function getUserMetadataDecoder(): FixedSizeDecoder<UserMetadata> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["referrer", getAddressDecoder()],
    ["bump", getU64Decoder()],
    ["userLookupTable", getAddressDecoder()],
    ["owner", getAddressDecoder()],
    ["padding1", getArrayDecoder(getU64Decoder(), { size: 51 })],
    ["padding2", getArrayDecoder(getU64Decoder(), { size: 64 })],
  ]);
}

export function getUserMetadataCodec(): FixedSizeCodec<
  UserMetadataArgs,
  UserMetadata
> {
  return combineCodec(getUserMetadataEncoder(), getUserMetadataDecoder());
}

export function decodeUserMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<UserMetadata, TAddress>;
export function decodeUserMetadata<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<UserMetadata, TAddress>;
export function decodeUserMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<UserMetadata, TAddress> | MaybeAccount<UserMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserMetadataDecoder(),
  );
}

export async function fetchUserMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<UserMetadata, TAddress>> {
  const maybeAccount = await fetchMaybeUserMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<UserMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserMetadata(maybeAccount);
}

export async function fetchAllUserMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<UserMetadata>[]> {
  const maybeAccounts = await fetchAllMaybeUserMetadata(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<UserMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserMetadata(maybeAccount));
}
