/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { ReferrerStateSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { findReferrerStatePda } from "../pdas/index.js";

export const REFERRER_STATE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  194, 81, 217, 103, 12, 19, 12, 66,
]);

export function getReferrerStateDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFERRER_STATE_DISCRIMINATOR,
  );
}

export interface ReferrerState {
  discriminator: ReadonlyUint8Array;
  shortUrl: Address;
  owner: Address;
}

export interface ReferrerStateArgs {
  shortUrl: Address;
  owner: Address;
}

export function getReferrerStateEncoder(): FixedSizeEncoder<ReferrerStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["shortUrl", getAddressEncoder()],
      ["owner", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: REFERRER_STATE_DISCRIMINATOR }),
  );
}

export function getReferrerStateDecoder(): FixedSizeDecoder<ReferrerState> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["shortUrl", getAddressDecoder()],
    ["owner", getAddressDecoder()],
  ]);
}

export function getReferrerStateCodec(): FixedSizeCodec<
  ReferrerStateArgs,
  ReferrerState
> {
  return combineCodec(getReferrerStateEncoder(), getReferrerStateDecoder());
}

export function decodeReferrerState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ReferrerState, TAddress>;
export function decodeReferrerState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ReferrerState, TAddress>;
export function decodeReferrerState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<ReferrerState, TAddress> | MaybeAccount<ReferrerState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReferrerStateDecoder(),
  );
}

export async function fetchReferrerState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ReferrerState, TAddress>> {
  const maybeAccount = await fetchMaybeReferrerState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReferrerState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ReferrerState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReferrerState(maybeAccount);
}

export async function fetchAllReferrerState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ReferrerState>[]> {
  const maybeAccounts = await fetchAllMaybeReferrerState(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReferrerState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ReferrerState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeReferrerState(maybeAccount));
}

export async function fetchReferrerStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ReferrerStateSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<ReferrerState>> {
  const maybeAccount = await fetchMaybeReferrerStateFromSeeds(
    rpc,
    seeds,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReferrerStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ReferrerStateSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<ReferrerState>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findReferrerStatePda(seeds, { programAddress });
  return await fetchMaybeReferrerState(rpc, address, fetchConfig);
}
