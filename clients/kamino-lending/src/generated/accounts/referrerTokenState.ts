/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
} from "@solana/kit";

export const REFERRER_TOKEN_STATE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([39, 15, 208, 77, 32, 195, 105, 56]);

export function getReferrerTokenStateDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFERRER_TOKEN_STATE_DISCRIMINATOR,
  );
}

export interface ReferrerTokenState {
  discriminator: ReadonlyUint8Array;
  referrer: Address;
  mint: Address;
  amountUnclaimedSf: bigint;
  amountCumulativeSf: bigint;
  bump: bigint;
  padding: bigint[];
}

export interface ReferrerTokenStateArgs {
  referrer: Address;
  mint: Address;
  amountUnclaimedSf: number | bigint;
  amountCumulativeSf: number | bigint;
  bump: number | bigint;
  padding: (number | bigint)[];
}

export function getReferrerTokenStateEncoder(): FixedSizeEncoder<ReferrerTokenStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["referrer", getAddressEncoder()],
      ["mint", getAddressEncoder()],
      ["amountUnclaimedSf", getU128Encoder()],
      ["amountCumulativeSf", getU128Encoder()],
      ["bump", getU64Encoder()],
      ["padding", getArrayEncoder(getU64Encoder(), { size: 31 })],
    ]),
    (value) => ({
      ...value,
      discriminator: REFERRER_TOKEN_STATE_DISCRIMINATOR,
    }),
  );
}

export function getReferrerTokenStateDecoder(): FixedSizeDecoder<ReferrerTokenState> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["referrer", getAddressDecoder()],
    ["mint", getAddressDecoder()],
    ["amountUnclaimedSf", getU128Decoder()],
    ["amountCumulativeSf", getU128Decoder()],
    ["bump", getU64Decoder()],
    ["padding", getArrayDecoder(getU64Decoder(), { size: 31 })],
  ]);
}

export function getReferrerTokenStateCodec(): FixedSizeCodec<
  ReferrerTokenStateArgs,
  ReferrerTokenState
> {
  return combineCodec(
    getReferrerTokenStateEncoder(),
    getReferrerTokenStateDecoder(),
  );
}

export function decodeReferrerTokenState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ReferrerTokenState, TAddress>;
export function decodeReferrerTokenState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ReferrerTokenState, TAddress>;
export function decodeReferrerTokenState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<ReferrerTokenState, TAddress>
  | MaybeAccount<ReferrerTokenState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReferrerTokenStateDecoder(),
  );
}

export async function fetchReferrerTokenState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ReferrerTokenState, TAddress>> {
  const maybeAccount = await fetchMaybeReferrerTokenState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReferrerTokenState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ReferrerTokenState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReferrerTokenState(maybeAccount);
}

export async function fetchAllReferrerTokenState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ReferrerTokenState>[]> {
  const maybeAccounts = await fetchAllMaybeReferrerTokenState(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReferrerTokenState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ReferrerTokenState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeReferrerTokenState(maybeAccount),
  );
}
