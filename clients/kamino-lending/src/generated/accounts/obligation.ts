/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { ObligationSeeds } from "../pdas/index.js";
import type {
  LastUpdate,
  LastUpdateArgs,
  ObligationCollateral,
  ObligationCollateralArgs,
  ObligationLiquidity,
  ObligationLiquidityArgs,
  ObligationOrder,
  ObligationOrderArgs,
} from "../types/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
} from "@solana/kit";
import { findObligationPda } from "../pdas/index.js";
import {
  getLastUpdateDecoder,
  getLastUpdateEncoder,
  getObligationCollateralDecoder,
  getObligationCollateralEncoder,
  getObligationLiquidityDecoder,
  getObligationLiquidityEncoder,
  getObligationOrderDecoder,
  getObligationOrderEncoder,
} from "../types/index.js";

export const OBLIGATION_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  168, 206, 141, 106, 88, 76, 172, 167,
]);

export function getObligationDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(OBLIGATION_DISCRIMINATOR);
}

export interface Obligation {
  discriminator: ReadonlyUint8Array;
  /** Version of the struct */
  tag: bigint;
  /** Last update to collateral, liquidity, or their market values */
  lastUpdate: LastUpdate;
  /** Lending market address */
  lendingMarket: Address;
  /** Owner authority which can borrow liquidity */
  owner: Address;
  /** Deposited collateral for the obligation, unique by deposit reserve address */
  deposits: ObligationCollateral[];
  /** Worst LTV for the collaterals backing the loan, represented as a percentage */
  lowestReserveDepositLiquidationLtv: bigint;
  /** Market value of deposits (scaled fraction) */
  depositedValueSf: bigint;
  /** Borrowed liquidity for the obligation, unique by borrow reserve address */
  borrows: ObligationLiquidity[];
  /** Risk adjusted market value of borrows/debt (sum of price * borrowed_amount * borrow_factor) (scaled fraction) */
  borrowFactorAdjustedDebtValueSf: bigint;
  /** Market value of borrows - used for max_liquidatable_borrowed_amount (scaled fraction) */
  borrowedAssetsMarketValueSf: bigint;
  /** The maximum borrow value at the weighted average loan to value ratio (scaled fraction) */
  allowedBorrowValueSf: bigint;
  /** The dangerous borrow value at the weighted average liquidation threshold (scaled fraction) */
  unhealthyBorrowValueSf: bigint;
  /** The asset tier of the deposits */
  depositsAssetTiers: number[];
  /** The asset tier of the borrows */
  borrowsAssetTiers: number[];
  /** The elevation group id the obligation opted into. */
  elevationGroup: number;
  /** The number of obsolete reserves the obligation has a deposit in */
  numOfObsoleteDepositReserves: number;
  /** Marked = 1 if borrows array is not empty, 0 = borrows empty */
  hasDebt: number;
  /** Wallet address of the referrer */
  referrer: Address;
  /** Marked = 1 if borrowing disabled, 0 = borrowing enabled */
  borrowingDisabled: number;
  /**
   * A target LTV set by the risk council when marking this obligation for deleveraging.
   * Only effective when `deleveraging_margin_call_started_slot != 0`.
   */
  autodeleverageTargetLtvPct: number;
  /** The lowest max LTV found amongst the collateral deposits */
  lowestReserveDepositMaxLtvPct: number;
  /** The number of obsolete reserves the obligation has a borrow in */
  numOfObsoleteBorrowReserves: number;
  reserved: number[];
  highestBorrowFactorPct: bigint;
  /**
   * A timestamp at which the risk council most-recently marked this obligation for deleveraging.
   * Zero if not currently subject to deleveraging.
   */
  autodeleverageMarginCallStartedTimestamp: bigint;
  /**
   * Owner-defined, liquidator-executed orders applicable to this obligation.
   * Typical use-cases would be a stop-loss and a take-profit (possibly co-existing).
   */
  orders: ObligationOrder[];
  padding3: bigint[];
}

export interface ObligationArgs {
  /** Version of the struct */
  tag: number | bigint;
  /** Last update to collateral, liquidity, or their market values */
  lastUpdate: LastUpdateArgs;
  /** Lending market address */
  lendingMarket: Address;
  /** Owner authority which can borrow liquidity */
  owner: Address;
  /** Deposited collateral for the obligation, unique by deposit reserve address */
  deposits: ObligationCollateralArgs[];
  /** Worst LTV for the collaterals backing the loan, represented as a percentage */
  lowestReserveDepositLiquidationLtv: number | bigint;
  /** Market value of deposits (scaled fraction) */
  depositedValueSf: number | bigint;
  /** Borrowed liquidity for the obligation, unique by borrow reserve address */
  borrows: ObligationLiquidityArgs[];
  /** Risk adjusted market value of borrows/debt (sum of price * borrowed_amount * borrow_factor) (scaled fraction) */
  borrowFactorAdjustedDebtValueSf: number | bigint;
  /** Market value of borrows - used for max_liquidatable_borrowed_amount (scaled fraction) */
  borrowedAssetsMarketValueSf: number | bigint;
  /** The maximum borrow value at the weighted average loan to value ratio (scaled fraction) */
  allowedBorrowValueSf: number | bigint;
  /** The dangerous borrow value at the weighted average liquidation threshold (scaled fraction) */
  unhealthyBorrowValueSf: number | bigint;
  /** The asset tier of the deposits */
  depositsAssetTiers: number[];
  /** The asset tier of the borrows */
  borrowsAssetTiers: number[];
  /** The elevation group id the obligation opted into. */
  elevationGroup: number;
  /** The number of obsolete reserves the obligation has a deposit in */
  numOfObsoleteDepositReserves: number;
  /** Marked = 1 if borrows array is not empty, 0 = borrows empty */
  hasDebt: number;
  /** Wallet address of the referrer */
  referrer: Address;
  /** Marked = 1 if borrowing disabled, 0 = borrowing enabled */
  borrowingDisabled: number;
  /**
   * A target LTV set by the risk council when marking this obligation for deleveraging.
   * Only effective when `deleveraging_margin_call_started_slot != 0`.
   */
  autodeleverageTargetLtvPct: number;
  /** The lowest max LTV found amongst the collateral deposits */
  lowestReserveDepositMaxLtvPct: number;
  /** The number of obsolete reserves the obligation has a borrow in */
  numOfObsoleteBorrowReserves: number;
  reserved: number[];
  highestBorrowFactorPct: number | bigint;
  /**
   * A timestamp at which the risk council most-recently marked this obligation for deleveraging.
   * Zero if not currently subject to deleveraging.
   */
  autodeleverageMarginCallStartedTimestamp: number | bigint;
  /**
   * Owner-defined, liquidator-executed orders applicable to this obligation.
   * Typical use-cases would be a stop-loss and a take-profit (possibly co-existing).
   */
  orders: ObligationOrderArgs[];
  padding3: (number | bigint)[];
}

export function getObligationEncoder(): FixedSizeEncoder<ObligationArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["tag", getU64Encoder()],
      ["lastUpdate", getLastUpdateEncoder()],
      ["lendingMarket", getAddressEncoder()],
      ["owner", getAddressEncoder()],
      [
        "deposits",
        getArrayEncoder(getObligationCollateralEncoder(), { size: 8 }),
      ],
      ["lowestReserveDepositLiquidationLtv", getU64Encoder()],
      ["depositedValueSf", getU128Encoder()],
      [
        "borrows",
        getArrayEncoder(getObligationLiquidityEncoder(), { size: 5 }),
      ],
      ["borrowFactorAdjustedDebtValueSf", getU128Encoder()],
      ["borrowedAssetsMarketValueSf", getU128Encoder()],
      ["allowedBorrowValueSf", getU128Encoder()],
      ["unhealthyBorrowValueSf", getU128Encoder()],
      ["depositsAssetTiers", getArrayEncoder(getU8Encoder(), { size: 8 })],
      ["borrowsAssetTiers", getArrayEncoder(getU8Encoder(), { size: 5 })],
      ["elevationGroup", getU8Encoder()],
      ["numOfObsoleteDepositReserves", getU8Encoder()],
      ["hasDebt", getU8Encoder()],
      ["referrer", getAddressEncoder()],
      ["borrowingDisabled", getU8Encoder()],
      ["autodeleverageTargetLtvPct", getU8Encoder()],
      ["lowestReserveDepositMaxLtvPct", getU8Encoder()],
      ["numOfObsoleteBorrowReserves", getU8Encoder()],
      ["reserved", getArrayEncoder(getU8Encoder(), { size: 4 })],
      ["highestBorrowFactorPct", getU64Encoder()],
      ["autodeleverageMarginCallStartedTimestamp", getU64Encoder()],
      ["orders", getArrayEncoder(getObligationOrderEncoder(), { size: 2 })],
      ["padding3", getArrayEncoder(getU64Encoder(), { size: 93 })],
    ]),
    (value) => ({ ...value, discriminator: OBLIGATION_DISCRIMINATOR }),
  );
}

export function getObligationDecoder(): FixedSizeDecoder<Obligation> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["tag", getU64Decoder()],
    ["lastUpdate", getLastUpdateDecoder()],
    ["lendingMarket", getAddressDecoder()],
    ["owner", getAddressDecoder()],
    [
      "deposits",
      getArrayDecoder(getObligationCollateralDecoder(), { size: 8 }),
    ],
    ["lowestReserveDepositLiquidationLtv", getU64Decoder()],
    ["depositedValueSf", getU128Decoder()],
    ["borrows", getArrayDecoder(getObligationLiquidityDecoder(), { size: 5 })],
    ["borrowFactorAdjustedDebtValueSf", getU128Decoder()],
    ["borrowedAssetsMarketValueSf", getU128Decoder()],
    ["allowedBorrowValueSf", getU128Decoder()],
    ["unhealthyBorrowValueSf", getU128Decoder()],
    ["depositsAssetTiers", getArrayDecoder(getU8Decoder(), { size: 8 })],
    ["borrowsAssetTiers", getArrayDecoder(getU8Decoder(), { size: 5 })],
    ["elevationGroup", getU8Decoder()],
    ["numOfObsoleteDepositReserves", getU8Decoder()],
    ["hasDebt", getU8Decoder()],
    ["referrer", getAddressDecoder()],
    ["borrowingDisabled", getU8Decoder()],
    ["autodeleverageTargetLtvPct", getU8Decoder()],
    ["lowestReserveDepositMaxLtvPct", getU8Decoder()],
    ["numOfObsoleteBorrowReserves", getU8Decoder()],
    ["reserved", getArrayDecoder(getU8Decoder(), { size: 4 })],
    ["highestBorrowFactorPct", getU64Decoder()],
    ["autodeleverageMarginCallStartedTimestamp", getU64Decoder()],
    ["orders", getArrayDecoder(getObligationOrderDecoder(), { size: 2 })],
    ["padding3", getArrayDecoder(getU64Decoder(), { size: 93 })],
  ]);
}

export function getObligationCodec(): FixedSizeCodec<
  ObligationArgs,
  Obligation
> {
  return combineCodec(getObligationEncoder(), getObligationDecoder());
}

export function decodeObligation<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Obligation, TAddress>;
export function decodeObligation<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Obligation, TAddress>;
export function decodeObligation<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Obligation, TAddress> | MaybeAccount<Obligation, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getObligationDecoder(),
  );
}

export async function fetchObligation<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Obligation, TAddress>> {
  const maybeAccount = await fetchMaybeObligation(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeObligation<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Obligation, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeObligation(maybeAccount);
}

export async function fetchAllObligation(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Obligation>[]> {
  const maybeAccounts = await fetchAllMaybeObligation(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeObligation(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Obligation>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeObligation(maybeAccount));
}

export async function fetchObligationFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ObligationSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Obligation>> {
  const maybeAccount = await fetchMaybeObligationFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeObligationFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ObligationSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Obligation>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findObligationPda(seeds, { programAddress });
  return await fetchMaybeObligation(rpc, address, fetchConfig);
}
