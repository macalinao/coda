/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findLendingGlobalConfigStatePda } from "../pdas/index.js";

export const LENDING_GLOBAL_CONFIG_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([149, 8, 156, 202, 160, 252, 176, 217]);

export function getLendingGlobalConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LENDING_GLOBAL_CONFIG_DISCRIMINATOR,
  );
}

export interface LendingGlobalConfig {
  discriminator: ReadonlyUint8Array;
  /** Global admin of the program */
  globalAdmin: Address;
  /** Pending admin must sign a specific transaction to become the global admin */
  pendingAdmin: Address;
  /** Fee collector is the only allowed owner of token accounts receiving protocol fees */
  feeCollector: Address;
  /** Padding to make the struct size 1024 bytes */
  padding: number[];
}

export interface LendingGlobalConfigArgs {
  /** Global admin of the program */
  globalAdmin: Address;
  /** Pending admin must sign a specific transaction to become the global admin */
  pendingAdmin: Address;
  /** Fee collector is the only allowed owner of token accounts receiving protocol fees */
  feeCollector: Address;
  /** Padding to make the struct size 1024 bytes */
  padding: number[];
}

export function getLendingGlobalConfigEncoder(): FixedSizeEncoder<LendingGlobalConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["globalAdmin", getAddressEncoder()],
      ["pendingAdmin", getAddressEncoder()],
      ["feeCollector", getAddressEncoder()],
      ["padding", getArrayEncoder(getU8Encoder(), { size: 928 })],
    ]),
    (value) => ({
      ...value,
      discriminator: LENDING_GLOBAL_CONFIG_DISCRIMINATOR,
    }),
  );
}

export function getLendingGlobalConfigDecoder(): FixedSizeDecoder<LendingGlobalConfig> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["globalAdmin", getAddressDecoder()],
    ["pendingAdmin", getAddressDecoder()],
    ["feeCollector", getAddressDecoder()],
    ["padding", getArrayDecoder(getU8Decoder(), { size: 928 })],
  ]);
}

export function getLendingGlobalConfigCodec(): FixedSizeCodec<
  LendingGlobalConfigArgs,
  LendingGlobalConfig
> {
  return combineCodec(
    getLendingGlobalConfigEncoder(),
    getLendingGlobalConfigDecoder(),
  );
}

export function decodeLendingGlobalConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<LendingGlobalConfig, TAddress>;
export function decodeLendingGlobalConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<LendingGlobalConfig, TAddress>;
export function decodeLendingGlobalConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<LendingGlobalConfig, TAddress>
  | MaybeAccount<LendingGlobalConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLendingGlobalConfigDecoder(),
  );
}

export async function fetchLendingGlobalConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<LendingGlobalConfig, TAddress>> {
  const maybeAccount = await fetchMaybeLendingGlobalConfig(
    rpc,
    address,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLendingGlobalConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<LendingGlobalConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLendingGlobalConfig(maybeAccount);
}

export async function fetchAllLendingGlobalConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<LendingGlobalConfig>[]> {
  const maybeAccounts = await fetchAllMaybeLendingGlobalConfig(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLendingGlobalConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<LendingGlobalConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLendingGlobalConfig(maybeAccount),
  );
}

export async function fetchLendingGlobalConfigFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],

  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<LendingGlobalConfig>> {
  const maybeAccount = await fetchMaybeLendingGlobalConfigFromSeeds(
    rpc,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLendingGlobalConfigFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],

  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<LendingGlobalConfig>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findLendingGlobalConfigStatePda({ programAddress });
  return await fetchMaybeLendingGlobalConfig(rpc, address, fetchConfig);
}
