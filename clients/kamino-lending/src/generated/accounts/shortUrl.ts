/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";

export const SHORT_URL_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  28, 89, 174, 25, 226, 124, 126, 212,
]);

export function getShortUrlDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SHORT_URL_DISCRIMINATOR);
}

export interface ShortUrl {
  discriminator: ReadonlyUint8Array;
  referrer: Address;
  shortUrl: string;
}

export interface ShortUrlArgs {
  referrer: Address;
  shortUrl: string;
}

export function getShortUrlEncoder(): Encoder<ShortUrlArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["referrer", getAddressEncoder()],
      ["shortUrl", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: SHORT_URL_DISCRIMINATOR }),
  );
}

export function getShortUrlDecoder(): Decoder<ShortUrl> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["referrer", getAddressDecoder()],
    ["shortUrl", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getShortUrlCodec(): Codec<ShortUrlArgs, ShortUrl> {
  return combineCodec(getShortUrlEncoder(), getShortUrlDecoder());
}

export function decodeShortUrl<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ShortUrl, TAddress>;
export function decodeShortUrl<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ShortUrl, TAddress>;
export function decodeShortUrl<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<ShortUrl, TAddress> | MaybeAccount<ShortUrl, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getShortUrlDecoder(),
  );
}

export async function fetchShortUrl<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ShortUrl, TAddress>> {
  const maybeAccount = await fetchMaybeShortUrl(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeShortUrl<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ShortUrl, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeShortUrl(maybeAccount);
}

export async function fetchAllShortUrl(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ShortUrl>[]> {
  const maybeAccounts = await fetchAllMaybeShortUrl(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeShortUrl(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ShortUrl>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeShortUrl(maybeAccount));
}
