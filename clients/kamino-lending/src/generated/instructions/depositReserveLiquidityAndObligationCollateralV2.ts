/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([216, 224, 191, 27, 204, 151, 102, 175]);

export function getDepositReserveLiquidityAndObligationCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type DepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta = string,
  TAccountReserveCollateralMint extends string | AccountMeta = string,
  TAccountReserveDestinationDepositCollateral extends
    | string
    | AccountMeta = string,
  TAccountUserSourceLiquidity extends string | AccountMeta = string,
  TAccountPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountCollateralTokenProgram extends string | AccountMeta = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountObligationFarmUserState extends string | AccountMeta = string,
  TAccountReserveFarmState extends string | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveDestinationDepositCollateral extends string
        ? WritableAccount<TAccountReserveDestinationDepositCollateral>
        : TAccountReserveDestinationDepositCollateral,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountPlaceholderUserDestinationCollateral>
        : TAccountPlaceholderUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositReserveLiquidityAndObligationCollateralV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getDepositReserveLiquidityAndObligationCollateralV2InstructionDataEncoder(): FixedSizeEncoder<DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getDepositReserveLiquidityAndObligationCollateralV2InstructionDataDecoder(): FixedSizeDecoder<DepositReserveLiquidityAndObligationCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getDepositReserveLiquidityAndObligationCollateralV2InstructionDataCodec(): FixedSizeCodec<
  DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs,
  DepositReserveLiquidityAndObligationCollateralV2InstructionData
> {
  return combineCodec(
    getDepositReserveLiquidityAndObligationCollateralV2InstructionDataEncoder(),
    getDepositReserveLiquidityAndObligationCollateralV2InstructionDataDecoder(),
  );
}

export interface DepositReserveLiquidityAndObligationCollateralV2Input<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveDestinationDepositCollateral extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountPlaceholderUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveDestinationDepositCollateral: Address<TAccountReserveDestinationDepositCollateral>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs["liquidityAmount"];
}

export function getDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveDestinationDepositCollateral extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountPlaceholderUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositReserveLiquidityAndObligationCollateralV2Input<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveLiquiditySupply,
  TAccountReserveCollateralMint,
  TAccountReserveDestinationDepositCollateral,
  TAccountUserSourceLiquidity,
  TAccountPlaceholderUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveDestinationDepositCollateral: {
      value: input.reserveDestinationDepositCollateral ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    placeholderUserDestinationCollateral: {
      value: input.placeholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveDestinationDepositCollateral),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getDepositReserveLiquidityAndObligationCollateralV2InstructionDataEncoder().encode(
      args as DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs,
    ),
  } as DepositReserveLiquidityAndObligationCollateralV2Instruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    reserve: TAccountMetas[4];
    reserveLiquidityMint: TAccountMetas[5];
    reserveLiquiditySupply: TAccountMetas[6];
    reserveCollateralMint: TAccountMetas[7];
    reserveDestinationDepositCollateral: TAccountMetas[8];
    userSourceLiquidity: TAccountMetas[9];
    placeholderUserDestinationCollateral?: TAccountMetas[10] | undefined;
    collateralTokenProgram: TAccountMetas[11];
    liquidityTokenProgram: TAccountMetas[12];
    instructionSysvarAccount: TAccountMetas[13];
    obligationFarmUserState?: TAccountMetas[14] | undefined;
    reserveFarmState?: TAccountMetas[15] | undefined;
    farmsProgram: TAccountMetas[16];
  };
  data: DepositReserveLiquidityAndObligationCollateralV2InstructionData;
}

export function parseDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveDestinationDepositCollateral: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      placeholderUserDestinationCollateral: getNextOptionalAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getDepositReserveLiquidityAndObligationCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
