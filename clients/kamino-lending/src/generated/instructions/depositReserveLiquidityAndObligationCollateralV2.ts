/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([216, 224, 191, 27, 204, 151, 102, 175]);

export function getDepositReserveLiquidityAndObligationCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type DepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountDepositAccountsOwner extends string | AccountMeta = string,
  TAccountDepositAccountsObligation extends string | AccountMeta = string,
  TAccountDepositAccountsLendingMarket extends string | AccountMeta = string,
  TAccountDepositAccountsLendingMarketAuthority extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsReserve extends string | AccountMeta = string,
  TAccountDepositAccountsReserveLiquidityMint extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsReserveLiquiditySupply extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsReserveCollateralMint extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsReserveDestinationDepositCollateral extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsUserSourceLiquidity extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsCollateralTokenProgram extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsLiquidityTokenProgram extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDepositAccountsOwner extends string
        ? WritableSignerAccount<TAccountDepositAccountsOwner> &
            AccountSignerMeta<TAccountDepositAccountsOwner>
        : TAccountDepositAccountsOwner,
      TAccountDepositAccountsObligation extends string
        ? WritableAccount<TAccountDepositAccountsObligation>
        : TAccountDepositAccountsObligation,
      TAccountDepositAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountDepositAccountsLendingMarket>
        : TAccountDepositAccountsLendingMarket,
      TAccountDepositAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountDepositAccountsLendingMarketAuthority>
        : TAccountDepositAccountsLendingMarketAuthority,
      TAccountDepositAccountsReserve extends string
        ? WritableAccount<TAccountDepositAccountsReserve>
        : TAccountDepositAccountsReserve,
      TAccountDepositAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountDepositAccountsReserveLiquidityMint>
        : TAccountDepositAccountsReserveLiquidityMint,
      TAccountDepositAccountsReserveLiquiditySupply extends string
        ? WritableAccount<TAccountDepositAccountsReserveLiquiditySupply>
        : TAccountDepositAccountsReserveLiquiditySupply,
      TAccountDepositAccountsReserveCollateralMint extends string
        ? WritableAccount<TAccountDepositAccountsReserveCollateralMint>
        : TAccountDepositAccountsReserveCollateralMint,
      TAccountDepositAccountsReserveDestinationDepositCollateral extends string
        ? WritableAccount<TAccountDepositAccountsReserveDestinationDepositCollateral>
        : TAccountDepositAccountsReserveDestinationDepositCollateral,
      TAccountDepositAccountsUserSourceLiquidity extends string
        ? WritableAccount<TAccountDepositAccountsUserSourceLiquidity>
        : TAccountDepositAccountsUserSourceLiquidity,
      TAccountDepositAccountsPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountDepositAccountsPlaceholderUserDestinationCollateral>
        : TAccountDepositAccountsPlaceholderUserDestinationCollateral,
      TAccountDepositAccountsCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositAccountsCollateralTokenProgram>
        : TAccountDepositAccountsCollateralTokenProgram,
      TAccountDepositAccountsLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositAccountsLiquidityTokenProgram>
        : TAccountDepositAccountsLiquidityTokenProgram,
      TAccountDepositAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountDepositAccountsInstructionSysvarAccount>
        : TAccountDepositAccountsInstructionSysvarAccount,
      TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState>
        : TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState,
      TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState>
        : TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositReserveLiquidityAndObligationCollateralV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getDepositReserveLiquidityAndObligationCollateralV2InstructionDataEncoder(): FixedSizeEncoder<DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getDepositReserveLiquidityAndObligationCollateralV2InstructionDataDecoder(): FixedSizeDecoder<DepositReserveLiquidityAndObligationCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getDepositReserveLiquidityAndObligationCollateralV2InstructionDataCodec(): FixedSizeCodec<
  DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs,
  DepositReserveLiquidityAndObligationCollateralV2InstructionData
> {
  return combineCodec(
    getDepositReserveLiquidityAndObligationCollateralV2InstructionDataEncoder(),
    getDepositReserveLiquidityAndObligationCollateralV2InstructionDataDecoder(),
  );
}

export interface DepositReserveLiquidityAndObligationCollateralV2Input<
  TAccountDepositAccountsOwner extends string = string,
  TAccountDepositAccountsObligation extends string = string,
  TAccountDepositAccountsLendingMarket extends string = string,
  TAccountDepositAccountsLendingMarketAuthority extends string = string,
  TAccountDepositAccountsReserve extends string = string,
  TAccountDepositAccountsReserveLiquidityMint extends string = string,
  TAccountDepositAccountsReserveLiquiditySupply extends string = string,
  TAccountDepositAccountsReserveCollateralMint extends string = string,
  TAccountDepositAccountsReserveDestinationDepositCollateral extends
    string = string,
  TAccountDepositAccountsUserSourceLiquidity extends string = string,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral extends
    string = string,
  TAccountDepositAccountsCollateralTokenProgram extends string = string,
  TAccountDepositAccountsLiquidityTokenProgram extends string = string,
  TAccountDepositAccountsInstructionSysvarAccount extends string = string,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState extends
    string = string,
  TAccountFarmsProgram extends string = string,
> {
  depositAccountsOwner: TransactionSigner<TAccountDepositAccountsOwner>;
  depositAccountsObligation: Address<TAccountDepositAccountsObligation>;
  depositAccountsLendingMarket: Address<TAccountDepositAccountsLendingMarket>;
  depositAccountsLendingMarketAuthority: Address<TAccountDepositAccountsLendingMarketAuthority>;
  depositAccountsReserve: Address<TAccountDepositAccountsReserve>;
  depositAccountsReserveLiquidityMint: Address<TAccountDepositAccountsReserveLiquidityMint>;
  depositAccountsReserveLiquiditySupply: Address<TAccountDepositAccountsReserveLiquiditySupply>;
  depositAccountsReserveCollateralMint: Address<TAccountDepositAccountsReserveCollateralMint>;
  depositAccountsReserveDestinationDepositCollateral: Address<TAccountDepositAccountsReserveDestinationDepositCollateral>;
  depositAccountsUserSourceLiquidity: Address<TAccountDepositAccountsUserSourceLiquidity>;
  depositAccountsPlaceholderUserDestinationCollateral?: Address<TAccountDepositAccountsPlaceholderUserDestinationCollateral>;
  depositAccountsCollateralTokenProgram: Address<TAccountDepositAccountsCollateralTokenProgram>;
  depositAccountsLiquidityTokenProgram: Address<TAccountDepositAccountsLiquidityTokenProgram>;
  depositAccountsInstructionSysvarAccount?: Address<TAccountDepositAccountsInstructionSysvarAccount>;
  depositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState?: Address<TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState>;
  depositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState?: Address<TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs["liquidityAmount"];
}

export function getDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TAccountDepositAccountsOwner extends string,
  TAccountDepositAccountsObligation extends string,
  TAccountDepositAccountsLendingMarket extends string,
  TAccountDepositAccountsLendingMarketAuthority extends string,
  TAccountDepositAccountsReserve extends string,
  TAccountDepositAccountsReserveLiquidityMint extends string,
  TAccountDepositAccountsReserveLiquiditySupply extends string,
  TAccountDepositAccountsReserveCollateralMint extends string,
  TAccountDepositAccountsReserveDestinationDepositCollateral extends string,
  TAccountDepositAccountsUserSourceLiquidity extends string,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral extends string,
  TAccountDepositAccountsCollateralTokenProgram extends string,
  TAccountDepositAccountsLiquidityTokenProgram extends string,
  TAccountDepositAccountsInstructionSysvarAccount extends string,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState extends
    string,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState extends
    string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositReserveLiquidityAndObligationCollateralV2Input<
    TAccountDepositAccountsOwner,
    TAccountDepositAccountsObligation,
    TAccountDepositAccountsLendingMarket,
    TAccountDepositAccountsLendingMarketAuthority,
    TAccountDepositAccountsReserve,
    TAccountDepositAccountsReserveLiquidityMint,
    TAccountDepositAccountsReserveLiquiditySupply,
    TAccountDepositAccountsReserveCollateralMint,
    TAccountDepositAccountsReserveDestinationDepositCollateral,
    TAccountDepositAccountsUserSourceLiquidity,
    TAccountDepositAccountsPlaceholderUserDestinationCollateral,
    TAccountDepositAccountsCollateralTokenProgram,
    TAccountDepositAccountsLiquidityTokenProgram,
    TAccountDepositAccountsInstructionSysvarAccount,
    TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState,
    TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgramAddress,
  TAccountDepositAccountsOwner,
  TAccountDepositAccountsObligation,
  TAccountDepositAccountsLendingMarket,
  TAccountDepositAccountsLendingMarketAuthority,
  TAccountDepositAccountsReserve,
  TAccountDepositAccountsReserveLiquidityMint,
  TAccountDepositAccountsReserveLiquiditySupply,
  TAccountDepositAccountsReserveCollateralMint,
  TAccountDepositAccountsReserveDestinationDepositCollateral,
  TAccountDepositAccountsUserSourceLiquidity,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral,
  TAccountDepositAccountsCollateralTokenProgram,
  TAccountDepositAccountsLiquidityTokenProgram,
  TAccountDepositAccountsInstructionSysvarAccount,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState,
  TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    depositAccountsOwner: {
      value: input.depositAccountsOwner ?? null,
      isWritable: true,
    },
    depositAccountsObligation: {
      value: input.depositAccountsObligation ?? null,
      isWritable: true,
    },
    depositAccountsLendingMarket: {
      value: input.depositAccountsLendingMarket ?? null,
      isWritable: false,
    },
    depositAccountsLendingMarketAuthority: {
      value: input.depositAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    depositAccountsReserve: {
      value: input.depositAccountsReserve ?? null,
      isWritable: true,
    },
    depositAccountsReserveLiquidityMint: {
      value: input.depositAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    depositAccountsReserveLiquiditySupply: {
      value: input.depositAccountsReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    depositAccountsReserveCollateralMint: {
      value: input.depositAccountsReserveCollateralMint ?? null,
      isWritable: true,
    },
    depositAccountsReserveDestinationDepositCollateral: {
      value: input.depositAccountsReserveDestinationDepositCollateral ?? null,
      isWritable: true,
    },
    depositAccountsUserSourceLiquidity: {
      value: input.depositAccountsUserSourceLiquidity ?? null,
      isWritable: true,
    },
    depositAccountsPlaceholderUserDestinationCollateral: {
      value: input.depositAccountsPlaceholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    depositAccountsCollateralTokenProgram: {
      value: input.depositAccountsCollateralTokenProgram ?? null,
      isWritable: false,
    },
    depositAccountsLiquidityTokenProgram: {
      value: input.depositAccountsLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    depositAccountsInstructionSysvarAccount: {
      value: input.depositAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    depositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState:
      {
        value:
          input.depositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState ??
          null,
        isWritable: true,
      },
    depositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState:
      {
        value:
          input.depositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState ??
          null,
        isWritable: true,
      },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.depositAccountsInstructionSysvarAccount.value) {
    accounts.depositAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.depositAccountsOwner),
      getAccountMeta(accounts.depositAccountsObligation),
      getAccountMeta(accounts.depositAccountsLendingMarket),
      getAccountMeta(accounts.depositAccountsLendingMarketAuthority),
      getAccountMeta(accounts.depositAccountsReserve),
      getAccountMeta(accounts.depositAccountsReserveLiquidityMint),
      getAccountMeta(accounts.depositAccountsReserveLiquiditySupply),
      getAccountMeta(accounts.depositAccountsReserveCollateralMint),
      getAccountMeta(
        accounts.depositAccountsReserveDestinationDepositCollateral,
      ),
      getAccountMeta(accounts.depositAccountsUserSourceLiquidity),
      getAccountMeta(
        accounts.depositAccountsPlaceholderUserDestinationCollateral,
      ),
      getAccountMeta(accounts.depositAccountsCollateralTokenProgram),
      getAccountMeta(accounts.depositAccountsLiquidityTokenProgram),
      getAccountMeta(accounts.depositAccountsInstructionSysvarAccount),
      getAccountMeta(
        accounts.depositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState,
      ),
      getAccountMeta(
        accounts.depositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState,
      ),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getDepositReserveLiquidityAndObligationCollateralV2InstructionDataEncoder().encode(
      args as DepositReserveLiquidityAndObligationCollateralV2InstructionDataArgs,
    ),
  } as DepositReserveLiquidityAndObligationCollateralV2Instruction<
    TProgramAddress,
    TAccountDepositAccountsOwner,
    TAccountDepositAccountsObligation,
    TAccountDepositAccountsLendingMarket,
    TAccountDepositAccountsLendingMarketAuthority,
    TAccountDepositAccountsReserve,
    TAccountDepositAccountsReserveLiquidityMint,
    TAccountDepositAccountsReserveLiquiditySupply,
    TAccountDepositAccountsReserveCollateralMint,
    TAccountDepositAccountsReserveDestinationDepositCollateral,
    TAccountDepositAccountsUserSourceLiquidity,
    TAccountDepositAccountsPlaceholderUserDestinationCollateral,
    TAccountDepositAccountsCollateralTokenProgram,
    TAccountDepositAccountsLiquidityTokenProgram,
    TAccountDepositAccountsInstructionSysvarAccount,
    TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState,
    TAccountDepositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    depositAccountsOwner: TAccountMetas[0];
    depositAccountsObligation: TAccountMetas[1];
    depositAccountsLendingMarket: TAccountMetas[2];
    depositAccountsLendingMarketAuthority: TAccountMetas[3];
    depositAccountsReserve: TAccountMetas[4];
    depositAccountsReserveLiquidityMint: TAccountMetas[5];
    depositAccountsReserveLiquiditySupply: TAccountMetas[6];
    depositAccountsReserveCollateralMint: TAccountMetas[7];
    depositAccountsReserveDestinationDepositCollateral: TAccountMetas[8];
    depositAccountsUserSourceLiquidity: TAccountMetas[9];
    depositAccountsPlaceholderUserDestinationCollateral?:
      | TAccountMetas[10]
      | undefined;
    depositAccountsCollateralTokenProgram: TAccountMetas[11];
    depositAccountsLiquidityTokenProgram: TAccountMetas[12];
    depositAccountsInstructionSysvarAccount: TAccountMetas[13];
    depositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState?:
      | TAccountMetas[14]
      | undefined;
    depositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState?:
      | TAccountMetas[15]
      | undefined;
    farmsProgram: TAccountMetas[16];
  };
  data: DepositReserveLiquidityAndObligationCollateralV2InstructionData;
}

export function parseDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositReserveLiquidityAndObligationCollateralV2Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      depositAccountsOwner: getNextAccount(),
      depositAccountsObligation: getNextAccount(),
      depositAccountsLendingMarket: getNextAccount(),
      depositAccountsLendingMarketAuthority: getNextAccount(),
      depositAccountsReserve: getNextAccount(),
      depositAccountsReserveLiquidityMint: getNextAccount(),
      depositAccountsReserveLiquiditySupply: getNextAccount(),
      depositAccountsReserveCollateralMint: getNextAccount(),
      depositAccountsReserveDestinationDepositCollateral: getNextAccount(),
      depositAccountsUserSourceLiquidity: getNextAccount(),
      depositAccountsPlaceholderUserDestinationCollateral:
        getNextOptionalAccount(),
      depositAccountsCollateralTokenProgram: getNextAccount(),
      depositAccountsLiquidityTokenProgram: getNextAccount(),
      depositAccountsInstructionSysvarAccount: getNextAccount(),
      depositReserveLiquidityAndObligationCollateralV2FarmsAccountsObligationFarmUserState:
        getNextOptionalAccount(),
      depositReserveLiquidityAndObligationCollateralV2FarmsAccountsReserveFarmState:
        getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getDepositReserveLiquidityAndObligationCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
