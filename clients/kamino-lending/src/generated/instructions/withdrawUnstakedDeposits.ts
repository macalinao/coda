/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_UNSTAKED_DEPOSITS_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([36, 102, 187, 49, 220, 36, 132, 67]);

export function getWithdrawUnstakedDepositsDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_UNSTAKED_DEPOSITS_DISCRIMINATOR,
  );
}

export type WithdrawUnstakedDepositsInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountUserState extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountUserAta extends string | AccountMeta = string,
  TAccountFarmVault extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountUserAta extends string
        ? WritableAccount<TAccountUserAta>
        : TAccountUserAta,
      TAccountFarmVault extends string
        ? WritableAccount<TAccountFarmVault>
        : TAccountFarmVault,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawUnstakedDepositsInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface WithdrawUnstakedDepositsInstructionDataArgs {}

export function getWithdrawUnstakedDepositsInstructionDataEncoder(): FixedSizeEncoder<WithdrawUnstakedDepositsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_UNSTAKED_DEPOSITS_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawUnstakedDepositsInstructionDataDecoder(): FixedSizeDecoder<WithdrawUnstakedDepositsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawUnstakedDepositsInstructionDataCodec(): FixedSizeCodec<
  WithdrawUnstakedDepositsInstructionDataArgs,
  WithdrawUnstakedDepositsInstructionData
> {
  return combineCodec(
    getWithdrawUnstakedDepositsInstructionDataEncoder(),
    getWithdrawUnstakedDepositsInstructionDataDecoder(),
  );
}

export interface WithdrawUnstakedDepositsInput<
  TAccountOwner extends string = string,
  TAccountUserState extends string = string,
  TAccountFarmState extends string = string,
  TAccountUserAta extends string = string,
  TAccountFarmVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  userState: Address<TAccountUserState>;
  farmState: Address<TAccountFarmState>;
  userAta: Address<TAccountUserAta>;
  farmVault: Address<TAccountFarmVault>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  tokenProgram: Address<TAccountTokenProgram>;
}

export function getWithdrawUnstakedDepositsInstruction<
  TAccountOwner extends string,
  TAccountUserState extends string,
  TAccountFarmState extends string,
  TAccountUserAta extends string,
  TAccountFarmVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: WithdrawUnstakedDepositsInput<
    TAccountOwner,
    TAccountUserState,
    TAccountFarmState,
    TAccountUserAta,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawUnstakedDepositsInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountUserState,
  TAccountFarmState,
  TAccountUserAta,
  TAccountFarmVault,
  TAccountFarmVaultsAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    userAta: { value: input.userAta ?? null, isWritable: true },
    farmVault: { value: input.farmVault ?? null, isWritable: true },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.userAta),
      getAccountMeta(accounts.farmVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawUnstakedDepositsInstructionDataEncoder().encode({}),
  } as WithdrawUnstakedDepositsInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountUserState,
    TAccountFarmState,
    TAccountUserAta,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export interface ParsedWithdrawUnstakedDepositsInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    userState: TAccountMetas[1];
    farmState: TAccountMetas[2];
    userAta: TAccountMetas[3];
    farmVault: TAccountMetas[4];
    farmVaultsAuthority: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: WithdrawUnstakedDepositsInstructionData;
}

export function parseWithdrawUnstakedDepositsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawUnstakedDepositsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      userState: getNextAccount(),
      farmState: getNextAccount(),
      userAta: getNextAccount(),
      farmVault: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawUnstakedDepositsInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
