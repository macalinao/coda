/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INIT_RESERVE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  138, 245, 71, 225, 153, 4, 3, 43,
]);

export function getInitReserveDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_RESERVE_DISCRIMINATOR,
  );
}

export type InitReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLendingMarketOwner extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta = string,
  TAccountFeeReceiver extends string | AccountMeta = string,
  TAccountReserveCollateralMint extends string | AccountMeta = string,
  TAccountReserveCollateralSupply extends string | AccountMeta = string,
  TAccountInitialLiquiditySource extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta = string,
  TAccountCollateralTokenProgram extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLendingMarketOwner extends string
        ? WritableSignerAccount<TAccountLendingMarketOwner> &
            AccountSignerMeta<TAccountLendingMarketOwner>
        : TAccountLendingMarketOwner,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountFeeReceiver extends string
        ? WritableAccount<TAccountFeeReceiver>
        : TAccountFeeReceiver,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveCollateralSupply extends string
        ? WritableAccount<TAccountReserveCollateralSupply>
        : TAccountReserveCollateralSupply,
      TAccountInitialLiquiditySource extends string
        ? WritableAccount<TAccountInitialLiquiditySource>
        : TAccountInitialLiquiditySource,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitReserveInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitReserveInstructionDataArgs {}

export function getInitReserveInstructionDataEncoder(): FixedSizeEncoder<InitReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_RESERVE_DISCRIMINATOR }),
  );
}

export function getInitReserveInstructionDataDecoder(): FixedSizeDecoder<InitReserveInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitReserveInstructionDataCodec(): FixedSizeCodec<
  InitReserveInstructionDataArgs,
  InitReserveInstructionData
> {
  return combineCodec(
    getInitReserveInstructionDataEncoder(),
    getInitReserveInstructionDataDecoder(),
  );
}

export interface InitReserveInput<
  TAccountLendingMarketOwner extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountFeeReceiver extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveCollateralSupply extends string = string,
  TAccountInitialLiquiditySource extends string = string,
  TAccountRent extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> {
  lendingMarketOwner: TransactionSigner<TAccountLendingMarketOwner>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  feeReceiver: Address<TAccountFeeReceiver>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveCollateralSupply: Address<TAccountReserveCollateralSupply>;
  initialLiquiditySource: Address<TAccountInitialLiquiditySource>;
  rent: Address<TAccountRent>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  systemProgram: Address<TAccountSystemProgram>;
}

export function getInitReserveInstruction<
  TAccountLendingMarketOwner extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountFeeReceiver extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveCollateralSupply extends string,
  TAccountInitialLiquiditySource extends string,
  TAccountRent extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitReserveInput<
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountFeeReceiver,
    TAccountReserveCollateralMint,
    TAccountReserveCollateralSupply,
    TAccountInitialLiquiditySource,
    TAccountRent,
    TAccountLiquidityTokenProgram,
    TAccountCollateralTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitReserveInstruction<
  TProgramAddress,
  TAccountLendingMarketOwner,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveLiquiditySupply,
  TAccountFeeReceiver,
  TAccountReserveCollateralMint,
  TAccountReserveCollateralSupply,
  TAccountInitialLiquiditySource,
  TAccountRent,
  TAccountLiquidityTokenProgram,
  TAccountCollateralTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lendingMarketOwner: {
      value: input.lendingMarketOwner ?? null,
      isWritable: true,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    feeReceiver: { value: input.feeReceiver ?? null, isWritable: true },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveCollateralSupply: {
      value: input.reserveCollateralSupply ?? null,
      isWritable: true,
    },
    initialLiquiditySource: {
      value: input.initialLiquiditySource ?? null,
      isWritable: true,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lendingMarketOwner),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.feeReceiver),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveCollateralSupply),
      getAccountMeta(accounts.initialLiquiditySource),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitReserveInstructionDataEncoder().encode({}),
    programAddress,
  } as InitReserveInstruction<
    TProgramAddress,
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountFeeReceiver,
    TAccountReserveCollateralMint,
    TAccountReserveCollateralSupply,
    TAccountInitialLiquiditySource,
    TAccountRent,
    TAccountLiquidityTokenProgram,
    TAccountCollateralTokenProgram,
    TAccountSystemProgram
  >);
}

export interface ParsedInitReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    lendingMarketOwner: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    lendingMarketAuthority: TAccountMetas[2];
    reserve: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveLiquiditySupply: TAccountMetas[5];
    feeReceiver: TAccountMetas[6];
    reserveCollateralMint: TAccountMetas[7];
    reserveCollateralSupply: TAccountMetas[8];
    initialLiquiditySource: TAccountMetas[9];
    rent: TAccountMetas[10];
    liquidityTokenProgram: TAccountMetas[11];
    collateralTokenProgram: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
  };
  data: InitReserveInstructionData;
}

export function parseInitReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lendingMarketOwner: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      feeReceiver: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveCollateralSupply: getNextAccount(),
      initialLiquiditySource: getNextAccount(),
      rent: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      collateralTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitReserveInstructionDataDecoder().decode(instruction.data),
  };
}
