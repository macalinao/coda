/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findFarmVaultsAuthorityPda } from "../pdas/index.js";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_FROM_FARM_VAULT_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([22, 82, 128, 250, 86, 79, 124, 78]);

export function getWithdrawFromFarmVaultDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_FROM_FARM_VAULT_DISCRIMINATOR,
  );
}

export type WithdrawFromFarmVaultInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountWithdrawAuthority extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountWithdrawerTokenAccount extends string | AccountMeta = string,
  TAccountFarmVault extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWithdrawAuthority extends string
        ? WritableSignerAccount<TAccountWithdrawAuthority> &
            AccountSignerMeta<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountWithdrawerTokenAccount extends string
        ? WritableAccount<TAccountWithdrawerTokenAccount>
        : TAccountWithdrawerTokenAccount,
      TAccountFarmVault extends string
        ? WritableAccount<TAccountFarmVault>
        : TAccountFarmVault,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawFromFarmVaultInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface WithdrawFromFarmVaultInstructionDataArgs {
  amount: number | bigint;
}

export function getWithdrawFromFarmVaultInstructionDataEncoder(): FixedSizeEncoder<WithdrawFromFarmVaultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_FROM_FARM_VAULT_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawFromFarmVaultInstructionDataDecoder(): FixedSizeDecoder<WithdrawFromFarmVaultInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getWithdrawFromFarmVaultInstructionDataCodec(): FixedSizeCodec<
  WithdrawFromFarmVaultInstructionDataArgs,
  WithdrawFromFarmVaultInstructionData
> {
  return combineCodec(
    getWithdrawFromFarmVaultInstructionDataEncoder(),
    getWithdrawFromFarmVaultInstructionDataDecoder(),
  );
}

export interface WithdrawFromFarmVaultAsyncInput<
  TAccountWithdrawAuthority extends string = string,
  TAccountFarmState extends string = string,
  TAccountWithdrawerTokenAccount extends string = string,
  TAccountFarmVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> {
  withdrawAuthority: TransactionSigner<TAccountWithdrawAuthority>;
  farmState: Address<TAccountFarmState>;
  withdrawerTokenAccount: Address<TAccountWithdrawerTokenAccount>;
  farmVault: Address<TAccountFarmVault>;
  farmVaultsAuthority?: Address<TAccountFarmVaultsAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: WithdrawFromFarmVaultInstructionDataArgs["amount"];
}

export async function getWithdrawFromFarmVaultInstructionAsync<
  TAccountWithdrawAuthority extends string,
  TAccountFarmState extends string,
  TAccountWithdrawerTokenAccount extends string,
  TAccountFarmVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: WithdrawFromFarmVaultAsyncInput<
    TAccountWithdrawAuthority,
    TAccountFarmState,
    TAccountWithdrawerTokenAccount,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  WithdrawFromFarmVaultInstruction<
    TProgramAddress,
    TAccountWithdrawAuthority,
    TAccountFarmState,
    TAccountWithdrawerTokenAccount,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: true,
    },
    farmState: { value: input.farmState ?? null, isWritable: true },
    withdrawerTokenAccount: {
      value: input.withdrawerTokenAccount ?? null,
      isWritable: true,
    },
    farmVault: { value: input.farmVault ?? null, isWritable: true },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.farmVaultsAuthority.value) {
    accounts.farmVaultsAuthority.value = await findFarmVaultsAuthorityPda({
      farmState: expectAddress(accounts.farmState.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.withdrawerTokenAccount),
      getAccountMeta(accounts.farmVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getWithdrawFromFarmVaultInstructionDataEncoder().encode(
      args as WithdrawFromFarmVaultInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawFromFarmVaultInstruction<
    TProgramAddress,
    TAccountWithdrawAuthority,
    TAccountFarmState,
    TAccountWithdrawerTokenAccount,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >);
}

export interface WithdrawFromFarmVaultInput<
  TAccountWithdrawAuthority extends string = string,
  TAccountFarmState extends string = string,
  TAccountWithdrawerTokenAccount extends string = string,
  TAccountFarmVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> {
  withdrawAuthority: TransactionSigner<TAccountWithdrawAuthority>;
  farmState: Address<TAccountFarmState>;
  withdrawerTokenAccount: Address<TAccountWithdrawerTokenAccount>;
  farmVault: Address<TAccountFarmVault>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: WithdrawFromFarmVaultInstructionDataArgs["amount"];
}

export function getWithdrawFromFarmVaultInstruction<
  TAccountWithdrawAuthority extends string,
  TAccountFarmState extends string,
  TAccountWithdrawerTokenAccount extends string,
  TAccountFarmVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: WithdrawFromFarmVaultInput<
    TAccountWithdrawAuthority,
    TAccountFarmState,
    TAccountWithdrawerTokenAccount,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawFromFarmVaultInstruction<
  TProgramAddress,
  TAccountWithdrawAuthority,
  TAccountFarmState,
  TAccountWithdrawerTokenAccount,
  TAccountFarmVault,
  TAccountFarmVaultsAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: true,
    },
    farmState: { value: input.farmState ?? null, isWritable: true },
    withdrawerTokenAccount: {
      value: input.withdrawerTokenAccount ?? null,
      isWritable: true,
    },
    farmVault: { value: input.farmVault ?? null, isWritable: true },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.withdrawerTokenAccount),
      getAccountMeta(accounts.farmVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getWithdrawFromFarmVaultInstructionDataEncoder().encode(
      args as WithdrawFromFarmVaultInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawFromFarmVaultInstruction<
    TProgramAddress,
    TAccountWithdrawAuthority,
    TAccountFarmState,
    TAccountWithdrawerTokenAccount,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >);
}

export interface ParsedWithdrawFromFarmVaultInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    withdrawAuthority: TAccountMetas[0];
    farmState: TAccountMetas[1];
    withdrawerTokenAccount: TAccountMetas[2];
    farmVault: TAccountMetas[3];
    farmVaultsAuthority: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: WithdrawFromFarmVaultInstructionData;
}

export function parseWithdrawFromFarmVaultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawFromFarmVaultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      withdrawAuthority: getNextAccount(),
      farmState: getNextAccount(),
      withdrawerTokenAccount: getNextAccount(),
      farmVault: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawFromFarmVaultInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
