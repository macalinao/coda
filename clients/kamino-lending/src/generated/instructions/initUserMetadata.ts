/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INIT_USER_METADATA_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([117, 169, 176, 69, 197, 23, 15, 162]);

export function getInitUserMetadataDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_USER_METADATA_DISCRIMINATOR,
  );
}

export type InitUserMetadataInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountFeePayer extends string | AccountMeta = string,
  TAccountUserMetadata extends string | AccountMeta = string,
  TAccountReferrerUserMetadata extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountFeePayer extends string
        ? WritableSignerAccount<TAccountFeePayer> &
            AccountSignerMeta<TAccountFeePayer>
        : TAccountFeePayer,
      TAccountUserMetadata extends string
        ? WritableAccount<TAccountUserMetadata>
        : TAccountUserMetadata,
      TAccountReferrerUserMetadata extends string
        ? ReadonlyAccount<TAccountReferrerUserMetadata>
        : TAccountReferrerUserMetadata,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitUserMetadataInstructionData {
  discriminator: ReadonlyUint8Array;
  userLookupTable: Address;
}

export interface InitUserMetadataInstructionDataArgs {
  userLookupTable: Address;
}

export function getInitUserMetadataInstructionDataEncoder(): FixedSizeEncoder<InitUserMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["userLookupTable", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_USER_METADATA_DISCRIMINATOR }),
  );
}

export function getInitUserMetadataInstructionDataDecoder(): FixedSizeDecoder<InitUserMetadataInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["userLookupTable", getAddressDecoder()],
  ]);
}

export function getInitUserMetadataInstructionDataCodec(): FixedSizeCodec<
  InitUserMetadataInstructionDataArgs,
  InitUserMetadataInstructionData
> {
  return combineCodec(
    getInitUserMetadataInstructionDataEncoder(),
    getInitUserMetadataInstructionDataDecoder(),
  );
}

export interface InitUserMetadataInput<
  TAccountOwner extends string = string,
  TAccountFeePayer extends string = string,
  TAccountUserMetadata extends string = string,
  TAccountReferrerUserMetadata extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  feePayer: TransactionSigner<TAccountFeePayer>;
  userMetadata: Address<TAccountUserMetadata>;
  referrerUserMetadata?: Address<TAccountReferrerUserMetadata>;
  rent: Address<TAccountRent>;
  systemProgram: Address<TAccountSystemProgram>;
  userLookupTable: InitUserMetadataInstructionDataArgs["userLookupTable"];
}

export function getInitUserMetadataInstruction<
  TAccountOwner extends string,
  TAccountFeePayer extends string,
  TAccountUserMetadata extends string,
  TAccountReferrerUserMetadata extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitUserMetadataInput<
    TAccountOwner,
    TAccountFeePayer,
    TAccountUserMetadata,
    TAccountReferrerUserMetadata,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitUserMetadataInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountFeePayer,
  TAccountUserMetadata,
  TAccountReferrerUserMetadata,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    feePayer: { value: input.feePayer ?? null, isWritable: true },
    userMetadata: { value: input.userMetadata ?? null, isWritable: true },
    referrerUserMetadata: {
      value: input.referrerUserMetadata ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.feePayer),
      getAccountMeta(accounts.userMetadata),
      getAccountMeta(accounts.referrerUserMetadata),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitUserMetadataInstructionDataEncoder().encode(
      args as InitUserMetadataInstructionDataArgs,
    ),
    programAddress,
  } as InitUserMetadataInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountFeePayer,
    TAccountUserMetadata,
    TAccountReferrerUserMetadata,
    TAccountRent,
    TAccountSystemProgram
  >);
}

export interface ParsedInitUserMetadataInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    feePayer: TAccountMetas[1];
    userMetadata: TAccountMetas[2];
    referrerUserMetadata?: TAccountMetas[3] | undefined;
    rent: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: InitUserMetadataInstructionData;
}

export function parseInitUserMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitUserMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      feePayer: getNextAccount(),
      userMetadata: getNextAccount(),
      referrerUserMetadata: getNextOptionalAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitUserMetadataInstructionDataDecoder().decode(instruction.data),
  };
}
