/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  InitObligationArgs,
  InitObligationArgsArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getInitObligationArgsDecoder,
  getInitObligationArgsEncoder,
} from "../types/index.js";

export const INIT_OBLIGATION_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [251, 10, 231, 76, 27, 11, 159, 96],
);

export function getInitObligationDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_OBLIGATION_DISCRIMINATOR,
  );
}

export type InitObligationInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountObligationOwner extends string | AccountMeta = string,
  TAccountFeePayer extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountSeed1Account extends string | AccountMeta = string,
  TAccountSeed2Account extends string | AccountMeta = string,
  TAccountOwnerUserMetadata extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountObligationOwner extends string
        ? ReadonlySignerAccount<TAccountObligationOwner> &
            AccountSignerMeta<TAccountObligationOwner>
        : TAccountObligationOwner,
      TAccountFeePayer extends string
        ? WritableSignerAccount<TAccountFeePayer> &
            AccountSignerMeta<TAccountFeePayer>
        : TAccountFeePayer,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountSeed1Account extends string
        ? ReadonlyAccount<TAccountSeed1Account>
        : TAccountSeed1Account,
      TAccountSeed2Account extends string
        ? ReadonlyAccount<TAccountSeed2Account>
        : TAccountSeed2Account,
      TAccountOwnerUserMetadata extends string
        ? ReadonlyAccount<TAccountOwnerUserMetadata>
        : TAccountOwnerUserMetadata,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitObligationInstructionData {
  discriminator: ReadonlyUint8Array;
  args: InitObligationArgs;
}

export interface InitObligationInstructionDataArgs {
  args: InitObligationArgsArgs;
}

export function getInitObligationInstructionDataEncoder(): FixedSizeEncoder<InitObligationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["args", getInitObligationArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_OBLIGATION_DISCRIMINATOR }),
  );
}

export function getInitObligationInstructionDataDecoder(): FixedSizeDecoder<InitObligationInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["args", getInitObligationArgsDecoder()],
  ]);
}

export function getInitObligationInstructionDataCodec(): FixedSizeCodec<
  InitObligationInstructionDataArgs,
  InitObligationInstructionData
> {
  return combineCodec(
    getInitObligationInstructionDataEncoder(),
    getInitObligationInstructionDataDecoder(),
  );
}

export interface InitObligationInput<
  TAccountObligationOwner extends string = string,
  TAccountFeePayer extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountSeed1Account extends string = string,
  TAccountSeed2Account extends string = string,
  TAccountOwnerUserMetadata extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> {
  obligationOwner: TransactionSigner<TAccountObligationOwner>;
  feePayer: TransactionSigner<TAccountFeePayer>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  seed1Account: Address<TAccountSeed1Account>;
  seed2Account: Address<TAccountSeed2Account>;
  ownerUserMetadata: Address<TAccountOwnerUserMetadata>;
  rent: Address<TAccountRent>;
  systemProgram: Address<TAccountSystemProgram>;
  args: InitObligationInstructionDataArgs["args"];
}

export function getInitObligationInstruction<
  TAccountObligationOwner extends string,
  TAccountFeePayer extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountSeed1Account extends string,
  TAccountSeed2Account extends string,
  TAccountOwnerUserMetadata extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitObligationInput<
    TAccountObligationOwner,
    TAccountFeePayer,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountSeed1Account,
    TAccountSeed2Account,
    TAccountOwnerUserMetadata,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitObligationInstruction<
  TProgramAddress,
  TAccountObligationOwner,
  TAccountFeePayer,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountSeed1Account,
  TAccountSeed2Account,
  TAccountOwnerUserMetadata,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    obligationOwner: {
      value: input.obligationOwner ?? null,
      isWritable: false,
    },
    feePayer: { value: input.feePayer ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    seed1Account: { value: input.seed1Account ?? null, isWritable: false },
    seed2Account: { value: input.seed2Account ?? null, isWritable: false },
    ownerUserMetadata: {
      value: input.ownerUserMetadata ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.obligationOwner),
      getAccountMeta(accounts.feePayer),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.seed1Account),
      getAccountMeta(accounts.seed2Account),
      getAccountMeta(accounts.ownerUserMetadata),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitObligationInstructionDataEncoder().encode(
      args as InitObligationInstructionDataArgs,
    ),
    programAddress,
  } as InitObligationInstruction<
    TProgramAddress,
    TAccountObligationOwner,
    TAccountFeePayer,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountSeed1Account,
    TAccountSeed2Account,
    TAccountOwnerUserMetadata,
    TAccountRent,
    TAccountSystemProgram
  >);
}

export interface ParsedInitObligationInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    obligationOwner: TAccountMetas[0];
    feePayer: TAccountMetas[1];
    obligation: TAccountMetas[2];
    lendingMarket: TAccountMetas[3];
    seed1Account: TAccountMetas[4];
    seed2Account: TAccountMetas[5];
    ownerUserMetadata: TAccountMetas[6];
    rent: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: InitObligationInstructionData;
}

export function parseInitObligationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitObligationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      obligationOwner: getNextAccount(),
      feePayer: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      seed1Account: getNextAccount(),
      seed2Account: getNextAccount(),
      ownerUserMetadata: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitObligationInstructionDataDecoder().decode(instruction.data),
  };
}
