/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_PROTOCOL_FEE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([158, 201, 158, 189, 33, 93, 162, 103]);

export function getWithdrawProtocolFeeDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_PROTOCOL_FEE_DISCRIMINATOR,
  );
}

export type WithdrawProtocolFeeInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLendingMarketOwner extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountFeeVault extends string | AccountMeta = string,
  TAccountLendingMarketOwnerAta extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLendingMarketOwner extends string
        ? ReadonlySignerAccount<TAccountLendingMarketOwner> &
            AccountSignerMeta<TAccountLendingMarketOwner>
        : TAccountLendingMarketOwner,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? ReadonlyAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountLendingMarketOwnerAta extends string
        ? WritableAccount<TAccountLendingMarketOwnerAta>
        : TAccountLendingMarketOwnerAta,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawProtocolFeeInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface WithdrawProtocolFeeInstructionDataArgs {
  amount: number | bigint;
}

export function getWithdrawProtocolFeeInstructionDataEncoder(): FixedSizeEncoder<WithdrawProtocolFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_PROTOCOL_FEE_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawProtocolFeeInstructionDataDecoder(): FixedSizeDecoder<WithdrawProtocolFeeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getWithdrawProtocolFeeInstructionDataCodec(): FixedSizeCodec<
  WithdrawProtocolFeeInstructionDataArgs,
  WithdrawProtocolFeeInstructionData
> {
  return combineCodec(
    getWithdrawProtocolFeeInstructionDataEncoder(),
    getWithdrawProtocolFeeInstructionDataDecoder(),
  );
}

export interface WithdrawProtocolFeeInput<
  TAccountLendingMarketOwner extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountFeeVault extends string = string,
  TAccountLendingMarketOwnerAta extends string = string,
  TAccountTokenProgram extends string = string,
> {
  lendingMarketOwner: TransactionSigner<TAccountLendingMarketOwner>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  feeVault: Address<TAccountFeeVault>;
  lendingMarketOwnerAta: Address<TAccountLendingMarketOwnerAta>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: WithdrawProtocolFeeInstructionDataArgs["amount"];
}

export function getWithdrawProtocolFeeInstruction<
  TAccountLendingMarketOwner extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountFeeVault extends string,
  TAccountLendingMarketOwnerAta extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: WithdrawProtocolFeeInput<
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountLendingMarketAuthority,
    TAccountFeeVault,
    TAccountLendingMarketOwnerAta,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawProtocolFeeInstruction<
  TProgramAddress,
  TAccountLendingMarketOwner,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountLendingMarketAuthority,
  TAccountFeeVault,
  TAccountLendingMarketOwnerAta,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lendingMarketOwner: {
      value: input.lendingMarketOwner ?? null,
      isWritable: false,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: false },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    lendingMarketOwnerAta: {
      value: input.lendingMarketOwnerAta ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lendingMarketOwner),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.lendingMarketOwnerAta),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getWithdrawProtocolFeeInstructionDataEncoder().encode(
      args as WithdrawProtocolFeeInstructionDataArgs,
    ),
    programAddress,
  } as WithdrawProtocolFeeInstruction<
    TProgramAddress,
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountLendingMarketAuthority,
    TAccountFeeVault,
    TAccountLendingMarketOwnerAta,
    TAccountTokenProgram
  >);
}

export interface ParsedWithdrawProtocolFeeInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    lendingMarketOwner: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    reserve: TAccountMetas[2];
    reserveLiquidityMint: TAccountMetas[3];
    lendingMarketAuthority: TAccountMetas[4];
    feeVault: TAccountMetas[5];
    lendingMarketOwnerAta: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: WithdrawProtocolFeeInstructionData;
}

export function parseWithdrawProtocolFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawProtocolFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lendingMarketOwner: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      feeVault: getNextAccount(),
      lendingMarketOwnerAta: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawProtocolFeeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
