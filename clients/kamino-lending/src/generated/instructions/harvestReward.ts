/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const HARVEST_REWARD_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  68, 200, 228, 233, 184, 32, 226, 188,
]);

export function getHarvestRewardDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    HARVEST_REWARD_DISCRIMINATOR,
  );
}

export type HarvestRewardInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountUserState extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TAccountRewardMint extends string | AccountMeta = string,
  TAccountUserRewardAta extends string | AccountMeta = string,
  TAccountRewardsVault extends string | AccountMeta = string,
  TAccountRewardsTreasuryVault extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountScopePrices extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountUserRewardAta extends string
        ? WritableAccount<TAccountUserRewardAta>
        : TAccountUserRewardAta,
      TAccountRewardsVault extends string
        ? WritableAccount<TAccountRewardsVault>
        : TAccountRewardsVault,
      TAccountRewardsTreasuryVault extends string
        ? WritableAccount<TAccountRewardsTreasuryVault>
        : TAccountRewardsTreasuryVault,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountScopePrices extends string
        ? ReadonlyAccount<TAccountScopePrices>
        : TAccountScopePrices,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface HarvestRewardInstructionData {
  discriminator: ReadonlyUint8Array;
  rewardIndex: bigint;
}

export interface HarvestRewardInstructionDataArgs {
  rewardIndex: number | bigint;
}

export function getHarvestRewardInstructionDataEncoder(): FixedSizeEncoder<HarvestRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: HARVEST_REWARD_DISCRIMINATOR }),
  );
}

export function getHarvestRewardInstructionDataDecoder(): FixedSizeDecoder<HarvestRewardInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU64Decoder()],
  ]);
}

export function getHarvestRewardInstructionDataCodec(): FixedSizeCodec<
  HarvestRewardInstructionDataArgs,
  HarvestRewardInstructionData
> {
  return combineCodec(
    getHarvestRewardInstructionDataEncoder(),
    getHarvestRewardInstructionDataDecoder(),
  );
}

export interface HarvestRewardInput<
  TAccountOwner extends string = string,
  TAccountUserState extends string = string,
  TAccountFarmState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserRewardAta extends string = string,
  TAccountRewardsVault extends string = string,
  TAccountRewardsTreasuryVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountScopePrices extends string = string,
  TAccountTokenProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  userState: Address<TAccountUserState>;
  farmState: Address<TAccountFarmState>;
  globalConfig: Address<TAccountGlobalConfig>;
  rewardMint: Address<TAccountRewardMint>;
  userRewardAta: Address<TAccountUserRewardAta>;
  rewardsVault: Address<TAccountRewardsVault>;
  rewardsTreasuryVault: Address<TAccountRewardsTreasuryVault>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  scopePrices?: Address<TAccountScopePrices>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardIndex: HarvestRewardInstructionDataArgs["rewardIndex"];
}

export function getHarvestRewardInstruction<
  TAccountOwner extends string,
  TAccountUserState extends string,
  TAccountFarmState extends string,
  TAccountGlobalConfig extends string,
  TAccountRewardMint extends string,
  TAccountUserRewardAta extends string,
  TAccountRewardsVault extends string,
  TAccountRewardsTreasuryVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountScopePrices extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: HarvestRewardInput<
    TAccountOwner,
    TAccountUserState,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountUserRewardAta,
    TAccountRewardsVault,
    TAccountRewardsTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountScopePrices,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): HarvestRewardInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountUserState,
  TAccountFarmState,
  TAccountGlobalConfig,
  TAccountRewardMint,
  TAccountUserRewardAta,
  TAccountRewardsVault,
  TAccountRewardsTreasuryVault,
  TAccountFarmVaultsAuthority,
  TAccountScopePrices,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    userRewardAta: { value: input.userRewardAta ?? null, isWritable: true },
    rewardsVault: { value: input.rewardsVault ?? null, isWritable: true },
    rewardsTreasuryVault: {
      value: input.rewardsTreasuryVault ?? null,
      isWritable: true,
    },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    scopePrices: { value: input.scopePrices ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userRewardAta),
      getAccountMeta(accounts.rewardsVault),
      getAccountMeta(accounts.rewardsTreasuryVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.scopePrices),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getHarvestRewardInstructionDataEncoder().encode(
      args as HarvestRewardInstructionDataArgs,
    ),
    programAddress,
  } as HarvestRewardInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountUserState,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountUserRewardAta,
    TAccountRewardsVault,
    TAccountRewardsTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountScopePrices,
    TAccountTokenProgram
  >);
}

export interface ParsedHarvestRewardInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    userState: TAccountMetas[1];
    farmState: TAccountMetas[2];
    globalConfig: TAccountMetas[3];
    rewardMint: TAccountMetas[4];
    userRewardAta: TAccountMetas[5];
    rewardsVault: TAccountMetas[6];
    rewardsTreasuryVault: TAccountMetas[7];
    farmVaultsAuthority: TAccountMetas[8];
    scopePrices?: TAccountMetas[9] | undefined;
    tokenProgram: TAccountMetas[10];
  };
  data: HarvestRewardInstructionData;
}

export function parseHarvestRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedHarvestRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === FARMS_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      userState: getNextAccount(),
      farmState: getNextAccount(),
      globalConfig: getNextAccount(),
      rewardMint: getNextAccount(),
      userRewardAta: getNextAccount(),
      rewardsVault: getNextAccount(),
      rewardsTreasuryVault: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      scopePrices: getNextOptionalAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getHarvestRewardInstructionDataDecoder().decode(instruction.data),
  };
}
