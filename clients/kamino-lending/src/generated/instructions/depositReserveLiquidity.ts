/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const DEPOSIT_RESERVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  169, 201, 30, 126, 6, 205, 102, 68,
]);

export function getDepositReserveLiquidityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_RESERVE_LIQUIDITY_DISCRIMINATOR,
  );
}

export type DepositReserveLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountReserve extends string | AccountMeta<string> = string,
  TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountReserveLiquidityMint extends string | AccountMeta<string> = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta<string> = string,
  TAccountReserveCollateralMint extends string | AccountMeta<string> = string,
  TAccountUserSourceLiquidity extends string | AccountMeta<string> = string,
  TAccountUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountCollateralTokenProgram extends string | AccountMeta<string> = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta<string> = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountUserDestinationCollateral extends string
        ? WritableAccount<TAccountUserDestinationCollateral>
        : TAccountUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export type DepositReserveLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
};

export type DepositReserveLiquidityInstructionDataArgs = {
  liquidityAmount: number | bigint;
};

export function getDepositReserveLiquidityInstructionDataEncoder(): FixedSizeEncoder<DepositReserveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_RESERVE_LIQUIDITY_DISCRIMINATOR,
    }),
  );
}

export function getDepositReserveLiquidityInstructionDataDecoder(): FixedSizeDecoder<DepositReserveLiquidityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getDepositReserveLiquidityInstructionDataCodec(): FixedSizeCodec<
  DepositReserveLiquidityInstructionDataArgs,
  DepositReserveLiquidityInstructionData
> {
  return combineCodec(
    getDepositReserveLiquidityInstructionDataEncoder(),
    getDepositReserveLiquidityInstructionDataDecoder(),
  );
}

export type DepositReserveLiquidityInput<
  TAccountOwner extends string = string,
  TAccountReserve extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  reserve: Address<TAccountReserve>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  userDestinationCollateral: Address<TAccountUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  liquidityAmount: DepositReserveLiquidityInstructionDataArgs["liquidityAmount"];
};

export function getDepositReserveLiquidityInstruction<
  TAccountOwner extends string,
  TAccountReserve extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountReserveCollateralMint extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositReserveLiquidityInput<
    TAccountOwner,
    TAccountReserve,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountUserSourceLiquidity,
    TAccountUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): DepositReserveLiquidityInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountReserve,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountReserveLiquidityMint,
  TAccountReserveLiquiditySupply,
  TAccountReserveCollateralMint,
  TAccountUserSourceLiquidity,
  TAccountUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    userDestinationCollateral: {
      value: input.userDestinationCollateral ?? null,
      isWritable: true,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.userDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    programAddress,
    data: getDepositReserveLiquidityInstructionDataEncoder().encode(
      args as DepositReserveLiquidityInstructionDataArgs,
    ),
  } as DepositReserveLiquidityInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountReserve,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountUserSourceLiquidity,
    TAccountUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >;

  return instruction;
}

export type ParsedDepositReserveLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    reserve: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveLiquiditySupply: TAccountMetas[5];
    reserveCollateralMint: TAccountMetas[6];
    userSourceLiquidity: TAccountMetas[7];
    userDestinationCollateral: TAccountMetas[8];
    collateralTokenProgram: TAccountMetas[9];
    liquidityTokenProgram: TAccountMetas[10];
    instructionSysvarAccount: TAccountMetas[11];
  };
  data: DepositReserveLiquidityInstructionData;
};

export function parseDepositReserveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositReserveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      reserve: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      userDestinationCollateral: getNextAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getDepositReserveLiquidityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
