/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([137, 145, 151, 94, 167, 113, 4, 145]);

export function getDepositObligationCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type DepositObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountDepositAccountsOwner extends string | AccountMeta = string,
  TAccountDepositAccountsObligation extends string | AccountMeta = string,
  TAccountDepositAccountsLendingMarket extends string | AccountMeta = string,
  TAccountDepositAccountsDepositReserve extends string | AccountMeta = string,
  TAccountDepositAccountsReserveDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsUserSourceCollateral extends
    | string
    | AccountMeta = string,
  TAccountDepositAccountsTokenProgram extends string | AccountMeta = string,
  TAccountDepositAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDepositAccountsOwner extends string
        ? ReadonlySignerAccount<TAccountDepositAccountsOwner> &
            AccountSignerMeta<TAccountDepositAccountsOwner>
        : TAccountDepositAccountsOwner,
      TAccountDepositAccountsObligation extends string
        ? WritableAccount<TAccountDepositAccountsObligation>
        : TAccountDepositAccountsObligation,
      TAccountDepositAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountDepositAccountsLendingMarket>
        : TAccountDepositAccountsLendingMarket,
      TAccountDepositAccountsDepositReserve extends string
        ? WritableAccount<TAccountDepositAccountsDepositReserve>
        : TAccountDepositAccountsDepositReserve,
      TAccountDepositAccountsReserveDestinationCollateral extends string
        ? WritableAccount<TAccountDepositAccountsReserveDestinationCollateral>
        : TAccountDepositAccountsReserveDestinationCollateral,
      TAccountDepositAccountsUserSourceCollateral extends string
        ? WritableAccount<TAccountDepositAccountsUserSourceCollateral>
        : TAccountDepositAccountsUserSourceCollateral,
      TAccountDepositAccountsTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositAccountsTokenProgram>
        : TAccountDepositAccountsTokenProgram,
      TAccountDepositAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountDepositAccountsInstructionSysvarAccount>
        : TAccountDepositAccountsInstructionSysvarAccount,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState>
        : TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState,
      TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState>
        : TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositObligationCollateralV2InstructionData {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
}

export interface DepositObligationCollateralV2InstructionDataArgs {
  collateralAmount: number | bigint;
}

export function getDepositObligationCollateralV2InstructionDataEncoder(): FixedSizeEncoder<DepositObligationCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getDepositObligationCollateralV2InstructionDataDecoder(): FixedSizeDecoder<DepositObligationCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getDepositObligationCollateralV2InstructionDataCodec(): FixedSizeCodec<
  DepositObligationCollateralV2InstructionDataArgs,
  DepositObligationCollateralV2InstructionData
> {
  return combineCodec(
    getDepositObligationCollateralV2InstructionDataEncoder(),
    getDepositObligationCollateralV2InstructionDataDecoder(),
  );
}

export interface DepositObligationCollateralV2Input<
  TAccountDepositAccountsOwner extends string = string,
  TAccountDepositAccountsObligation extends string = string,
  TAccountDepositAccountsLendingMarket extends string = string,
  TAccountDepositAccountsDepositReserve extends string = string,
  TAccountDepositAccountsReserveDestinationCollateral extends string = string,
  TAccountDepositAccountsUserSourceCollateral extends string = string,
  TAccountDepositAccountsTokenProgram extends string = string,
  TAccountDepositAccountsInstructionSysvarAccount extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState extends
    string = string,
  TAccountFarmsProgram extends string = string,
> {
  depositAccountsOwner: TransactionSigner<TAccountDepositAccountsOwner>;
  depositAccountsObligation: Address<TAccountDepositAccountsObligation>;
  depositAccountsLendingMarket: Address<TAccountDepositAccountsLendingMarket>;
  depositAccountsDepositReserve: Address<TAccountDepositAccountsDepositReserve>;
  depositAccountsReserveDestinationCollateral: Address<TAccountDepositAccountsReserveDestinationCollateral>;
  depositAccountsUserSourceCollateral: Address<TAccountDepositAccountsUserSourceCollateral>;
  depositAccountsTokenProgram: Address<TAccountDepositAccountsTokenProgram>;
  depositAccountsInstructionSysvarAccount?: Address<TAccountDepositAccountsInstructionSysvarAccount>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  depositObligationCollateralV2FarmsAccountsObligationFarmUserState?: Address<TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState>;
  depositObligationCollateralV2FarmsAccountsReserveFarmState?: Address<TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  collateralAmount: DepositObligationCollateralV2InstructionDataArgs["collateralAmount"];
}

export function getDepositObligationCollateralV2Instruction<
  TAccountDepositAccountsOwner extends string,
  TAccountDepositAccountsObligation extends string,
  TAccountDepositAccountsLendingMarket extends string,
  TAccountDepositAccountsDepositReserve extends string,
  TAccountDepositAccountsReserveDestinationCollateral extends string,
  TAccountDepositAccountsUserSourceCollateral extends string,
  TAccountDepositAccountsTokenProgram extends string,
  TAccountDepositAccountsInstructionSysvarAccount extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState extends
    string,
  TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState extends
    string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositObligationCollateralV2Input<
    TAccountDepositAccountsOwner,
    TAccountDepositAccountsObligation,
    TAccountDepositAccountsLendingMarket,
    TAccountDepositAccountsDepositReserve,
    TAccountDepositAccountsReserveDestinationCollateral,
    TAccountDepositAccountsUserSourceCollateral,
    TAccountDepositAccountsTokenProgram,
    TAccountDepositAccountsInstructionSysvarAccount,
    TAccountLendingMarketAuthority,
    TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState,
    TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositObligationCollateralV2Instruction<
  TProgramAddress,
  TAccountDepositAccountsOwner,
  TAccountDepositAccountsObligation,
  TAccountDepositAccountsLendingMarket,
  TAccountDepositAccountsDepositReserve,
  TAccountDepositAccountsReserveDestinationCollateral,
  TAccountDepositAccountsUserSourceCollateral,
  TAccountDepositAccountsTokenProgram,
  TAccountDepositAccountsInstructionSysvarAccount,
  TAccountLendingMarketAuthority,
  TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState,
  TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    depositAccountsOwner: {
      value: input.depositAccountsOwner ?? null,
      isWritable: false,
    },
    depositAccountsObligation: {
      value: input.depositAccountsObligation ?? null,
      isWritable: true,
    },
    depositAccountsLendingMarket: {
      value: input.depositAccountsLendingMarket ?? null,
      isWritable: false,
    },
    depositAccountsDepositReserve: {
      value: input.depositAccountsDepositReserve ?? null,
      isWritable: true,
    },
    depositAccountsReserveDestinationCollateral: {
      value: input.depositAccountsReserveDestinationCollateral ?? null,
      isWritable: true,
    },
    depositAccountsUserSourceCollateral: {
      value: input.depositAccountsUserSourceCollateral ?? null,
      isWritable: true,
    },
    depositAccountsTokenProgram: {
      value: input.depositAccountsTokenProgram ?? null,
      isWritable: false,
    },
    depositAccountsInstructionSysvarAccount: {
      value: input.depositAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    depositObligationCollateralV2FarmsAccountsObligationFarmUserState: {
      value:
        input.depositObligationCollateralV2FarmsAccountsObligationFarmUserState ??
        null,
      isWritable: true,
    },
    depositObligationCollateralV2FarmsAccountsReserveFarmState: {
      value:
        input.depositObligationCollateralV2FarmsAccountsReserveFarmState ??
        null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.depositAccountsInstructionSysvarAccount.value) {
    accounts.depositAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.depositAccountsOwner),
      getAccountMeta(accounts.depositAccountsObligation),
      getAccountMeta(accounts.depositAccountsLendingMarket),
      getAccountMeta(accounts.depositAccountsDepositReserve),
      getAccountMeta(accounts.depositAccountsReserveDestinationCollateral),
      getAccountMeta(accounts.depositAccountsUserSourceCollateral),
      getAccountMeta(accounts.depositAccountsTokenProgram),
      getAccountMeta(accounts.depositAccountsInstructionSysvarAccount),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(
        accounts.depositObligationCollateralV2FarmsAccountsObligationFarmUserState,
      ),
      getAccountMeta(
        accounts.depositObligationCollateralV2FarmsAccountsReserveFarmState,
      ),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getDepositObligationCollateralV2InstructionDataEncoder().encode(
      args as DepositObligationCollateralV2InstructionDataArgs,
    ),
  } as DepositObligationCollateralV2Instruction<
    TProgramAddress,
    TAccountDepositAccountsOwner,
    TAccountDepositAccountsObligation,
    TAccountDepositAccountsLendingMarket,
    TAccountDepositAccountsDepositReserve,
    TAccountDepositAccountsReserveDestinationCollateral,
    TAccountDepositAccountsUserSourceCollateral,
    TAccountDepositAccountsTokenProgram,
    TAccountDepositAccountsInstructionSysvarAccount,
    TAccountLendingMarketAuthority,
    TAccountDepositObligationCollateralV2FarmsAccountsObligationFarmUserState,
    TAccountDepositObligationCollateralV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedDepositObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    depositAccountsOwner: TAccountMetas[0];
    depositAccountsObligation: TAccountMetas[1];
    depositAccountsLendingMarket: TAccountMetas[2];
    depositAccountsDepositReserve: TAccountMetas[3];
    depositAccountsReserveDestinationCollateral: TAccountMetas[4];
    depositAccountsUserSourceCollateral: TAccountMetas[5];
    depositAccountsTokenProgram: TAccountMetas[6];
    depositAccountsInstructionSysvarAccount: TAccountMetas[7];
    lendingMarketAuthority: TAccountMetas[8];
    depositObligationCollateralV2FarmsAccountsObligationFarmUserState?:
      | TAccountMetas[9]
      | undefined;
    depositObligationCollateralV2FarmsAccountsReserveFarmState?:
      | TAccountMetas[10]
      | undefined;
    farmsProgram: TAccountMetas[11];
  };
  data: DepositObligationCollateralV2InstructionData;
}

export function parseDepositObligationCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositObligationCollateralV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      depositAccountsOwner: getNextAccount(),
      depositAccountsObligation: getNextAccount(),
      depositAccountsLendingMarket: getNextAccount(),
      depositAccountsDepositReserve: getNextAccount(),
      depositAccountsReserveDestinationCollateral: getNextAccount(),
      depositAccountsUserSourceCollateral: getNextAccount(),
      depositAccountsTokenProgram: getNextAccount(),
      depositAccountsInstructionSysvarAccount: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      depositObligationCollateralV2FarmsAccountsObligationFarmUserState:
        getNextOptionalAccount(),
      depositObligationCollateralV2FarmsAccountsReserveFarmState:
        getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getDepositObligationCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
