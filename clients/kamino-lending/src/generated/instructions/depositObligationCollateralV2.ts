/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const DEPOSIT_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR = new Uint8Array([
  137, 145, 151, 94, 167, 113, 4, 145,
]);

export function getDepositObligationCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type DepositObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountObligation extends string | AccountMeta<string> = string,
  TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountDepositReserve extends string | AccountMeta<string> = string,
  TAccountReserveDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountUserSourceCollateral extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends string | AccountMeta<string> = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountObligationFarmUserState extends string | AccountMeta<string> = string,
  TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountDepositReserve extends string
        ? WritableAccount<TAccountDepositReserve>
        : TAccountDepositReserve,
      TAccountReserveDestinationCollateral extends string
        ? WritableAccount<TAccountReserveDestinationCollateral>
        : TAccountReserveDestinationCollateral,
      TAccountUserSourceCollateral extends string
        ? WritableAccount<TAccountUserSourceCollateral>
        : TAccountUserSourceCollateral,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositObligationCollateralV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
};

export type DepositObligationCollateralV2InstructionDataArgs = {
  collateralAmount: number | bigint;
};

export function getDepositObligationCollateralV2InstructionDataEncoder(): FixedSizeEncoder<DepositObligationCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getDepositObligationCollateralV2InstructionDataDecoder(): FixedSizeDecoder<DepositObligationCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getDepositObligationCollateralV2InstructionDataCodec(): FixedSizeCodec<
  DepositObligationCollateralV2InstructionDataArgs,
  DepositObligationCollateralV2InstructionData
> {
  return combineCodec(
    getDepositObligationCollateralV2InstructionDataEncoder(),
    getDepositObligationCollateralV2InstructionDataDecoder(),
  );
}

export type DepositObligationCollateralV2Input<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountDepositReserve extends string = string,
  TAccountReserveDestinationCollateral extends string = string,
  TAccountUserSourceCollateral extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  depositReserve: Address<TAccountDepositReserve>;
  reserveDestinationCollateral: Address<TAccountReserveDestinationCollateral>;
  userSourceCollateral: Address<TAccountUserSourceCollateral>;
  tokenProgram: Address<TAccountTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  collateralAmount: DepositObligationCollateralV2InstructionDataArgs["collateralAmount"];
};

export function getDepositObligationCollateralV2Instruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountDepositReserve extends string,
  TAccountReserveDestinationCollateral extends string,
  TAccountUserSourceCollateral extends string,
  TAccountTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositObligationCollateralV2Input<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountDepositReserve,
    TAccountReserveDestinationCollateral,
    TAccountUserSourceCollateral,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountLendingMarketAuthority,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositObligationCollateralV2Instruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountDepositReserve,
  TAccountReserveDestinationCollateral,
  TAccountUserSourceCollateral,
  TAccountTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountLendingMarketAuthority,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    depositReserve: { value: input.depositReserve ?? null, isWritable: true },
    reserveDestinationCollateral: {
      value: input.reserveDestinationCollateral ?? null,
      isWritable: true,
    },
    userSourceCollateral: {
      value: input.userSourceCollateral ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.depositReserve),
      getAccountMeta(accounts.reserveDestinationCollateral),
      getAccountMeta(accounts.userSourceCollateral),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getDepositObligationCollateralV2InstructionDataEncoder().encode(
      args as DepositObligationCollateralV2InstructionDataArgs,
    ),
  } as DepositObligationCollateralV2Instruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountDepositReserve,
    TAccountReserveDestinationCollateral,
    TAccountUserSourceCollateral,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountLendingMarketAuthority,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export type ParsedDepositObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    depositReserve: TAccountMetas[3];
    reserveDestinationCollateral: TAccountMetas[4];
    userSourceCollateral: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    instructionSysvarAccount: TAccountMetas[7];
    lendingMarketAuthority: TAccountMetas[8];
    obligationFarmUserState?: TAccountMetas[9] | undefined;
    reserveFarmState?: TAccountMetas[10] | undefined;
    farmsProgram: TAccountMetas[11];
  };
  data: DepositObligationCollateralV2InstructionData;
};

export function parseDepositObligationCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositObligationCollateralV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      depositReserve: getNextAccount(),
      reserveDestinationCollateral: getNextAccount(),
      userSourceCollateral: getNextAccount(),
      tokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getDepositObligationCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
