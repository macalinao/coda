/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_RESERVE_CONFIG_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([61, 148, 100, 70, 143, 107, 17, 13]);

export function getUpdateReserveConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_RESERVE_CONFIG_DISCRIMINATOR,
  );
}

export type UpdateReserveConfigInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLendingMarketOwner extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLendingMarketOwner extends string
        ? ReadonlySignerAccount<TAccountLendingMarketOwner> &
            AccountSignerMeta<TAccountLendingMarketOwner>
        : TAccountLendingMarketOwner,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateReserveConfigInstructionData {
  discriminator: ReadonlyUint8Array;
  mode: bigint;
  value: ReadonlyUint8Array;
  skipValidation: boolean;
}

export interface UpdateReserveConfigInstructionDataArgs {
  mode: number | bigint;
  value: ReadonlyUint8Array;
  skipValidation: boolean;
}

export function getUpdateReserveConfigInstructionDataEncoder(): Encoder<UpdateReserveConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["mode", getU64Encoder()],
      ["value", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ["skipValidation", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_RESERVE_CONFIG_DISCRIMINATOR,
    }),
  );
}

export function getUpdateReserveConfigInstructionDataDecoder(): Decoder<UpdateReserveConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["mode", getU64Decoder()],
    ["value", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ["skipValidation", getBooleanDecoder()],
  ]);
}

export function getUpdateReserveConfigInstructionDataCodec(): Codec<
  UpdateReserveConfigInstructionDataArgs,
  UpdateReserveConfigInstructionData
> {
  return combineCodec(
    getUpdateReserveConfigInstructionDataEncoder(),
    getUpdateReserveConfigInstructionDataDecoder(),
  );
}

export interface UpdateReserveConfigInput<
  TAccountLendingMarketOwner extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
> {
  lendingMarketOwner: TransactionSigner<TAccountLendingMarketOwner>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  mode: UpdateReserveConfigInstructionDataArgs["mode"];
  value: UpdateReserveConfigInstructionDataArgs["value"];
  skipValidation: UpdateReserveConfigInstructionDataArgs["skipValidation"];
}

export function getUpdateReserveConfigInstruction<
  TAccountLendingMarketOwner extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: UpdateReserveConfigInput<
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountReserve
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateReserveConfigInstruction<
  TProgramAddress,
  TAccountLendingMarketOwner,
  TAccountLendingMarket,
  TAccountReserve
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lendingMarketOwner: {
      value: input.lendingMarketOwner ?? null,
      isWritable: false,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.lendingMarketOwner),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
    ],
    programAddress,
    data: getUpdateReserveConfigInstructionDataEncoder().encode(
      args as UpdateReserveConfigInstructionDataArgs,
    ),
  } as UpdateReserveConfigInstruction<
    TProgramAddress,
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountReserve
  >;

  return instruction;
}

export interface ParsedUpdateReserveConfigInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    lendingMarketOwner: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    reserve: TAccountMetas[2];
  };
  data: UpdateReserveConfigInstructionData;
}

export function parseUpdateReserveConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateReserveConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lendingMarketOwner: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
    },
    data: getUpdateReserveConfigInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
