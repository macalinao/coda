/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UPDATE_LENDING_MARKET_OWNER_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([118, 224, 10, 62, 196, 230, 184, 89]);

export function getUpdateLendingMarketOwnerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_LENDING_MARKET_OWNER_DISCRIMINATOR,
  );
}

export type UpdateLendingMarketOwnerInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLendingMarketOwnerCached extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLendingMarketOwnerCached extends string
        ? ReadonlySignerAccount<TAccountLendingMarketOwnerCached> &
            AccountSignerMeta<TAccountLendingMarketOwnerCached>
        : TAccountLendingMarketOwnerCached,
      TAccountLendingMarket extends string
        ? WritableAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateLendingMarketOwnerInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface UpdateLendingMarketOwnerInstructionDataArgs {}

export function getUpdateLendingMarketOwnerInstructionDataEncoder(): FixedSizeEncoder<UpdateLendingMarketOwnerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_LENDING_MARKET_OWNER_DISCRIMINATOR,
    }),
  );
}

export function getUpdateLendingMarketOwnerInstructionDataDecoder(): FixedSizeDecoder<UpdateLendingMarketOwnerInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateLendingMarketOwnerInstructionDataCodec(): FixedSizeCodec<
  UpdateLendingMarketOwnerInstructionDataArgs,
  UpdateLendingMarketOwnerInstructionData
> {
  return combineCodec(
    getUpdateLendingMarketOwnerInstructionDataEncoder(),
    getUpdateLendingMarketOwnerInstructionDataDecoder(),
  );
}

export interface UpdateLendingMarketOwnerInput<
  TAccountLendingMarketOwnerCached extends string = string,
  TAccountLendingMarket extends string = string,
> {
  lendingMarketOwnerCached: TransactionSigner<TAccountLendingMarketOwnerCached>;
  lendingMarket: Address<TAccountLendingMarket>;
}

export function getUpdateLendingMarketOwnerInstruction<
  TAccountLendingMarketOwnerCached extends string,
  TAccountLendingMarket extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: UpdateLendingMarketOwnerInput<
    TAccountLendingMarketOwnerCached,
    TAccountLendingMarket
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateLendingMarketOwnerInstruction<
  TProgramAddress,
  TAccountLendingMarketOwnerCached,
  TAccountLendingMarket
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lendingMarketOwnerCached: {
      value: input.lendingMarketOwnerCached ?? null,
      isWritable: false,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.lendingMarketOwnerCached),
      getAccountMeta(accounts.lendingMarket),
    ],
    programAddress,
    data: getUpdateLendingMarketOwnerInstructionDataEncoder().encode({}),
  } as UpdateLendingMarketOwnerInstruction<
    TProgramAddress,
    TAccountLendingMarketOwnerCached,
    TAccountLendingMarket
  >;

  return instruction;
}

export interface ParsedUpdateLendingMarketOwnerInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    lendingMarketOwnerCached: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
  };
  data: UpdateLendingMarketOwnerInstructionData;
}

export function parseUpdateLendingMarketOwnerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateLendingMarketOwnerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lendingMarketOwnerCached: getNextAccount(),
      lendingMarket: getNextAccount(),
    },
    data: getUpdateLendingMarketOwnerInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
