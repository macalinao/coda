/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REFRESH_RESERVE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [2, 218, 138, 235, 79, 201, 25, 102],
);

export function getRefreshReserveDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFRESH_RESERVE_DISCRIMINATOR,
  );
}

export type RefreshReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountReserve extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountPythOracle extends string | AccountMeta = string,
  TAccountSwitchboardPriceOracle extends string | AccountMeta = string,
  TAccountSwitchboardTwapOracle extends string | AccountMeta = string,
  TAccountScopePrices extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountPythOracle extends string
        ? ReadonlyAccount<TAccountPythOracle>
        : TAccountPythOracle,
      TAccountSwitchboardPriceOracle extends string
        ? ReadonlyAccount<TAccountSwitchboardPriceOracle>
        : TAccountSwitchboardPriceOracle,
      TAccountSwitchboardTwapOracle extends string
        ? ReadonlyAccount<TAccountSwitchboardTwapOracle>
        : TAccountSwitchboardTwapOracle,
      TAccountScopePrices extends string
        ? ReadonlyAccount<TAccountScopePrices>
        : TAccountScopePrices,
      ...TRemainingAccounts,
    ]
  >;

export interface RefreshReserveInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RefreshReserveInstructionDataArgs {}

export function getRefreshReserveInstructionDataEncoder(): FixedSizeEncoder<RefreshReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REFRESH_RESERVE_DISCRIMINATOR }),
  );
}

export function getRefreshReserveInstructionDataDecoder(): FixedSizeDecoder<RefreshReserveInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRefreshReserveInstructionDataCodec(): FixedSizeCodec<
  RefreshReserveInstructionDataArgs,
  RefreshReserveInstructionData
> {
  return combineCodec(
    getRefreshReserveInstructionDataEncoder(),
    getRefreshReserveInstructionDataDecoder(),
  );
}

export interface RefreshReserveInput<
  TAccountReserve extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountPythOracle extends string = string,
  TAccountSwitchboardPriceOracle extends string = string,
  TAccountSwitchboardTwapOracle extends string = string,
  TAccountScopePrices extends string = string,
> {
  reserve: Address<TAccountReserve>;
  lendingMarket: Address<TAccountLendingMarket>;
  pythOracle?: Address<TAccountPythOracle>;
  switchboardPriceOracle?: Address<TAccountSwitchboardPriceOracle>;
  switchboardTwapOracle?: Address<TAccountSwitchboardTwapOracle>;
  scopePrices?: Address<TAccountScopePrices>;
}

export function getRefreshReserveInstruction<
  TAccountReserve extends string,
  TAccountLendingMarket extends string,
  TAccountPythOracle extends string,
  TAccountSwitchboardPriceOracle extends string,
  TAccountSwitchboardTwapOracle extends string,
  TAccountScopePrices extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RefreshReserveInput<
    TAccountReserve,
    TAccountLendingMarket,
    TAccountPythOracle,
    TAccountSwitchboardPriceOracle,
    TAccountSwitchboardTwapOracle,
    TAccountScopePrices
  >,
  config?: { programAddress?: TProgramAddress },
): RefreshReserveInstruction<
  TProgramAddress,
  TAccountReserve,
  TAccountLendingMarket,
  TAccountPythOracle,
  TAccountSwitchboardPriceOracle,
  TAccountSwitchboardTwapOracle,
  TAccountScopePrices
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reserve: { value: input.reserve ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    pythOracle: { value: input.pythOracle ?? null, isWritable: false },
    switchboardPriceOracle: {
      value: input.switchboardPriceOracle ?? null,
      isWritable: false,
    },
    switchboardTwapOracle: {
      value: input.switchboardTwapOracle ?? null,
      isWritable: false,
    },
    scopePrices: { value: input.scopePrices ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.pythOracle),
      getAccountMeta(accounts.switchboardPriceOracle),
      getAccountMeta(accounts.switchboardTwapOracle),
      getAccountMeta(accounts.scopePrices),
    ],
    programAddress,
    data: getRefreshReserveInstructionDataEncoder().encode({}),
  } as RefreshReserveInstruction<
    TProgramAddress,
    TAccountReserve,
    TAccountLendingMarket,
    TAccountPythOracle,
    TAccountSwitchboardPriceOracle,
    TAccountSwitchboardTwapOracle,
    TAccountScopePrices
  >;

  return instruction;
}

export interface ParsedRefreshReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    reserve: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    pythOracle?: TAccountMetas[2] | undefined;
    switchboardPriceOracle?: TAccountMetas[3] | undefined;
    switchboardTwapOracle?: TAccountMetas[4] | undefined;
    scopePrices?: TAccountMetas[5] | undefined;
  };
  data: RefreshReserveInstructionData;
}

export function parseRefreshReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRefreshReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      reserve: getNextAccount(),
      lendingMarket: getNextAccount(),
      pythOracle: getNextOptionalAccount(),
      switchboardPriceOracle: getNextOptionalAccount(),
      switchboardTwapOracle: getNextOptionalAccount(),
      scopePrices: getNextOptionalAccount(),
    },
    data: getRefreshReserveInstructionDataDecoder().decode(instruction.data),
  };
}
