/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REDEEM_RESERVE_COLLATERAL_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([234, 117, 181, 125, 185, 142, 220, 29]);

export function getRedeemReserveCollateralDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REDEEM_RESERVE_COLLATERAL_DISCRIMINATOR,
  );
}

export type RedeemReserveCollateralInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveCollateralMint extends string | AccountMeta = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta = string,
  TAccountUserSourceCollateral extends string | AccountMeta = string,
  TAccountUserDestinationLiquidity extends string | AccountMeta = string,
  TAccountCollateralTokenProgram extends string | AccountMeta = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountUserSourceCollateral extends string
        ? WritableAccount<TAccountUserSourceCollateral>
        : TAccountUserSourceCollateral,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface RedeemReserveCollateralInstructionData {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
}

export interface RedeemReserveCollateralInstructionDataArgs {
  collateralAmount: number | bigint;
}

export function getRedeemReserveCollateralInstructionDataEncoder(): FixedSizeEncoder<RedeemReserveCollateralInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REDEEM_RESERVE_COLLATERAL_DISCRIMINATOR,
    }),
  );
}

export function getRedeemReserveCollateralInstructionDataDecoder(): FixedSizeDecoder<RedeemReserveCollateralInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getRedeemReserveCollateralInstructionDataCodec(): FixedSizeCodec<
  RedeemReserveCollateralInstructionDataArgs,
  RedeemReserveCollateralInstructionData
> {
  return combineCodec(
    getRedeemReserveCollateralInstructionDataEncoder(),
    getRedeemReserveCollateralInstructionDataDecoder(),
  );
}

export interface RedeemReserveCollateralInput<
  TAccountOwner extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountUserSourceCollateral extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  userSourceCollateral: Address<TAccountUserSourceCollateral>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  collateralAmount: RedeemReserveCollateralInstructionDataArgs["collateralAmount"];
}

export function getRedeemReserveCollateralInstruction<
  TAccountOwner extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountUserSourceCollateral extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RedeemReserveCollateralInput<
    TAccountOwner,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountLendingMarketAuthority,
    TAccountReserveLiquidityMint,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserSourceCollateral,
    TAccountUserDestinationLiquidity,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): RedeemReserveCollateralInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountLendingMarketAuthority,
  TAccountReserveLiquidityMint,
  TAccountReserveCollateralMint,
  TAccountReserveLiquiditySupply,
  TAccountUserSourceCollateral,
  TAccountUserDestinationLiquidity,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    userSourceCollateral: {
      value: input.userSourceCollateral ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.userSourceCollateral),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    programAddress,
    data: getRedeemReserveCollateralInstructionDataEncoder().encode(
      args as RedeemReserveCollateralInstructionDataArgs,
    ),
  } as RedeemReserveCollateralInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountLendingMarketAuthority,
    TAccountReserveLiquidityMint,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserSourceCollateral,
    TAccountUserDestinationLiquidity,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >;

  return instruction;
}

export interface ParsedRedeemReserveCollateralInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    reserve: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveCollateralMint: TAccountMetas[5];
    reserveLiquiditySupply: TAccountMetas[6];
    userSourceCollateral: TAccountMetas[7];
    userDestinationLiquidity: TAccountMetas[8];
    collateralTokenProgram: TAccountMetas[9];
    liquidityTokenProgram: TAccountMetas[10];
    instructionSysvarAccount: TAccountMetas[11];
  };
  data: RedeemReserveCollateralInstructionData;
}

export function parseRedeemReserveCollateralInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRedeemReserveCollateralInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      userSourceCollateral: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getRedeemReserveCollateralInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
