/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { findFarmVaultsAuthorityPda } from "../pdas/index.js";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const INITIALIZE_FARM_DELEGATED_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([250, 84, 101, 25, 51, 77, 204, 91]);

export function getInitializeFarmDelegatedDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_FARM_DELEGATED_DISCRIMINATOR,
  );
}

export type InitializeFarmDelegatedInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountFarmAdmin extends string | AccountMeta = string,
  TAccountFarmDelegate extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFarmAdmin extends string
        ? WritableSignerAccount<TAccountFarmAdmin> &
            AccountSignerMeta<TAccountFarmAdmin>
        : TAccountFarmAdmin,
      TAccountFarmDelegate extends string
        ? ReadonlySignerAccount<TAccountFarmDelegate> &
            AccountSignerMeta<TAccountFarmDelegate>
        : TAccountFarmDelegate,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeFarmDelegatedInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitializeFarmDelegatedInstructionDataArgs {}

export function getInitializeFarmDelegatedInstructionDataEncoder(): FixedSizeEncoder<InitializeFarmDelegatedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_FARM_DELEGATED_DISCRIMINATOR,
    }),
  );
}

export function getInitializeFarmDelegatedInstructionDataDecoder(): FixedSizeDecoder<InitializeFarmDelegatedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeFarmDelegatedInstructionDataCodec(): FixedSizeCodec<
  InitializeFarmDelegatedInstructionDataArgs,
  InitializeFarmDelegatedInstructionData
> {
  return combineCodec(
    getInitializeFarmDelegatedInstructionDataEncoder(),
    getInitializeFarmDelegatedInstructionDataDecoder(),
  );
}

export interface InitializeFarmDelegatedAsyncInput<
  TAccountFarmAdmin extends string = string,
  TAccountFarmDelegate extends string = string,
  TAccountFarmState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  farmAdmin: TransactionSigner<TAccountFarmAdmin>;
  farmDelegate: TransactionSigner<TAccountFarmDelegate>;
  farmState: Address<TAccountFarmState>;
  globalConfig: Address<TAccountGlobalConfig>;
  farmVaultsAuthority?: Address<TAccountFarmVaultsAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
}

export async function getInitializeFarmDelegatedInstructionAsync<
  TAccountFarmAdmin extends string,
  TAccountFarmDelegate extends string,
  TAccountFarmState extends string,
  TAccountGlobalConfig extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: InitializeFarmDelegatedAsyncInput<
    TAccountFarmAdmin,
    TAccountFarmDelegate,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountFarmVaultsAuthority,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializeFarmDelegatedInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmDelegate,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountFarmVaultsAuthority,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    farmAdmin: { value: input.farmAdmin ?? null, isWritable: true },
    farmDelegate: { value: input.farmDelegate ?? null, isWritable: false },
    farmState: { value: input.farmState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.farmVaultsAuthority.value) {
    accounts.farmVaultsAuthority.value = await findFarmVaultsAuthorityPda({
      farmState: expectAddress(accounts.farmState.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.farmAdmin),
      getAccountMeta(accounts.farmDelegate),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializeFarmDelegatedInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeFarmDelegatedInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmDelegate,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountFarmVaultsAuthority,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface InitializeFarmDelegatedInput<
  TAccountFarmAdmin extends string = string,
  TAccountFarmDelegate extends string = string,
  TAccountFarmState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  farmAdmin: TransactionSigner<TAccountFarmAdmin>;
  farmDelegate: TransactionSigner<TAccountFarmDelegate>;
  farmState: Address<TAccountFarmState>;
  globalConfig: Address<TAccountGlobalConfig>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
}

export function getInitializeFarmDelegatedInstruction<
  TAccountFarmAdmin extends string,
  TAccountFarmDelegate extends string,
  TAccountFarmState extends string,
  TAccountGlobalConfig extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: InitializeFarmDelegatedInput<
    TAccountFarmAdmin,
    TAccountFarmDelegate,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountFarmVaultsAuthority,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeFarmDelegatedInstruction<
  TProgramAddress,
  TAccountFarmAdmin,
  TAccountFarmDelegate,
  TAccountFarmState,
  TAccountGlobalConfig,
  TAccountFarmVaultsAuthority,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    farmAdmin: { value: input.farmAdmin ?? null, isWritable: true },
    farmDelegate: { value: input.farmDelegate ?? null, isWritable: false },
    farmState: { value: input.farmState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.farmAdmin),
      getAccountMeta(accounts.farmDelegate),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializeFarmDelegatedInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeFarmDelegatedInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmDelegate,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountFarmVaultsAuthority,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface ParsedInitializeFarmDelegatedInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    farmAdmin: TAccountMetas[0];
    farmDelegate: TAccountMetas[1];
    farmState: TAccountMetas[2];
    globalConfig: TAccountMetas[3];
    farmVaultsAuthority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    rent: TAccountMetas[6];
  };
  data: InitializeFarmDelegatedInstructionData;
}

export function parseInitializeFarmDelegatedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeFarmDelegatedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      farmAdmin: getNextAccount(),
      farmDelegate: getNextAccount(),
      farmState: getNextAccount(),
      globalConfig: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializeFarmDelegatedInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
