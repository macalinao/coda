/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const REFRESH_OBLIGATION_FARMS_FOR_RESERVE_DISCRIMINATOR =
  new Uint8Array([140, 144, 253, 21, 10, 74, 248, 3]);

export function getRefreshObligationFarmsForReserveDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFRESH_OBLIGATION_FARMS_FOR_RESERVE_DISCRIMINATOR,
  );
}

export type RefreshObligationFarmsForReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountCrank extends string | AccountMeta<string> = string,
  TAccountBaseAccountsObligation extends string | AccountMeta<string> = string,
  TAccountBaseAccountsLendingMarketAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountBaseAccountsReserve extends string | AccountMeta<string> = string,
  TAccountBaseAccountsReserveFarmState extends
    | string
    | AccountMeta<string> = string,
  TAccountBaseAccountsObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  TAccountBaseAccountsLendingMarket extends
    | string
    | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TAccountRent extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCrank extends string
        ? ReadonlySignerAccount<TAccountCrank> &
            AccountSignerMeta<TAccountCrank>
        : TAccountCrank,
      TAccountBaseAccountsObligation extends string
        ? ReadonlyAccount<TAccountBaseAccountsObligation>
        : TAccountBaseAccountsObligation,
      TAccountBaseAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountBaseAccountsLendingMarketAuthority>
        : TAccountBaseAccountsLendingMarketAuthority,
      TAccountBaseAccountsReserve extends string
        ? ReadonlyAccount<TAccountBaseAccountsReserve>
        : TAccountBaseAccountsReserve,
      TAccountBaseAccountsReserveFarmState extends string
        ? WritableAccount<TAccountBaseAccountsReserveFarmState>
        : TAccountBaseAccountsReserveFarmState,
      TAccountBaseAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountBaseAccountsObligationFarmUserState>
        : TAccountBaseAccountsObligationFarmUserState,
      TAccountBaseAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountBaseAccountsLendingMarket>
        : TAccountBaseAccountsLendingMarket,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RefreshObligationFarmsForReserveInstructionData = {
  discriminator: ReadonlyUint8Array;
  mode: number;
};

export type RefreshObligationFarmsForReserveInstructionDataArgs = {
  mode: number;
};

export function getRefreshObligationFarmsForReserveInstructionDataEncoder(): FixedSizeEncoder<RefreshObligationFarmsForReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["mode", getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REFRESH_OBLIGATION_FARMS_FOR_RESERVE_DISCRIMINATOR,
    }),
  );
}

export function getRefreshObligationFarmsForReserveInstructionDataDecoder(): FixedSizeDecoder<RefreshObligationFarmsForReserveInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["mode", getU8Decoder()],
  ]);
}

export function getRefreshObligationFarmsForReserveInstructionDataCodec(): FixedSizeCodec<
  RefreshObligationFarmsForReserveInstructionDataArgs,
  RefreshObligationFarmsForReserveInstructionData
> {
  return combineCodec(
    getRefreshObligationFarmsForReserveInstructionDataEncoder(),
    getRefreshObligationFarmsForReserveInstructionDataDecoder(),
  );
}

export type RefreshObligationFarmsForReserveInput<
  TAccountCrank extends string = string,
  TAccountBaseAccountsObligation extends string = string,
  TAccountBaseAccountsLendingMarketAuthority extends string = string,
  TAccountBaseAccountsReserve extends string = string,
  TAccountBaseAccountsReserveFarmState extends string = string,
  TAccountBaseAccountsObligationFarmUserState extends string = string,
  TAccountBaseAccountsLendingMarket extends string = string,
  TAccountFarmsProgram extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  crank: TransactionSigner<TAccountCrank>;
  baseAccountsObligation: Address<TAccountBaseAccountsObligation>;
  baseAccountsLendingMarketAuthority: Address<TAccountBaseAccountsLendingMarketAuthority>;
  baseAccountsReserve: Address<TAccountBaseAccountsReserve>;
  baseAccountsReserveFarmState: Address<TAccountBaseAccountsReserveFarmState>;
  baseAccountsObligationFarmUserState: Address<TAccountBaseAccountsObligationFarmUserState>;
  baseAccountsLendingMarket: Address<TAccountBaseAccountsLendingMarket>;
  farmsProgram: Address<TAccountFarmsProgram>;
  rent: Address<TAccountRent>;
  systemProgram: Address<TAccountSystemProgram>;
  mode: RefreshObligationFarmsForReserveInstructionDataArgs["mode"];
};

export function getRefreshObligationFarmsForReserveInstruction<
  TAccountCrank extends string,
  TAccountBaseAccountsObligation extends string,
  TAccountBaseAccountsLendingMarketAuthority extends string,
  TAccountBaseAccountsReserve extends string,
  TAccountBaseAccountsReserveFarmState extends string,
  TAccountBaseAccountsObligationFarmUserState extends string,
  TAccountBaseAccountsLendingMarket extends string,
  TAccountFarmsProgram extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RefreshObligationFarmsForReserveInput<
    TAccountCrank,
    TAccountBaseAccountsObligation,
    TAccountBaseAccountsLendingMarketAuthority,
    TAccountBaseAccountsReserve,
    TAccountBaseAccountsReserveFarmState,
    TAccountBaseAccountsObligationFarmUserState,
    TAccountBaseAccountsLendingMarket,
    TAccountFarmsProgram,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RefreshObligationFarmsForReserveInstruction<
  TProgramAddress,
  TAccountCrank,
  TAccountBaseAccountsObligation,
  TAccountBaseAccountsLendingMarketAuthority,
  TAccountBaseAccountsReserve,
  TAccountBaseAccountsReserveFarmState,
  TAccountBaseAccountsObligationFarmUserState,
  TAccountBaseAccountsLendingMarket,
  TAccountFarmsProgram,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    crank: { value: input.crank ?? null, isWritable: false },
    baseAccountsObligation: {
      value: input.baseAccountsObligation ?? null,
      isWritable: false,
    },
    baseAccountsLendingMarketAuthority: {
      value: input.baseAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    baseAccountsReserve: {
      value: input.baseAccountsReserve ?? null,
      isWritable: false,
    },
    baseAccountsReserveFarmState: {
      value: input.baseAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    baseAccountsObligationFarmUserState: {
      value: input.baseAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    baseAccountsLendingMarket: {
      value: input.baseAccountsLendingMarket ?? null,
      isWritable: false,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.crank),
      getAccountMeta(accounts.baseAccountsObligation),
      getAccountMeta(accounts.baseAccountsLendingMarketAuthority),
      getAccountMeta(accounts.baseAccountsReserve),
      getAccountMeta(accounts.baseAccountsReserveFarmState),
      getAccountMeta(accounts.baseAccountsObligationFarmUserState),
      getAccountMeta(accounts.baseAccountsLendingMarket),
      getAccountMeta(accounts.farmsProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRefreshObligationFarmsForReserveInstructionDataEncoder().encode(
      args as RefreshObligationFarmsForReserveInstructionDataArgs,
    ),
  } as RefreshObligationFarmsForReserveInstruction<
    TProgramAddress,
    TAccountCrank,
    TAccountBaseAccountsObligation,
    TAccountBaseAccountsLendingMarketAuthority,
    TAccountBaseAccountsReserve,
    TAccountBaseAccountsReserveFarmState,
    TAccountBaseAccountsObligationFarmUserState,
    TAccountBaseAccountsLendingMarket,
    TAccountFarmsProgram,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRefreshObligationFarmsForReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    crank: TAccountMetas[0];
    baseAccountsObligation: TAccountMetas[1];
    baseAccountsLendingMarketAuthority: TAccountMetas[2];
    baseAccountsReserve: TAccountMetas[3];
    baseAccountsReserveFarmState: TAccountMetas[4];
    baseAccountsObligationFarmUserState: TAccountMetas[5];
    baseAccountsLendingMarket: TAccountMetas[6];
    farmsProgram: TAccountMetas[7];
    rent: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: RefreshObligationFarmsForReserveInstructionData;
};

export function parseRefreshObligationFarmsForReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRefreshObligationFarmsForReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      crank: getNextAccount(),
      baseAccountsObligation: getNextAccount(),
      baseAccountsLendingMarketAuthority: getNextAccount(),
      baseAccountsReserve: getNextAccount(),
      baseAccountsReserveFarmState: getNextAccount(),
      baseAccountsObligationFarmUserState: getNextAccount(),
      baseAccountsLendingMarket: getNextAccount(),
      farmsProgram: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRefreshObligationFarmsForReserveInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
