/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findLendingMarketAuthPda } from "../pdas/index.js";
import {
  FARMS_PROGRAM_ADDRESS,
  KAMINO_LENDING_PROGRAM_ADDRESS,
} from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const SOCIALIZE_LOSS_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([238, 95, 98, 220, 187, 40, 204, 154]);

export function getSocializeLossV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SOCIALIZE_LOSS_V2_DISCRIMINATOR,
  );
}

export type SocializeLossV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountRiskCouncil extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountObligationFarmUserState extends string | AccountMeta = string,
  TAccountReserveFarmState extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountFarmsProgram extends
    | string
    | AccountMeta = "FarmsPZpWu9i7Kky8tPN37rs2TpmMrAZrC7S7vJa91Hr",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRiskCouncil extends string
        ? ReadonlySignerAccount<TAccountRiskCouncil> &
            AccountSignerMeta<TAccountRiskCouncil>
        : TAccountRiskCouncil,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface SocializeLossV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface SocializeLossV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getSocializeLossV2InstructionDataEncoder(): FixedSizeEncoder<SocializeLossV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SOCIALIZE_LOSS_V2_DISCRIMINATOR }),
  );
}

export function getSocializeLossV2InstructionDataDecoder(): FixedSizeDecoder<SocializeLossV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getSocializeLossV2InstructionDataCodec(): FixedSizeCodec<
  SocializeLossV2InstructionDataArgs,
  SocializeLossV2InstructionData
> {
  return combineCodec(
    getSocializeLossV2InstructionDataEncoder(),
    getSocializeLossV2InstructionDataDecoder(),
  );
}

export interface SocializeLossV2AsyncInput<
  TAccountRiskCouncil extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  riskCouncil: TransactionSigner<TAccountRiskCouncil>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  lendingMarketAuthority?: Address<TAccountLendingMarketAuthority>;
  farmsProgram?: Address<TAccountFarmsProgram>;
  liquidityAmount: SocializeLossV2InstructionDataArgs["liquidityAmount"];
}

export async function getSocializeLossV2InstructionAsync<
  TAccountRiskCouncil extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountInstructionSysvarAccount extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: SocializeLossV2AsyncInput<
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  SocializeLossV2Instruction<
    TProgramAddress,
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    riskCouncil: { value: input.riskCouncil ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.lendingMarketAuthority.value) {
    accounts.lendingMarketAuthority.value = await findLendingMarketAuthPda({
      lendingMarket: expectAddress(accounts.lendingMarket.value),
    });
  }
  if (!accounts.farmsProgram.value) {
    accounts.farmsProgram.value = FARMS_PROGRAM_ADDRESS;
    accounts.farmsProgram.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.riskCouncil),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.farmsProgram),
    ],
    data: getSocializeLossV2InstructionDataEncoder().encode(
      args as SocializeLossV2InstructionDataArgs,
    ),
    programAddress,
  } as SocializeLossV2Instruction<
    TProgramAddress,
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >);
}

export interface SocializeLossV2Input<
  TAccountRiskCouncil extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  riskCouncil: TransactionSigner<TAccountRiskCouncil>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  farmsProgram?: Address<TAccountFarmsProgram>;
  liquidityAmount: SocializeLossV2InstructionDataArgs["liquidityAmount"];
}

export function getSocializeLossV2Instruction<
  TAccountRiskCouncil extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountInstructionSysvarAccount extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: SocializeLossV2Input<
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): SocializeLossV2Instruction<
  TProgramAddress,
  TAccountRiskCouncil,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountLendingMarketAuthority,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    riskCouncil: { value: input.riskCouncil ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.farmsProgram.value) {
    accounts.farmsProgram.value = FARMS_PROGRAM_ADDRESS;
    accounts.farmsProgram.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.riskCouncil),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.farmsProgram),
    ],
    data: getSocializeLossV2InstructionDataEncoder().encode(
      args as SocializeLossV2InstructionDataArgs,
    ),
    programAddress,
  } as SocializeLossV2Instruction<
    TProgramAddress,
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >);
}

export interface ParsedSocializeLossV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    riskCouncil: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    reserve: TAccountMetas[3];
    instructionSysvarAccount: TAccountMetas[4];
    obligationFarmUserState?: TAccountMetas[5] | undefined;
    reserveFarmState?: TAccountMetas[6] | undefined;
    lendingMarketAuthority: TAccountMetas[7];
    farmsProgram: TAccountMetas[8];
  };
  data: SocializeLossV2InstructionData;
}

export function parseSocializeLossV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSocializeLossV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      riskCouncil: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      lendingMarketAuthority: getNextAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getSocializeLossV2InstructionDataDecoder().decode(instruction.data),
  };
}
