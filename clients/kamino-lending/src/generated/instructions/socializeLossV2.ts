/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SOCIALIZE_LOSS_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([238, 95, 98, 220, 187, 40, 204, 154]);

export function getSocializeLossV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SOCIALIZE_LOSS_V2_DISCRIMINATOR,
  );
}

export type SocializeLossV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountSocializeLossAccountsRiskCouncil extends
    | string
    | AccountMeta = string,
  TAccountSocializeLossAccountsObligation extends string | AccountMeta = string,
  TAccountSocializeLossAccountsLendingMarket extends
    | string
    | AccountMeta = string,
  TAccountSocializeLossAccountsReserve extends string | AccountMeta = string,
  TAccountSocializeLossAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountSocializeLossV2FarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountSocializeLossV2FarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSocializeLossAccountsRiskCouncil extends string
        ? ReadonlySignerAccount<TAccountSocializeLossAccountsRiskCouncil> &
            AccountSignerMeta<TAccountSocializeLossAccountsRiskCouncil>
        : TAccountSocializeLossAccountsRiskCouncil,
      TAccountSocializeLossAccountsObligation extends string
        ? WritableAccount<TAccountSocializeLossAccountsObligation>
        : TAccountSocializeLossAccountsObligation,
      TAccountSocializeLossAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountSocializeLossAccountsLendingMarket>
        : TAccountSocializeLossAccountsLendingMarket,
      TAccountSocializeLossAccountsReserve extends string
        ? WritableAccount<TAccountSocializeLossAccountsReserve>
        : TAccountSocializeLossAccountsReserve,
      TAccountSocializeLossAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountSocializeLossAccountsInstructionSysvarAccount>
        : TAccountSocializeLossAccountsInstructionSysvarAccount,
      TAccountSocializeLossV2FarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountSocializeLossV2FarmsAccountsObligationFarmUserState>
        : TAccountSocializeLossV2FarmsAccountsObligationFarmUserState,
      TAccountSocializeLossV2FarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountSocializeLossV2FarmsAccountsReserveFarmState>
        : TAccountSocializeLossV2FarmsAccountsReserveFarmState,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface SocializeLossV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface SocializeLossV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getSocializeLossV2InstructionDataEncoder(): FixedSizeEncoder<SocializeLossV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SOCIALIZE_LOSS_V2_DISCRIMINATOR }),
  );
}

export function getSocializeLossV2InstructionDataDecoder(): FixedSizeDecoder<SocializeLossV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getSocializeLossV2InstructionDataCodec(): FixedSizeCodec<
  SocializeLossV2InstructionDataArgs,
  SocializeLossV2InstructionData
> {
  return combineCodec(
    getSocializeLossV2InstructionDataEncoder(),
    getSocializeLossV2InstructionDataDecoder(),
  );
}

export interface SocializeLossV2Input<
  TAccountSocializeLossAccountsRiskCouncil extends string = string,
  TAccountSocializeLossAccountsObligation extends string = string,
  TAccountSocializeLossAccountsLendingMarket extends string = string,
  TAccountSocializeLossAccountsReserve extends string = string,
  TAccountSocializeLossAccountsInstructionSysvarAccount extends string = string,
  TAccountSocializeLossV2FarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountSocializeLossV2FarmsAccountsReserveFarmState extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  socializeLossAccountsRiskCouncil: TransactionSigner<TAccountSocializeLossAccountsRiskCouncil>;
  socializeLossAccountsObligation: Address<TAccountSocializeLossAccountsObligation>;
  socializeLossAccountsLendingMarket: Address<TAccountSocializeLossAccountsLendingMarket>;
  socializeLossAccountsReserve: Address<TAccountSocializeLossAccountsReserve>;
  socializeLossAccountsInstructionSysvarAccount?: Address<TAccountSocializeLossAccountsInstructionSysvarAccount>;
  socializeLossV2FarmsAccountsObligationFarmUserState?: Address<TAccountSocializeLossV2FarmsAccountsObligationFarmUserState>;
  socializeLossV2FarmsAccountsReserveFarmState?: Address<TAccountSocializeLossV2FarmsAccountsReserveFarmState>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: SocializeLossV2InstructionDataArgs["liquidityAmount"];
}

export function getSocializeLossV2Instruction<
  TAccountSocializeLossAccountsRiskCouncil extends string,
  TAccountSocializeLossAccountsObligation extends string,
  TAccountSocializeLossAccountsLendingMarket extends string,
  TAccountSocializeLossAccountsReserve extends string,
  TAccountSocializeLossAccountsInstructionSysvarAccount extends string,
  TAccountSocializeLossV2FarmsAccountsObligationFarmUserState extends string,
  TAccountSocializeLossV2FarmsAccountsReserveFarmState extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: SocializeLossV2Input<
    TAccountSocializeLossAccountsRiskCouncil,
    TAccountSocializeLossAccountsObligation,
    TAccountSocializeLossAccountsLendingMarket,
    TAccountSocializeLossAccountsReserve,
    TAccountSocializeLossAccountsInstructionSysvarAccount,
    TAccountSocializeLossV2FarmsAccountsObligationFarmUserState,
    TAccountSocializeLossV2FarmsAccountsReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): SocializeLossV2Instruction<
  TProgramAddress,
  TAccountSocializeLossAccountsRiskCouncil,
  TAccountSocializeLossAccountsObligation,
  TAccountSocializeLossAccountsLendingMarket,
  TAccountSocializeLossAccountsReserve,
  TAccountSocializeLossAccountsInstructionSysvarAccount,
  TAccountSocializeLossV2FarmsAccountsObligationFarmUserState,
  TAccountSocializeLossV2FarmsAccountsReserveFarmState,
  TAccountLendingMarketAuthority,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    socializeLossAccountsRiskCouncil: {
      value: input.socializeLossAccountsRiskCouncil ?? null,
      isWritable: false,
    },
    socializeLossAccountsObligation: {
      value: input.socializeLossAccountsObligation ?? null,
      isWritable: true,
    },
    socializeLossAccountsLendingMarket: {
      value: input.socializeLossAccountsLendingMarket ?? null,
      isWritable: false,
    },
    socializeLossAccountsReserve: {
      value: input.socializeLossAccountsReserve ?? null,
      isWritable: true,
    },
    socializeLossAccountsInstructionSysvarAccount: {
      value: input.socializeLossAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    socializeLossV2FarmsAccountsObligationFarmUserState: {
      value: input.socializeLossV2FarmsAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    socializeLossV2FarmsAccountsReserveFarmState: {
      value: input.socializeLossV2FarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.socializeLossAccountsInstructionSysvarAccount.value) {
    accounts.socializeLossAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.socializeLossAccountsRiskCouncil),
      getAccountMeta(accounts.socializeLossAccountsObligation),
      getAccountMeta(accounts.socializeLossAccountsLendingMarket),
      getAccountMeta(accounts.socializeLossAccountsReserve),
      getAccountMeta(accounts.socializeLossAccountsInstructionSysvarAccount),
      getAccountMeta(
        accounts.socializeLossV2FarmsAccountsObligationFarmUserState,
      ),
      getAccountMeta(accounts.socializeLossV2FarmsAccountsReserveFarmState),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getSocializeLossV2InstructionDataEncoder().encode(
      args as SocializeLossV2InstructionDataArgs,
    ),
  } as SocializeLossV2Instruction<
    TProgramAddress,
    TAccountSocializeLossAccountsRiskCouncil,
    TAccountSocializeLossAccountsObligation,
    TAccountSocializeLossAccountsLendingMarket,
    TAccountSocializeLossAccountsReserve,
    TAccountSocializeLossAccountsInstructionSysvarAccount,
    TAccountSocializeLossV2FarmsAccountsObligationFarmUserState,
    TAccountSocializeLossV2FarmsAccountsReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedSocializeLossV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    socializeLossAccountsRiskCouncil: TAccountMetas[0];
    socializeLossAccountsObligation: TAccountMetas[1];
    socializeLossAccountsLendingMarket: TAccountMetas[2];
    socializeLossAccountsReserve: TAccountMetas[3];
    socializeLossAccountsInstructionSysvarAccount: TAccountMetas[4];
    socializeLossV2FarmsAccountsObligationFarmUserState?:
      | TAccountMetas[5]
      | undefined;
    socializeLossV2FarmsAccountsReserveFarmState?: TAccountMetas[6] | undefined;
    lendingMarketAuthority: TAccountMetas[7];
    farmsProgram: TAccountMetas[8];
  };
  data: SocializeLossV2InstructionData;
}

export function parseSocializeLossV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSocializeLossV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      socializeLossAccountsRiskCouncil: getNextAccount(),
      socializeLossAccountsObligation: getNextAccount(),
      socializeLossAccountsLendingMarket: getNextAccount(),
      socializeLossAccountsReserve: getNextAccount(),
      socializeLossAccountsInstructionSysvarAccount: getNextAccount(),
      socializeLossV2FarmsAccountsObligationFarmUserState:
        getNextOptionalAccount(),
      socializeLossV2FarmsAccountsReserveFarmState: getNextOptionalAccount(),
      lendingMarketAuthority: getNextAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getSocializeLossV2InstructionDataDecoder().decode(instruction.data),
  };
}
