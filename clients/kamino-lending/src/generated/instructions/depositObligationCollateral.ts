/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_OBLIGATION_COLLATERAL_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([108, 209, 4, 72, 21, 22, 118, 133]);

export function getDepositObligationCollateralDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_OBLIGATION_COLLATERAL_DISCRIMINATOR,
  );
}

export type DepositObligationCollateralInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountDepositReserve extends string | AccountMeta = string,
  TAccountReserveDestinationCollateral extends string | AccountMeta = string,
  TAccountUserSourceCollateral extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountDepositReserve extends string
        ? WritableAccount<TAccountDepositReserve>
        : TAccountDepositReserve,
      TAccountReserveDestinationCollateral extends string
        ? WritableAccount<TAccountReserveDestinationCollateral>
        : TAccountReserveDestinationCollateral,
      TAccountUserSourceCollateral extends string
        ? WritableAccount<TAccountUserSourceCollateral>
        : TAccountUserSourceCollateral,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositObligationCollateralInstructionData {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
}

export interface DepositObligationCollateralInstructionDataArgs {
  collateralAmount: number | bigint;
}

export function getDepositObligationCollateralInstructionDataEncoder(): FixedSizeEncoder<DepositObligationCollateralInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_OBLIGATION_COLLATERAL_DISCRIMINATOR,
    }),
  );
}

export function getDepositObligationCollateralInstructionDataDecoder(): FixedSizeDecoder<DepositObligationCollateralInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getDepositObligationCollateralInstructionDataCodec(): FixedSizeCodec<
  DepositObligationCollateralInstructionDataArgs,
  DepositObligationCollateralInstructionData
> {
  return combineCodec(
    getDepositObligationCollateralInstructionDataEncoder(),
    getDepositObligationCollateralInstructionDataDecoder(),
  );
}

export interface DepositObligationCollateralInput<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountDepositReserve extends string = string,
  TAccountReserveDestinationCollateral extends string = string,
  TAccountUserSourceCollateral extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  depositReserve: Address<TAccountDepositReserve>;
  reserveDestinationCollateral: Address<TAccountReserveDestinationCollateral>;
  userSourceCollateral: Address<TAccountUserSourceCollateral>;
  tokenProgram?: Address<TAccountTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  collateralAmount: DepositObligationCollateralInstructionDataArgs["collateralAmount"];
}

export function getDepositObligationCollateralInstruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountDepositReserve extends string,
  TAccountReserveDestinationCollateral extends string,
  TAccountUserSourceCollateral extends string,
  TAccountTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositObligationCollateralInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountDepositReserve,
    TAccountReserveDestinationCollateral,
    TAccountUserSourceCollateral,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): DepositObligationCollateralInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountDepositReserve,
  TAccountReserveDestinationCollateral,
  TAccountUserSourceCollateral,
  TAccountTokenProgram,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    depositReserve: { value: input.depositReserve ?? null, isWritable: true },
    reserveDestinationCollateral: {
      value: input.reserveDestinationCollateral ?? null,
      isWritable: true,
    },
    userSourceCollateral: {
      value: input.userSourceCollateral ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.depositReserve),
      getAccountMeta(accounts.reserveDestinationCollateral),
      getAccountMeta(accounts.userSourceCollateral),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    programAddress,
    data: getDepositObligationCollateralInstructionDataEncoder().encode(
      args as DepositObligationCollateralInstructionDataArgs,
    ),
  } as DepositObligationCollateralInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountDepositReserve,
    TAccountReserveDestinationCollateral,
    TAccountUserSourceCollateral,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount
  >;

  return instruction;
}

export interface ParsedDepositObligationCollateralInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    depositReserve: TAccountMetas[3];
    reserveDestinationCollateral: TAccountMetas[4];
    userSourceCollateral: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    instructionSysvarAccount: TAccountMetas[7];
  };
  data: DepositObligationCollateralInstructionData;
}

export function parseDepositObligationCollateralInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositObligationCollateralInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      depositReserve: getNextAccount(),
      reserveDestinationCollateral: getNextAccount(),
      userSourceCollateral: getNextAccount(),
      tokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getDepositObligationCollateralInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
