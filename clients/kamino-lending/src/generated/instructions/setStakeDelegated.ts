/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_STAKE_DELEGATED_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([73, 171, 184, 75, 30, 56, 198, 223]);

export function getSetStakeDelegatedDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_STAKE_DELEGATED_DISCRIMINATOR,
  );
}

export type SetStakeDelegatedInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountDelegateAuthority extends string | AccountMeta = string,
  TAccountUserState extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDelegateAuthority extends string
        ? ReadonlySignerAccount<TAccountDelegateAuthority> &
            AccountSignerMeta<TAccountDelegateAuthority>
        : TAccountDelegateAuthority,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      ...TRemainingAccounts,
    ]
  >;

export interface SetStakeDelegatedInstructionData {
  discriminator: ReadonlyUint8Array;
  newAmount: bigint;
}

export interface SetStakeDelegatedInstructionDataArgs {
  newAmount: number | bigint;
}

export function getSetStakeDelegatedInstructionDataEncoder(): FixedSizeEncoder<SetStakeDelegatedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newAmount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_STAKE_DELEGATED_DISCRIMINATOR }),
  );
}

export function getSetStakeDelegatedInstructionDataDecoder(): FixedSizeDecoder<SetStakeDelegatedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newAmount", getU64Decoder()],
  ]);
}

export function getSetStakeDelegatedInstructionDataCodec(): FixedSizeCodec<
  SetStakeDelegatedInstructionDataArgs,
  SetStakeDelegatedInstructionData
> {
  return combineCodec(
    getSetStakeDelegatedInstructionDataEncoder(),
    getSetStakeDelegatedInstructionDataDecoder(),
  );
}

export interface SetStakeDelegatedInput<
  TAccountDelegateAuthority extends string = string,
  TAccountUserState extends string = string,
  TAccountFarmState extends string = string,
> {
  delegateAuthority: TransactionSigner<TAccountDelegateAuthority>;
  userState: Address<TAccountUserState>;
  farmState: Address<TAccountFarmState>;
  newAmount: SetStakeDelegatedInstructionDataArgs["newAmount"];
}

export function getSetStakeDelegatedInstruction<
  TAccountDelegateAuthority extends string,
  TAccountUserState extends string,
  TAccountFarmState extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: SetStakeDelegatedInput<
    TAccountDelegateAuthority,
    TAccountUserState,
    TAccountFarmState
  >,
  config?: { programAddress?: TProgramAddress },
): SetStakeDelegatedInstruction<
  TProgramAddress,
  TAccountDelegateAuthority,
  TAccountUserState,
  TAccountFarmState
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: false,
    },
    userState: { value: input.userState ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.farmState),
    ],
    programAddress,
    data: getSetStakeDelegatedInstructionDataEncoder().encode(
      args as SetStakeDelegatedInstructionDataArgs,
    ),
  } as SetStakeDelegatedInstruction<
    TProgramAddress,
    TAccountDelegateAuthority,
    TAccountUserState,
    TAccountFarmState
  >;

  return instruction;
}

export interface ParsedSetStakeDelegatedInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    delegateAuthority: TAccountMetas[0];
    userState: TAccountMetas[1];
    farmState: TAccountMetas[2];
  };
  data: SetStakeDelegatedInstructionData;
}

export function parseSetStakeDelegatedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetStakeDelegatedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      delegateAuthority: getNextAccount(),
      userState: getNextAccount(),
      farmState: getNextAccount(),
    },
    data: getSetStakeDelegatedInstructionDataDecoder().decode(instruction.data),
  };
}
