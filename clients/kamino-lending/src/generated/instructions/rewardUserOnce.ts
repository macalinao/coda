/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REWARD_USER_ONCE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([219, 137, 57, 22, 94, 186, 96, 114]);

export function getRewardUserOnceDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REWARD_USER_ONCE_DISCRIMINATOR,
  );
}

export type RewardUserOnceInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountFarmAdmin extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountUserState extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFarmAdmin extends string
        ? WritableSignerAccount<TAccountFarmAdmin> &
            AccountSignerMeta<TAccountFarmAdmin>
        : TAccountFarmAdmin,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      ...TRemainingAccounts,
    ]
  >;

export interface RewardUserOnceInstructionData {
  discriminator: ReadonlyUint8Array;
  rewardIndex: bigint;
  amount: bigint;
}

export interface RewardUserOnceInstructionDataArgs {
  rewardIndex: number | bigint;
  amount: number | bigint;
}

export function getRewardUserOnceInstructionDataEncoder(): FixedSizeEncoder<RewardUserOnceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU64Encoder()],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REWARD_USER_ONCE_DISCRIMINATOR }),
  );
}

export function getRewardUserOnceInstructionDataDecoder(): FixedSizeDecoder<RewardUserOnceInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU64Decoder()],
    ["amount", getU64Decoder()],
  ]);
}

export function getRewardUserOnceInstructionDataCodec(): FixedSizeCodec<
  RewardUserOnceInstructionDataArgs,
  RewardUserOnceInstructionData
> {
  return combineCodec(
    getRewardUserOnceInstructionDataEncoder(),
    getRewardUserOnceInstructionDataDecoder(),
  );
}

export interface RewardUserOnceInput<
  TAccountFarmAdmin extends string = string,
  TAccountFarmState extends string = string,
  TAccountUserState extends string = string,
> {
  farmAdmin: TransactionSigner<TAccountFarmAdmin>;
  farmState: Address<TAccountFarmState>;
  userState: Address<TAccountUserState>;
  rewardIndex: RewardUserOnceInstructionDataArgs["rewardIndex"];
  amount: RewardUserOnceInstructionDataArgs["amount"];
}

export function getRewardUserOnceInstruction<
  TAccountFarmAdmin extends string,
  TAccountFarmState extends string,
  TAccountUserState extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: RewardUserOnceInput<
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountUserState
  >,
  config?: { programAddress?: TProgramAddress },
): RewardUserOnceInstruction<
  TProgramAddress,
  TAccountFarmAdmin,
  TAccountFarmState,
  TAccountUserState
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    farmAdmin: { value: input.farmAdmin ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.farmAdmin),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.userState),
    ],
    data: getRewardUserOnceInstructionDataEncoder().encode(
      args as RewardUserOnceInstructionDataArgs,
    ),
    programAddress,
  } as RewardUserOnceInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountUserState
  >);
}

export interface ParsedRewardUserOnceInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    farmAdmin: TAccountMetas[0];
    farmState: TAccountMetas[1];
    userState: TAccountMetas[2];
  };
  data: RewardUserOnceInstructionData;
}

export function parseRewardUserOnceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRewardUserOnceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      farmAdmin: getNextAccount(),
      farmState: getNextAccount(),
      userState: getNextAccount(),
    },
    data: getRewardUserOnceInstructionDataDecoder().decode(instruction.data),
  };
}
