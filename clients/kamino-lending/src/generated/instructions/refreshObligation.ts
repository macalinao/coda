/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REFRESH_OBLIGATION_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([33, 132, 147, 228, 151, 192, 72, 89]);

export function getRefreshObligationDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFRESH_OBLIGATION_DISCRIMINATOR,
  );
}

export type RefreshObligationInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      ...TRemainingAccounts,
    ]
  >;

export interface RefreshObligationInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RefreshObligationInstructionDataArgs {}

export function getRefreshObligationInstructionDataEncoder(): FixedSizeEncoder<RefreshObligationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REFRESH_OBLIGATION_DISCRIMINATOR }),
  );
}

export function getRefreshObligationInstructionDataDecoder(): FixedSizeDecoder<RefreshObligationInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRefreshObligationInstructionDataCodec(): FixedSizeCodec<
  RefreshObligationInstructionDataArgs,
  RefreshObligationInstructionData
> {
  return combineCodec(
    getRefreshObligationInstructionDataEncoder(),
    getRefreshObligationInstructionDataDecoder(),
  );
}

export interface RefreshObligationInput<
  TAccountLendingMarket extends string = string,
  TAccountObligation extends string = string,
> {
  lendingMarket: Address<TAccountLendingMarket>;
  obligation: Address<TAccountObligation>;
}

export function getRefreshObligationInstruction<
  TAccountLendingMarket extends string,
  TAccountObligation extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RefreshObligationInput<TAccountLendingMarket, TAccountObligation>,
  config?: { programAddress?: TProgramAddress },
): RefreshObligationInstruction<
  TProgramAddress,
  TAccountLendingMarket,
  TAccountObligation
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.obligation),
    ],
    programAddress,
    data: getRefreshObligationInstructionDataEncoder().encode({}),
  } as RefreshObligationInstruction<
    TProgramAddress,
    TAccountLendingMarket,
    TAccountObligation
  >;

  return instruction;
}

export interface ParsedRefreshObligationInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    lendingMarket: TAccountMetas[0];
    obligation: TAccountMetas[1];
  };
  data: RefreshObligationInstructionData;
}

export function parseRefreshObligationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRefreshObligationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lendingMarket: getNextAccount(),
      obligation: getNextAccount(),
    },
    data: getRefreshObligationInstructionDataDecoder().decode(instruction.data),
  };
}
