/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REPAY_OBLIGATION_LIQUIDITY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([145, 178, 13, 225, 76, 240, 147, 72]);

export function getRepayObligationLiquidityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPAY_OBLIGATION_LIQUIDITY_DISCRIMINATOR,
  );
}

export type RepayObligationLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountRepayReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveDestinationLiquidity extends string | AccountMeta = string,
  TAccountUserSourceLiquidity extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountRepayReserve extends string
        ? WritableAccount<TAccountRepayReserve>
        : TAccountRepayReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveDestinationLiquidity extends string
        ? WritableAccount<TAccountReserveDestinationLiquidity>
        : TAccountReserveDestinationLiquidity,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface RepayObligationLiquidityInstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface RepayObligationLiquidityInstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getRepayObligationLiquidityInstructionDataEncoder(): FixedSizeEncoder<RepayObligationLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REPAY_OBLIGATION_LIQUIDITY_DISCRIMINATOR,
    }),
  );
}

export function getRepayObligationLiquidityInstructionDataDecoder(): FixedSizeDecoder<RepayObligationLiquidityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getRepayObligationLiquidityInstructionDataCodec(): FixedSizeCodec<
  RepayObligationLiquidityInstructionDataArgs,
  RepayObligationLiquidityInstructionData
> {
  return combineCodec(
    getRepayObligationLiquidityInstructionDataEncoder(),
    getRepayObligationLiquidityInstructionDataDecoder(),
  );
}

export interface RepayObligationLiquidityInput<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountRepayReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveDestinationLiquidity extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  repayReserve: Address<TAccountRepayReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveDestinationLiquidity: Address<TAccountReserveDestinationLiquidity>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  tokenProgram: Address<TAccountTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  liquidityAmount: RepayObligationLiquidityInstructionDataArgs["liquidityAmount"];
}

export function getRepayObligationLiquidityInstruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountRepayReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveDestinationLiquidity extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RepayObligationLiquidityInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountRepayReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): RepayObligationLiquidityInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountRepayReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveDestinationLiquidity,
  TAccountUserSourceLiquidity,
  TAccountTokenProgram,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    repayReserve: { value: input.repayReserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveDestinationLiquidity: {
      value: input.reserveDestinationLiquidity ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.repayReserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveDestinationLiquidity),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    programAddress,
    data: getRepayObligationLiquidityInstructionDataEncoder().encode(
      args as RepayObligationLiquidityInstructionDataArgs,
    ),
  } as RepayObligationLiquidityInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountRepayReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount
  >;

  return instruction;
}

export interface ParsedRepayObligationLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    repayReserve: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveDestinationLiquidity: TAccountMetas[5];
    userSourceLiquidity: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    instructionSysvarAccount: TAccountMetas[8];
  };
  data: RepayObligationLiquidityInstructionData;
}

export function parseRepayObligationLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRepayObligationLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      repayReserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveDestinationLiquidity: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      tokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getRepayObligationLiquidityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
