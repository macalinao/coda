/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DELETE_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([153, 185, 99, 28, 228, 179, 187, 150]);

export function getDeleteReferrerStateAndShortUrlDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELETE_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR,
  );
}

export type DeleteReferrerStateAndShortUrlInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountReferrer extends string | AccountMeta = string,
  TAccountReferrerState extends string | AccountMeta = string,
  TAccountShortUrl extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReferrer extends string
        ? WritableSignerAccount<TAccountReferrer> &
            AccountSignerMeta<TAccountReferrer>
        : TAccountReferrer,
      TAccountReferrerState extends string
        ? WritableAccount<TAccountReferrerState>
        : TAccountReferrerState,
      TAccountShortUrl extends string
        ? WritableAccount<TAccountShortUrl>
        : TAccountShortUrl,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DeleteReferrerStateAndShortUrlInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface DeleteReferrerStateAndShortUrlInstructionDataArgs {}

export function getDeleteReferrerStateAndShortUrlInstructionDataEncoder(): FixedSizeEncoder<DeleteReferrerStateAndShortUrlInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: DELETE_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR,
    }),
  );
}

export function getDeleteReferrerStateAndShortUrlInstructionDataDecoder(): FixedSizeDecoder<DeleteReferrerStateAndShortUrlInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDeleteReferrerStateAndShortUrlInstructionDataCodec(): FixedSizeCodec<
  DeleteReferrerStateAndShortUrlInstructionDataArgs,
  DeleteReferrerStateAndShortUrlInstructionData
> {
  return combineCodec(
    getDeleteReferrerStateAndShortUrlInstructionDataEncoder(),
    getDeleteReferrerStateAndShortUrlInstructionDataDecoder(),
  );
}

export interface DeleteReferrerStateAndShortUrlInput<
  TAccountReferrer extends string = string,
  TAccountReferrerState extends string = string,
  TAccountShortUrl extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> {
  referrer: TransactionSigner<TAccountReferrer>;
  referrerState: Address<TAccountReferrerState>;
  shortUrl: Address<TAccountShortUrl>;
  rent: Address<TAccountRent>;
  systemProgram: Address<TAccountSystemProgram>;
}

export function getDeleteReferrerStateAndShortUrlInstruction<
  TAccountReferrer extends string,
  TAccountReferrerState extends string,
  TAccountShortUrl extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DeleteReferrerStateAndShortUrlInput<
    TAccountReferrer,
    TAccountReferrerState,
    TAccountShortUrl,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DeleteReferrerStateAndShortUrlInstruction<
  TProgramAddress,
  TAccountReferrer,
  TAccountReferrerState,
  TAccountShortUrl,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    referrer: { value: input.referrer ?? null, isWritable: true },
    referrerState: { value: input.referrerState ?? null, isWritable: true },
    shortUrl: { value: input.shortUrl ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.referrer),
      getAccountMeta(accounts.referrerState),
      getAccountMeta(accounts.shortUrl),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDeleteReferrerStateAndShortUrlInstructionDataEncoder().encode({}),
  } as DeleteReferrerStateAndShortUrlInstruction<
    TProgramAddress,
    TAccountReferrer,
    TAccountReferrerState,
    TAccountShortUrl,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedDeleteReferrerStateAndShortUrlInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    referrer: TAccountMetas[0];
    referrerState: TAccountMetas[1];
    shortUrl: TAccountMetas[2];
    rent: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: DeleteReferrerStateAndShortUrlInstructionData;
}

export function parseDeleteReferrerStateAndShortUrlInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDeleteReferrerStateAndShortUrlInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      referrer: getNextAccount(),
      referrerState: getNextAccount(),
      shortUrl: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDeleteReferrerStateAndShortUrlInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
