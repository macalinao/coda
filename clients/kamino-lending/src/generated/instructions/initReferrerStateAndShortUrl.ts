/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INIT_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([165, 19, 25, 127, 100, 55, 31, 90]);

export function getInitReferrerStateAndShortUrlDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR,
  );
}

export type InitReferrerStateAndShortUrlInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountReferrer extends string | AccountMeta = string,
  TAccountReferrerState extends string | AccountMeta = string,
  TAccountReferrerShortUrl extends string | AccountMeta = string,
  TAccountReferrerUserMetadata extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReferrer extends string
        ? WritableSignerAccount<TAccountReferrer> &
            AccountSignerMeta<TAccountReferrer>
        : TAccountReferrer,
      TAccountReferrerState extends string
        ? WritableAccount<TAccountReferrerState>
        : TAccountReferrerState,
      TAccountReferrerShortUrl extends string
        ? WritableAccount<TAccountReferrerShortUrl>
        : TAccountReferrerShortUrl,
      TAccountReferrerUserMetadata extends string
        ? ReadonlyAccount<TAccountReferrerUserMetadata>
        : TAccountReferrerUserMetadata,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitReferrerStateAndShortUrlInstructionData {
  discriminator: ReadonlyUint8Array;
  shortUrl: string;
}

export interface InitReferrerStateAndShortUrlInstructionDataArgs {
  shortUrl: string;
}

export function getInitReferrerStateAndShortUrlInstructionDataEncoder(): Encoder<InitReferrerStateAndShortUrlInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["shortUrl", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INIT_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR,
    }),
  );
}

export function getInitReferrerStateAndShortUrlInstructionDataDecoder(): Decoder<InitReferrerStateAndShortUrlInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["shortUrl", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getInitReferrerStateAndShortUrlInstructionDataCodec(): Codec<
  InitReferrerStateAndShortUrlInstructionDataArgs,
  InitReferrerStateAndShortUrlInstructionData
> {
  return combineCodec(
    getInitReferrerStateAndShortUrlInstructionDataEncoder(),
    getInitReferrerStateAndShortUrlInstructionDataDecoder(),
  );
}

export interface InitReferrerStateAndShortUrlInput<
  TAccountReferrer extends string = string,
  TAccountReferrerState extends string = string,
  TAccountReferrerShortUrl extends string = string,
  TAccountReferrerUserMetadata extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> {
  referrer: TransactionSigner<TAccountReferrer>;
  referrerState: Address<TAccountReferrerState>;
  referrerShortUrl: Address<TAccountReferrerShortUrl>;
  referrerUserMetadata: Address<TAccountReferrerUserMetadata>;
  rent: Address<TAccountRent>;
  systemProgram: Address<TAccountSystemProgram>;
  shortUrl: InitReferrerStateAndShortUrlInstructionDataArgs["shortUrl"];
}

export function getInitReferrerStateAndShortUrlInstruction<
  TAccountReferrer extends string,
  TAccountReferrerState extends string,
  TAccountReferrerShortUrl extends string,
  TAccountReferrerUserMetadata extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitReferrerStateAndShortUrlInput<
    TAccountReferrer,
    TAccountReferrerState,
    TAccountReferrerShortUrl,
    TAccountReferrerUserMetadata,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitReferrerStateAndShortUrlInstruction<
  TProgramAddress,
  TAccountReferrer,
  TAccountReferrerState,
  TAccountReferrerShortUrl,
  TAccountReferrerUserMetadata,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    referrer: { value: input.referrer ?? null, isWritable: true },
    referrerState: { value: input.referrerState ?? null, isWritable: true },
    referrerShortUrl: {
      value: input.referrerShortUrl ?? null,
      isWritable: true,
    },
    referrerUserMetadata: {
      value: input.referrerUserMetadata ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.referrer),
      getAccountMeta(accounts.referrerState),
      getAccountMeta(accounts.referrerShortUrl),
      getAccountMeta(accounts.referrerUserMetadata),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitReferrerStateAndShortUrlInstructionDataEncoder().encode(
      args as InitReferrerStateAndShortUrlInstructionDataArgs,
    ),
    programAddress,
  } as InitReferrerStateAndShortUrlInstruction<
    TProgramAddress,
    TAccountReferrer,
    TAccountReferrerState,
    TAccountReferrerShortUrl,
    TAccountReferrerUserMetadata,
    TAccountRent,
    TAccountSystemProgram
  >);
}

export interface ParsedInitReferrerStateAndShortUrlInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    referrer: TAccountMetas[0];
    referrerState: TAccountMetas[1];
    referrerShortUrl: TAccountMetas[2];
    referrerUserMetadata: TAccountMetas[3];
    rent: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: InitReferrerStateAndShortUrlInstructionData;
}

export function parseInitReferrerStateAndShortUrlInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitReferrerStateAndShortUrlInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      referrer: getNextAccount(),
      referrerState: getNextAccount(),
      referrerShortUrl: getNextAccount(),
      referrerUserMetadata: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitReferrerStateAndShortUrlInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
