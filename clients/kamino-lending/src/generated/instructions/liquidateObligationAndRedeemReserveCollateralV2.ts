/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const LIQUIDATE_OBLIGATION_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR =
  new Uint8Array([162, 161, 35, 143, 30, 187, 185, 103]);

export function getLiquidateObligationAndRedeemReserveCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LIQUIDATE_OBLIGATION_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type LiquidateObligationAndRedeemReserveCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLiquidator extends string | AccountMeta<string> = string,
  TAccountObligation extends string | AccountMeta<string> = string,
  TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountRepayReserve extends string | AccountMeta<string> = string,
  TAccountRepayReserveLiquidityMint extends
    | string
    | AccountMeta<string> = string,
  TAccountRepayReserveLiquiditySupply extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawReserve extends string | AccountMeta<string> = string,
  TAccountWithdrawReserveLiquidityMint extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawReserveCollateralMint extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawReserveCollateralSupply extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawReserveLiquiditySupply extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawReserveLiquidityFeeReceiver extends
    | string
    | AccountMeta<string> = string,
  TAccountUserSourceLiquidity extends string | AccountMeta<string> = string,
  TAccountUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountUserDestinationLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountCollateralTokenProgram extends string | AccountMeta<string> = string,
  TAccountRepayLiquidityTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawLiquidityTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  _TAccountObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  _TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountObligationFarmUserState extends string | AccountMeta<string> = string,
  TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLiquidator extends string
        ? ReadonlySignerAccount<TAccountLiquidator> &
            AccountSignerMeta<TAccountLiquidator>
        : TAccountLiquidator,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountRepayReserve extends string
        ? WritableAccount<TAccountRepayReserve>
        : TAccountRepayReserve,
      TAccountRepayReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountRepayReserveLiquidityMint>
        : TAccountRepayReserveLiquidityMint,
      TAccountRepayReserveLiquiditySupply extends string
        ? WritableAccount<TAccountRepayReserveLiquiditySupply>
        : TAccountRepayReserveLiquiditySupply,
      TAccountWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawReserve>
        : TAccountWithdrawReserve,
      TAccountWithdrawReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountWithdrawReserveLiquidityMint>
        : TAccountWithdrawReserveLiquidityMint,
      TAccountWithdrawReserveCollateralMint extends string
        ? WritableAccount<TAccountWithdrawReserveCollateralMint>
        : TAccountWithdrawReserveCollateralMint,
      TAccountWithdrawReserveCollateralSupply extends string
        ? WritableAccount<TAccountWithdrawReserveCollateralSupply>
        : TAccountWithdrawReserveCollateralSupply,
      TAccountWithdrawReserveLiquiditySupply extends string
        ? WritableAccount<TAccountWithdrawReserveLiquiditySupply>
        : TAccountWithdrawReserveLiquiditySupply,
      TAccountWithdrawReserveLiquidityFeeReceiver extends string
        ? WritableAccount<TAccountWithdrawReserveLiquidityFeeReceiver>
        : TAccountWithdrawReserveLiquidityFeeReceiver,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountUserDestinationCollateral extends string
        ? WritableAccount<TAccountUserDestinationCollateral>
        : TAccountUserDestinationCollateral,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountRepayLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountRepayLiquidityTokenProgram>
        : TAccountRepayLiquidityTokenProgram,
      TAccountWithdrawLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawLiquidityTokenProgram>
        : TAccountWithdrawLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LiquidateObligationAndRedeemReserveCollateralV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
  minAcceptableReceivedLiquidityAmount: bigint;
  maxAllowedLtvOverridePercent: bigint;
};

export type LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs =
  {
    liquidityAmount: number | bigint;
    minAcceptableReceivedLiquidityAmount: number | bigint;
    maxAllowedLtvOverridePercent: number | bigint;
  };

export function getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataEncoder(): FixedSizeEncoder<LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
      ["minAcceptableReceivedLiquidityAmount", getU64Encoder()],
      ["maxAllowedLtvOverridePercent", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        LIQUIDATE_OBLIGATION_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataDecoder(): FixedSizeDecoder<LiquidateObligationAndRedeemReserveCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
    ["minAcceptableReceivedLiquidityAmount", getU64Decoder()],
    ["maxAllowedLtvOverridePercent", getU64Decoder()],
  ]);
}

export function getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataCodec(): FixedSizeCodec<
  LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs,
  LiquidateObligationAndRedeemReserveCollateralV2InstructionData
> {
  return combineCodec(
    getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataEncoder(),
    getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataDecoder(),
  );
}

export type LiquidateObligationAndRedeemReserveCollateralV2Input<
  TAccountLiquidator extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountRepayReserve extends string = string,
  TAccountRepayReserveLiquidityMint extends string = string,
  TAccountRepayReserveLiquiditySupply extends string = string,
  TAccountWithdrawReserve extends string = string,
  TAccountWithdrawReserveLiquidityMint extends string = string,
  TAccountWithdrawReserveCollateralMint extends string = string,
  TAccountWithdrawReserveCollateralSupply extends string = string,
  TAccountWithdrawReserveLiquiditySupply extends string = string,
  TAccountWithdrawReserveLiquidityFeeReceiver extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountUserDestinationCollateral extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountRepayLiquidityTokenProgram extends string = string,
  TAccountWithdrawLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  _TAccountObligationFarmUserState extends string = string,
  _TAccountReserveFarmState extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> = {
  liquidator: TransactionSigner<TAccountLiquidator>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  repayReserve: Address<TAccountRepayReserve>;
  repayReserveLiquidityMint: Address<TAccountRepayReserveLiquidityMint>;
  repayReserveLiquiditySupply: Address<TAccountRepayReserveLiquiditySupply>;
  withdrawReserve: Address<TAccountWithdrawReserve>;
  withdrawReserveLiquidityMint: Address<TAccountWithdrawReserveLiquidityMint>;
  withdrawReserveCollateralMint: Address<TAccountWithdrawReserveCollateralMint>;
  withdrawReserveCollateralSupply: Address<TAccountWithdrawReserveCollateralSupply>;
  withdrawReserveLiquiditySupply: Address<TAccountWithdrawReserveLiquiditySupply>;
  withdrawReserveLiquidityFeeReceiver: Address<TAccountWithdrawReserveLiquidityFeeReceiver>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  userDestinationCollateral: Address<TAccountUserDestinationCollateral>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  repayLiquidityTokenProgram: Address<TAccountRepayLiquidityTokenProgram>;
  withdrawLiquidityTokenProgram: Address<TAccountWithdrawLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs["liquidityAmount"];
  minAcceptableReceivedLiquidityAmount: LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs["minAcceptableReceivedLiquidityAmount"];
  maxAllowedLtvOverridePercent: LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs["maxAllowedLtvOverridePercent"];
};

export function getLiquidateObligationAndRedeemReserveCollateralV2Instruction<
  TAccountLiquidator extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountRepayReserve extends string,
  TAccountRepayReserveLiquidityMint extends string,
  TAccountRepayReserveLiquiditySupply extends string,
  TAccountWithdrawReserve extends string,
  TAccountWithdrawReserveLiquidityMint extends string,
  TAccountWithdrawReserveCollateralMint extends string,
  TAccountWithdrawReserveCollateralSupply extends string,
  TAccountWithdrawReserveLiquiditySupply extends string,
  TAccountWithdrawReserveLiquidityFeeReceiver extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountUserDestinationCollateral extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountRepayLiquidityTokenProgram extends string,
  TAccountWithdrawLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  _TAccountObligationFarmUserState extends string,
  _TAccountReserveFarmState extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: LiquidateObligationAndRedeemReserveCollateralV2Input<
    TAccountLiquidator,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountRepayReserve,
    TAccountRepayReserveLiquidityMint,
    TAccountRepayReserveLiquiditySupply,
    TAccountWithdrawReserve,
    TAccountWithdrawReserveLiquidityMint,
    TAccountWithdrawReserveCollateralMint,
    TAccountWithdrawReserveCollateralSupply,
    TAccountWithdrawReserveLiquiditySupply,
    TAccountWithdrawReserveLiquidityFeeReceiver,
    TAccountUserSourceLiquidity,
    TAccountUserDestinationCollateral,
    TAccountUserDestinationLiquidity,
    TAccountCollateralTokenProgram,
    TAccountRepayLiquidityTokenProgram,
    TAccountWithdrawLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): LiquidateObligationAndRedeemReserveCollateralV2Instruction<
  TProgramAddress,
  TAccountLiquidator,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountRepayReserve,
  TAccountRepayReserveLiquidityMint,
  TAccountRepayReserveLiquiditySupply,
  TAccountWithdrawReserve,
  TAccountWithdrawReserveLiquidityMint,
  TAccountWithdrawReserveCollateralMint,
  TAccountWithdrawReserveCollateralSupply,
  TAccountWithdrawReserveLiquiditySupply,
  TAccountWithdrawReserveLiquidityFeeReceiver,
  TAccountUserSourceLiquidity,
  TAccountUserDestinationCollateral,
  TAccountUserDestinationLiquidity,
  TAccountCollateralTokenProgram,
  TAccountRepayLiquidityTokenProgram,
  TAccountWithdrawLiquidityTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    liquidator: { value: input.liquidator ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    repayReserve: { value: input.repayReserve ?? null, isWritable: true },
    repayReserveLiquidityMint: {
      value: input.repayReserveLiquidityMint ?? null,
      isWritable: false,
    },
    repayReserveLiquiditySupply: {
      value: input.repayReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    withdrawReserve: { value: input.withdrawReserve ?? null, isWritable: true },
    withdrawReserveLiquidityMint: {
      value: input.withdrawReserveLiquidityMint ?? null,
      isWritable: false,
    },
    withdrawReserveCollateralMint: {
      value: input.withdrawReserveCollateralMint ?? null,
      isWritable: true,
    },
    withdrawReserveCollateralSupply: {
      value: input.withdrawReserveCollateralSupply ?? null,
      isWritable: true,
    },
    withdrawReserveLiquiditySupply: {
      value: input.withdrawReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    withdrawReserveLiquidityFeeReceiver: {
      value: input.withdrawReserveLiquidityFeeReceiver ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    userDestinationCollateral: {
      value: input.userDestinationCollateral ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    repayLiquidityTokenProgram: {
      value: input.repayLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    withdrawLiquidityTokenProgram: {
      value: input.withdrawLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = {
    ...input,
    obligationFarmUserState: input.obligationFarmUserStateArg,
    reserveFarmState: input.reserveFarmStateArg,
  };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.liquidator),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.repayReserve),
      getAccountMeta(accounts.repayReserveLiquidityMint),
      getAccountMeta(accounts.repayReserveLiquiditySupply),
      getAccountMeta(accounts.withdrawReserve),
      getAccountMeta(accounts.withdrawReserveLiquidityMint),
      getAccountMeta(accounts.withdrawReserveCollateralMint),
      getAccountMeta(accounts.withdrawReserveCollateralSupply),
      getAccountMeta(accounts.withdrawReserveLiquiditySupply),
      getAccountMeta(accounts.withdrawReserveLiquidityFeeReceiver),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.userDestinationCollateral),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.repayLiquidityTokenProgram),
      getAccountMeta(accounts.withdrawLiquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataEncoder().encode(
      args as LiquidateObligationAndRedeemReserveCollateralV2InstructionDataArgs,
    ),
  } as LiquidateObligationAndRedeemReserveCollateralV2Instruction<
    TProgramAddress,
    TAccountLiquidator,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountRepayReserve,
    TAccountRepayReserveLiquidityMint,
    TAccountRepayReserveLiquiditySupply,
    TAccountWithdrawReserve,
    TAccountWithdrawReserveLiquidityMint,
    TAccountWithdrawReserveCollateralMint,
    TAccountWithdrawReserveCollateralSupply,
    TAccountWithdrawReserveLiquiditySupply,
    TAccountWithdrawReserveLiquidityFeeReceiver,
    TAccountUserSourceLiquidity,
    TAccountUserDestinationCollateral,
    TAccountUserDestinationLiquidity,
    TAccountCollateralTokenProgram,
    TAccountRepayLiquidityTokenProgram,
    TAccountWithdrawLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export type ParsedLiquidateObligationAndRedeemReserveCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    liquidator: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    repayReserve: TAccountMetas[4];
    repayReserveLiquidityMint: TAccountMetas[5];
    repayReserveLiquiditySupply: TAccountMetas[6];
    withdrawReserve: TAccountMetas[7];
    withdrawReserveLiquidityMint: TAccountMetas[8];
    withdrawReserveCollateralMint: TAccountMetas[9];
    withdrawReserveCollateralSupply: TAccountMetas[10];
    withdrawReserveLiquiditySupply: TAccountMetas[11];
    withdrawReserveLiquidityFeeReceiver: TAccountMetas[12];
    userSourceLiquidity: TAccountMetas[13];
    userDestinationCollateral: TAccountMetas[14];
    userDestinationLiquidity: TAccountMetas[15];
    collateralTokenProgram: TAccountMetas[16];
    repayLiquidityTokenProgram: TAccountMetas[17];
    withdrawLiquidityTokenProgram: TAccountMetas[18];
    instructionSysvarAccount: TAccountMetas[19];
    obligationFarmUserState?: TAccountMetas[20] | undefined;
    reserveFarmState?: TAccountMetas[21] | undefined;
    obligationFarmUserState?: TAccountMetas[22] | undefined;
    reserveFarmState?: TAccountMetas[23] | undefined;
    farmsProgram: TAccountMetas[24];
  };
  data: LiquidateObligationAndRedeemReserveCollateralV2InstructionData;
};

export function parseLiquidateObligationAndRedeemReserveCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedLiquidateObligationAndRedeemReserveCollateralV2Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 25) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      liquidator: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      repayReserve: getNextAccount(),
      repayReserveLiquidityMint: getNextAccount(),
      repayReserveLiquiditySupply: getNextAccount(),
      withdrawReserve: getNextAccount(),
      withdrawReserveLiquidityMint: getNextAccount(),
      withdrawReserveCollateralMint: getNextAccount(),
      withdrawReserveCollateralSupply: getNextAccount(),
      withdrawReserveLiquiditySupply: getNextAccount(),
      withdrawReserveLiquidityFeeReceiver: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      userDestinationCollateral: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      collateralTokenProgram: getNextAccount(),
      repayLiquidityTokenProgram: getNextAccount(),
      withdrawLiquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getLiquidateObligationAndRedeemReserveCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
