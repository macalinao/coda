/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_TO_FARM_VAULT_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([131, 166, 64, 94, 108, 213, 114, 183]);

export function getDepositToFarmVaultDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_TO_FARM_VAULT_DISCRIMINATOR,
  );
}

export type DepositToFarmVaultInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountDepositor extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountFarmVault extends string | AccountMeta = string,
  TAccountDepositorAta extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDepositor extends string
        ? ReadonlySignerAccount<TAccountDepositor> &
            AccountSignerMeta<TAccountDepositor>
        : TAccountDepositor,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountFarmVault extends string
        ? WritableAccount<TAccountFarmVault>
        : TAccountFarmVault,
      TAccountDepositorAta extends string
        ? WritableAccount<TAccountDepositorAta>
        : TAccountDepositorAta,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositToFarmVaultInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface DepositToFarmVaultInstructionDataArgs {
  amount: number | bigint;
}

export function getDepositToFarmVaultInstructionDataEncoder(): FixedSizeEncoder<DepositToFarmVaultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_TO_FARM_VAULT_DISCRIMINATOR,
    }),
  );
}

export function getDepositToFarmVaultInstructionDataDecoder(): FixedSizeDecoder<DepositToFarmVaultInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getDepositToFarmVaultInstructionDataCodec(): FixedSizeCodec<
  DepositToFarmVaultInstructionDataArgs,
  DepositToFarmVaultInstructionData
> {
  return combineCodec(
    getDepositToFarmVaultInstructionDataEncoder(),
    getDepositToFarmVaultInstructionDataDecoder(),
  );
}

export interface DepositToFarmVaultInput<
  TAccountDepositor extends string = string,
  TAccountFarmState extends string = string,
  TAccountFarmVault extends string = string,
  TAccountDepositorAta extends string = string,
  TAccountTokenProgram extends string = string,
> {
  depositor: TransactionSigner<TAccountDepositor>;
  farmState: Address<TAccountFarmState>;
  farmVault: Address<TAccountFarmVault>;
  depositorAta: Address<TAccountDepositorAta>;
  tokenProgram: Address<TAccountTokenProgram>;
  amount: DepositToFarmVaultInstructionDataArgs["amount"];
}

export function getDepositToFarmVaultInstruction<
  TAccountDepositor extends string,
  TAccountFarmState extends string,
  TAccountFarmVault extends string,
  TAccountDepositorAta extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: DepositToFarmVaultInput<
    TAccountDepositor,
    TAccountFarmState,
    TAccountFarmVault,
    TAccountDepositorAta,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositToFarmVaultInstruction<
  TProgramAddress,
  TAccountDepositor,
  TAccountFarmState,
  TAccountFarmVault,
  TAccountDepositorAta,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    depositor: { value: input.depositor ?? null, isWritable: false },
    farmState: { value: input.farmState ?? null, isWritable: true },
    farmVault: { value: input.farmVault ?? null, isWritable: true },
    depositorAta: { value: input.depositorAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.depositor),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.farmVault),
      getAccountMeta(accounts.depositorAta),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDepositToFarmVaultInstructionDataEncoder().encode(
      args as DepositToFarmVaultInstructionDataArgs,
    ),
  } as DepositToFarmVaultInstruction<
    TProgramAddress,
    TAccountDepositor,
    TAccountFarmState,
    TAccountFarmVault,
    TAccountDepositorAta,
    TAccountTokenProgram
  >;

  return instruction;
}

export interface ParsedDepositToFarmVaultInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    depositor: TAccountMetas[0];
    farmState: TAccountMetas[1];
    farmVault: TAccountMetas[2];
    depositorAta: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: DepositToFarmVaultInstructionData;
}

export function parseDepositToFarmVaultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositToFarmVaultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      depositor: getNextAccount(),
      farmState: getNextAccount(),
      farmVault: getNextAccount(),
      depositorAta: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDepositToFarmVaultInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
