/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { findLendingGlobalConfigStatePda } from "../pdas/index.js";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INIT_GLOBAL_CONFIG_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([140, 136, 214, 48, 87, 0, 120, 255]);

export function getInitGlobalConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_GLOBAL_CONFIG_DISCRIMINATOR,
  );
}

export type InitGlobalConfigInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TAccountProgramData extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountProgramData extends string
        ? ReadonlyAccount<TAccountProgramData>
        : TAccountProgramData,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface InitGlobalConfigInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitGlobalConfigInstructionDataArgs {}

export function getInitGlobalConfigInstructionDataEncoder(): FixedSizeEncoder<InitGlobalConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_GLOBAL_CONFIG_DISCRIMINATOR }),
  );
}

export function getInitGlobalConfigInstructionDataDecoder(): FixedSizeDecoder<InitGlobalConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitGlobalConfigInstructionDataCodec(): FixedSizeCodec<
  InitGlobalConfigInstructionDataArgs,
  InitGlobalConfigInstructionData
> {
  return combineCodec(
    getInitGlobalConfigInstructionDataEncoder(),
    getInitGlobalConfigInstructionDataDecoder(),
  );
}

export interface InitGlobalConfigAsyncInput<
  TAccountPayer extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountProgramData extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  globalConfig?: Address<TAccountGlobalConfig>;
  programData: Address<TAccountProgramData>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
}

export async function getInitGlobalConfigInstructionAsync<
  TAccountPayer extends string,
  TAccountGlobalConfig extends string,
  TAccountProgramData extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitGlobalConfigAsyncInput<
    TAccountPayer,
    TAccountGlobalConfig,
    TAccountProgramData,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitGlobalConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGlobalConfig,
    TAccountProgramData,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    programData: { value: input.programData ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.globalConfig.value) {
    accounts.globalConfig.value = await findLendingGlobalConfigStatePda();
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitGlobalConfigInstructionDataEncoder().encode({}),
    programAddress,
  } as InitGlobalConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGlobalConfig,
    TAccountProgramData,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface InitGlobalConfigInput<
  TAccountPayer extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountProgramData extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  globalConfig: Address<TAccountGlobalConfig>;
  programData: Address<TAccountProgramData>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
}

export function getInitGlobalConfigInstruction<
  TAccountPayer extends string,
  TAccountGlobalConfig extends string,
  TAccountProgramData extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitGlobalConfigInput<
    TAccountPayer,
    TAccountGlobalConfig,
    TAccountProgramData,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitGlobalConfigInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountGlobalConfig,
  TAccountProgramData,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    programData: { value: input.programData ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitGlobalConfigInstructionDataEncoder().encode({}),
    programAddress,
  } as InitGlobalConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGlobalConfig,
    TAccountProgramData,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface ParsedInitGlobalConfigInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    programData: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    rent: TAccountMetas[4];
  };
  data: InitGlobalConfigInstructionData;
}

export function parseInitGlobalConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitGlobalConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      globalConfig: getNextAccount(),
      programData: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitGlobalConfigInstructionDataDecoder().decode(instruction.data),
  };
}
