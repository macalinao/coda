/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const REPAY_AND_WITHDRAW_AND_REDEEM_DISCRIMINATOR = new Uint8Array([
  2, 54, 152, 3, 148, 96, 109, 218,
]);

export function getRepayAndWithdrawAndRedeemDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPAY_AND_WITHDRAW_AND_REDEEM_DISCRIMINATOR,
  );
}

export type RepayAndWithdrawAndRedeemInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  _TAccountOwner extends string | AccountMeta<string> = string,
  _TAccountObligation extends string | AccountMeta<string> = string,
  _TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountRepayReserve extends string | AccountMeta<string> = string,
  _TAccountReserveLiquidityMint extends string | AccountMeta<string> = string,
  TAccountReserveDestinationLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountUserSourceLiquidity extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends string | AccountMeta<string> = string,
  _TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountObligation extends string | AccountMeta<string> = string,
  TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountWithdrawReserve extends string | AccountMeta<string> = string,
  TAccountReserveLiquidityMint extends string | AccountMeta<string> = string,
  TAccountReserveSourceCollateral extends string | AccountMeta<string> = string,
  TAccountReserveCollateralMint extends string | AccountMeta<string> = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta<string> = string,
  TAccountUserDestinationLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountCollateralTokenProgram extends string | AccountMeta<string> = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta<string> = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  _TAccountObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  _TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountObligationFarmUserState extends string | AccountMeta<string> = string,
  TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountRepayReserve extends string
        ? WritableAccount<TAccountRepayReserve>
        : TAccountRepayReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveDestinationLiquidity extends string
        ? WritableAccount<TAccountReserveDestinationLiquidity>
        : TAccountReserveDestinationLiquidity,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawReserve>
        : TAccountWithdrawReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveSourceCollateral extends string
        ? WritableAccount<TAccountReserveSourceCollateral>
        : TAccountReserveSourceCollateral,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountPlaceholderUserDestinationCollateral>
        : TAccountPlaceholderUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RepayAndWithdrawAndRedeemInstructionData = {
  discriminator: ReadonlyUint8Array;
  repayAmount: bigint;
  withdrawCollateralAmount: bigint;
};

export type RepayAndWithdrawAndRedeemInstructionDataArgs = {
  repayAmount: number | bigint;
  withdrawCollateralAmount: number | bigint;
};

export function getRepayAndWithdrawAndRedeemInstructionDataEncoder(): FixedSizeEncoder<RepayAndWithdrawAndRedeemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["repayAmount", getU64Encoder()],
      ["withdrawCollateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REPAY_AND_WITHDRAW_AND_REDEEM_DISCRIMINATOR,
    }),
  );
}

export function getRepayAndWithdrawAndRedeemInstructionDataDecoder(): FixedSizeDecoder<RepayAndWithdrawAndRedeemInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["repayAmount", getU64Decoder()],
    ["withdrawCollateralAmount", getU64Decoder()],
  ]);
}

export function getRepayAndWithdrawAndRedeemInstructionDataCodec(): FixedSizeCodec<
  RepayAndWithdrawAndRedeemInstructionDataArgs,
  RepayAndWithdrawAndRedeemInstructionData
> {
  return combineCodec(
    getRepayAndWithdrawAndRedeemInstructionDataEncoder(),
    getRepayAndWithdrawAndRedeemInstructionDataDecoder(),
  );
}

export type RepayAndWithdrawAndRedeemInput<
  _TAccountOwner extends string = string,
  _TAccountObligation extends string = string,
  _TAccountLendingMarket extends string = string,
  TAccountRepayReserve extends string = string,
  _TAccountReserveLiquidityMint extends string = string,
  TAccountReserveDestinationLiquidity extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountTokenProgram extends string = string,
  _TAccountInstructionSysvarAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountWithdrawReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveSourceCollateral extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountPlaceholderUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  _TAccountObligationFarmUserState extends string = string,
  _TAccountReserveFarmState extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  repayReserve: Address<TAccountRepayReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveDestinationLiquidity: Address<TAccountReserveDestinationLiquidity>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  tokenProgram: Address<TAccountTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  withdrawReserve: Address<TAccountWithdrawReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveSourceCollateral: Address<TAccountReserveSourceCollateral>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  repayAmount: RepayAndWithdrawAndRedeemInstructionDataArgs["repayAmount"];
  withdrawCollateralAmount: RepayAndWithdrawAndRedeemInstructionDataArgs["withdrawCollateralAmount"];
};

export function getRepayAndWithdrawAndRedeemInstruction<
  _TAccountOwner extends string,
  _TAccountObligation extends string,
  _TAccountLendingMarket extends string,
  TAccountRepayReserve extends string,
  _TAccountReserveLiquidityMint extends string,
  TAccountReserveDestinationLiquidity extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountTokenProgram extends string,
  _TAccountInstructionSysvarAccount extends string,
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountWithdrawReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveSourceCollateral extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountPlaceholderUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  _TAccountObligationFarmUserState extends string,
  _TAccountReserveFarmState extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RepayAndWithdrawAndRedeemInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountRepayReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountWithdrawReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceCollateral,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserDestinationLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RepayAndWithdrawAndRedeemInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountRepayReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveDestinationLiquidity,
  TAccountUserSourceLiquidity,
  TAccountTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountWithdrawReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveSourceCollateral,
  TAccountReserveCollateralMint,
  TAccountReserveLiquiditySupply,
  TAccountUserDestinationLiquidity,
  TAccountPlaceholderUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    repayReserve: { value: input.repayReserve ?? null, isWritable: true },
    reserveDestinationLiquidity: {
      value: input.reserveDestinationLiquidity ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawReserve: { value: input.withdrawReserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveSourceCollateral: {
      value: input.reserveSourceCollateral ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    placeholderUserDestinationCollateral: {
      value: input.placeholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = {
    ...input,
    owner: input.ownerArg,
    obligation: input.obligationArg,
    lendingMarket: input.lendingMarketArg,
    reserveLiquidityMint: input.reserveLiquidityMintArg,
    instructionSysvarAccount: input.instructionSysvarAccountArg,
    obligationFarmUserState: input.obligationFarmUserStateArg,
    reserveFarmState: input.reserveFarmStateArg,
  };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.repayReserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveDestinationLiquidity),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.withdrawReserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveSourceCollateral),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getRepayAndWithdrawAndRedeemInstructionDataEncoder().encode(
      args as RepayAndWithdrawAndRedeemInstructionDataArgs,
    ),
  } as RepayAndWithdrawAndRedeemInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountRepayReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountWithdrawReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceCollateral,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserDestinationLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export type ParsedRepayAndWithdrawAndRedeemInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    repayReserve: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveDestinationLiquidity: TAccountMetas[5];
    userSourceLiquidity: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    instructionSysvarAccount: TAccountMetas[8];
    owner: TAccountMetas[9];
    obligation: TAccountMetas[10];
    lendingMarket: TAccountMetas[11];
    lendingMarketAuthority: TAccountMetas[12];
    withdrawReserve: TAccountMetas[13];
    reserveLiquidityMint: TAccountMetas[14];
    reserveSourceCollateral: TAccountMetas[15];
    reserveCollateralMint: TAccountMetas[16];
    reserveLiquiditySupply: TAccountMetas[17];
    userDestinationLiquidity: TAccountMetas[18];
    placeholderUserDestinationCollateral?: TAccountMetas[19] | undefined;
    collateralTokenProgram: TAccountMetas[20];
    liquidityTokenProgram: TAccountMetas[21];
    instructionSysvarAccount: TAccountMetas[22];
    obligationFarmUserState?: TAccountMetas[23] | undefined;
    reserveFarmState?: TAccountMetas[24] | undefined;
    obligationFarmUserState?: TAccountMetas[25] | undefined;
    reserveFarmState?: TAccountMetas[26] | undefined;
    farmsProgram: TAccountMetas[27];
  };
  data: RepayAndWithdrawAndRedeemInstructionData;
};

export function parseRepayAndWithdrawAndRedeemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRepayAndWithdrawAndRedeemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 28) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      repayReserve: getNextAccount(),
      reserveDestinationLiquidity: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      tokenProgram: getNextAccount(),
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      withdrawReserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveSourceCollateral: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      placeholderUserDestinationCollateral: getNextOptionalAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getRepayAndWithdrawAndRedeemInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
