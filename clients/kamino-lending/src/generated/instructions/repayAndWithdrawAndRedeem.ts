/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REPAY_AND_WITHDRAW_AND_REDEEM_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([2, 54, 152, 3, 148, 96, 109, 218]);

export function getRepayAndWithdrawAndRedeemDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPAY_AND_WITHDRAW_AND_REDEEM_DISCRIMINATOR,
  );
}

export type RepayAndWithdrawAndRedeemInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountRepayAccountsOwner extends string | AccountMeta = string,
  TAccountRepayAccountsObligation extends string | AccountMeta = string,
  TAccountRepayAccountsLendingMarket extends string | AccountMeta = string,
  TAccountRepayAccountsRepayReserve extends string | AccountMeta = string,
  TAccountRepayAccountsReserveLiquidityMint extends
    | string
    | AccountMeta = string,
  TAccountRepayAccountsReserveDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountRepayAccountsUserSourceLiquidity extends
    | string
    | AccountMeta = string,
  TAccountRepayAccountsTokenProgram extends string | AccountMeta = string,
  TAccountRepayAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountWithdrawAccountsOwner extends string | AccountMeta = string,
  TAccountWithdrawAccountsObligation extends string | AccountMeta = string,
  TAccountWithdrawAccountsLendingMarket extends string | AccountMeta = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsWithdrawReserve extends string | AccountMeta = string,
  TAccountWithdrawAccountsReserveLiquidityMint extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsReserveCollateralMint extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsCollateralTokenProgram extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountCollateralFarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountCollateralFarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountRepayDebtFarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountRepayDebtFarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRepayAccountsOwner extends string
        ? ReadonlySignerAccount<TAccountRepayAccountsOwner> &
            AccountSignerMeta<TAccountRepayAccountsOwner>
        : TAccountRepayAccountsOwner,
      TAccountRepayAccountsObligation extends string
        ? WritableAccount<TAccountRepayAccountsObligation>
        : TAccountRepayAccountsObligation,
      TAccountRepayAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountRepayAccountsLendingMarket>
        : TAccountRepayAccountsLendingMarket,
      TAccountRepayAccountsRepayReserve extends string
        ? WritableAccount<TAccountRepayAccountsRepayReserve>
        : TAccountRepayAccountsRepayReserve,
      TAccountRepayAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountRepayAccountsReserveLiquidityMint>
        : TAccountRepayAccountsReserveLiquidityMint,
      TAccountRepayAccountsReserveDestinationLiquidity extends string
        ? WritableAccount<TAccountRepayAccountsReserveDestinationLiquidity>
        : TAccountRepayAccountsReserveDestinationLiquidity,
      TAccountRepayAccountsUserSourceLiquidity extends string
        ? WritableAccount<TAccountRepayAccountsUserSourceLiquidity>
        : TAccountRepayAccountsUserSourceLiquidity,
      TAccountRepayAccountsTokenProgram extends string
        ? ReadonlyAccount<TAccountRepayAccountsTokenProgram>
        : TAccountRepayAccountsTokenProgram,
      TAccountRepayAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountRepayAccountsInstructionSysvarAccount>
        : TAccountRepayAccountsInstructionSysvarAccount,
      TAccountWithdrawAccountsOwner extends string
        ? WritableSignerAccount<TAccountWithdrawAccountsOwner> &
            AccountSignerMeta<TAccountWithdrawAccountsOwner>
        : TAccountWithdrawAccountsOwner,
      TAccountWithdrawAccountsObligation extends string
        ? WritableAccount<TAccountWithdrawAccountsObligation>
        : TAccountWithdrawAccountsObligation,
      TAccountWithdrawAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarket>
        : TAccountWithdrawAccountsLendingMarket,
      TAccountWithdrawAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarketAuthority>
        : TAccountWithdrawAccountsLendingMarketAuthority,
      TAccountWithdrawAccountsWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawAccountsWithdrawReserve>
        : TAccountWithdrawAccountsWithdrawReserve,
      TAccountWithdrawAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsReserveLiquidityMint>
        : TAccountWithdrawAccountsReserveLiquidityMint,
      TAccountWithdrawAccountsReserveSourceCollateral extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveSourceCollateral>
        : TAccountWithdrawAccountsReserveSourceCollateral,
      TAccountWithdrawAccountsReserveCollateralMint extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveCollateralMint>
        : TAccountWithdrawAccountsReserveCollateralMint,
      TAccountWithdrawAccountsReserveLiquiditySupply extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveLiquiditySupply>
        : TAccountWithdrawAccountsReserveLiquiditySupply,
      TAccountWithdrawAccountsUserDestinationLiquidity extends string
        ? WritableAccount<TAccountWithdrawAccountsUserDestinationLiquidity>
        : TAccountWithdrawAccountsUserDestinationLiquidity,
      TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsPlaceholderUserDestinationCollateral>
        : TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
      TAccountWithdrawAccountsCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsCollateralTokenProgram>
        : TAccountWithdrawAccountsCollateralTokenProgram,
      TAccountWithdrawAccountsLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLiquidityTokenProgram>
        : TAccountWithdrawAccountsLiquidityTokenProgram,
      TAccountWithdrawAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsInstructionSysvarAccount>
        : TAccountWithdrawAccountsInstructionSysvarAccount,
      TAccountCollateralFarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountCollateralFarmsAccountsObligationFarmUserState>
        : TAccountCollateralFarmsAccountsObligationFarmUserState,
      TAccountCollateralFarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountCollateralFarmsAccountsReserveFarmState>
        : TAccountCollateralFarmsAccountsReserveFarmState,
      TAccountRepayDebtFarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountRepayDebtFarmsAccountsObligationFarmUserState>
        : TAccountRepayDebtFarmsAccountsObligationFarmUserState,
      TAccountRepayDebtFarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountRepayDebtFarmsAccountsReserveFarmState>
        : TAccountRepayDebtFarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RepayAndWithdrawAndRedeemInstructionData {
  discriminator: ReadonlyUint8Array;
  repayAmount: bigint;
  withdrawCollateralAmount: bigint;
}

export interface RepayAndWithdrawAndRedeemInstructionDataArgs {
  repayAmount: number | bigint;
  withdrawCollateralAmount: number | bigint;
}

export function getRepayAndWithdrawAndRedeemInstructionDataEncoder(): FixedSizeEncoder<RepayAndWithdrawAndRedeemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["repayAmount", getU64Encoder()],
      ["withdrawCollateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REPAY_AND_WITHDRAW_AND_REDEEM_DISCRIMINATOR,
    }),
  );
}

export function getRepayAndWithdrawAndRedeemInstructionDataDecoder(): FixedSizeDecoder<RepayAndWithdrawAndRedeemInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["repayAmount", getU64Decoder()],
    ["withdrawCollateralAmount", getU64Decoder()],
  ]);
}

export function getRepayAndWithdrawAndRedeemInstructionDataCodec(): FixedSizeCodec<
  RepayAndWithdrawAndRedeemInstructionDataArgs,
  RepayAndWithdrawAndRedeemInstructionData
> {
  return combineCodec(
    getRepayAndWithdrawAndRedeemInstructionDataEncoder(),
    getRepayAndWithdrawAndRedeemInstructionDataDecoder(),
  );
}

export interface RepayAndWithdrawAndRedeemInput<
  TAccountRepayAccountsOwner extends string = string,
  TAccountRepayAccountsObligation extends string = string,
  TAccountRepayAccountsLendingMarket extends string = string,
  TAccountRepayAccountsRepayReserve extends string = string,
  TAccountRepayAccountsReserveLiquidityMint extends string = string,
  TAccountRepayAccountsReserveDestinationLiquidity extends string = string,
  TAccountRepayAccountsUserSourceLiquidity extends string = string,
  TAccountRepayAccountsTokenProgram extends string = string,
  TAccountRepayAccountsInstructionSysvarAccount extends string = string,
  TAccountWithdrawAccountsOwner extends string = string,
  TAccountWithdrawAccountsObligation extends string = string,
  TAccountWithdrawAccountsLendingMarket extends string = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string = string,
  TAccountWithdrawAccountsWithdrawReserve extends string = string,
  TAccountWithdrawAccountsReserveLiquidityMint extends string = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string = string,
  TAccountWithdrawAccountsReserveCollateralMint extends string = string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends string = string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends string = string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends
    string = string,
  TAccountWithdrawAccountsCollateralTokenProgram extends string = string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends string = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string = string,
  TAccountCollateralFarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountCollateralFarmsAccountsReserveFarmState extends string = string,
  TAccountRepayDebtFarmsAccountsObligationFarmUserState extends string = string,
  TAccountRepayDebtFarmsAccountsReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  repayAccountsOwner: TransactionSigner<TAccountRepayAccountsOwner>;
  repayAccountsObligation: Address<TAccountRepayAccountsObligation>;
  repayAccountsLendingMarket: Address<TAccountRepayAccountsLendingMarket>;
  repayAccountsRepayReserve: Address<TAccountRepayAccountsRepayReserve>;
  repayAccountsReserveLiquidityMint: Address<TAccountRepayAccountsReserveLiquidityMint>;
  repayAccountsReserveDestinationLiquidity: Address<TAccountRepayAccountsReserveDestinationLiquidity>;
  repayAccountsUserSourceLiquidity: Address<TAccountRepayAccountsUserSourceLiquidity>;
  repayAccountsTokenProgram: Address<TAccountRepayAccountsTokenProgram>;
  repayAccountsInstructionSysvarAccount?: Address<TAccountRepayAccountsInstructionSysvarAccount>;
  withdrawAccountsOwner: TransactionSigner<TAccountWithdrawAccountsOwner>;
  withdrawAccountsObligation: Address<TAccountWithdrawAccountsObligation>;
  withdrawAccountsLendingMarket: Address<TAccountWithdrawAccountsLendingMarket>;
  withdrawAccountsLendingMarketAuthority: Address<TAccountWithdrawAccountsLendingMarketAuthority>;
  withdrawAccountsWithdrawReserve: Address<TAccountWithdrawAccountsWithdrawReserve>;
  withdrawAccountsReserveLiquidityMint: Address<TAccountWithdrawAccountsReserveLiquidityMint>;
  withdrawAccountsReserveSourceCollateral: Address<TAccountWithdrawAccountsReserveSourceCollateral>;
  withdrawAccountsReserveCollateralMint: Address<TAccountWithdrawAccountsReserveCollateralMint>;
  withdrawAccountsReserveLiquiditySupply: Address<TAccountWithdrawAccountsReserveLiquiditySupply>;
  withdrawAccountsUserDestinationLiquidity: Address<TAccountWithdrawAccountsUserDestinationLiquidity>;
  withdrawAccountsPlaceholderUserDestinationCollateral?: Address<TAccountWithdrawAccountsPlaceholderUserDestinationCollateral>;
  withdrawAccountsCollateralTokenProgram: Address<TAccountWithdrawAccountsCollateralTokenProgram>;
  withdrawAccountsLiquidityTokenProgram: Address<TAccountWithdrawAccountsLiquidityTokenProgram>;
  withdrawAccountsInstructionSysvarAccount?: Address<TAccountWithdrawAccountsInstructionSysvarAccount>;
  collateralFarmsAccountsObligationFarmUserState?: Address<TAccountCollateralFarmsAccountsObligationFarmUserState>;
  collateralFarmsAccountsReserveFarmState?: Address<TAccountCollateralFarmsAccountsReserveFarmState>;
  repayDebtFarmsAccountsObligationFarmUserState?: Address<TAccountRepayDebtFarmsAccountsObligationFarmUserState>;
  repayDebtFarmsAccountsReserveFarmState?: Address<TAccountRepayDebtFarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  repayAmount: RepayAndWithdrawAndRedeemInstructionDataArgs["repayAmount"];
  withdrawCollateralAmount: RepayAndWithdrawAndRedeemInstructionDataArgs["withdrawCollateralAmount"];
}

export function getRepayAndWithdrawAndRedeemInstruction<
  TAccountRepayAccountsOwner extends string,
  TAccountRepayAccountsObligation extends string,
  TAccountRepayAccountsLendingMarket extends string,
  TAccountRepayAccountsRepayReserve extends string,
  TAccountRepayAccountsReserveLiquidityMint extends string,
  TAccountRepayAccountsReserveDestinationLiquidity extends string,
  TAccountRepayAccountsUserSourceLiquidity extends string,
  TAccountRepayAccountsTokenProgram extends string,
  TAccountRepayAccountsInstructionSysvarAccount extends string,
  TAccountWithdrawAccountsOwner extends string,
  TAccountWithdrawAccountsObligation extends string,
  TAccountWithdrawAccountsLendingMarket extends string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string,
  TAccountWithdrawAccountsWithdrawReserve extends string,
  TAccountWithdrawAccountsReserveLiquidityMint extends string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string,
  TAccountWithdrawAccountsReserveCollateralMint extends string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends string,
  TAccountWithdrawAccountsCollateralTokenProgram extends string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string,
  TAccountCollateralFarmsAccountsObligationFarmUserState extends string,
  TAccountCollateralFarmsAccountsReserveFarmState extends string,
  TAccountRepayDebtFarmsAccountsObligationFarmUserState extends string,
  TAccountRepayDebtFarmsAccountsReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RepayAndWithdrawAndRedeemInput<
    TAccountRepayAccountsOwner,
    TAccountRepayAccountsObligation,
    TAccountRepayAccountsLendingMarket,
    TAccountRepayAccountsRepayReserve,
    TAccountRepayAccountsReserveLiquidityMint,
    TAccountRepayAccountsReserveDestinationLiquidity,
    TAccountRepayAccountsUserSourceLiquidity,
    TAccountRepayAccountsTokenProgram,
    TAccountRepayAccountsInstructionSysvarAccount,
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveLiquidityMint,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsReserveCollateralMint,
    TAccountWithdrawAccountsReserveLiquiditySupply,
    TAccountWithdrawAccountsUserDestinationLiquidity,
    TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
    TAccountWithdrawAccountsCollateralTokenProgram,
    TAccountWithdrawAccountsLiquidityTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountCollateralFarmsAccountsObligationFarmUserState,
    TAccountCollateralFarmsAccountsReserveFarmState,
    TAccountRepayDebtFarmsAccountsObligationFarmUserState,
    TAccountRepayDebtFarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RepayAndWithdrawAndRedeemInstruction<
  TProgramAddress,
  TAccountRepayAccountsOwner,
  TAccountRepayAccountsObligation,
  TAccountRepayAccountsLendingMarket,
  TAccountRepayAccountsRepayReserve,
  TAccountRepayAccountsReserveLiquidityMint,
  TAccountRepayAccountsReserveDestinationLiquidity,
  TAccountRepayAccountsUserSourceLiquidity,
  TAccountRepayAccountsTokenProgram,
  TAccountRepayAccountsInstructionSysvarAccount,
  TAccountWithdrawAccountsOwner,
  TAccountWithdrawAccountsObligation,
  TAccountWithdrawAccountsLendingMarket,
  TAccountWithdrawAccountsLendingMarketAuthority,
  TAccountWithdrawAccountsWithdrawReserve,
  TAccountWithdrawAccountsReserveLiquidityMint,
  TAccountWithdrawAccountsReserveSourceCollateral,
  TAccountWithdrawAccountsReserveCollateralMint,
  TAccountWithdrawAccountsReserveLiquiditySupply,
  TAccountWithdrawAccountsUserDestinationLiquidity,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
  TAccountWithdrawAccountsCollateralTokenProgram,
  TAccountWithdrawAccountsLiquidityTokenProgram,
  TAccountWithdrawAccountsInstructionSysvarAccount,
  TAccountCollateralFarmsAccountsObligationFarmUserState,
  TAccountCollateralFarmsAccountsReserveFarmState,
  TAccountRepayDebtFarmsAccountsObligationFarmUserState,
  TAccountRepayDebtFarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    repayAccountsOwner: {
      value: input.repayAccountsOwner ?? null,
      isWritable: false,
    },
    repayAccountsObligation: {
      value: input.repayAccountsObligation ?? null,
      isWritable: true,
    },
    repayAccountsLendingMarket: {
      value: input.repayAccountsLendingMarket ?? null,
      isWritable: false,
    },
    repayAccountsRepayReserve: {
      value: input.repayAccountsRepayReserve ?? null,
      isWritable: true,
    },
    repayAccountsReserveLiquidityMint: {
      value: input.repayAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    repayAccountsReserveDestinationLiquidity: {
      value: input.repayAccountsReserveDestinationLiquidity ?? null,
      isWritable: true,
    },
    repayAccountsUserSourceLiquidity: {
      value: input.repayAccountsUserSourceLiquidity ?? null,
      isWritable: true,
    },
    repayAccountsTokenProgram: {
      value: input.repayAccountsTokenProgram ?? null,
      isWritable: false,
    },
    repayAccountsInstructionSysvarAccount: {
      value: input.repayAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    withdrawAccountsOwner: {
      value: input.withdrawAccountsOwner ?? null,
      isWritable: true,
    },
    withdrawAccountsObligation: {
      value: input.withdrawAccountsObligation ?? null,
      isWritable: true,
    },
    withdrawAccountsLendingMarket: {
      value: input.withdrawAccountsLendingMarket ?? null,
      isWritable: false,
    },
    withdrawAccountsLendingMarketAuthority: {
      value: input.withdrawAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawAccountsWithdrawReserve: {
      value: input.withdrawAccountsWithdrawReserve ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveLiquidityMint: {
      value: input.withdrawAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    withdrawAccountsReserveSourceCollateral: {
      value: input.withdrawAccountsReserveSourceCollateral ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveCollateralMint: {
      value: input.withdrawAccountsReserveCollateralMint ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveLiquiditySupply: {
      value: input.withdrawAccountsReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    withdrawAccountsUserDestinationLiquidity: {
      value: input.withdrawAccountsUserDestinationLiquidity ?? null,
      isWritable: true,
    },
    withdrawAccountsPlaceholderUserDestinationCollateral: {
      value: input.withdrawAccountsPlaceholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    withdrawAccountsCollateralTokenProgram: {
      value: input.withdrawAccountsCollateralTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsLiquidityTokenProgram: {
      value: input.withdrawAccountsLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsInstructionSysvarAccount: {
      value: input.withdrawAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    collateralFarmsAccountsObligationFarmUserState: {
      value: input.collateralFarmsAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    collateralFarmsAccountsReserveFarmState: {
      value: input.collateralFarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    repayDebtFarmsAccountsObligationFarmUserState: {
      value: input.repayDebtFarmsAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    repayDebtFarmsAccountsReserveFarmState: {
      value: input.repayDebtFarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.repayAccountsInstructionSysvarAccount.value) {
    accounts.repayAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.withdrawAccountsInstructionSysvarAccount.value) {
    accounts.withdrawAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.repayAccountsOwner),
      getAccountMeta(accounts.repayAccountsObligation),
      getAccountMeta(accounts.repayAccountsLendingMarket),
      getAccountMeta(accounts.repayAccountsRepayReserve),
      getAccountMeta(accounts.repayAccountsReserveLiquidityMint),
      getAccountMeta(accounts.repayAccountsReserveDestinationLiquidity),
      getAccountMeta(accounts.repayAccountsUserSourceLiquidity),
      getAccountMeta(accounts.repayAccountsTokenProgram),
      getAccountMeta(accounts.repayAccountsInstructionSysvarAccount),
      getAccountMeta(accounts.withdrawAccountsOwner),
      getAccountMeta(accounts.withdrawAccountsObligation),
      getAccountMeta(accounts.withdrawAccountsLendingMarket),
      getAccountMeta(accounts.withdrawAccountsLendingMarketAuthority),
      getAccountMeta(accounts.withdrawAccountsWithdrawReserve),
      getAccountMeta(accounts.withdrawAccountsReserveLiquidityMint),
      getAccountMeta(accounts.withdrawAccountsReserveSourceCollateral),
      getAccountMeta(accounts.withdrawAccountsReserveCollateralMint),
      getAccountMeta(accounts.withdrawAccountsReserveLiquiditySupply),
      getAccountMeta(accounts.withdrawAccountsUserDestinationLiquidity),
      getAccountMeta(
        accounts.withdrawAccountsPlaceholderUserDestinationCollateral,
      ),
      getAccountMeta(accounts.withdrawAccountsCollateralTokenProgram),
      getAccountMeta(accounts.withdrawAccountsLiquidityTokenProgram),
      getAccountMeta(accounts.withdrawAccountsInstructionSysvarAccount),
      getAccountMeta(accounts.collateralFarmsAccountsObligationFarmUserState),
      getAccountMeta(accounts.collateralFarmsAccountsReserveFarmState),
      getAccountMeta(accounts.repayDebtFarmsAccountsObligationFarmUserState),
      getAccountMeta(accounts.repayDebtFarmsAccountsReserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    data: getRepayAndWithdrawAndRedeemInstructionDataEncoder().encode(
      args as RepayAndWithdrawAndRedeemInstructionDataArgs,
    ),
    programAddress,
  } as RepayAndWithdrawAndRedeemInstruction<
    TProgramAddress,
    TAccountRepayAccountsOwner,
    TAccountRepayAccountsObligation,
    TAccountRepayAccountsLendingMarket,
    TAccountRepayAccountsRepayReserve,
    TAccountRepayAccountsReserveLiquidityMint,
    TAccountRepayAccountsReserveDestinationLiquidity,
    TAccountRepayAccountsUserSourceLiquidity,
    TAccountRepayAccountsTokenProgram,
    TAccountRepayAccountsInstructionSysvarAccount,
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveLiquidityMint,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsReserveCollateralMint,
    TAccountWithdrawAccountsReserveLiquiditySupply,
    TAccountWithdrawAccountsUserDestinationLiquidity,
    TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
    TAccountWithdrawAccountsCollateralTokenProgram,
    TAccountWithdrawAccountsLiquidityTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountCollateralFarmsAccountsObligationFarmUserState,
    TAccountCollateralFarmsAccountsReserveFarmState,
    TAccountRepayDebtFarmsAccountsObligationFarmUserState,
    TAccountRepayDebtFarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >);
}

export interface ParsedRepayAndWithdrawAndRedeemInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    repayAccountsOwner: TAccountMetas[0];
    repayAccountsObligation: TAccountMetas[1];
    repayAccountsLendingMarket: TAccountMetas[2];
    repayAccountsRepayReserve: TAccountMetas[3];
    repayAccountsReserveLiquidityMint: TAccountMetas[4];
    repayAccountsReserveDestinationLiquidity: TAccountMetas[5];
    repayAccountsUserSourceLiquidity: TAccountMetas[6];
    repayAccountsTokenProgram: TAccountMetas[7];
    repayAccountsInstructionSysvarAccount: TAccountMetas[8];
    withdrawAccountsOwner: TAccountMetas[9];
    withdrawAccountsObligation: TAccountMetas[10];
    withdrawAccountsLendingMarket: TAccountMetas[11];
    withdrawAccountsLendingMarketAuthority: TAccountMetas[12];
    withdrawAccountsWithdrawReserve: TAccountMetas[13];
    withdrawAccountsReserveLiquidityMint: TAccountMetas[14];
    withdrawAccountsReserveSourceCollateral: TAccountMetas[15];
    withdrawAccountsReserveCollateralMint: TAccountMetas[16];
    withdrawAccountsReserveLiquiditySupply: TAccountMetas[17];
    withdrawAccountsUserDestinationLiquidity: TAccountMetas[18];
    withdrawAccountsPlaceholderUserDestinationCollateral?:
      | TAccountMetas[19]
      | undefined;
    withdrawAccountsCollateralTokenProgram: TAccountMetas[20];
    withdrawAccountsLiquidityTokenProgram: TAccountMetas[21];
    withdrawAccountsInstructionSysvarAccount: TAccountMetas[22];
    collateralFarmsAccountsObligationFarmUserState?:
      | TAccountMetas[23]
      | undefined;
    collateralFarmsAccountsReserveFarmState?: TAccountMetas[24] | undefined;
    repayDebtFarmsAccountsObligationFarmUserState?:
      | TAccountMetas[25]
      | undefined;
    repayDebtFarmsAccountsReserveFarmState?: TAccountMetas[26] | undefined;
    farmsProgram: TAccountMetas[27];
  };
  data: RepayAndWithdrawAndRedeemInstructionData;
}

export function parseRepayAndWithdrawAndRedeemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRepayAndWithdrawAndRedeemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 28) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      repayAccountsOwner: getNextAccount(),
      repayAccountsObligation: getNextAccount(),
      repayAccountsLendingMarket: getNextAccount(),
      repayAccountsRepayReserve: getNextAccount(),
      repayAccountsReserveLiquidityMint: getNextAccount(),
      repayAccountsReserveDestinationLiquidity: getNextAccount(),
      repayAccountsUserSourceLiquidity: getNextAccount(),
      repayAccountsTokenProgram: getNextAccount(),
      repayAccountsInstructionSysvarAccount: getNextAccount(),
      withdrawAccountsOwner: getNextAccount(),
      withdrawAccountsObligation: getNextAccount(),
      withdrawAccountsLendingMarket: getNextAccount(),
      withdrawAccountsLendingMarketAuthority: getNextAccount(),
      withdrawAccountsWithdrawReserve: getNextAccount(),
      withdrawAccountsReserveLiquidityMint: getNextAccount(),
      withdrawAccountsReserveSourceCollateral: getNextAccount(),
      withdrawAccountsReserveCollateralMint: getNextAccount(),
      withdrawAccountsReserveLiquiditySupply: getNextAccount(),
      withdrawAccountsUserDestinationLiquidity: getNextAccount(),
      withdrawAccountsPlaceholderUserDestinationCollateral:
        getNextOptionalAccount(),
      withdrawAccountsCollateralTokenProgram: getNextAccount(),
      withdrawAccountsLiquidityTokenProgram: getNextAccount(),
      withdrawAccountsInstructionSysvarAccount: getNextAccount(),
      collateralFarmsAccountsObligationFarmUserState: getNextOptionalAccount(),
      collateralFarmsAccountsReserveFarmState: getNextOptionalAccount(),
      repayDebtFarmsAccountsObligationFarmUserState: getNextOptionalAccount(),
      repayDebtFarmsAccountsReserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getRepayAndWithdrawAndRedeemInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
