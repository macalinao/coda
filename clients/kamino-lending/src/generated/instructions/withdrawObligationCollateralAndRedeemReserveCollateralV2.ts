/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_OBLIGATION_COLLATERAL_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([235, 52, 119, 152, 149, 197, 20, 7]);

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_OBLIGATION_COLLATERAL_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type WithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountWithdrawReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveSourceCollateral extends string | AccountMeta = string,
  TAccountReserveCollateralMint extends string | AccountMeta = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta = string,
  TAccountUserDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountCollateralTokenProgram extends string | AccountMeta = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountObligationFarmUserState extends string | AccountMeta = string,
  TAccountReserveFarmState extends string | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawReserve>
        : TAccountWithdrawReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveSourceCollateral extends string
        ? WritableAccount<TAccountReserveSourceCollateral>
        : TAccountReserveSourceCollateral,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountPlaceholderUserDestinationCollateral>
        : TAccountPlaceholderUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
}

export interface WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs {
  collateralAmount: number | bigint;
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataEncoder(): FixedSizeEncoder<WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        WITHDRAW_OBLIGATION_COLLATERAL_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataDecoder(): FixedSizeDecoder<WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataCodec(): FixedSizeCodec<
  WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs,
  WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData
> {
  return combineCodec(
    getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataEncoder(),
    getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataDecoder(),
  );
}

export interface WithdrawObligationCollateralAndRedeemReserveCollateralV2Input<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountWithdrawReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveSourceCollateral extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountPlaceholderUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  withdrawReserve: Address<TAccountWithdrawReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveSourceCollateral: Address<TAccountReserveSourceCollateral>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  collateralAmount: WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs["collateralAmount"];
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountWithdrawReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveSourceCollateral extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountPlaceholderUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: WithdrawObligationCollateralAndRedeemReserveCollateralV2Input<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountWithdrawReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceCollateral,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserDestinationLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountWithdrawReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveSourceCollateral,
  TAccountReserveCollateralMint,
  TAccountReserveLiquiditySupply,
  TAccountUserDestinationLiquidity,
  TAccountPlaceholderUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawReserve: { value: input.withdrawReserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveSourceCollateral: {
      value: input.reserveSourceCollateral ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    placeholderUserDestinationCollateral: {
      value: input.placeholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.withdrawReserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveSourceCollateral),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    data: getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataEncoder().encode(
      args as WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs,
    ),
    programAddress,
  } as WithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountWithdrawReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceCollateral,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserDestinationLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >);
}

export interface ParsedWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    withdrawReserve: TAccountMetas[4];
    reserveLiquidityMint: TAccountMetas[5];
    reserveSourceCollateral: TAccountMetas[6];
    reserveCollateralMint: TAccountMetas[7];
    reserveLiquiditySupply: TAccountMetas[8];
    userDestinationLiquidity: TAccountMetas[9];
    placeholderUserDestinationCollateral?: TAccountMetas[10] | undefined;
    collateralTokenProgram: TAccountMetas[11];
    liquidityTokenProgram: TAccountMetas[12];
    instructionSysvarAccount: TAccountMetas[13];
    obligationFarmUserState?: TAccountMetas[14] | undefined;
    reserveFarmState?: TAccountMetas[15] | undefined;
    farmsProgram: TAccountMetas[16];
  };
  data: WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData;
}

export function parseWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      withdrawReserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveSourceCollateral: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      placeholderUserDestinationCollateral: getNextOptionalAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
