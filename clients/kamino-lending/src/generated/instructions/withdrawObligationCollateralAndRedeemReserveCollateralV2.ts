/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_OBLIGATION_COLLATERAL_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([235, 52, 119, 152, 149, 197, 20, 7]);

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_OBLIGATION_COLLATERAL_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type WithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountWithdrawAccountsOwner extends string | AccountMeta = string,
  TAccountWithdrawAccountsObligation extends string | AccountMeta = string,
  TAccountWithdrawAccountsLendingMarket extends string | AccountMeta = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsWithdrawReserve extends string | AccountMeta = string,
  TAccountWithdrawAccountsReserveLiquidityMint extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsReserveCollateralMint extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsCollateralTokenProgram extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends
    | string
    | AccountMeta = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWithdrawAccountsOwner extends string
        ? WritableSignerAccount<TAccountWithdrawAccountsOwner> &
            AccountSignerMeta<TAccountWithdrawAccountsOwner>
        : TAccountWithdrawAccountsOwner,
      TAccountWithdrawAccountsObligation extends string
        ? WritableAccount<TAccountWithdrawAccountsObligation>
        : TAccountWithdrawAccountsObligation,
      TAccountWithdrawAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarket>
        : TAccountWithdrawAccountsLendingMarket,
      TAccountWithdrawAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarketAuthority>
        : TAccountWithdrawAccountsLendingMarketAuthority,
      TAccountWithdrawAccountsWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawAccountsWithdrawReserve>
        : TAccountWithdrawAccountsWithdrawReserve,
      TAccountWithdrawAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsReserveLiquidityMint>
        : TAccountWithdrawAccountsReserveLiquidityMint,
      TAccountWithdrawAccountsReserveSourceCollateral extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveSourceCollateral>
        : TAccountWithdrawAccountsReserveSourceCollateral,
      TAccountWithdrawAccountsReserveCollateralMint extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveCollateralMint>
        : TAccountWithdrawAccountsReserveCollateralMint,
      TAccountWithdrawAccountsReserveLiquiditySupply extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveLiquiditySupply>
        : TAccountWithdrawAccountsReserveLiquiditySupply,
      TAccountWithdrawAccountsUserDestinationLiquidity extends string
        ? WritableAccount<TAccountWithdrawAccountsUserDestinationLiquidity>
        : TAccountWithdrawAccountsUserDestinationLiquidity,
      TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsPlaceholderUserDestinationCollateral>
        : TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
      TAccountWithdrawAccountsCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsCollateralTokenProgram>
        : TAccountWithdrawAccountsCollateralTokenProgram,
      TAccountWithdrawAccountsLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLiquidityTokenProgram>
        : TAccountWithdrawAccountsLiquidityTokenProgram,
      TAccountWithdrawAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsInstructionSysvarAccount>
        : TAccountWithdrawAccountsInstructionSysvarAccount,
      TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState>
        : TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState,
      TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState>
        : TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
}

export interface WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs {
  collateralAmount: number | bigint;
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataEncoder(): FixedSizeEncoder<WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        WITHDRAW_OBLIGATION_COLLATERAL_AND_REDEEM_RESERVE_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataDecoder(): FixedSizeDecoder<WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataCodec(): FixedSizeCodec<
  WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs,
  WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData
> {
  return combineCodec(
    getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataEncoder(),
    getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataDecoder(),
  );
}

export interface WithdrawObligationCollateralAndRedeemReserveCollateralV2Input<
  TAccountWithdrawAccountsOwner extends string = string,
  TAccountWithdrawAccountsObligation extends string = string,
  TAccountWithdrawAccountsLendingMarket extends string = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string = string,
  TAccountWithdrawAccountsWithdrawReserve extends string = string,
  TAccountWithdrawAccountsReserveLiquidityMint extends string = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string = string,
  TAccountWithdrawAccountsReserveCollateralMint extends string = string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends string = string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends string = string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends
    string = string,
  TAccountWithdrawAccountsCollateralTokenProgram extends string = string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends string = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string = string,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState extends
    string = string,
  TAccountFarmsProgram extends string = string,
> {
  withdrawAccountsOwner: TransactionSigner<TAccountWithdrawAccountsOwner>;
  withdrawAccountsObligation: Address<TAccountWithdrawAccountsObligation>;
  withdrawAccountsLendingMarket: Address<TAccountWithdrawAccountsLendingMarket>;
  withdrawAccountsLendingMarketAuthority: Address<TAccountWithdrawAccountsLendingMarketAuthority>;
  withdrawAccountsWithdrawReserve: Address<TAccountWithdrawAccountsWithdrawReserve>;
  withdrawAccountsReserveLiquidityMint: Address<TAccountWithdrawAccountsReserveLiquidityMint>;
  withdrawAccountsReserveSourceCollateral: Address<TAccountWithdrawAccountsReserveSourceCollateral>;
  withdrawAccountsReserveCollateralMint: Address<TAccountWithdrawAccountsReserveCollateralMint>;
  withdrawAccountsReserveLiquiditySupply: Address<TAccountWithdrawAccountsReserveLiquiditySupply>;
  withdrawAccountsUserDestinationLiquidity: Address<TAccountWithdrawAccountsUserDestinationLiquidity>;
  withdrawAccountsPlaceholderUserDestinationCollateral?: Address<TAccountWithdrawAccountsPlaceholderUserDestinationCollateral>;
  withdrawAccountsCollateralTokenProgram: Address<TAccountWithdrawAccountsCollateralTokenProgram>;
  withdrawAccountsLiquidityTokenProgram: Address<TAccountWithdrawAccountsLiquidityTokenProgram>;
  withdrawAccountsInstructionSysvarAccount?: Address<TAccountWithdrawAccountsInstructionSysvarAccount>;
  withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState?: Address<TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState>;
  withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState?: Address<TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  collateralAmount: WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs["collateralAmount"];
}

export function getWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TAccountWithdrawAccountsOwner extends string,
  TAccountWithdrawAccountsObligation extends string,
  TAccountWithdrawAccountsLendingMarket extends string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string,
  TAccountWithdrawAccountsWithdrawReserve extends string,
  TAccountWithdrawAccountsReserveLiquidityMint extends string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string,
  TAccountWithdrawAccountsReserveCollateralMint extends string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends string,
  TAccountWithdrawAccountsCollateralTokenProgram extends string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState extends
    string,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState extends
    string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: WithdrawObligationCollateralAndRedeemReserveCollateralV2Input<
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveLiquidityMint,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsReserveCollateralMint,
    TAccountWithdrawAccountsReserveLiquiditySupply,
    TAccountWithdrawAccountsUserDestinationLiquidity,
    TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
    TAccountWithdrawAccountsCollateralTokenProgram,
    TAccountWithdrawAccountsLiquidityTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState,
    TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgramAddress,
  TAccountWithdrawAccountsOwner,
  TAccountWithdrawAccountsObligation,
  TAccountWithdrawAccountsLendingMarket,
  TAccountWithdrawAccountsLendingMarketAuthority,
  TAccountWithdrawAccountsWithdrawReserve,
  TAccountWithdrawAccountsReserveLiquidityMint,
  TAccountWithdrawAccountsReserveSourceCollateral,
  TAccountWithdrawAccountsReserveCollateralMint,
  TAccountWithdrawAccountsReserveLiquiditySupply,
  TAccountWithdrawAccountsUserDestinationLiquidity,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
  TAccountWithdrawAccountsCollateralTokenProgram,
  TAccountWithdrawAccountsLiquidityTokenProgram,
  TAccountWithdrawAccountsInstructionSysvarAccount,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState,
  TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    withdrawAccountsOwner: {
      value: input.withdrawAccountsOwner ?? null,
      isWritable: true,
    },
    withdrawAccountsObligation: {
      value: input.withdrawAccountsObligation ?? null,
      isWritable: true,
    },
    withdrawAccountsLendingMarket: {
      value: input.withdrawAccountsLendingMarket ?? null,
      isWritable: false,
    },
    withdrawAccountsLendingMarketAuthority: {
      value: input.withdrawAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawAccountsWithdrawReserve: {
      value: input.withdrawAccountsWithdrawReserve ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveLiquidityMint: {
      value: input.withdrawAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    withdrawAccountsReserveSourceCollateral: {
      value: input.withdrawAccountsReserveSourceCollateral ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveCollateralMint: {
      value: input.withdrawAccountsReserveCollateralMint ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveLiquiditySupply: {
      value: input.withdrawAccountsReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    withdrawAccountsUserDestinationLiquidity: {
      value: input.withdrawAccountsUserDestinationLiquidity ?? null,
      isWritable: true,
    },
    withdrawAccountsPlaceholderUserDestinationCollateral: {
      value: input.withdrawAccountsPlaceholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    withdrawAccountsCollateralTokenProgram: {
      value: input.withdrawAccountsCollateralTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsLiquidityTokenProgram: {
      value: input.withdrawAccountsLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsInstructionSysvarAccount: {
      value: input.withdrawAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState:
      {
        value:
          input.withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState ??
          null,
        isWritable: true,
      },
    withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState:
      {
        value:
          input.withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState ??
          null,
        isWritable: true,
      },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAccountsInstructionSysvarAccount.value) {
    accounts.withdrawAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.withdrawAccountsOwner),
      getAccountMeta(accounts.withdrawAccountsObligation),
      getAccountMeta(accounts.withdrawAccountsLendingMarket),
      getAccountMeta(accounts.withdrawAccountsLendingMarketAuthority),
      getAccountMeta(accounts.withdrawAccountsWithdrawReserve),
      getAccountMeta(accounts.withdrawAccountsReserveLiquidityMint),
      getAccountMeta(accounts.withdrawAccountsReserveSourceCollateral),
      getAccountMeta(accounts.withdrawAccountsReserveCollateralMint),
      getAccountMeta(accounts.withdrawAccountsReserveLiquiditySupply),
      getAccountMeta(accounts.withdrawAccountsUserDestinationLiquidity),
      getAccountMeta(
        accounts.withdrawAccountsPlaceholderUserDestinationCollateral,
      ),
      getAccountMeta(accounts.withdrawAccountsCollateralTokenProgram),
      getAccountMeta(accounts.withdrawAccountsLiquidityTokenProgram),
      getAccountMeta(accounts.withdrawAccountsInstructionSysvarAccount),
      getAccountMeta(
        accounts.withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState,
      ),
      getAccountMeta(
        accounts.withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState,
      ),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataEncoder().encode(
      args as WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataArgs,
    ),
  } as WithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
    TProgramAddress,
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveLiquidityMint,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsReserveCollateralMint,
    TAccountWithdrawAccountsReserveLiquiditySupply,
    TAccountWithdrawAccountsUserDestinationLiquidity,
    TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
    TAccountWithdrawAccountsCollateralTokenProgram,
    TAccountWithdrawAccountsLiquidityTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState,
    TAccountWithdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    withdrawAccountsOwner: TAccountMetas[0];
    withdrawAccountsObligation: TAccountMetas[1];
    withdrawAccountsLendingMarket: TAccountMetas[2];
    withdrawAccountsLendingMarketAuthority: TAccountMetas[3];
    withdrawAccountsWithdrawReserve: TAccountMetas[4];
    withdrawAccountsReserveLiquidityMint: TAccountMetas[5];
    withdrawAccountsReserveSourceCollateral: TAccountMetas[6];
    withdrawAccountsReserveCollateralMint: TAccountMetas[7];
    withdrawAccountsReserveLiquiditySupply: TAccountMetas[8];
    withdrawAccountsUserDestinationLiquidity: TAccountMetas[9];
    withdrawAccountsPlaceholderUserDestinationCollateral?:
      | TAccountMetas[10]
      | undefined;
    withdrawAccountsCollateralTokenProgram: TAccountMetas[11];
    withdrawAccountsLiquidityTokenProgram: TAccountMetas[12];
    withdrawAccountsInstructionSysvarAccount: TAccountMetas[13];
    withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState?:
      | TAccountMetas[14]
      | undefined;
    withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState?:
      | TAccountMetas[15]
      | undefined;
    farmsProgram: TAccountMetas[16];
  };
  data: WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionData;
}

export function parseWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawObligationCollateralAndRedeemReserveCollateralV2Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      withdrawAccountsOwner: getNextAccount(),
      withdrawAccountsObligation: getNextAccount(),
      withdrawAccountsLendingMarket: getNextAccount(),
      withdrawAccountsLendingMarketAuthority: getNextAccount(),
      withdrawAccountsWithdrawReserve: getNextAccount(),
      withdrawAccountsReserveLiquidityMint: getNextAccount(),
      withdrawAccountsReserveSourceCollateral: getNextAccount(),
      withdrawAccountsReserveCollateralMint: getNextAccount(),
      withdrawAccountsReserveLiquiditySupply: getNextAccount(),
      withdrawAccountsUserDestinationLiquidity: getNextAccount(),
      withdrawAccountsPlaceholderUserDestinationCollateral:
        getNextOptionalAccount(),
      withdrawAccountsCollateralTokenProgram: getNextAccount(),
      withdrawAccountsLiquidityTokenProgram: getNextAccount(),
      withdrawAccountsInstructionSysvarAccount: getNextAccount(),
      withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsObligationFarmUserState:
        getNextOptionalAccount(),
      withdrawObligationCollateralAndRedeemReserveCollateralV2FarmsAccountsReserveFarmState:
        getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getWithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
