/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const DEPOSIT_AND_WITHDRAW_DISCRIMINATOR = new Uint8Array([
  141, 153, 39, 15, 64, 61, 88, 84,
]);

export function getDepositAndWithdrawDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_AND_WITHDRAW_DISCRIMINATOR,
  );
}

export type DepositAndWithdrawInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountDepositAccountsOwner extends string | AccountMeta<string> = string,
  TAccountDepositAccountsObligation extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsLendingMarket extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsLendingMarketAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsReserve extends string | AccountMeta<string> = string,
  TAccountDepositAccountsReserveLiquidityMint extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsReserveLiquiditySupply extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsReserveCollateralMint extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsReserveDestinationDepositCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsUserSourceLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsCollateralTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsLiquidityTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountWithdrawAccountsOwner extends string | AccountMeta<string> = string,
  TAccountWithdrawAccountsObligation extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsLendingMarket extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsWithdrawReserve extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsReserveLiquidityMint extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsReserveCollateralMint extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsCollateralTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountDepositFarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  TAccountDepositFarmsAccountsReserveFarmState extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawFarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawFarmsAccountsReserveFarmState extends
    | string
    | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDepositAccountsOwner extends string
        ? WritableSignerAccount<TAccountDepositAccountsOwner> &
            AccountSignerMeta<TAccountDepositAccountsOwner>
        : TAccountDepositAccountsOwner,
      TAccountDepositAccountsObligation extends string
        ? WritableAccount<TAccountDepositAccountsObligation>
        : TAccountDepositAccountsObligation,
      TAccountDepositAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountDepositAccountsLendingMarket>
        : TAccountDepositAccountsLendingMarket,
      TAccountDepositAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountDepositAccountsLendingMarketAuthority>
        : TAccountDepositAccountsLendingMarketAuthority,
      TAccountDepositAccountsReserve extends string
        ? WritableAccount<TAccountDepositAccountsReserve>
        : TAccountDepositAccountsReserve,
      TAccountDepositAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountDepositAccountsReserveLiquidityMint>
        : TAccountDepositAccountsReserveLiquidityMint,
      TAccountDepositAccountsReserveLiquiditySupply extends string
        ? WritableAccount<TAccountDepositAccountsReserveLiquiditySupply>
        : TAccountDepositAccountsReserveLiquiditySupply,
      TAccountDepositAccountsReserveCollateralMint extends string
        ? WritableAccount<TAccountDepositAccountsReserveCollateralMint>
        : TAccountDepositAccountsReserveCollateralMint,
      TAccountDepositAccountsReserveDestinationDepositCollateral extends string
        ? WritableAccount<TAccountDepositAccountsReserveDestinationDepositCollateral>
        : TAccountDepositAccountsReserveDestinationDepositCollateral,
      TAccountDepositAccountsUserSourceLiquidity extends string
        ? WritableAccount<TAccountDepositAccountsUserSourceLiquidity>
        : TAccountDepositAccountsUserSourceLiquidity,
      TAccountDepositAccountsPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountDepositAccountsPlaceholderUserDestinationCollateral>
        : TAccountDepositAccountsPlaceholderUserDestinationCollateral,
      TAccountDepositAccountsCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositAccountsCollateralTokenProgram>
        : TAccountDepositAccountsCollateralTokenProgram,
      TAccountDepositAccountsLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositAccountsLiquidityTokenProgram>
        : TAccountDepositAccountsLiquidityTokenProgram,
      TAccountDepositAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountDepositAccountsInstructionSysvarAccount>
        : TAccountDepositAccountsInstructionSysvarAccount,
      TAccountWithdrawAccountsOwner extends string
        ? WritableSignerAccount<TAccountWithdrawAccountsOwner> &
            AccountSignerMeta<TAccountWithdrawAccountsOwner>
        : TAccountWithdrawAccountsOwner,
      TAccountWithdrawAccountsObligation extends string
        ? WritableAccount<TAccountWithdrawAccountsObligation>
        : TAccountWithdrawAccountsObligation,
      TAccountWithdrawAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarket>
        : TAccountWithdrawAccountsLendingMarket,
      TAccountWithdrawAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarketAuthority>
        : TAccountWithdrawAccountsLendingMarketAuthority,
      TAccountWithdrawAccountsWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawAccountsWithdrawReserve>
        : TAccountWithdrawAccountsWithdrawReserve,
      TAccountWithdrawAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsReserveLiquidityMint>
        : TAccountWithdrawAccountsReserveLiquidityMint,
      TAccountWithdrawAccountsReserveSourceCollateral extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveSourceCollateral>
        : TAccountWithdrawAccountsReserveSourceCollateral,
      TAccountWithdrawAccountsReserveCollateralMint extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveCollateralMint>
        : TAccountWithdrawAccountsReserveCollateralMint,
      TAccountWithdrawAccountsReserveLiquiditySupply extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveLiquiditySupply>
        : TAccountWithdrawAccountsReserveLiquiditySupply,
      TAccountWithdrawAccountsUserDestinationLiquidity extends string
        ? WritableAccount<TAccountWithdrawAccountsUserDestinationLiquidity>
        : TAccountWithdrawAccountsUserDestinationLiquidity,
      TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsPlaceholderUserDestinationCollateral>
        : TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
      TAccountWithdrawAccountsCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsCollateralTokenProgram>
        : TAccountWithdrawAccountsCollateralTokenProgram,
      TAccountWithdrawAccountsLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLiquidityTokenProgram>
        : TAccountWithdrawAccountsLiquidityTokenProgram,
      TAccountWithdrawAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsInstructionSysvarAccount>
        : TAccountWithdrawAccountsInstructionSysvarAccount,
      TAccountDepositFarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountDepositFarmsAccountsObligationFarmUserState>
        : TAccountDepositFarmsAccountsObligationFarmUserState,
      TAccountDepositFarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountDepositFarmsAccountsReserveFarmState>
        : TAccountDepositFarmsAccountsReserveFarmState,
      TAccountWithdrawFarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountWithdrawFarmsAccountsObligationFarmUserState>
        : TAccountWithdrawFarmsAccountsObligationFarmUserState,
      TAccountWithdrawFarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountWithdrawFarmsAccountsReserveFarmState>
        : TAccountWithdrawFarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositAndWithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
  withdrawCollateralAmount: bigint;
};

export type DepositAndWithdrawInstructionDataArgs = {
  liquidityAmount: number | bigint;
  withdrawCollateralAmount: number | bigint;
};

export function getDepositAndWithdrawInstructionDataEncoder(): FixedSizeEncoder<DepositAndWithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
      ["withdrawCollateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_AND_WITHDRAW_DISCRIMINATOR,
    }),
  );
}

export function getDepositAndWithdrawInstructionDataDecoder(): FixedSizeDecoder<DepositAndWithdrawInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
    ["withdrawCollateralAmount", getU64Decoder()],
  ]);
}

export function getDepositAndWithdrawInstructionDataCodec(): FixedSizeCodec<
  DepositAndWithdrawInstructionDataArgs,
  DepositAndWithdrawInstructionData
> {
  return combineCodec(
    getDepositAndWithdrawInstructionDataEncoder(),
    getDepositAndWithdrawInstructionDataDecoder(),
  );
}

export type DepositAndWithdrawInput<
  TAccountDepositAccountsOwner extends string = string,
  TAccountDepositAccountsObligation extends string = string,
  TAccountDepositAccountsLendingMarket extends string = string,
  TAccountDepositAccountsLendingMarketAuthority extends string = string,
  TAccountDepositAccountsReserve extends string = string,
  TAccountDepositAccountsReserveLiquidityMint extends string = string,
  TAccountDepositAccountsReserveLiquiditySupply extends string = string,
  TAccountDepositAccountsReserveCollateralMint extends string = string,
  TAccountDepositAccountsReserveDestinationDepositCollateral extends
    string = string,
  TAccountDepositAccountsUserSourceLiquidity extends string = string,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral extends
    string = string,
  TAccountDepositAccountsCollateralTokenProgram extends string = string,
  TAccountDepositAccountsLiquidityTokenProgram extends string = string,
  TAccountDepositAccountsInstructionSysvarAccount extends string = string,
  TAccountWithdrawAccountsOwner extends string = string,
  TAccountWithdrawAccountsObligation extends string = string,
  TAccountWithdrawAccountsLendingMarket extends string = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string = string,
  TAccountWithdrawAccountsWithdrawReserve extends string = string,
  TAccountWithdrawAccountsReserveLiquidityMint extends string = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string = string,
  TAccountWithdrawAccountsReserveCollateralMint extends string = string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends string = string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends string = string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends
    string = string,
  TAccountWithdrawAccountsCollateralTokenProgram extends string = string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends string = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string = string,
  TAccountDepositFarmsAccountsObligationFarmUserState extends string = string,
  TAccountDepositFarmsAccountsReserveFarmState extends string = string,
  TAccountWithdrawFarmsAccountsObligationFarmUserState extends string = string,
  TAccountWithdrawFarmsAccountsReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> = {
  depositAccountsOwner: TransactionSigner<TAccountDepositAccountsOwner>;
  depositAccountsObligation: Address<TAccountDepositAccountsObligation>;
  depositAccountsLendingMarket: Address<TAccountDepositAccountsLendingMarket>;
  depositAccountsLendingMarketAuthority: Address<TAccountDepositAccountsLendingMarketAuthority>;
  depositAccountsReserve: Address<TAccountDepositAccountsReserve>;
  depositAccountsReserveLiquidityMint: Address<TAccountDepositAccountsReserveLiquidityMint>;
  depositAccountsReserveLiquiditySupply: Address<TAccountDepositAccountsReserveLiquiditySupply>;
  depositAccountsReserveCollateralMint: Address<TAccountDepositAccountsReserveCollateralMint>;
  depositAccountsReserveDestinationDepositCollateral: Address<TAccountDepositAccountsReserveDestinationDepositCollateral>;
  depositAccountsUserSourceLiquidity: Address<TAccountDepositAccountsUserSourceLiquidity>;
  depositAccountsPlaceholderUserDestinationCollateral?: Address<TAccountDepositAccountsPlaceholderUserDestinationCollateral>;
  depositAccountsCollateralTokenProgram: Address<TAccountDepositAccountsCollateralTokenProgram>;
  depositAccountsLiquidityTokenProgram: Address<TAccountDepositAccountsLiquidityTokenProgram>;
  depositAccountsInstructionSysvarAccount?: Address<TAccountDepositAccountsInstructionSysvarAccount>;
  withdrawAccountsOwner: TransactionSigner<TAccountWithdrawAccountsOwner>;
  withdrawAccountsObligation: Address<TAccountWithdrawAccountsObligation>;
  withdrawAccountsLendingMarket: Address<TAccountWithdrawAccountsLendingMarket>;
  withdrawAccountsLendingMarketAuthority: Address<TAccountWithdrawAccountsLendingMarketAuthority>;
  withdrawAccountsWithdrawReserve: Address<TAccountWithdrawAccountsWithdrawReserve>;
  withdrawAccountsReserveLiquidityMint: Address<TAccountWithdrawAccountsReserveLiquidityMint>;
  withdrawAccountsReserveSourceCollateral: Address<TAccountWithdrawAccountsReserveSourceCollateral>;
  withdrawAccountsReserveCollateralMint: Address<TAccountWithdrawAccountsReserveCollateralMint>;
  withdrawAccountsReserveLiquiditySupply: Address<TAccountWithdrawAccountsReserveLiquiditySupply>;
  withdrawAccountsUserDestinationLiquidity: Address<TAccountWithdrawAccountsUserDestinationLiquidity>;
  withdrawAccountsPlaceholderUserDestinationCollateral?: Address<TAccountWithdrawAccountsPlaceholderUserDestinationCollateral>;
  withdrawAccountsCollateralTokenProgram: Address<TAccountWithdrawAccountsCollateralTokenProgram>;
  withdrawAccountsLiquidityTokenProgram: Address<TAccountWithdrawAccountsLiquidityTokenProgram>;
  withdrawAccountsInstructionSysvarAccount?: Address<TAccountWithdrawAccountsInstructionSysvarAccount>;
  depositFarmsAccountsObligationFarmUserState?: Address<TAccountDepositFarmsAccountsObligationFarmUserState>;
  depositFarmsAccountsReserveFarmState?: Address<TAccountDepositFarmsAccountsReserveFarmState>;
  withdrawFarmsAccountsObligationFarmUserState?: Address<TAccountWithdrawFarmsAccountsObligationFarmUserState>;
  withdrawFarmsAccountsReserveFarmState?: Address<TAccountWithdrawFarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: DepositAndWithdrawInstructionDataArgs["liquidityAmount"];
  withdrawCollateralAmount: DepositAndWithdrawInstructionDataArgs["withdrawCollateralAmount"];
};

export function getDepositAndWithdrawInstruction<
  TAccountDepositAccountsOwner extends string,
  TAccountDepositAccountsObligation extends string,
  TAccountDepositAccountsLendingMarket extends string,
  TAccountDepositAccountsLendingMarketAuthority extends string,
  TAccountDepositAccountsReserve extends string,
  TAccountDepositAccountsReserveLiquidityMint extends string,
  TAccountDepositAccountsReserveLiquiditySupply extends string,
  TAccountDepositAccountsReserveCollateralMint extends string,
  TAccountDepositAccountsReserveDestinationDepositCollateral extends string,
  TAccountDepositAccountsUserSourceLiquidity extends string,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral extends string,
  TAccountDepositAccountsCollateralTokenProgram extends string,
  TAccountDepositAccountsLiquidityTokenProgram extends string,
  TAccountDepositAccountsInstructionSysvarAccount extends string,
  TAccountWithdrawAccountsOwner extends string,
  TAccountWithdrawAccountsObligation extends string,
  TAccountWithdrawAccountsLendingMarket extends string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string,
  TAccountWithdrawAccountsWithdrawReserve extends string,
  TAccountWithdrawAccountsReserveLiquidityMint extends string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string,
  TAccountWithdrawAccountsReserveCollateralMint extends string,
  TAccountWithdrawAccountsReserveLiquiditySupply extends string,
  TAccountWithdrawAccountsUserDestinationLiquidity extends string,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral extends string,
  TAccountWithdrawAccountsCollateralTokenProgram extends string,
  TAccountWithdrawAccountsLiquidityTokenProgram extends string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string,
  TAccountDepositFarmsAccountsObligationFarmUserState extends string,
  TAccountDepositFarmsAccountsReserveFarmState extends string,
  TAccountWithdrawFarmsAccountsObligationFarmUserState extends string,
  TAccountWithdrawFarmsAccountsReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositAndWithdrawInput<
    TAccountDepositAccountsOwner,
    TAccountDepositAccountsObligation,
    TAccountDepositAccountsLendingMarket,
    TAccountDepositAccountsLendingMarketAuthority,
    TAccountDepositAccountsReserve,
    TAccountDepositAccountsReserveLiquidityMint,
    TAccountDepositAccountsReserveLiquiditySupply,
    TAccountDepositAccountsReserveCollateralMint,
    TAccountDepositAccountsReserveDestinationDepositCollateral,
    TAccountDepositAccountsUserSourceLiquidity,
    TAccountDepositAccountsPlaceholderUserDestinationCollateral,
    TAccountDepositAccountsCollateralTokenProgram,
    TAccountDepositAccountsLiquidityTokenProgram,
    TAccountDepositAccountsInstructionSysvarAccount,
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveLiquidityMint,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsReserveCollateralMint,
    TAccountWithdrawAccountsReserveLiquiditySupply,
    TAccountWithdrawAccountsUserDestinationLiquidity,
    TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
    TAccountWithdrawAccountsCollateralTokenProgram,
    TAccountWithdrawAccountsLiquidityTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountDepositFarmsAccountsObligationFarmUserState,
    TAccountDepositFarmsAccountsReserveFarmState,
    TAccountWithdrawFarmsAccountsObligationFarmUserState,
    TAccountWithdrawFarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositAndWithdrawInstruction<
  TProgramAddress,
  TAccountDepositAccountsOwner,
  TAccountDepositAccountsObligation,
  TAccountDepositAccountsLendingMarket,
  TAccountDepositAccountsLendingMarketAuthority,
  TAccountDepositAccountsReserve,
  TAccountDepositAccountsReserveLiquidityMint,
  TAccountDepositAccountsReserveLiquiditySupply,
  TAccountDepositAccountsReserveCollateralMint,
  TAccountDepositAccountsReserveDestinationDepositCollateral,
  TAccountDepositAccountsUserSourceLiquidity,
  TAccountDepositAccountsPlaceholderUserDestinationCollateral,
  TAccountDepositAccountsCollateralTokenProgram,
  TAccountDepositAccountsLiquidityTokenProgram,
  TAccountDepositAccountsInstructionSysvarAccount,
  TAccountWithdrawAccountsOwner,
  TAccountWithdrawAccountsObligation,
  TAccountWithdrawAccountsLendingMarket,
  TAccountWithdrawAccountsLendingMarketAuthority,
  TAccountWithdrawAccountsWithdrawReserve,
  TAccountWithdrawAccountsReserveLiquidityMint,
  TAccountWithdrawAccountsReserveSourceCollateral,
  TAccountWithdrawAccountsReserveCollateralMint,
  TAccountWithdrawAccountsReserveLiquiditySupply,
  TAccountWithdrawAccountsUserDestinationLiquidity,
  TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
  TAccountWithdrawAccountsCollateralTokenProgram,
  TAccountWithdrawAccountsLiquidityTokenProgram,
  TAccountWithdrawAccountsInstructionSysvarAccount,
  TAccountDepositFarmsAccountsObligationFarmUserState,
  TAccountDepositFarmsAccountsReserveFarmState,
  TAccountWithdrawFarmsAccountsObligationFarmUserState,
  TAccountWithdrawFarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    depositAccountsOwner: {
      value: input.depositAccountsOwner ?? null,
      isWritable: true,
    },
    depositAccountsObligation: {
      value: input.depositAccountsObligation ?? null,
      isWritable: true,
    },
    depositAccountsLendingMarket: {
      value: input.depositAccountsLendingMarket ?? null,
      isWritable: false,
    },
    depositAccountsLendingMarketAuthority: {
      value: input.depositAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    depositAccountsReserve: {
      value: input.depositAccountsReserve ?? null,
      isWritable: true,
    },
    depositAccountsReserveLiquidityMint: {
      value: input.depositAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    depositAccountsReserveLiquiditySupply: {
      value: input.depositAccountsReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    depositAccountsReserveCollateralMint: {
      value: input.depositAccountsReserveCollateralMint ?? null,
      isWritable: true,
    },
    depositAccountsReserveDestinationDepositCollateral: {
      value: input.depositAccountsReserveDestinationDepositCollateral ?? null,
      isWritable: true,
    },
    depositAccountsUserSourceLiquidity: {
      value: input.depositAccountsUserSourceLiquidity ?? null,
      isWritable: true,
    },
    depositAccountsPlaceholderUserDestinationCollateral: {
      value: input.depositAccountsPlaceholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    depositAccountsCollateralTokenProgram: {
      value: input.depositAccountsCollateralTokenProgram ?? null,
      isWritable: false,
    },
    depositAccountsLiquidityTokenProgram: {
      value: input.depositAccountsLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    depositAccountsInstructionSysvarAccount: {
      value: input.depositAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    withdrawAccountsOwner: {
      value: input.withdrawAccountsOwner ?? null,
      isWritable: true,
    },
    withdrawAccountsObligation: {
      value: input.withdrawAccountsObligation ?? null,
      isWritable: true,
    },
    withdrawAccountsLendingMarket: {
      value: input.withdrawAccountsLendingMarket ?? null,
      isWritable: false,
    },
    withdrawAccountsLendingMarketAuthority: {
      value: input.withdrawAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawAccountsWithdrawReserve: {
      value: input.withdrawAccountsWithdrawReserve ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveLiquidityMint: {
      value: input.withdrawAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    withdrawAccountsReserveSourceCollateral: {
      value: input.withdrawAccountsReserveSourceCollateral ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveCollateralMint: {
      value: input.withdrawAccountsReserveCollateralMint ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveLiquiditySupply: {
      value: input.withdrawAccountsReserveLiquiditySupply ?? null,
      isWritable: true,
    },
    withdrawAccountsUserDestinationLiquidity: {
      value: input.withdrawAccountsUserDestinationLiquidity ?? null,
      isWritable: true,
    },
    withdrawAccountsPlaceholderUserDestinationCollateral: {
      value: input.withdrawAccountsPlaceholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    withdrawAccountsCollateralTokenProgram: {
      value: input.withdrawAccountsCollateralTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsLiquidityTokenProgram: {
      value: input.withdrawAccountsLiquidityTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsInstructionSysvarAccount: {
      value: input.withdrawAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    depositFarmsAccountsObligationFarmUserState: {
      value: input.depositFarmsAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    depositFarmsAccountsReserveFarmState: {
      value: input.depositFarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    withdrawFarmsAccountsObligationFarmUserState: {
      value: input.withdrawFarmsAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    withdrawFarmsAccountsReserveFarmState: {
      value: input.withdrawFarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.depositAccountsInstructionSysvarAccount.value) {
    accounts.depositAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.withdrawAccountsInstructionSysvarAccount.value) {
    accounts.withdrawAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.depositAccountsOwner),
      getAccountMeta(accounts.depositAccountsObligation),
      getAccountMeta(accounts.depositAccountsLendingMarket),
      getAccountMeta(accounts.depositAccountsLendingMarketAuthority),
      getAccountMeta(accounts.depositAccountsReserve),
      getAccountMeta(accounts.depositAccountsReserveLiquidityMint),
      getAccountMeta(accounts.depositAccountsReserveLiquiditySupply),
      getAccountMeta(accounts.depositAccountsReserveCollateralMint),
      getAccountMeta(
        accounts.depositAccountsReserveDestinationDepositCollateral,
      ),
      getAccountMeta(accounts.depositAccountsUserSourceLiquidity),
      getAccountMeta(
        accounts.depositAccountsPlaceholderUserDestinationCollateral,
      ),
      getAccountMeta(accounts.depositAccountsCollateralTokenProgram),
      getAccountMeta(accounts.depositAccountsLiquidityTokenProgram),
      getAccountMeta(accounts.depositAccountsInstructionSysvarAccount),
      getAccountMeta(accounts.withdrawAccountsOwner),
      getAccountMeta(accounts.withdrawAccountsObligation),
      getAccountMeta(accounts.withdrawAccountsLendingMarket),
      getAccountMeta(accounts.withdrawAccountsLendingMarketAuthority),
      getAccountMeta(accounts.withdrawAccountsWithdrawReserve),
      getAccountMeta(accounts.withdrawAccountsReserveLiquidityMint),
      getAccountMeta(accounts.withdrawAccountsReserveSourceCollateral),
      getAccountMeta(accounts.withdrawAccountsReserveCollateralMint),
      getAccountMeta(accounts.withdrawAccountsReserveLiquiditySupply),
      getAccountMeta(accounts.withdrawAccountsUserDestinationLiquidity),
      getAccountMeta(
        accounts.withdrawAccountsPlaceholderUserDestinationCollateral,
      ),
      getAccountMeta(accounts.withdrawAccountsCollateralTokenProgram),
      getAccountMeta(accounts.withdrawAccountsLiquidityTokenProgram),
      getAccountMeta(accounts.withdrawAccountsInstructionSysvarAccount),
      getAccountMeta(accounts.depositFarmsAccountsObligationFarmUserState),
      getAccountMeta(accounts.depositFarmsAccountsReserveFarmState),
      getAccountMeta(accounts.withdrawFarmsAccountsObligationFarmUserState),
      getAccountMeta(accounts.withdrawFarmsAccountsReserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getDepositAndWithdrawInstructionDataEncoder().encode(
      args as DepositAndWithdrawInstructionDataArgs,
    ),
  } as DepositAndWithdrawInstruction<
    TProgramAddress,
    TAccountDepositAccountsOwner,
    TAccountDepositAccountsObligation,
    TAccountDepositAccountsLendingMarket,
    TAccountDepositAccountsLendingMarketAuthority,
    TAccountDepositAccountsReserve,
    TAccountDepositAccountsReserveLiquidityMint,
    TAccountDepositAccountsReserveLiquiditySupply,
    TAccountDepositAccountsReserveCollateralMint,
    TAccountDepositAccountsReserveDestinationDepositCollateral,
    TAccountDepositAccountsUserSourceLiquidity,
    TAccountDepositAccountsPlaceholderUserDestinationCollateral,
    TAccountDepositAccountsCollateralTokenProgram,
    TAccountDepositAccountsLiquidityTokenProgram,
    TAccountDepositAccountsInstructionSysvarAccount,
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveLiquidityMint,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsReserveCollateralMint,
    TAccountWithdrawAccountsReserveLiquiditySupply,
    TAccountWithdrawAccountsUserDestinationLiquidity,
    TAccountWithdrawAccountsPlaceholderUserDestinationCollateral,
    TAccountWithdrawAccountsCollateralTokenProgram,
    TAccountWithdrawAccountsLiquidityTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountDepositFarmsAccountsObligationFarmUserState,
    TAccountDepositFarmsAccountsReserveFarmState,
    TAccountWithdrawFarmsAccountsObligationFarmUserState,
    TAccountWithdrawFarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export type ParsedDepositAndWithdrawInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    depositAccountsOwner: TAccountMetas[0];
    depositAccountsObligation: TAccountMetas[1];
    depositAccountsLendingMarket: TAccountMetas[2];
    depositAccountsLendingMarketAuthority: TAccountMetas[3];
    depositAccountsReserve: TAccountMetas[4];
    depositAccountsReserveLiquidityMint: TAccountMetas[5];
    depositAccountsReserveLiquiditySupply: TAccountMetas[6];
    depositAccountsReserveCollateralMint: TAccountMetas[7];
    depositAccountsReserveDestinationDepositCollateral: TAccountMetas[8];
    depositAccountsUserSourceLiquidity: TAccountMetas[9];
    depositAccountsPlaceholderUserDestinationCollateral?:
      | TAccountMetas[10]
      | undefined;
    depositAccountsCollateralTokenProgram: TAccountMetas[11];
    depositAccountsLiquidityTokenProgram: TAccountMetas[12];
    depositAccountsInstructionSysvarAccount: TAccountMetas[13];
    withdrawAccountsOwner: TAccountMetas[14];
    withdrawAccountsObligation: TAccountMetas[15];
    withdrawAccountsLendingMarket: TAccountMetas[16];
    withdrawAccountsLendingMarketAuthority: TAccountMetas[17];
    withdrawAccountsWithdrawReserve: TAccountMetas[18];
    withdrawAccountsReserveLiquidityMint: TAccountMetas[19];
    withdrawAccountsReserveSourceCollateral: TAccountMetas[20];
    withdrawAccountsReserveCollateralMint: TAccountMetas[21];
    withdrawAccountsReserveLiquiditySupply: TAccountMetas[22];
    withdrawAccountsUserDestinationLiquidity: TAccountMetas[23];
    withdrawAccountsPlaceholderUserDestinationCollateral?:
      | TAccountMetas[24]
      | undefined;
    withdrawAccountsCollateralTokenProgram: TAccountMetas[25];
    withdrawAccountsLiquidityTokenProgram: TAccountMetas[26];
    withdrawAccountsInstructionSysvarAccount: TAccountMetas[27];
    depositFarmsAccountsObligationFarmUserState?: TAccountMetas[28] | undefined;
    depositFarmsAccountsReserveFarmState?: TAccountMetas[29] | undefined;
    withdrawFarmsAccountsObligationFarmUserState?:
      | TAccountMetas[30]
      | undefined;
    withdrawFarmsAccountsReserveFarmState?: TAccountMetas[31] | undefined;
    farmsProgram: TAccountMetas[32];
  };
  data: DepositAndWithdrawInstructionData;
};

export function parseDepositAndWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositAndWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 33) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      depositAccountsOwner: getNextAccount(),
      depositAccountsObligation: getNextAccount(),
      depositAccountsLendingMarket: getNextAccount(),
      depositAccountsLendingMarketAuthority: getNextAccount(),
      depositAccountsReserve: getNextAccount(),
      depositAccountsReserveLiquidityMint: getNextAccount(),
      depositAccountsReserveLiquiditySupply: getNextAccount(),
      depositAccountsReserveCollateralMint: getNextAccount(),
      depositAccountsReserveDestinationDepositCollateral: getNextAccount(),
      depositAccountsUserSourceLiquidity: getNextAccount(),
      depositAccountsPlaceholderUserDestinationCollateral:
        getNextOptionalAccount(),
      depositAccountsCollateralTokenProgram: getNextAccount(),
      depositAccountsLiquidityTokenProgram: getNextAccount(),
      depositAccountsInstructionSysvarAccount: getNextAccount(),
      withdrawAccountsOwner: getNextAccount(),
      withdrawAccountsObligation: getNextAccount(),
      withdrawAccountsLendingMarket: getNextAccount(),
      withdrawAccountsLendingMarketAuthority: getNextAccount(),
      withdrawAccountsWithdrawReserve: getNextAccount(),
      withdrawAccountsReserveLiquidityMint: getNextAccount(),
      withdrawAccountsReserveSourceCollateral: getNextAccount(),
      withdrawAccountsReserveCollateralMint: getNextAccount(),
      withdrawAccountsReserveLiquiditySupply: getNextAccount(),
      withdrawAccountsUserDestinationLiquidity: getNextAccount(),
      withdrawAccountsPlaceholderUserDestinationCollateral:
        getNextOptionalAccount(),
      withdrawAccountsCollateralTokenProgram: getNextAccount(),
      withdrawAccountsLiquidityTokenProgram: getNextAccount(),
      withdrawAccountsInstructionSysvarAccount: getNextAccount(),
      depositFarmsAccountsObligationFarmUserState: getNextOptionalAccount(),
      depositFarmsAccountsReserveFarmState: getNextOptionalAccount(),
      withdrawFarmsAccountsObligationFarmUserState: getNextOptionalAccount(),
      withdrawFarmsAccountsReserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getDepositAndWithdrawInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
