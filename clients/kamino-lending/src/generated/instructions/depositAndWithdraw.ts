/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const DEPOSIT_AND_WITHDRAW_DISCRIMINATOR = new Uint8Array([
  141, 153, 39, 15, 64, 61, 88, 84,
]);

export function getDepositAndWithdrawDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_AND_WITHDRAW_DISCRIMINATOR,
  );
}

export type DepositAndWithdrawInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  _TAccountOwner extends string | AccountMeta<string> = string,
  _TAccountObligation extends string | AccountMeta<string> = string,
  _TAccountLendingMarket extends string | AccountMeta<string> = string,
  _TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountReserve extends string | AccountMeta<string> = string,
  _TAccountReserveLiquidityMint extends string | AccountMeta<string> = string,
  _TAccountReserveLiquiditySupply extends string | AccountMeta<string> = string,
  _TAccountReserveCollateralMint extends string | AccountMeta<string> = string,
  TAccountReserveDestinationDepositCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountUserSourceLiquidity extends string | AccountMeta<string> = string,
  _TAccountPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  _TAccountCollateralTokenProgram extends string | AccountMeta<string> = string,
  _TAccountLiquidityTokenProgram extends string | AccountMeta<string> = string,
  _TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountObligation extends string | AccountMeta<string> = string,
  TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountWithdrawReserve extends string | AccountMeta<string> = string,
  TAccountReserveLiquidityMint extends string | AccountMeta<string> = string,
  TAccountReserveSourceCollateral extends string | AccountMeta<string> = string,
  TAccountReserveCollateralMint extends string | AccountMeta<string> = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta<string> = string,
  TAccountUserDestinationLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountCollateralTokenProgram extends string | AccountMeta<string> = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta<string> = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  _TAccountObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  _TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountObligationFarmUserState extends string | AccountMeta<string> = string,
  TAccountReserveFarmState extends string | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveDestinationDepositCollateral extends string
        ? WritableAccount<TAccountReserveDestinationDepositCollateral>
        : TAccountReserveDestinationDepositCollateral,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountPlaceholderUserDestinationCollateral>
        : TAccountPlaceholderUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawReserve>
        : TAccountWithdrawReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveSourceCollateral extends string
        ? WritableAccount<TAccountReserveSourceCollateral>
        : TAccountReserveSourceCollateral,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountPlaceholderUserDestinationCollateral>
        : TAccountPlaceholderUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositAndWithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
  withdrawCollateralAmount: bigint;
};

export type DepositAndWithdrawInstructionDataArgs = {
  liquidityAmount: number | bigint;
  withdrawCollateralAmount: number | bigint;
};

export function getDepositAndWithdrawInstructionDataEncoder(): FixedSizeEncoder<DepositAndWithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
      ["withdrawCollateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_AND_WITHDRAW_DISCRIMINATOR,
    }),
  );
}

export function getDepositAndWithdrawInstructionDataDecoder(): FixedSizeDecoder<DepositAndWithdrawInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
    ["withdrawCollateralAmount", getU64Decoder()],
  ]);
}

export function getDepositAndWithdrawInstructionDataCodec(): FixedSizeCodec<
  DepositAndWithdrawInstructionDataArgs,
  DepositAndWithdrawInstructionData
> {
  return combineCodec(
    getDepositAndWithdrawInstructionDataEncoder(),
    getDepositAndWithdrawInstructionDataDecoder(),
  );
}

export type DepositAndWithdrawInput<
  _TAccountOwner extends string = string,
  _TAccountObligation extends string = string,
  _TAccountLendingMarket extends string = string,
  _TAccountLendingMarketAuthority extends string = string,
  TAccountReserve extends string = string,
  _TAccountReserveLiquidityMint extends string = string,
  _TAccountReserveLiquiditySupply extends string = string,
  _TAccountReserveCollateralMint extends string = string,
  TAccountReserveDestinationDepositCollateral extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  _TAccountPlaceholderUserDestinationCollateral extends string = string,
  _TAccountCollateralTokenProgram extends string = string,
  _TAccountLiquidityTokenProgram extends string = string,
  _TAccountInstructionSysvarAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountWithdrawReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveSourceCollateral extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountPlaceholderUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  _TAccountObligationFarmUserState extends string = string,
  _TAccountReserveFarmState extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveDestinationDepositCollateral: Address<TAccountReserveDestinationDepositCollateral>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  withdrawReserve: Address<TAccountWithdrawReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveSourceCollateral: Address<TAccountReserveSourceCollateral>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: DepositAndWithdrawInstructionDataArgs["liquidityAmount"];
  withdrawCollateralAmount: DepositAndWithdrawInstructionDataArgs["withdrawCollateralAmount"];
};

export function getDepositAndWithdrawInstruction<
  _TAccountOwner extends string,
  _TAccountObligation extends string,
  _TAccountLendingMarket extends string,
  _TAccountLendingMarketAuthority extends string,
  TAccountReserve extends string,
  _TAccountReserveLiquidityMint extends string,
  _TAccountReserveLiquiditySupply extends string,
  _TAccountReserveCollateralMint extends string,
  TAccountReserveDestinationDepositCollateral extends string,
  TAccountUserSourceLiquidity extends string,
  _TAccountPlaceholderUserDestinationCollateral extends string,
  _TAccountCollateralTokenProgram extends string,
  _TAccountLiquidityTokenProgram extends string,
  _TAccountInstructionSysvarAccount extends string,
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountWithdrawReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveSourceCollateral extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountPlaceholderUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  _TAccountObligationFarmUserState extends string,
  _TAccountReserveFarmState extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositAndWithdrawInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountWithdrawReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceCollateral,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserDestinationLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositAndWithdrawInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveLiquiditySupply,
  TAccountReserveCollateralMint,
  TAccountReserveDestinationDepositCollateral,
  TAccountUserSourceLiquidity,
  TAccountPlaceholderUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountWithdrawReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveSourceCollateral,
  TAccountReserveCollateralMint,
  TAccountReserveLiquiditySupply,
  TAccountUserDestinationLiquidity,
  TAccountPlaceholderUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveDestinationDepositCollateral: {
      value: input.reserveDestinationDepositCollateral ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    owner: { value: input.owner ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawReserve: { value: input.withdrawReserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveSourceCollateral: {
      value: input.reserveSourceCollateral ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    placeholderUserDestinationCollateral: {
      value: input.placeholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = {
    ...input,
    owner: input.ownerArg,
    obligation: input.obligationArg,
    lendingMarket: input.lendingMarketArg,
    lendingMarketAuthority: input.lendingMarketAuthorityArg,
    reserveLiquidityMint: input.reserveLiquidityMintArg,
    reserveCollateralMint: input.reserveCollateralMintArg,
    reserveLiquiditySupply: input.reserveLiquiditySupplyArg,
    placeholderUserDestinationCollateral:
      input.placeholderUserDestinationCollateralArg,
    collateralTokenProgram: input.collateralTokenProgramArg,
    liquidityTokenProgram: input.liquidityTokenProgramArg,
    instructionSysvarAccount: input.instructionSysvarAccountArg,
    obligationFarmUserState: input.obligationFarmUserStateArg,
    reserveFarmState: input.reserveFarmStateArg,
  };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveDestinationDepositCollateral),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.withdrawReserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveSourceCollateral),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getDepositAndWithdrawInstructionDataEncoder().encode(
      args as DepositAndWithdrawInstructionDataArgs,
    ),
  } as DepositAndWithdrawInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountWithdrawReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceCollateral,
    TAccountReserveCollateralMint,
    TAccountReserveLiquiditySupply,
    TAccountUserDestinationLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export type ParsedDepositAndWithdrawInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    reserve: TAccountMetas[4];
    reserveLiquidityMint: TAccountMetas[5];
    reserveLiquiditySupply: TAccountMetas[6];
    reserveCollateralMint: TAccountMetas[7];
    reserveDestinationDepositCollateral: TAccountMetas[8];
    userSourceLiquidity: TAccountMetas[9];
    placeholderUserDestinationCollateral?: TAccountMetas[10] | undefined;
    collateralTokenProgram: TAccountMetas[11];
    liquidityTokenProgram: TAccountMetas[12];
    instructionSysvarAccount: TAccountMetas[13];
    owner: TAccountMetas[14];
    obligation: TAccountMetas[15];
    lendingMarket: TAccountMetas[16];
    lendingMarketAuthority: TAccountMetas[17];
    withdrawReserve: TAccountMetas[18];
    reserveLiquidityMint: TAccountMetas[19];
    reserveSourceCollateral: TAccountMetas[20];
    reserveCollateralMint: TAccountMetas[21];
    reserveLiquiditySupply: TAccountMetas[22];
    userDestinationLiquidity: TAccountMetas[23];
    placeholderUserDestinationCollateral?: TAccountMetas[24] | undefined;
    collateralTokenProgram: TAccountMetas[25];
    liquidityTokenProgram: TAccountMetas[26];
    instructionSysvarAccount: TAccountMetas[27];
    obligationFarmUserState?: TAccountMetas[28] | undefined;
    reserveFarmState?: TAccountMetas[29] | undefined;
    obligationFarmUserState?: TAccountMetas[30] | undefined;
    reserveFarmState?: TAccountMetas[31] | undefined;
    farmsProgram: TAccountMetas[32];
  };
  data: DepositAndWithdrawInstructionData;
};

export function parseDepositAndWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositAndWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 33) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      reserve: getNextAccount(),
      reserveDestinationDepositCollateral: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      withdrawReserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveSourceCollateral: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      placeholderUserDestinationCollateral: getNextOptionalAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getDepositAndWithdrawInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
