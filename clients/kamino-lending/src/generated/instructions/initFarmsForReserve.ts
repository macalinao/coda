/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import {
  FARMS_PROGRAM_ADDRESS,
  KAMINO_LENDING_PROGRAM_ADDRESS,
} from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INIT_FARMS_FOR_RESERVE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([218, 6, 62, 233, 1, 33, 232, 82]);

export function getInitFarmsForReserveDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_FARMS_FOR_RESERVE_DISCRIMINATOR,
  );
}

export type InitFarmsForReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountLendingMarketOwner extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountFarmsProgram extends
    | string
    | AccountMeta = "FarmsPZpWu9i7Kky8tPN37rs2TpmMrAZrC7S7vJa91Hr",
  TAccountFarmsGlobalConfig extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountFarmsVaultAuthority extends string | AccountMeta = string,
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLendingMarketOwner extends string
        ? WritableSignerAccount<TAccountLendingMarketOwner> &
            AccountSignerMeta<TAccountLendingMarketOwner>
        : TAccountLendingMarketOwner,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      TAccountFarmsGlobalConfig extends string
        ? ReadonlyAccount<TAccountFarmsGlobalConfig>
        : TAccountFarmsGlobalConfig,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountFarmsVaultAuthority extends string
        ? ReadonlyAccount<TAccountFarmsVaultAuthority>
        : TAccountFarmsVaultAuthority,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitFarmsForReserveInstructionData {
  discriminator: ReadonlyUint8Array;
  mode: number;
}

export interface InitFarmsForReserveInstructionDataArgs {
  mode: number;
}

export function getInitFarmsForReserveInstructionDataEncoder(): FixedSizeEncoder<InitFarmsForReserveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["mode", getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INIT_FARMS_FOR_RESERVE_DISCRIMINATOR,
    }),
  );
}

export function getInitFarmsForReserveInstructionDataDecoder(): FixedSizeDecoder<InitFarmsForReserveInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["mode", getU8Decoder()],
  ]);
}

export function getInitFarmsForReserveInstructionDataCodec(): FixedSizeCodec<
  InitFarmsForReserveInstructionDataArgs,
  InitFarmsForReserveInstructionData
> {
  return combineCodec(
    getInitFarmsForReserveInstructionDataEncoder(),
    getInitFarmsForReserveInstructionDataDecoder(),
  );
}

export interface InitFarmsForReserveInput<
  TAccountLendingMarketOwner extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserve extends string = string,
  TAccountFarmsProgram extends string = string,
  TAccountFarmsGlobalConfig extends string = string,
  TAccountFarmState extends string = string,
  TAccountFarmsVaultAuthority extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> {
  lendingMarketOwner: TransactionSigner<TAccountLendingMarketOwner>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserve: Address<TAccountReserve>;
  farmsProgram?: Address<TAccountFarmsProgram>;
  farmsGlobalConfig: Address<TAccountFarmsGlobalConfig>;
  farmState: Address<TAccountFarmState>;
  farmsVaultAuthority: Address<TAccountFarmsVaultAuthority>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  mode: InitFarmsForReserveInstructionDataArgs["mode"];
}

export function getInitFarmsForReserveInstruction<
  TAccountLendingMarketOwner extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserve extends string,
  TAccountFarmsProgram extends string,
  TAccountFarmsGlobalConfig extends string,
  TAccountFarmState extends string,
  TAccountFarmsVaultAuthority extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitFarmsForReserveInput<
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountFarmsProgram,
    TAccountFarmsGlobalConfig,
    TAccountFarmState,
    TAccountFarmsVaultAuthority,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitFarmsForReserveInstruction<
  TProgramAddress,
  TAccountLendingMarketOwner,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountReserve,
  TAccountFarmsProgram,
  TAccountFarmsGlobalConfig,
  TAccountFarmState,
  TAccountFarmsVaultAuthority,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lendingMarketOwner: {
      value: input.lendingMarketOwner ?? null,
      isWritable: true,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserve: { value: input.reserve ?? null, isWritable: true },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
    farmsGlobalConfig: {
      value: input.farmsGlobalConfig ?? null,
      isWritable: false,
    },
    farmState: { value: input.farmState ?? null, isWritable: true },
    farmsVaultAuthority: {
      value: input.farmsVaultAuthority ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.farmsProgram.value) {
    accounts.farmsProgram.value = FARMS_PROGRAM_ADDRESS;
    accounts.farmsProgram.isWritable = false;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lendingMarketOwner),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.farmsProgram),
      getAccountMeta(accounts.farmsGlobalConfig),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.farmsVaultAuthority),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitFarmsForReserveInstructionDataEncoder().encode(
      args as InitFarmsForReserveInstructionDataArgs,
    ),
    programAddress,
  } as InitFarmsForReserveInstruction<
    TProgramAddress,
    TAccountLendingMarketOwner,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountFarmsProgram,
    TAccountFarmsGlobalConfig,
    TAccountFarmState,
    TAccountFarmsVaultAuthority,
    TAccountRent,
    TAccountSystemProgram
  >);
}

export interface ParsedInitFarmsForReserveInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    lendingMarketOwner: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    lendingMarketAuthority: TAccountMetas[2];
    reserve: TAccountMetas[3];
    farmsProgram: TAccountMetas[4];
    farmsGlobalConfig: TAccountMetas[5];
    farmState: TAccountMetas[6];
    farmsVaultAuthority: TAccountMetas[7];
    rent: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: InitFarmsForReserveInstructionData;
}

export function parseInitFarmsForReserveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitFarmsForReserveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lendingMarketOwner: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      reserve: getNextAccount(),
      farmsProgram: getNextAccount(),
      farmsGlobalConfig: getNextAccount(),
      farmState: getNextAccount(),
      farmsVaultAuthority: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitFarmsForReserveInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
