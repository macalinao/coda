/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INITIALIZE_GLOBAL_CONFIG_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([113, 216, 122, 131, 225, 209, 22, 55]);

export function getInitializeGlobalConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_GLOBAL_CONFIG_DISCRIMINATOR,
  );
}

export type InitializeGlobalConfigInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountGlobalAdmin extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TAccountTreasuryVaultsAuthority extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobalAdmin extends string
        ? WritableSignerAccount<TAccountGlobalAdmin> &
            AccountSignerMeta<TAccountGlobalAdmin>
        : TAccountGlobalAdmin,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountTreasuryVaultsAuthority extends string
        ? ReadonlyAccount<TAccountTreasuryVaultsAuthority>
        : TAccountTreasuryVaultsAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeGlobalConfigInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitializeGlobalConfigInstructionDataArgs {}

export function getInitializeGlobalConfigInstructionDataEncoder(): FixedSizeEncoder<InitializeGlobalConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_GLOBAL_CONFIG_DISCRIMINATOR,
    }),
  );
}

export function getInitializeGlobalConfigInstructionDataDecoder(): FixedSizeDecoder<InitializeGlobalConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeGlobalConfigInstructionDataCodec(): FixedSizeCodec<
  InitializeGlobalConfigInstructionDataArgs,
  InitializeGlobalConfigInstructionData
> {
  return combineCodec(
    getInitializeGlobalConfigInstructionDataEncoder(),
    getInitializeGlobalConfigInstructionDataDecoder(),
  );
}

export interface InitializeGlobalConfigInput<
  TAccountGlobalAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountTreasuryVaultsAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> {
  globalAdmin: TransactionSigner<TAccountGlobalAdmin>;
  globalConfig: Address<TAccountGlobalConfig>;
  treasuryVaultsAuthority: Address<TAccountTreasuryVaultsAuthority>;
  systemProgram: Address<TAccountSystemProgram>;
}

export function getInitializeGlobalConfigInstruction<
  TAccountGlobalAdmin extends string,
  TAccountGlobalConfig extends string,
  TAccountTreasuryVaultsAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: InitializeGlobalConfigInput<
    TAccountGlobalAdmin,
    TAccountGlobalConfig,
    TAccountTreasuryVaultsAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeGlobalConfigInstruction<
  TProgramAddress,
  TAccountGlobalAdmin,
  TAccountGlobalConfig,
  TAccountTreasuryVaultsAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalAdmin: { value: input.globalAdmin ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    treasuryVaultsAuthority: {
      value: input.treasuryVaultsAuthority ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalAdmin),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.treasuryVaultsAuthority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeGlobalConfigInstructionDataEncoder().encode({}),
  } as InitializeGlobalConfigInstruction<
    TProgramAddress,
    TAccountGlobalAdmin,
    TAccountGlobalConfig,
    TAccountTreasuryVaultsAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedInitializeGlobalConfigInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    globalAdmin: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    treasuryVaultsAuthority: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeGlobalConfigInstructionData;
}

export function parseInitializeGlobalConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeGlobalConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      globalAdmin: getNextAccount(),
      globalConfig: getNextAccount(),
      treasuryVaultsAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeGlobalConfigInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
