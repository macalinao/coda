/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  ObligationOrderInput,
  ObligationOrderInputArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getObligationOrderInputDecoder,
  getObligationOrderInputEncoder,
} from "../types/index.js";

export const SET_OBLIGATION_ORDER_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([81, 1, 99, 156, 211, 83, 78, 46]);

export function getSetObligationOrderDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_OBLIGATION_ORDER_DISCRIMINATOR,
  );
}

export type SetObligationOrderInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      ...TRemainingAccounts,
    ]
  >;

export interface SetObligationOrderInstructionData {
  discriminator: ReadonlyUint8Array;
  index: number;
  order: ObligationOrderInput;
}

export interface SetObligationOrderInstructionDataArgs {
  index: number;
  order: ObligationOrderInputArgs;
}

export function getSetObligationOrderInstructionDataEncoder(): FixedSizeEncoder<SetObligationOrderInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["index", getU8Encoder()],
      ["order", getObligationOrderInputEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_OBLIGATION_ORDER_DISCRIMINATOR,
    }),
  );
}

export function getSetObligationOrderInstructionDataDecoder(): FixedSizeDecoder<SetObligationOrderInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["index", getU8Decoder()],
    ["order", getObligationOrderInputDecoder()],
  ]);
}

export function getSetObligationOrderInstructionDataCodec(): FixedSizeCodec<
  SetObligationOrderInstructionDataArgs,
  SetObligationOrderInstructionData
> {
  return combineCodec(
    getSetObligationOrderInstructionDataEncoder(),
    getSetObligationOrderInstructionDataDecoder(),
  );
}

export interface SetObligationOrderInput<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  index: SetObligationOrderInstructionDataArgs["index"];
  order: SetObligationOrderInstructionDataArgs["order"];
}

export function getSetObligationOrderInstruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: SetObligationOrderInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket
  >,
  config?: { programAddress?: TProgramAddress },
): SetObligationOrderInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
    ],
    data: getSetObligationOrderInstructionDataEncoder().encode(
      args as SetObligationOrderInstructionDataArgs,
    ),
    programAddress,
  } as SetObligationOrderInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket
  >);
}

export interface ParsedSetObligationOrderInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
  };
  data: SetObligationOrderInstructionData;
}

export function parseSetObligationOrderInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetObligationOrderInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
    },
    data: getSetObligationOrderInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
