/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SOCIALIZE_LOSS_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  245, 75, 91, 0, 236, 97, 19, 3,
]);

export function getSocializeLossDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SOCIALIZE_LOSS_DISCRIMINATOR,
  );
}

export type SocializeLossInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountRiskCouncil extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRiskCouncil extends string
        ? ReadonlySignerAccount<TAccountRiskCouncil> &
            AccountSignerMeta<TAccountRiskCouncil>
        : TAccountRiskCouncil,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface SocializeLossInstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface SocializeLossInstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getSocializeLossInstructionDataEncoder(): FixedSizeEncoder<SocializeLossInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SOCIALIZE_LOSS_DISCRIMINATOR }),
  );
}

export function getSocializeLossInstructionDataDecoder(): FixedSizeDecoder<SocializeLossInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getSocializeLossInstructionDataCodec(): FixedSizeCodec<
  SocializeLossInstructionDataArgs,
  SocializeLossInstructionData
> {
  return combineCodec(
    getSocializeLossInstructionDataEncoder(),
    getSocializeLossInstructionDataDecoder(),
  );
}

export interface SocializeLossInput<
  TAccountRiskCouncil extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  riskCouncil: TransactionSigner<TAccountRiskCouncil>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  liquidityAmount: SocializeLossInstructionDataArgs["liquidityAmount"];
}

export function getSocializeLossInstruction<
  TAccountRiskCouncil extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: SocializeLossInput<
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): SocializeLossInstruction<
  TProgramAddress,
  TAccountRiskCouncil,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    riskCouncil: { value: input.riskCouncil ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.riskCouncil),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    programAddress,
    data: getSocializeLossInstructionDataEncoder().encode(
      args as SocializeLossInstructionDataArgs,
    ),
  } as SocializeLossInstruction<
    TProgramAddress,
    TAccountRiskCouncil,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountInstructionSysvarAccount
  >;

  return instruction;
}

export interface ParsedSocializeLossInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    riskCouncil: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    reserve: TAccountMetas[3];
    instructionSysvarAccount: TAccountMetas[4];
  };
  data: SocializeLossInstructionData;
}

export function parseSocializeLossInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSocializeLossInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      riskCouncil: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getSocializeLossInstructionDataDecoder().decode(instruction.data),
  };
}
