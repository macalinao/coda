/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const BORROW_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([161, 128, 143, 245, 171, 199, 194, 6]);

export function getBorrowObligationLiquidityV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BORROW_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR,
  );
}

export type BorrowObligationLiquidityV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountBorrowAccountsOwner extends string | AccountMeta = string,
  TAccountBorrowAccountsObligation extends string | AccountMeta = string,
  TAccountBorrowAccountsLendingMarket extends string | AccountMeta = string,
  TAccountBorrowAccountsLendingMarketAuthority extends
    | string
    | AccountMeta = string,
  TAccountBorrowAccountsBorrowReserve extends string | AccountMeta = string,
  TAccountBorrowAccountsBorrowReserveLiquidityMint extends
    | string
    | AccountMeta = string,
  TAccountBorrowAccountsReserveSourceLiquidity extends
    | string
    | AccountMeta = string,
  TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver extends
    | string
    | AccountMeta = string,
  TAccountBorrowAccountsUserDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountBorrowAccountsReferrerTokenState extends
    | string
    | AccountMeta = string,
  TAccountBorrowAccountsTokenProgram extends string | AccountMeta = string,
  TAccountBorrowAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBorrowAccountsOwner extends string
        ? ReadonlySignerAccount<TAccountBorrowAccountsOwner> &
            AccountSignerMeta<TAccountBorrowAccountsOwner>
        : TAccountBorrowAccountsOwner,
      TAccountBorrowAccountsObligation extends string
        ? WritableAccount<TAccountBorrowAccountsObligation>
        : TAccountBorrowAccountsObligation,
      TAccountBorrowAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountBorrowAccountsLendingMarket>
        : TAccountBorrowAccountsLendingMarket,
      TAccountBorrowAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountBorrowAccountsLendingMarketAuthority>
        : TAccountBorrowAccountsLendingMarketAuthority,
      TAccountBorrowAccountsBorrowReserve extends string
        ? WritableAccount<TAccountBorrowAccountsBorrowReserve>
        : TAccountBorrowAccountsBorrowReserve,
      TAccountBorrowAccountsBorrowReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountBorrowAccountsBorrowReserveLiquidityMint>
        : TAccountBorrowAccountsBorrowReserveLiquidityMint,
      TAccountBorrowAccountsReserveSourceLiquidity extends string
        ? WritableAccount<TAccountBorrowAccountsReserveSourceLiquidity>
        : TAccountBorrowAccountsReserveSourceLiquidity,
      TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver extends string
        ? WritableAccount<TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver>
        : TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver,
      TAccountBorrowAccountsUserDestinationLiquidity extends string
        ? WritableAccount<TAccountBorrowAccountsUserDestinationLiquidity>
        : TAccountBorrowAccountsUserDestinationLiquidity,
      TAccountBorrowAccountsReferrerTokenState extends string
        ? WritableAccount<TAccountBorrowAccountsReferrerTokenState>
        : TAccountBorrowAccountsReferrerTokenState,
      TAccountBorrowAccountsTokenProgram extends string
        ? ReadonlyAccount<TAccountBorrowAccountsTokenProgram>
        : TAccountBorrowAccountsTokenProgram,
      TAccountBorrowAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountBorrowAccountsInstructionSysvarAccount>
        : TAccountBorrowAccountsInstructionSysvarAccount,
      TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState>
        : TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState,
      TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState>
        : TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface BorrowObligationLiquidityV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface BorrowObligationLiquidityV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getBorrowObligationLiquidityV2InstructionDataEncoder(): FixedSizeEncoder<BorrowObligationLiquidityV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: BORROW_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR,
    }),
  );
}

export function getBorrowObligationLiquidityV2InstructionDataDecoder(): FixedSizeDecoder<BorrowObligationLiquidityV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getBorrowObligationLiquidityV2InstructionDataCodec(): FixedSizeCodec<
  BorrowObligationLiquidityV2InstructionDataArgs,
  BorrowObligationLiquidityV2InstructionData
> {
  return combineCodec(
    getBorrowObligationLiquidityV2InstructionDataEncoder(),
    getBorrowObligationLiquidityV2InstructionDataDecoder(),
  );
}

export interface BorrowObligationLiquidityV2Input<
  TAccountBorrowAccountsOwner extends string = string,
  TAccountBorrowAccountsObligation extends string = string,
  TAccountBorrowAccountsLendingMarket extends string = string,
  TAccountBorrowAccountsLendingMarketAuthority extends string = string,
  TAccountBorrowAccountsBorrowReserve extends string = string,
  TAccountBorrowAccountsBorrowReserveLiquidityMint extends string = string,
  TAccountBorrowAccountsReserveSourceLiquidity extends string = string,
  TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver extends
    string = string,
  TAccountBorrowAccountsUserDestinationLiquidity extends string = string,
  TAccountBorrowAccountsReferrerTokenState extends string = string,
  TAccountBorrowAccountsTokenProgram extends string = string,
  TAccountBorrowAccountsInstructionSysvarAccount extends string = string,
  TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState extends
    string = string,
  TAccountFarmsProgram extends string = string,
> {
  borrowAccountsOwner: TransactionSigner<TAccountBorrowAccountsOwner>;
  borrowAccountsObligation: Address<TAccountBorrowAccountsObligation>;
  borrowAccountsLendingMarket: Address<TAccountBorrowAccountsLendingMarket>;
  borrowAccountsLendingMarketAuthority: Address<TAccountBorrowAccountsLendingMarketAuthority>;
  borrowAccountsBorrowReserve: Address<TAccountBorrowAccountsBorrowReserve>;
  borrowAccountsBorrowReserveLiquidityMint: Address<TAccountBorrowAccountsBorrowReserveLiquidityMint>;
  borrowAccountsReserveSourceLiquidity: Address<TAccountBorrowAccountsReserveSourceLiquidity>;
  borrowAccountsBorrowReserveLiquidityFeeReceiver: Address<TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver>;
  borrowAccountsUserDestinationLiquidity: Address<TAccountBorrowAccountsUserDestinationLiquidity>;
  borrowAccountsReferrerTokenState?: Address<TAccountBorrowAccountsReferrerTokenState>;
  borrowAccountsTokenProgram: Address<TAccountBorrowAccountsTokenProgram>;
  borrowAccountsInstructionSysvarAccount?: Address<TAccountBorrowAccountsInstructionSysvarAccount>;
  borrowObligationLiquidityV2FarmsAccountsObligationFarmUserState?: Address<TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState>;
  borrowObligationLiquidityV2FarmsAccountsReserveFarmState?: Address<TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: BorrowObligationLiquidityV2InstructionDataArgs["liquidityAmount"];
}

export function getBorrowObligationLiquidityV2Instruction<
  TAccountBorrowAccountsOwner extends string,
  TAccountBorrowAccountsObligation extends string,
  TAccountBorrowAccountsLendingMarket extends string,
  TAccountBorrowAccountsLendingMarketAuthority extends string,
  TAccountBorrowAccountsBorrowReserve extends string,
  TAccountBorrowAccountsBorrowReserveLiquidityMint extends string,
  TAccountBorrowAccountsReserveSourceLiquidity extends string,
  TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver extends string,
  TAccountBorrowAccountsUserDestinationLiquidity extends string,
  TAccountBorrowAccountsReferrerTokenState extends string,
  TAccountBorrowAccountsTokenProgram extends string,
  TAccountBorrowAccountsInstructionSysvarAccount extends string,
  TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState extends
    string,
  TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState extends
    string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: BorrowObligationLiquidityV2Input<
    TAccountBorrowAccountsOwner,
    TAccountBorrowAccountsObligation,
    TAccountBorrowAccountsLendingMarket,
    TAccountBorrowAccountsLendingMarketAuthority,
    TAccountBorrowAccountsBorrowReserve,
    TAccountBorrowAccountsBorrowReserveLiquidityMint,
    TAccountBorrowAccountsReserveSourceLiquidity,
    TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver,
    TAccountBorrowAccountsUserDestinationLiquidity,
    TAccountBorrowAccountsReferrerTokenState,
    TAccountBorrowAccountsTokenProgram,
    TAccountBorrowAccountsInstructionSysvarAccount,
    TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState,
    TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): BorrowObligationLiquidityV2Instruction<
  TProgramAddress,
  TAccountBorrowAccountsOwner,
  TAccountBorrowAccountsObligation,
  TAccountBorrowAccountsLendingMarket,
  TAccountBorrowAccountsLendingMarketAuthority,
  TAccountBorrowAccountsBorrowReserve,
  TAccountBorrowAccountsBorrowReserveLiquidityMint,
  TAccountBorrowAccountsReserveSourceLiquidity,
  TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver,
  TAccountBorrowAccountsUserDestinationLiquidity,
  TAccountBorrowAccountsReferrerTokenState,
  TAccountBorrowAccountsTokenProgram,
  TAccountBorrowAccountsInstructionSysvarAccount,
  TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState,
  TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    borrowAccountsOwner: {
      value: input.borrowAccountsOwner ?? null,
      isWritable: false,
    },
    borrowAccountsObligation: {
      value: input.borrowAccountsObligation ?? null,
      isWritable: true,
    },
    borrowAccountsLendingMarket: {
      value: input.borrowAccountsLendingMarket ?? null,
      isWritable: false,
    },
    borrowAccountsLendingMarketAuthority: {
      value: input.borrowAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    borrowAccountsBorrowReserve: {
      value: input.borrowAccountsBorrowReserve ?? null,
      isWritable: true,
    },
    borrowAccountsBorrowReserveLiquidityMint: {
      value: input.borrowAccountsBorrowReserveLiquidityMint ?? null,
      isWritable: false,
    },
    borrowAccountsReserveSourceLiquidity: {
      value: input.borrowAccountsReserveSourceLiquidity ?? null,
      isWritable: true,
    },
    borrowAccountsBorrowReserveLiquidityFeeReceiver: {
      value: input.borrowAccountsBorrowReserveLiquidityFeeReceiver ?? null,
      isWritable: true,
    },
    borrowAccountsUserDestinationLiquidity: {
      value: input.borrowAccountsUserDestinationLiquidity ?? null,
      isWritable: true,
    },
    borrowAccountsReferrerTokenState: {
      value: input.borrowAccountsReferrerTokenState ?? null,
      isWritable: true,
    },
    borrowAccountsTokenProgram: {
      value: input.borrowAccountsTokenProgram ?? null,
      isWritable: false,
    },
    borrowAccountsInstructionSysvarAccount: {
      value: input.borrowAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    borrowObligationLiquidityV2FarmsAccountsObligationFarmUserState: {
      value:
        input.borrowObligationLiquidityV2FarmsAccountsObligationFarmUserState ??
        null,
      isWritable: true,
    },
    borrowObligationLiquidityV2FarmsAccountsReserveFarmState: {
      value:
        input.borrowObligationLiquidityV2FarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.borrowAccountsInstructionSysvarAccount.value) {
    accounts.borrowAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.borrowAccountsOwner),
      getAccountMeta(accounts.borrowAccountsObligation),
      getAccountMeta(accounts.borrowAccountsLendingMarket),
      getAccountMeta(accounts.borrowAccountsLendingMarketAuthority),
      getAccountMeta(accounts.borrowAccountsBorrowReserve),
      getAccountMeta(accounts.borrowAccountsBorrowReserveLiquidityMint),
      getAccountMeta(accounts.borrowAccountsReserveSourceLiquidity),
      getAccountMeta(accounts.borrowAccountsBorrowReserveLiquidityFeeReceiver),
      getAccountMeta(accounts.borrowAccountsUserDestinationLiquidity),
      getAccountMeta(accounts.borrowAccountsReferrerTokenState),
      getAccountMeta(accounts.borrowAccountsTokenProgram),
      getAccountMeta(accounts.borrowAccountsInstructionSysvarAccount),
      getAccountMeta(
        accounts.borrowObligationLiquidityV2FarmsAccountsObligationFarmUserState,
      ),
      getAccountMeta(
        accounts.borrowObligationLiquidityV2FarmsAccountsReserveFarmState,
      ),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getBorrowObligationLiquidityV2InstructionDataEncoder().encode(
      args as BorrowObligationLiquidityV2InstructionDataArgs,
    ),
  } as BorrowObligationLiquidityV2Instruction<
    TProgramAddress,
    TAccountBorrowAccountsOwner,
    TAccountBorrowAccountsObligation,
    TAccountBorrowAccountsLendingMarket,
    TAccountBorrowAccountsLendingMarketAuthority,
    TAccountBorrowAccountsBorrowReserve,
    TAccountBorrowAccountsBorrowReserveLiquidityMint,
    TAccountBorrowAccountsReserveSourceLiquidity,
    TAccountBorrowAccountsBorrowReserveLiquidityFeeReceiver,
    TAccountBorrowAccountsUserDestinationLiquidity,
    TAccountBorrowAccountsReferrerTokenState,
    TAccountBorrowAccountsTokenProgram,
    TAccountBorrowAccountsInstructionSysvarAccount,
    TAccountBorrowObligationLiquidityV2FarmsAccountsObligationFarmUserState,
    TAccountBorrowObligationLiquidityV2FarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedBorrowObligationLiquidityV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    borrowAccountsOwner: TAccountMetas[0];
    borrowAccountsObligation: TAccountMetas[1];
    borrowAccountsLendingMarket: TAccountMetas[2];
    borrowAccountsLendingMarketAuthority: TAccountMetas[3];
    borrowAccountsBorrowReserve: TAccountMetas[4];
    borrowAccountsBorrowReserveLiquidityMint: TAccountMetas[5];
    borrowAccountsReserveSourceLiquidity: TAccountMetas[6];
    borrowAccountsBorrowReserveLiquidityFeeReceiver: TAccountMetas[7];
    borrowAccountsUserDestinationLiquidity: TAccountMetas[8];
    borrowAccountsReferrerTokenState?: TAccountMetas[9] | undefined;
    borrowAccountsTokenProgram: TAccountMetas[10];
    borrowAccountsInstructionSysvarAccount: TAccountMetas[11];
    borrowObligationLiquidityV2FarmsAccountsObligationFarmUserState?:
      | TAccountMetas[12]
      | undefined;
    borrowObligationLiquidityV2FarmsAccountsReserveFarmState?:
      | TAccountMetas[13]
      | undefined;
    farmsProgram: TAccountMetas[14];
  };
  data: BorrowObligationLiquidityV2InstructionData;
}

export function parseBorrowObligationLiquidityV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedBorrowObligationLiquidityV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      borrowAccountsOwner: getNextAccount(),
      borrowAccountsObligation: getNextAccount(),
      borrowAccountsLendingMarket: getNextAccount(),
      borrowAccountsLendingMarketAuthority: getNextAccount(),
      borrowAccountsBorrowReserve: getNextAccount(),
      borrowAccountsBorrowReserveLiquidityMint: getNextAccount(),
      borrowAccountsReserveSourceLiquidity: getNextAccount(),
      borrowAccountsBorrowReserveLiquidityFeeReceiver: getNextAccount(),
      borrowAccountsUserDestinationLiquidity: getNextAccount(),
      borrowAccountsReferrerTokenState: getNextOptionalAccount(),
      borrowAccountsTokenProgram: getNextAccount(),
      borrowAccountsInstructionSysvarAccount: getNextAccount(),
      borrowObligationLiquidityV2FarmsAccountsObligationFarmUserState:
        getNextOptionalAccount(),
      borrowObligationLiquidityV2FarmsAccountsReserveFarmState:
        getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getBorrowObligationLiquidityV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
