/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REPAY_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([116, 174, 213, 76, 180, 53, 210, 144]);

export function getRepayObligationLiquidityV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPAY_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR,
  );
}

export type RepayObligationLiquidityV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountRepayAccountsOwner extends string | AccountMeta = string,
  TAccountRepayAccountsObligation extends string | AccountMeta = string,
  TAccountRepayAccountsLendingMarket extends string | AccountMeta = string,
  TAccountRepayAccountsRepayReserve extends string | AccountMeta = string,
  TAccountRepayAccountsReserveLiquidityMint extends
    | string
    | AccountMeta = string,
  TAccountRepayAccountsReserveDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountRepayAccountsUserSourceLiquidity extends
    | string
    | AccountMeta = string,
  TAccountRepayAccountsTokenProgram extends string | AccountMeta = string,
  TAccountRepayAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta = string,
  TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState extends
    | string
    | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRepayAccountsOwner extends string
        ? ReadonlySignerAccount<TAccountRepayAccountsOwner> &
            AccountSignerMeta<TAccountRepayAccountsOwner>
        : TAccountRepayAccountsOwner,
      TAccountRepayAccountsObligation extends string
        ? WritableAccount<TAccountRepayAccountsObligation>
        : TAccountRepayAccountsObligation,
      TAccountRepayAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountRepayAccountsLendingMarket>
        : TAccountRepayAccountsLendingMarket,
      TAccountRepayAccountsRepayReserve extends string
        ? WritableAccount<TAccountRepayAccountsRepayReserve>
        : TAccountRepayAccountsRepayReserve,
      TAccountRepayAccountsReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountRepayAccountsReserveLiquidityMint>
        : TAccountRepayAccountsReserveLiquidityMint,
      TAccountRepayAccountsReserveDestinationLiquidity extends string
        ? WritableAccount<TAccountRepayAccountsReserveDestinationLiquidity>
        : TAccountRepayAccountsReserveDestinationLiquidity,
      TAccountRepayAccountsUserSourceLiquidity extends string
        ? WritableAccount<TAccountRepayAccountsUserSourceLiquidity>
        : TAccountRepayAccountsUserSourceLiquidity,
      TAccountRepayAccountsTokenProgram extends string
        ? ReadonlyAccount<TAccountRepayAccountsTokenProgram>
        : TAccountRepayAccountsTokenProgram,
      TAccountRepayAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountRepayAccountsInstructionSysvarAccount>
        : TAccountRepayAccountsInstructionSysvarAccount,
      TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState>
        : TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState,
      TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState>
        : TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RepayObligationLiquidityV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface RepayObligationLiquidityV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getRepayObligationLiquidityV2InstructionDataEncoder(): FixedSizeEncoder<RepayObligationLiquidityV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REPAY_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR,
    }),
  );
}

export function getRepayObligationLiquidityV2InstructionDataDecoder(): FixedSizeDecoder<RepayObligationLiquidityV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getRepayObligationLiquidityV2InstructionDataCodec(): FixedSizeCodec<
  RepayObligationLiquidityV2InstructionDataArgs,
  RepayObligationLiquidityV2InstructionData
> {
  return combineCodec(
    getRepayObligationLiquidityV2InstructionDataEncoder(),
    getRepayObligationLiquidityV2InstructionDataDecoder(),
  );
}

export interface RepayObligationLiquidityV2Input<
  TAccountRepayAccountsOwner extends string = string,
  TAccountRepayAccountsObligation extends string = string,
  TAccountRepayAccountsLendingMarket extends string = string,
  TAccountRepayAccountsRepayReserve extends string = string,
  TAccountRepayAccountsReserveLiquidityMint extends string = string,
  TAccountRepayAccountsReserveDestinationLiquidity extends string = string,
  TAccountRepayAccountsUserSourceLiquidity extends string = string,
  TAccountRepayAccountsTokenProgram extends string = string,
  TAccountRepayAccountsInstructionSysvarAccount extends string = string,
  TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState extends
    string = string,
  TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState extends
    string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  repayAccountsOwner: TransactionSigner<TAccountRepayAccountsOwner>;
  repayAccountsObligation: Address<TAccountRepayAccountsObligation>;
  repayAccountsLendingMarket: Address<TAccountRepayAccountsLendingMarket>;
  repayAccountsRepayReserve: Address<TAccountRepayAccountsRepayReserve>;
  repayAccountsReserveLiquidityMint: Address<TAccountRepayAccountsReserveLiquidityMint>;
  repayAccountsReserveDestinationLiquidity: Address<TAccountRepayAccountsReserveDestinationLiquidity>;
  repayAccountsUserSourceLiquidity: Address<TAccountRepayAccountsUserSourceLiquidity>;
  repayAccountsTokenProgram: Address<TAccountRepayAccountsTokenProgram>;
  repayAccountsInstructionSysvarAccount?: Address<TAccountRepayAccountsInstructionSysvarAccount>;
  repayObligationLiquidityV2FarmsAccountsObligationFarmUserState?: Address<TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState>;
  repayObligationLiquidityV2FarmsAccountsReserveFarmState?: Address<TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: RepayObligationLiquidityV2InstructionDataArgs["liquidityAmount"];
}

export function getRepayObligationLiquidityV2Instruction<
  TAccountRepayAccountsOwner extends string,
  TAccountRepayAccountsObligation extends string,
  TAccountRepayAccountsLendingMarket extends string,
  TAccountRepayAccountsRepayReserve extends string,
  TAccountRepayAccountsReserveLiquidityMint extends string,
  TAccountRepayAccountsReserveDestinationLiquidity extends string,
  TAccountRepayAccountsUserSourceLiquidity extends string,
  TAccountRepayAccountsTokenProgram extends string,
  TAccountRepayAccountsInstructionSysvarAccount extends string,
  TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState extends
    string,
  TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState extends
    string,
  TAccountLendingMarketAuthority extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RepayObligationLiquidityV2Input<
    TAccountRepayAccountsOwner,
    TAccountRepayAccountsObligation,
    TAccountRepayAccountsLendingMarket,
    TAccountRepayAccountsRepayReserve,
    TAccountRepayAccountsReserveLiquidityMint,
    TAccountRepayAccountsReserveDestinationLiquidity,
    TAccountRepayAccountsUserSourceLiquidity,
    TAccountRepayAccountsTokenProgram,
    TAccountRepayAccountsInstructionSysvarAccount,
    TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState,
    TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RepayObligationLiquidityV2Instruction<
  TProgramAddress,
  TAccountRepayAccountsOwner,
  TAccountRepayAccountsObligation,
  TAccountRepayAccountsLendingMarket,
  TAccountRepayAccountsRepayReserve,
  TAccountRepayAccountsReserveLiquidityMint,
  TAccountRepayAccountsReserveDestinationLiquidity,
  TAccountRepayAccountsUserSourceLiquidity,
  TAccountRepayAccountsTokenProgram,
  TAccountRepayAccountsInstructionSysvarAccount,
  TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState,
  TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState,
  TAccountLendingMarketAuthority,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    repayAccountsOwner: {
      value: input.repayAccountsOwner ?? null,
      isWritable: false,
    },
    repayAccountsObligation: {
      value: input.repayAccountsObligation ?? null,
      isWritable: true,
    },
    repayAccountsLendingMarket: {
      value: input.repayAccountsLendingMarket ?? null,
      isWritable: false,
    },
    repayAccountsRepayReserve: {
      value: input.repayAccountsRepayReserve ?? null,
      isWritable: true,
    },
    repayAccountsReserveLiquidityMint: {
      value: input.repayAccountsReserveLiquidityMint ?? null,
      isWritable: false,
    },
    repayAccountsReserveDestinationLiquidity: {
      value: input.repayAccountsReserveDestinationLiquidity ?? null,
      isWritable: true,
    },
    repayAccountsUserSourceLiquidity: {
      value: input.repayAccountsUserSourceLiquidity ?? null,
      isWritable: true,
    },
    repayAccountsTokenProgram: {
      value: input.repayAccountsTokenProgram ?? null,
      isWritable: false,
    },
    repayAccountsInstructionSysvarAccount: {
      value: input.repayAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    repayObligationLiquidityV2FarmsAccountsObligationFarmUserState: {
      value:
        input.repayObligationLiquidityV2FarmsAccountsObligationFarmUserState ??
        null,
      isWritable: true,
    },
    repayObligationLiquidityV2FarmsAccountsReserveFarmState: {
      value:
        input.repayObligationLiquidityV2FarmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.repayAccountsInstructionSysvarAccount.value) {
    accounts.repayAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.repayAccountsOwner),
      getAccountMeta(accounts.repayAccountsObligation),
      getAccountMeta(accounts.repayAccountsLendingMarket),
      getAccountMeta(accounts.repayAccountsRepayReserve),
      getAccountMeta(accounts.repayAccountsReserveLiquidityMint),
      getAccountMeta(accounts.repayAccountsReserveDestinationLiquidity),
      getAccountMeta(accounts.repayAccountsUserSourceLiquidity),
      getAccountMeta(accounts.repayAccountsTokenProgram),
      getAccountMeta(accounts.repayAccountsInstructionSysvarAccount),
      getAccountMeta(
        accounts.repayObligationLiquidityV2FarmsAccountsObligationFarmUserState,
      ),
      getAccountMeta(
        accounts.repayObligationLiquidityV2FarmsAccountsReserveFarmState,
      ),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getRepayObligationLiquidityV2InstructionDataEncoder().encode(
      args as RepayObligationLiquidityV2InstructionDataArgs,
    ),
  } as RepayObligationLiquidityV2Instruction<
    TProgramAddress,
    TAccountRepayAccountsOwner,
    TAccountRepayAccountsObligation,
    TAccountRepayAccountsLendingMarket,
    TAccountRepayAccountsRepayReserve,
    TAccountRepayAccountsReserveLiquidityMint,
    TAccountRepayAccountsReserveDestinationLiquidity,
    TAccountRepayAccountsUserSourceLiquidity,
    TAccountRepayAccountsTokenProgram,
    TAccountRepayAccountsInstructionSysvarAccount,
    TAccountRepayObligationLiquidityV2FarmsAccountsObligationFarmUserState,
    TAccountRepayObligationLiquidityV2FarmsAccountsReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >;

  return instruction;
}

export interface ParsedRepayObligationLiquidityV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    repayAccountsOwner: TAccountMetas[0];
    repayAccountsObligation: TAccountMetas[1];
    repayAccountsLendingMarket: TAccountMetas[2];
    repayAccountsRepayReserve: TAccountMetas[3];
    repayAccountsReserveLiquidityMint: TAccountMetas[4];
    repayAccountsReserveDestinationLiquidity: TAccountMetas[5];
    repayAccountsUserSourceLiquidity: TAccountMetas[6];
    repayAccountsTokenProgram: TAccountMetas[7];
    repayAccountsInstructionSysvarAccount: TAccountMetas[8];
    repayObligationLiquidityV2FarmsAccountsObligationFarmUserState?:
      | TAccountMetas[9]
      | undefined;
    repayObligationLiquidityV2FarmsAccountsReserveFarmState?:
      | TAccountMetas[10]
      | undefined;
    lendingMarketAuthority: TAccountMetas[11];
    farmsProgram: TAccountMetas[12];
  };
  data: RepayObligationLiquidityV2InstructionData;
}

export function parseRepayObligationLiquidityV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRepayObligationLiquidityV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      repayAccountsOwner: getNextAccount(),
      repayAccountsObligation: getNextAccount(),
      repayAccountsLendingMarket: getNextAccount(),
      repayAccountsRepayReserve: getNextAccount(),
      repayAccountsReserveLiquidityMint: getNextAccount(),
      repayAccountsReserveDestinationLiquidity: getNextAccount(),
      repayAccountsUserSourceLiquidity: getNextAccount(),
      repayAccountsTokenProgram: getNextAccount(),
      repayAccountsInstructionSysvarAccount: getNextAccount(),
      repayObligationLiquidityV2FarmsAccountsObligationFarmUserState:
        getNextOptionalAccount(),
      repayObligationLiquidityV2FarmsAccountsReserveFarmState:
        getNextOptionalAccount(),
      lendingMarketAuthority: getNextAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getRepayObligationLiquidityV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
