/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REPAY_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([116, 174, 213, 76, 180, 53, 210, 144]);

export function getRepayObligationLiquidityV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPAY_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR,
  );
}

export type RepayObligationLiquidityV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountRepayReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveDestinationLiquidity extends
    | string
    | AccountMeta = string,
  TAccountUserSourceLiquidity extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountObligationFarmUserState extends string | AccountMeta = string,
  TAccountReserveFarmState extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountFarmsProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountRepayReserve extends string
        ? WritableAccount<TAccountRepayReserve>
        : TAccountRepayReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveDestinationLiquidity extends string
        ? WritableAccount<TAccountReserveDestinationLiquidity>
        : TAccountReserveDestinationLiquidity,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      TAccountObligationFarmUserState extends string
        ? WritableAccount<TAccountObligationFarmUserState>
        : TAccountObligationFarmUserState,
      TAccountReserveFarmState extends string
        ? WritableAccount<TAccountReserveFarmState>
        : TAccountReserveFarmState,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RepayObligationLiquidityV2InstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface RepayObligationLiquidityV2InstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getRepayObligationLiquidityV2InstructionDataEncoder(): FixedSizeEncoder<RepayObligationLiquidityV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REPAY_OBLIGATION_LIQUIDITY_V2_DISCRIMINATOR,
    }),
  );
}

export function getRepayObligationLiquidityV2InstructionDataDecoder(): FixedSizeDecoder<RepayObligationLiquidityV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getRepayObligationLiquidityV2InstructionDataCodec(): FixedSizeCodec<
  RepayObligationLiquidityV2InstructionDataArgs,
  RepayObligationLiquidityV2InstructionData
> {
  return combineCodec(
    getRepayObligationLiquidityV2InstructionDataEncoder(),
    getRepayObligationLiquidityV2InstructionDataDecoder(),
  );
}

export interface RepayObligationLiquidityV2Input<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountRepayReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveDestinationLiquidity extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
  TAccountObligationFarmUserState extends string = string,
  TAccountReserveFarmState extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountFarmsProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  repayReserve: Address<TAccountRepayReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveDestinationLiquidity: Address<TAccountReserveDestinationLiquidity>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  tokenProgram: Address<TAccountTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  obligationFarmUserState?: Address<TAccountObligationFarmUserState>;
  reserveFarmState?: Address<TAccountReserveFarmState>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  farmsProgram: Address<TAccountFarmsProgram>;
  liquidityAmount: RepayObligationLiquidityV2InstructionDataArgs["liquidityAmount"];
}

export function getRepayObligationLiquidityV2Instruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountRepayReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveDestinationLiquidity extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TAccountObligationFarmUserState extends string,
  TAccountReserveFarmState extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RepayObligationLiquidityV2Input<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountRepayReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RepayObligationLiquidityV2Instruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountRepayReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveDestinationLiquidity,
  TAccountUserSourceLiquidity,
  TAccountTokenProgram,
  TAccountInstructionSysvarAccount,
  TAccountObligationFarmUserState,
  TAccountReserveFarmState,
  TAccountLendingMarketAuthority,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    repayReserve: { value: input.repayReserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveDestinationLiquidity: {
      value: input.reserveDestinationLiquidity ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
    obligationFarmUserState: {
      value: input.obligationFarmUserState ?? null,
      isWritable: true,
    },
    reserveFarmState: {
      value: input.reserveFarmState ?? null,
      isWritable: true,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.repayReserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveDestinationLiquidity),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
      getAccountMeta(accounts.obligationFarmUserState),
      getAccountMeta(accounts.reserveFarmState),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.farmsProgram),
    ],
    data: getRepayObligationLiquidityV2InstructionDataEncoder().encode(
      args as RepayObligationLiquidityV2InstructionDataArgs,
    ),
    programAddress,
  } as RepayObligationLiquidityV2Instruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountRepayReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount,
    TAccountObligationFarmUserState,
    TAccountReserveFarmState,
    TAccountLendingMarketAuthority,
    TAccountFarmsProgram
  >);
}

export interface ParsedRepayObligationLiquidityV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    repayReserve: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveDestinationLiquidity: TAccountMetas[5];
    userSourceLiquidity: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    instructionSysvarAccount: TAccountMetas[8];
    obligationFarmUserState?: TAccountMetas[9] | undefined;
    reserveFarmState?: TAccountMetas[10] | undefined;
    lendingMarketAuthority: TAccountMetas[11];
    farmsProgram: TAccountMetas[12];
  };
  data: RepayObligationLiquidityV2InstructionData;
}

export function parseRepayObligationLiquidityV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRepayObligationLiquidityV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      repayReserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveDestinationLiquidity: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      tokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
      obligationFarmUserState: getNextOptionalAccount(),
      reserveFarmState: getNextOptionalAccount(),
      lendingMarketAuthority: getNextAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getRepayObligationLiquidityV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
