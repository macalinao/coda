/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const FLASH_BORROW_RESERVE_LIQUIDITY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([135, 231, 52, 167, 7, 52, 212, 193]);

export function getFlashBorrowReserveLiquidityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FLASH_BORROW_RESERVE_LIQUIDITY_DISCRIMINATOR,
  );
}

export type FlashBorrowReserveLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountUserTransferAuthority extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveSourceLiquidity extends string | AccountMeta = string,
  TAccountUserDestinationLiquidity extends string | AccountMeta = string,
  TAccountReserveLiquidityFeeReceiver extends string | AccountMeta = string,
  TAccountReferrerTokenState extends string | AccountMeta = string,
  TAccountReferrerAccount extends string | AccountMeta = string,
  TAccountSysvarInfo extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            AccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveSourceLiquidity extends string
        ? WritableAccount<TAccountReserveSourceLiquidity>
        : TAccountReserveSourceLiquidity,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountReserveLiquidityFeeReceiver extends string
        ? WritableAccount<TAccountReserveLiquidityFeeReceiver>
        : TAccountReserveLiquidityFeeReceiver,
      TAccountReferrerTokenState extends string
        ? WritableAccount<TAccountReferrerTokenState>
        : TAccountReferrerTokenState,
      TAccountReferrerAccount extends string
        ? WritableAccount<TAccountReferrerAccount>
        : TAccountReferrerAccount,
      TAccountSysvarInfo extends string
        ? ReadonlyAccount<TAccountSysvarInfo>
        : TAccountSysvarInfo,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface FlashBorrowReserveLiquidityInstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface FlashBorrowReserveLiquidityInstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getFlashBorrowReserveLiquidityInstructionDataEncoder(): FixedSizeEncoder<FlashBorrowReserveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: FLASH_BORROW_RESERVE_LIQUIDITY_DISCRIMINATOR,
    }),
  );
}

export function getFlashBorrowReserveLiquidityInstructionDataDecoder(): FixedSizeDecoder<FlashBorrowReserveLiquidityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getFlashBorrowReserveLiquidityInstructionDataCodec(): FixedSizeCodec<
  FlashBorrowReserveLiquidityInstructionDataArgs,
  FlashBorrowReserveLiquidityInstructionData
> {
  return combineCodec(
    getFlashBorrowReserveLiquidityInstructionDataEncoder(),
    getFlashBorrowReserveLiquidityInstructionDataDecoder(),
  );
}

export interface FlashBorrowReserveLiquidityInput<
  TAccountUserTransferAuthority extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveSourceLiquidity extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountReserveLiquidityFeeReceiver extends string = string,
  TAccountReferrerTokenState extends string = string,
  TAccountReferrerAccount extends string = string,
  TAccountSysvarInfo extends string = string,
  TAccountTokenProgram extends string = string,
> {
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveSourceLiquidity: Address<TAccountReserveSourceLiquidity>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  reserveLiquidityFeeReceiver: Address<TAccountReserveLiquidityFeeReceiver>;
  referrerTokenState?: Address<TAccountReferrerTokenState>;
  referrerAccount?: Address<TAccountReferrerAccount>;
  sysvarInfo?: Address<TAccountSysvarInfo>;
  tokenProgram?: Address<TAccountTokenProgram>;
  liquidityAmount: FlashBorrowReserveLiquidityInstructionDataArgs["liquidityAmount"];
}

export function getFlashBorrowReserveLiquidityInstruction<
  TAccountUserTransferAuthority extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveSourceLiquidity extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountReserveLiquidityFeeReceiver extends string,
  TAccountReferrerTokenState extends string,
  TAccountReferrerAccount extends string,
  TAccountSysvarInfo extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: FlashBorrowReserveLiquidityInput<
    TAccountUserTransferAuthority,
    TAccountLendingMarketAuthority,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceLiquidity,
    TAccountUserDestinationLiquidity,
    TAccountReserveLiquidityFeeReceiver,
    TAccountReferrerTokenState,
    TAccountReferrerAccount,
    TAccountSysvarInfo,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): FlashBorrowReserveLiquidityInstruction<
  TProgramAddress,
  TAccountUserTransferAuthority,
  TAccountLendingMarketAuthority,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveSourceLiquidity,
  TAccountUserDestinationLiquidity,
  TAccountReserveLiquidityFeeReceiver,
  TAccountReferrerTokenState,
  TAccountReferrerAccount,
  TAccountSysvarInfo,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveSourceLiquidity: {
      value: input.reserveSourceLiquidity ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    reserveLiquidityFeeReceiver: {
      value: input.reserveLiquidityFeeReceiver ?? null,
      isWritable: true,
    },
    referrerTokenState: {
      value: input.referrerTokenState ?? null,
      isWritable: true,
    },
    referrerAccount: { value: input.referrerAccount ?? null, isWritable: true },
    sysvarInfo: { value: input.sysvarInfo ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.sysvarInfo.value) {
    accounts.sysvarInfo.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveSourceLiquidity),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.reserveLiquidityFeeReceiver),
      getAccountMeta(accounts.referrerTokenState),
      getAccountMeta(accounts.referrerAccount),
      getAccountMeta(accounts.sysvarInfo),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getFlashBorrowReserveLiquidityInstructionDataEncoder().encode(
      args as FlashBorrowReserveLiquidityInstructionDataArgs,
    ),
    programAddress,
  } as FlashBorrowReserveLiquidityInstruction<
    TProgramAddress,
    TAccountUserTransferAuthority,
    TAccountLendingMarketAuthority,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveSourceLiquidity,
    TAccountUserDestinationLiquidity,
    TAccountReserveLiquidityFeeReceiver,
    TAccountReferrerTokenState,
    TAccountReferrerAccount,
    TAccountSysvarInfo,
    TAccountTokenProgram
  >);
}

export interface ParsedFlashBorrowReserveLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    userTransferAuthority: TAccountMetas[0];
    lendingMarketAuthority: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    reserve: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveSourceLiquidity: TAccountMetas[5];
    userDestinationLiquidity: TAccountMetas[6];
    reserveLiquidityFeeReceiver: TAccountMetas[7];
    referrerTokenState?: TAccountMetas[8] | undefined;
    referrerAccount?: TAccountMetas[9] | undefined;
    sysvarInfo: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
  };
  data: FlashBorrowReserveLiquidityInstructionData;
}

export function parseFlashBorrowReserveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedFlashBorrowReserveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userTransferAuthority: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveSourceLiquidity: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      reserveLiquidityFeeReceiver: getNextAccount(),
      referrerTokenState: getNextOptionalAccount(),
      referrerAccount: getNextOptionalAccount(),
      sysvarInfo: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getFlashBorrowReserveLiquidityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
