/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const TRANSFER_OWNERSHIP_DISCRIMINATOR = new Uint8Array([
  65, 177, 215, 73, 53, 45, 99, 47,
]);

export function getTransferOwnershipDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSFER_OWNERSHIP_DISCRIMINATOR,
  );
}

export type TransferOwnershipInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountUserState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      ...TRemainingAccounts,
    ]
  >;

export type TransferOwnershipInstructionData = {
  discriminator: ReadonlyUint8Array;
  newOwner: Address;
};

export type TransferOwnershipInstructionDataArgs = { newOwner: Address };

export function getTransferOwnershipInstructionDataEncoder(): FixedSizeEncoder<TransferOwnershipInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newOwner", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TRANSFER_OWNERSHIP_DISCRIMINATOR }),
  );
}

export function getTransferOwnershipInstructionDataDecoder(): FixedSizeDecoder<TransferOwnershipInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newOwner", getAddressDecoder()],
  ]);
}

export function getTransferOwnershipInstructionDataCodec(): FixedSizeCodec<
  TransferOwnershipInstructionDataArgs,
  TransferOwnershipInstructionData
> {
  return combineCodec(
    getTransferOwnershipInstructionDataEncoder(),
    getTransferOwnershipInstructionDataDecoder(),
  );
}

export type TransferOwnershipInput<
  TAccountOwner extends string = string,
  TAccountUserState extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  userState: Address<TAccountUserState>;
  newOwner: TransferOwnershipInstructionDataArgs["newOwner"];
};

export function getTransferOwnershipInstruction<
  TAccountOwner extends string,
  TAccountUserState extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: TransferOwnershipInput<TAccountOwner, TAccountUserState>,
  config?: { programAddress?: TProgramAddress },
): TransferOwnershipInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountUserState
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    userState: { value: input.userState ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.userState),
    ],
    programAddress,
    data: getTransferOwnershipInstructionDataEncoder().encode(
      args as TransferOwnershipInstructionDataArgs,
    ),
  } as TransferOwnershipInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountUserState
  >;

  return instruction;
}

export type ParsedTransferOwnershipInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    userState: TAccountMetas[1];
  };
  data: TransferOwnershipInstructionData;
};

export function parseTransferOwnershipInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedTransferOwnershipInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      userState: getNextAccount(),
    },
    data: getTransferOwnershipInstructionDataDecoder().decode(instruction.data),
  };
}
