/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const WITHDRAW_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR = new Uint8Array([
  202, 249, 117, 114, 231, 192, 47, 138,
]);

export function getWithdrawObligationCollateralV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
  );
}

export type WithdrawObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountWithdrawAccountsOwner extends string | AccountMeta<string> = string,
  TAccountWithdrawAccountsObligation extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsLendingMarket extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsWithdrawReserve extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsUserDestinationCollateral extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsTokenProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountFarmsAccountsObligationFarmUserState extends
    | string
    | AccountMeta<string> = string,
  TAccountFarmsAccountsReserveFarmState extends
    | string
    | AccountMeta<string> = string,
  TAccountFarmsProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWithdrawAccountsOwner extends string
        ? ReadonlySignerAccount<TAccountWithdrawAccountsOwner> &
            AccountSignerMeta<TAccountWithdrawAccountsOwner>
        : TAccountWithdrawAccountsOwner,
      TAccountWithdrawAccountsObligation extends string
        ? WritableAccount<TAccountWithdrawAccountsObligation>
        : TAccountWithdrawAccountsObligation,
      TAccountWithdrawAccountsLendingMarket extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarket>
        : TAccountWithdrawAccountsLendingMarket,
      TAccountWithdrawAccountsLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsLendingMarketAuthority>
        : TAccountWithdrawAccountsLendingMarketAuthority,
      TAccountWithdrawAccountsWithdrawReserve extends string
        ? WritableAccount<TAccountWithdrawAccountsWithdrawReserve>
        : TAccountWithdrawAccountsWithdrawReserve,
      TAccountWithdrawAccountsReserveSourceCollateral extends string
        ? WritableAccount<TAccountWithdrawAccountsReserveSourceCollateral>
        : TAccountWithdrawAccountsReserveSourceCollateral,
      TAccountWithdrawAccountsUserDestinationCollateral extends string
        ? WritableAccount<TAccountWithdrawAccountsUserDestinationCollateral>
        : TAccountWithdrawAccountsUserDestinationCollateral,
      TAccountWithdrawAccountsTokenProgram extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsTokenProgram>
        : TAccountWithdrawAccountsTokenProgram,
      TAccountWithdrawAccountsInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountWithdrawAccountsInstructionSysvarAccount>
        : TAccountWithdrawAccountsInstructionSysvarAccount,
      TAccountFarmsAccountsObligationFarmUserState extends string
        ? WritableAccount<TAccountFarmsAccountsObligationFarmUserState>
        : TAccountFarmsAccountsObligationFarmUserState,
      TAccountFarmsAccountsReserveFarmState extends string
        ? WritableAccount<TAccountFarmsAccountsReserveFarmState>
        : TAccountFarmsAccountsReserveFarmState,
      TAccountFarmsProgram extends string
        ? ReadonlyAccount<TAccountFarmsProgram>
        : TAccountFarmsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawObligationCollateralV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
};

export type WithdrawObligationCollateralV2InstructionDataArgs = {
  collateralAmount: number | bigint;
};

export function getWithdrawObligationCollateralV2InstructionDataEncoder(): FixedSizeEncoder<WithdrawObligationCollateralV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["collateralAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_OBLIGATION_COLLATERAL_V2_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawObligationCollateralV2InstructionDataDecoder(): FixedSizeDecoder<WithdrawObligationCollateralV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["collateralAmount", getU64Decoder()],
  ]);
}

export function getWithdrawObligationCollateralV2InstructionDataCodec(): FixedSizeCodec<
  WithdrawObligationCollateralV2InstructionDataArgs,
  WithdrawObligationCollateralV2InstructionData
> {
  return combineCodec(
    getWithdrawObligationCollateralV2InstructionDataEncoder(),
    getWithdrawObligationCollateralV2InstructionDataDecoder(),
  );
}

export type WithdrawObligationCollateralV2Input<
  TAccountWithdrawAccountsOwner extends string = string,
  TAccountWithdrawAccountsObligation extends string = string,
  TAccountWithdrawAccountsLendingMarket extends string = string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string = string,
  TAccountWithdrawAccountsWithdrawReserve extends string = string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string = string,
  TAccountWithdrawAccountsUserDestinationCollateral extends string = string,
  TAccountWithdrawAccountsTokenProgram extends string = string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string = string,
  TAccountFarmsAccountsObligationFarmUserState extends string = string,
  TAccountFarmsAccountsReserveFarmState extends string = string,
  TAccountFarmsProgram extends string = string,
> = {
  withdrawAccountsOwner: TransactionSigner<TAccountWithdrawAccountsOwner>;
  withdrawAccountsObligation: Address<TAccountWithdrawAccountsObligation>;
  withdrawAccountsLendingMarket: Address<TAccountWithdrawAccountsLendingMarket>;
  withdrawAccountsLendingMarketAuthority: Address<TAccountWithdrawAccountsLendingMarketAuthority>;
  withdrawAccountsWithdrawReserve: Address<TAccountWithdrawAccountsWithdrawReserve>;
  withdrawAccountsReserveSourceCollateral: Address<TAccountWithdrawAccountsReserveSourceCollateral>;
  withdrawAccountsUserDestinationCollateral: Address<TAccountWithdrawAccountsUserDestinationCollateral>;
  withdrawAccountsTokenProgram: Address<TAccountWithdrawAccountsTokenProgram>;
  withdrawAccountsInstructionSysvarAccount?: Address<TAccountWithdrawAccountsInstructionSysvarAccount>;
  farmsAccountsObligationFarmUserState?: Address<TAccountFarmsAccountsObligationFarmUserState>;
  farmsAccountsReserveFarmState?: Address<TAccountFarmsAccountsReserveFarmState>;
  farmsProgram: Address<TAccountFarmsProgram>;
  collateralAmount: WithdrawObligationCollateralV2InstructionDataArgs["collateralAmount"];
};

export function getWithdrawObligationCollateralV2Instruction<
  TAccountWithdrawAccountsOwner extends string,
  TAccountWithdrawAccountsObligation extends string,
  TAccountWithdrawAccountsLendingMarket extends string,
  TAccountWithdrawAccountsLendingMarketAuthority extends string,
  TAccountWithdrawAccountsWithdrawReserve extends string,
  TAccountWithdrawAccountsReserveSourceCollateral extends string,
  TAccountWithdrawAccountsUserDestinationCollateral extends string,
  TAccountWithdrawAccountsTokenProgram extends string,
  TAccountWithdrawAccountsInstructionSysvarAccount extends string,
  TAccountFarmsAccountsObligationFarmUserState extends string,
  TAccountFarmsAccountsReserveFarmState extends string,
  TAccountFarmsProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: WithdrawObligationCollateralV2Input<
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsUserDestinationCollateral,
    TAccountWithdrawAccountsTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountFarmsAccountsObligationFarmUserState,
    TAccountFarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawObligationCollateralV2Instruction<
  TProgramAddress,
  TAccountWithdrawAccountsOwner,
  TAccountWithdrawAccountsObligation,
  TAccountWithdrawAccountsLendingMarket,
  TAccountWithdrawAccountsLendingMarketAuthority,
  TAccountWithdrawAccountsWithdrawReserve,
  TAccountWithdrawAccountsReserveSourceCollateral,
  TAccountWithdrawAccountsUserDestinationCollateral,
  TAccountWithdrawAccountsTokenProgram,
  TAccountWithdrawAccountsInstructionSysvarAccount,
  TAccountFarmsAccountsObligationFarmUserState,
  TAccountFarmsAccountsReserveFarmState,
  TAccountFarmsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    withdrawAccountsOwner: {
      value: input.withdrawAccountsOwner ?? null,
      isWritable: false,
    },
    withdrawAccountsObligation: {
      value: input.withdrawAccountsObligation ?? null,
      isWritable: true,
    },
    withdrawAccountsLendingMarket: {
      value: input.withdrawAccountsLendingMarket ?? null,
      isWritable: false,
    },
    withdrawAccountsLendingMarketAuthority: {
      value: input.withdrawAccountsLendingMarketAuthority ?? null,
      isWritable: false,
    },
    withdrawAccountsWithdrawReserve: {
      value: input.withdrawAccountsWithdrawReserve ?? null,
      isWritable: true,
    },
    withdrawAccountsReserveSourceCollateral: {
      value: input.withdrawAccountsReserveSourceCollateral ?? null,
      isWritable: true,
    },
    withdrawAccountsUserDestinationCollateral: {
      value: input.withdrawAccountsUserDestinationCollateral ?? null,
      isWritable: true,
    },
    withdrawAccountsTokenProgram: {
      value: input.withdrawAccountsTokenProgram ?? null,
      isWritable: false,
    },
    withdrawAccountsInstructionSysvarAccount: {
      value: input.withdrawAccountsInstructionSysvarAccount ?? null,
      isWritable: false,
    },
    farmsAccountsObligationFarmUserState: {
      value: input.farmsAccountsObligationFarmUserState ?? null,
      isWritable: true,
    },
    farmsAccountsReserveFarmState: {
      value: input.farmsAccountsReserveFarmState ?? null,
      isWritable: true,
    },
    farmsProgram: { value: input.farmsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.withdrawAccountsInstructionSysvarAccount.value) {
    accounts.withdrawAccountsInstructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.withdrawAccountsOwner),
      getAccountMeta(accounts.withdrawAccountsObligation),
      getAccountMeta(accounts.withdrawAccountsLendingMarket),
      getAccountMeta(accounts.withdrawAccountsLendingMarketAuthority),
      getAccountMeta(accounts.withdrawAccountsWithdrawReserve),
      getAccountMeta(accounts.withdrawAccountsReserveSourceCollateral),
      getAccountMeta(accounts.withdrawAccountsUserDestinationCollateral),
      getAccountMeta(accounts.withdrawAccountsTokenProgram),
      getAccountMeta(accounts.withdrawAccountsInstructionSysvarAccount),
      getAccountMeta(accounts.farmsAccountsObligationFarmUserState),
      getAccountMeta(accounts.farmsAccountsReserveFarmState),
      getAccountMeta(accounts.farmsProgram),
    ],
    programAddress,
    data: getWithdrawObligationCollateralV2InstructionDataEncoder().encode(
      args as WithdrawObligationCollateralV2InstructionDataArgs,
    ),
  } as WithdrawObligationCollateralV2Instruction<
    TProgramAddress,
    TAccountWithdrawAccountsOwner,
    TAccountWithdrawAccountsObligation,
    TAccountWithdrawAccountsLendingMarket,
    TAccountWithdrawAccountsLendingMarketAuthority,
    TAccountWithdrawAccountsWithdrawReserve,
    TAccountWithdrawAccountsReserveSourceCollateral,
    TAccountWithdrawAccountsUserDestinationCollateral,
    TAccountWithdrawAccountsTokenProgram,
    TAccountWithdrawAccountsInstructionSysvarAccount,
    TAccountFarmsAccountsObligationFarmUserState,
    TAccountFarmsAccountsReserveFarmState,
    TAccountFarmsProgram
  >;

  return instruction;
}

export type ParsedWithdrawObligationCollateralV2Instruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    withdrawAccountsOwner: TAccountMetas[0];
    withdrawAccountsObligation: TAccountMetas[1];
    withdrawAccountsLendingMarket: TAccountMetas[2];
    withdrawAccountsLendingMarketAuthority: TAccountMetas[3];
    withdrawAccountsWithdrawReserve: TAccountMetas[4];
    withdrawAccountsReserveSourceCollateral: TAccountMetas[5];
    withdrawAccountsUserDestinationCollateral: TAccountMetas[6];
    withdrawAccountsTokenProgram: TAccountMetas[7];
    withdrawAccountsInstructionSysvarAccount: TAccountMetas[8];
    farmsAccountsObligationFarmUserState?: TAccountMetas[9] | undefined;
    farmsAccountsReserveFarmState?: TAccountMetas[10] | undefined;
    farmsProgram: TAccountMetas[11];
  };
  data: WithdrawObligationCollateralV2InstructionData;
};

export function parseWithdrawObligationCollateralV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawObligationCollateralV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      withdrawAccountsOwner: getNextAccount(),
      withdrawAccountsObligation: getNextAccount(),
      withdrawAccountsLendingMarket: getNextAccount(),
      withdrawAccountsLendingMarketAuthority: getNextAccount(),
      withdrawAccountsWithdrawReserve: getNextAccount(),
      withdrawAccountsReserveSourceCollateral: getNextAccount(),
      withdrawAccountsUserDestinationCollateral: getNextAccount(),
      withdrawAccountsTokenProgram: getNextAccount(),
      withdrawAccountsInstructionSysvarAccount: getNextAccount(),
      farmsAccountsObligationFarmUserState: getNextOptionalAccount(),
      farmsAccountsReserveFarmState: getNextOptionalAccount(),
      farmsProgram: getNextAccount(),
    },
    data: getWithdrawObligationCollateralV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
