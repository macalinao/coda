/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";

export const REFRESH_RESERVES_BATCH_DISCRIMINATOR = new Uint8Array([
  144, 110, 26, 103, 162, 204, 252, 147,
]);

export function getRefreshReservesBatchDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFRESH_RESERVES_BATCH_DISCRIMINATOR,
  );
}

export type RefreshReservesBatchInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type RefreshReservesBatchInstructionData = {
  discriminator: ReadonlyUint8Array;
  skipPriceUpdates: boolean;
};

export type RefreshReservesBatchInstructionDataArgs = {
  skipPriceUpdates: boolean;
};

export function getRefreshReservesBatchInstructionDataEncoder(): FixedSizeEncoder<RefreshReservesBatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["skipPriceUpdates", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REFRESH_RESERVES_BATCH_DISCRIMINATOR,
    }),
  );
}

export function getRefreshReservesBatchInstructionDataDecoder(): FixedSizeDecoder<RefreshReservesBatchInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["skipPriceUpdates", getBooleanDecoder()],
  ]);
}

export function getRefreshReservesBatchInstructionDataCodec(): FixedSizeCodec<
  RefreshReservesBatchInstructionDataArgs,
  RefreshReservesBatchInstructionData
> {
  return combineCodec(
    getRefreshReservesBatchInstructionDataEncoder(),
    getRefreshReservesBatchInstructionDataDecoder(),
  );
}

export type RefreshReservesBatchInput = {
  skipPriceUpdates: RefreshReservesBatchInstructionDataArgs["skipPriceUpdates"];
};

export function getRefreshReservesBatchInstruction<
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RefreshReservesBatchInput,
  config?: { programAddress?: TProgramAddress },
): RefreshReservesBatchInstruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getRefreshReservesBatchInstructionDataEncoder().encode(
      args as RefreshReservesBatchInstructionDataArgs,
    ),
  } as RefreshReservesBatchInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedRefreshReservesBatchInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: RefreshReservesBatchInstructionData;
};

export function parseRefreshReservesBatchInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>,
): ParsedRefreshReservesBatchInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getRefreshReservesBatchInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
