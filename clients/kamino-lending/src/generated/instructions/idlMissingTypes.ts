/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  AssetTier,
  AssetTierArgs,
  FeeCalculation,
  FeeCalculationArgs,
  ReserveFarmKind,
  ReserveFarmKindArgs,
  ReserveStatus,
  ReserveStatusArgs,
  UpdateConfigMode,
  UpdateConfigModeArgs,
  UpdateLendingMarketConfigValue,
  UpdateLendingMarketConfigValueArgs,
  UpdateLendingMarketMode,
  UpdateLendingMarketModeArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getAssetTierDecoder,
  getAssetTierEncoder,
  getFeeCalculationDecoder,
  getFeeCalculationEncoder,
  getReserveFarmKindDecoder,
  getReserveFarmKindEncoder,
  getReserveStatusDecoder,
  getReserveStatusEncoder,
  getUpdateConfigModeDecoder,
  getUpdateConfigModeEncoder,
  getUpdateLendingMarketConfigValueDecoder,
  getUpdateLendingMarketConfigValueEncoder,
  getUpdateLendingMarketModeDecoder,
  getUpdateLendingMarketModeEncoder,
} from "../types/index.js";

export const IDL_MISSING_TYPES_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([130, 80, 38, 153, 80, 212, 182, 253]);

export function getIdlMissingTypesDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    IDL_MISSING_TYPES_DISCRIMINATOR,
  );
}

export type IdlMissingTypesInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      ...TRemainingAccounts,
    ]
  >;

export interface IdlMissingTypesInstructionData {
  discriminator: ReadonlyUint8Array;
  reserveFarmKind: ReserveFarmKind;
  assetTier: AssetTier;
  feeCalculation: FeeCalculation;
  reserveStatus: ReserveStatus;
  updateConfigMode: UpdateConfigMode;
  updateLendingMarketConfigValue: UpdateLendingMarketConfigValue;
  updateLendingMarketConfigMode: UpdateLendingMarketMode;
}

export interface IdlMissingTypesInstructionDataArgs {
  reserveFarmKind: ReserveFarmKindArgs;
  assetTier: AssetTierArgs;
  feeCalculation: FeeCalculationArgs;
  reserveStatus: ReserveStatusArgs;
  updateConfigMode: UpdateConfigModeArgs;
  updateLendingMarketConfigValue: UpdateLendingMarketConfigValueArgs;
  updateLendingMarketConfigMode: UpdateLendingMarketModeArgs;
}

export function getIdlMissingTypesInstructionDataEncoder(): Encoder<IdlMissingTypesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["reserveFarmKind", getReserveFarmKindEncoder()],
      ["assetTier", getAssetTierEncoder()],
      ["feeCalculation", getFeeCalculationEncoder()],
      ["reserveStatus", getReserveStatusEncoder()],
      ["updateConfigMode", getUpdateConfigModeEncoder()],
      [
        "updateLendingMarketConfigValue",
        getUpdateLendingMarketConfigValueEncoder(),
      ],
      ["updateLendingMarketConfigMode", getUpdateLendingMarketModeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: IDL_MISSING_TYPES_DISCRIMINATOR }),
  );
}

export function getIdlMissingTypesInstructionDataDecoder(): Decoder<IdlMissingTypesInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["reserveFarmKind", getReserveFarmKindDecoder()],
    ["assetTier", getAssetTierDecoder()],
    ["feeCalculation", getFeeCalculationDecoder()],
    ["reserveStatus", getReserveStatusDecoder()],
    ["updateConfigMode", getUpdateConfigModeDecoder()],
    [
      "updateLendingMarketConfigValue",
      getUpdateLendingMarketConfigValueDecoder(),
    ],
    ["updateLendingMarketConfigMode", getUpdateLendingMarketModeDecoder()],
  ]);
}

export function getIdlMissingTypesInstructionDataCodec(): Codec<
  IdlMissingTypesInstructionDataArgs,
  IdlMissingTypesInstructionData
> {
  return combineCodec(
    getIdlMissingTypesInstructionDataEncoder(),
    getIdlMissingTypesInstructionDataDecoder(),
  );
}

export interface IdlMissingTypesInput<
  TAccountSigner extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
> {
  signer: TransactionSigner<TAccountSigner>;
  globalConfig: Address<TAccountGlobalConfig>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  reserveFarmKind: IdlMissingTypesInstructionDataArgs["reserveFarmKind"];
  assetTier: IdlMissingTypesInstructionDataArgs["assetTier"];
  feeCalculation: IdlMissingTypesInstructionDataArgs["feeCalculation"];
  reserveStatus: IdlMissingTypesInstructionDataArgs["reserveStatus"];
  updateConfigMode: IdlMissingTypesInstructionDataArgs["updateConfigMode"];
  updateLendingMarketConfigValue: IdlMissingTypesInstructionDataArgs["updateLendingMarketConfigValue"];
  updateLendingMarketConfigMode: IdlMissingTypesInstructionDataArgs["updateLendingMarketConfigMode"];
}

export function getIdlMissingTypesInstruction<
  TAccountSigner extends string,
  TAccountGlobalConfig extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: IdlMissingTypesInput<
    TAccountSigner,
    TAccountGlobalConfig,
    TAccountLendingMarket,
    TAccountReserve
  >,
  config?: { programAddress?: TProgramAddress },
): IdlMissingTypesInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountGlobalConfig,
  TAccountLendingMarket,
  TAccountReserve
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
    ],
    data: getIdlMissingTypesInstructionDataEncoder().encode(
      args as IdlMissingTypesInstructionDataArgs,
    ),
    programAddress,
  } as IdlMissingTypesInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountGlobalConfig,
    TAccountLendingMarket,
    TAccountReserve
  >);
}

export interface ParsedIdlMissingTypesInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    reserve: TAccountMetas[3];
  };
  data: IdlMissingTypesInstructionData;
}

export function parseIdlMissingTypesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedIdlMissingTypesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      globalConfig: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
    },
    data: getIdlMissingTypesInstructionDataDecoder().decode(instruction.data),
  };
}
