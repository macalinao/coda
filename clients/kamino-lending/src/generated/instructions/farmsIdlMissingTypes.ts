/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  FarmConfigOption,
  FarmConfigOptionArgs,
  GlobalConfigOption,
  GlobalConfigOptionArgs,
  LockingMode,
  LockingModeArgs,
  RewardType,
  RewardTypeArgs,
  TimeUnit,
  TimeUnitArgs,
} from "../types/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getFarmConfigOptionDecoder,
  getFarmConfigOptionEncoder,
  getGlobalConfigOptionDecoder,
  getGlobalConfigOptionEncoder,
  getLockingModeDecoder,
  getLockingModeEncoder,
  getRewardTypeDecoder,
  getRewardTypeEncoder,
  getTimeUnitDecoder,
  getTimeUnitEncoder,
} from "../types/index.js";

export const FARMS_IDL_MISSING_TYPES_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([130, 80, 38, 153, 80, 212, 182, 253]);

export function getFarmsIdlMissingTypesDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FARMS_IDL_MISSING_TYPES_DISCRIMINATOR,
  );
}

export type FarmsIdlMissingTypesInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountGlobalAdmin extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobalAdmin extends string
        ? ReadonlySignerAccount<TAccountGlobalAdmin> &
            AccountSignerMeta<TAccountGlobalAdmin>
        : TAccountGlobalAdmin,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      ...TRemainingAccounts,
    ]
  >;

export interface FarmsIdlMissingTypesInstructionData {
  discriminator: ReadonlyUint8Array;
  globalConfigOptionKind: GlobalConfigOption;
  farmConfigOptionKind: FarmConfigOption;
  timeUnit: TimeUnit;
  lockingMode: LockingMode;
  rewardType: RewardType;
}

export interface FarmsIdlMissingTypesInstructionDataArgs {
  globalConfigOptionKind: GlobalConfigOptionArgs;
  farmConfigOptionKind: FarmConfigOptionArgs;
  timeUnit: TimeUnitArgs;
  lockingMode: LockingModeArgs;
  rewardType: RewardTypeArgs;
}

export function getFarmsIdlMissingTypesInstructionDataEncoder(): FixedSizeEncoder<FarmsIdlMissingTypesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["globalConfigOptionKind", getGlobalConfigOptionEncoder()],
      ["farmConfigOptionKind", getFarmConfigOptionEncoder()],
      ["timeUnit", getTimeUnitEncoder()],
      ["lockingMode", getLockingModeEncoder()],
      ["rewardType", getRewardTypeEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: FARMS_IDL_MISSING_TYPES_DISCRIMINATOR,
    }),
  );
}

export function getFarmsIdlMissingTypesInstructionDataDecoder(): FixedSizeDecoder<FarmsIdlMissingTypesInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["globalConfigOptionKind", getGlobalConfigOptionDecoder()],
    ["farmConfigOptionKind", getFarmConfigOptionDecoder()],
    ["timeUnit", getTimeUnitDecoder()],
    ["lockingMode", getLockingModeDecoder()],
    ["rewardType", getRewardTypeDecoder()],
  ]);
}

export function getFarmsIdlMissingTypesInstructionDataCodec(): FixedSizeCodec<
  FarmsIdlMissingTypesInstructionDataArgs,
  FarmsIdlMissingTypesInstructionData
> {
  return combineCodec(
    getFarmsIdlMissingTypesInstructionDataEncoder(),
    getFarmsIdlMissingTypesInstructionDataDecoder(),
  );
}

export interface FarmsIdlMissingTypesInput<
  TAccountGlobalAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
> {
  globalAdmin: TransactionSigner<TAccountGlobalAdmin>;
  globalConfig: Address<TAccountGlobalConfig>;
  globalConfigOptionKind: FarmsIdlMissingTypesInstructionDataArgs["globalConfigOptionKind"];
  farmConfigOptionKind: FarmsIdlMissingTypesInstructionDataArgs["farmConfigOptionKind"];
  timeUnit: FarmsIdlMissingTypesInstructionDataArgs["timeUnit"];
  lockingMode: FarmsIdlMissingTypesInstructionDataArgs["lockingMode"];
  rewardType: FarmsIdlMissingTypesInstructionDataArgs["rewardType"];
}

export function getFarmsIdlMissingTypesInstruction<
  TAccountGlobalAdmin extends string,
  TAccountGlobalConfig extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: FarmsIdlMissingTypesInput<TAccountGlobalAdmin, TAccountGlobalConfig>,
  config?: { programAddress?: TProgramAddress },
): FarmsIdlMissingTypesInstruction<
  TProgramAddress,
  TAccountGlobalAdmin,
  TAccountGlobalConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalAdmin: { value: input.globalAdmin ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalAdmin),
      getAccountMeta(accounts.globalConfig),
    ],
    programAddress,
    data: getFarmsIdlMissingTypesInstructionDataEncoder().encode(
      args as FarmsIdlMissingTypesInstructionDataArgs,
    ),
  } as FarmsIdlMissingTypesInstruction<
    TProgramAddress,
    TAccountGlobalAdmin,
    TAccountGlobalConfig
  >;

  return instruction;
}

export interface ParsedFarmsIdlMissingTypesInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    globalAdmin: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
  };
  data: FarmsIdlMissingTypesInstructionData;
}

export function parseFarmsIdlMissingTypesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedFarmsIdlMissingTypesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      globalAdmin: getNextAccount(),
      globalConfig: getNextAccount(),
    },
    data: getFarmsIdlMissingTypesInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
