/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const INIT_REFERRER_TOKEN_STATE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([116, 45, 66, 148, 58, 13, 218, 115]);

export function getInitReferrerTokenStateDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_REFERRER_TOKEN_STATE_DISCRIMINATOR,
  );
}

export type InitReferrerTokenStateInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReferrer extends string | AccountMeta = string,
  TAccountReferrerTokenState extends string | AccountMeta = string,
  TAccountRent extends string | AccountMeta = string,
  TAccountSystemProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? ReadonlyAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReferrer extends string
        ? ReadonlyAccount<TAccountReferrer>
        : TAccountReferrer,
      TAccountReferrerTokenState extends string
        ? WritableAccount<TAccountReferrerTokenState>
        : TAccountReferrerTokenState,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitReferrerTokenStateInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitReferrerTokenStateInstructionDataArgs {}

export function getInitReferrerTokenStateInstructionDataEncoder(): FixedSizeEncoder<InitReferrerTokenStateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INIT_REFERRER_TOKEN_STATE_DISCRIMINATOR,
    }),
  );
}

export function getInitReferrerTokenStateInstructionDataDecoder(): FixedSizeDecoder<InitReferrerTokenStateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitReferrerTokenStateInstructionDataCodec(): FixedSizeCodec<
  InitReferrerTokenStateInstructionDataArgs,
  InitReferrerTokenStateInstructionData
> {
  return combineCodec(
    getInitReferrerTokenStateInstructionDataEncoder(),
    getInitReferrerTokenStateInstructionDataDecoder(),
  );
}

export interface InitReferrerTokenStateInput<
  TAccountPayer extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountReferrer extends string = string,
  TAccountReferrerTokenState extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  referrer: Address<TAccountReferrer>;
  referrerTokenState: Address<TAccountReferrerTokenState>;
  rent: Address<TAccountRent>;
  systemProgram: Address<TAccountSystemProgram>;
}

export function getInitReferrerTokenStateInstruction<
  TAccountPayer extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountReferrer extends string,
  TAccountReferrerTokenState extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: InitReferrerTokenStateInput<
    TAccountPayer,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReferrer,
    TAccountReferrerTokenState,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitReferrerTokenStateInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountReferrer,
  TAccountReferrerTokenState,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: false },
    referrer: { value: input.referrer ?? null, isWritable: false },
    referrerTokenState: {
      value: input.referrerTokenState ?? null,
      isWritable: true,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.referrer),
      getAccountMeta(accounts.referrerTokenState),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitReferrerTokenStateInstructionDataEncoder().encode({}),
  } as InitReferrerTokenStateInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReferrer,
    TAccountReferrerTokenState,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedInitReferrerTokenStateInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    lendingMarket: TAccountMetas[1];
    reserve: TAccountMetas[2];
    referrer: TAccountMetas[3];
    referrerTokenState: TAccountMetas[4];
    rent: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitReferrerTokenStateInstructionData;
}

export function parseInitReferrerTokenStateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitReferrerTokenStateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      referrer: getNextAccount(),
      referrerTokenState: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitReferrerTokenStateInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
