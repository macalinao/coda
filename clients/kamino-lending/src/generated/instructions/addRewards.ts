/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import {
  findFarmVaultsAuthorityPda,
  findRewardVaultPda,
} from "../pdas/index.js";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const ADD_REWARDS_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  88, 186, 25, 227, 38, 137, 81, 23,
]);

export function getAddRewardsDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADD_REWARDS_DISCRIMINATOR);
}

export type AddRewardsInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountRewardMint extends string | AccountMeta = string,
  TAccountRewardVault extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountPayerRewardTokenAta extends string | AccountMeta = string,
  TAccountScopePrices extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountPayerRewardTokenAta extends string
        ? WritableAccount<TAccountPayerRewardTokenAta>
        : TAccountPayerRewardTokenAta,
      TAccountScopePrices extends string
        ? ReadonlyAccount<TAccountScopePrices>
        : TAccountScopePrices,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface AddRewardsInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  rewardIndex: bigint;
}

export interface AddRewardsInstructionDataArgs {
  amount: number | bigint;
  rewardIndex: number | bigint;
}

export function getAddRewardsInstructionDataEncoder(): FixedSizeEncoder<AddRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
      ["rewardIndex", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_REWARDS_DISCRIMINATOR }),
  );
}

export function getAddRewardsInstructionDataDecoder(): FixedSizeDecoder<AddRewardsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
    ["rewardIndex", getU64Decoder()],
  ]);
}

export function getAddRewardsInstructionDataCodec(): FixedSizeCodec<
  AddRewardsInstructionDataArgs,
  AddRewardsInstructionData
> {
  return combineCodec(
    getAddRewardsInstructionDataEncoder(),
    getAddRewardsInstructionDataDecoder(),
  );
}

export interface AddRewardsAsyncInput<
  TAccountPayer extends string = string,
  TAccountFarmState extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountPayerRewardTokenAta extends string = string,
  TAccountScopePrices extends string = string,
  TAccountTokenProgram extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  farmState: Address<TAccountFarmState>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault?: Address<TAccountRewardVault>;
  farmVaultsAuthority?: Address<TAccountFarmVaultsAuthority>;
  payerRewardTokenAta: Address<TAccountPayerRewardTokenAta>;
  scopePrices?: Address<TAccountScopePrices>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: AddRewardsInstructionDataArgs["amount"];
  rewardIndex: AddRewardsInstructionDataArgs["rewardIndex"];
}

export async function getAddRewardsInstructionAsync<
  TAccountPayer extends string,
  TAccountFarmState extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountPayerRewardTokenAta extends string,
  TAccountScopePrices extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: AddRewardsAsyncInput<
    TAccountPayer,
    TAccountFarmState,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountFarmVaultsAuthority,
    TAccountPayerRewardTokenAta,
    TAccountScopePrices,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  AddRewardsInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountFarmState,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountFarmVaultsAuthority,
    TAccountPayerRewardTokenAta,
    TAccountScopePrices,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    payerRewardTokenAta: {
      value: input.payerRewardTokenAta ?? null,
      isWritable: true,
    },
    scopePrices: { value: input.scopePrices ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rewardVault.value) {
    accounts.rewardVault.value = await findRewardVaultPda({
      farmState: expectAddress(accounts.farmState.value),
      rewardMint: expectAddress(accounts.rewardMint.value),
    });
  }
  if (!accounts.farmVaultsAuthority.value) {
    accounts.farmVaultsAuthority.value = await findFarmVaultsAuthorityPda({
      farmState: expectAddress(accounts.farmState.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.payerRewardTokenAta),
      getAccountMeta(accounts.scopePrices),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getAddRewardsInstructionDataEncoder().encode(
      args as AddRewardsInstructionDataArgs,
    ),
    programAddress,
  } as AddRewardsInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountFarmState,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountFarmVaultsAuthority,
    TAccountPayerRewardTokenAta,
    TAccountScopePrices,
    TAccountTokenProgram
  >);
}

export interface AddRewardsInput<
  TAccountPayer extends string = string,
  TAccountFarmState extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountPayerRewardTokenAta extends string = string,
  TAccountScopePrices extends string = string,
  TAccountTokenProgram extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  farmState: Address<TAccountFarmState>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault: Address<TAccountRewardVault>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  payerRewardTokenAta: Address<TAccountPayerRewardTokenAta>;
  scopePrices?: Address<TAccountScopePrices>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: AddRewardsInstructionDataArgs["amount"];
  rewardIndex: AddRewardsInstructionDataArgs["rewardIndex"];
}

export function getAddRewardsInstruction<
  TAccountPayer extends string,
  TAccountFarmState extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountPayerRewardTokenAta extends string,
  TAccountScopePrices extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: AddRewardsInput<
    TAccountPayer,
    TAccountFarmState,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountFarmVaultsAuthority,
    TAccountPayerRewardTokenAta,
    TAccountScopePrices,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): AddRewardsInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountFarmState,
  TAccountRewardMint,
  TAccountRewardVault,
  TAccountFarmVaultsAuthority,
  TAccountPayerRewardTokenAta,
  TAccountScopePrices,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    payerRewardTokenAta: {
      value: input.payerRewardTokenAta ?? null,
      isWritable: true,
    },
    scopePrices: { value: input.scopePrices ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.payerRewardTokenAta),
      getAccountMeta(accounts.scopePrices),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getAddRewardsInstructionDataEncoder().encode(
      args as AddRewardsInstructionDataArgs,
    ),
    programAddress,
  } as AddRewardsInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountFarmState,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountFarmVaultsAuthority,
    TAccountPayerRewardTokenAta,
    TAccountScopePrices,
    TAccountTokenProgram
  >);
}

export interface ParsedAddRewardsInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    farmState: TAccountMetas[1];
    rewardMint: TAccountMetas[2];
    rewardVault: TAccountMetas[3];
    farmVaultsAuthority: TAccountMetas[4];
    payerRewardTokenAta: TAccountMetas[5];
    scopePrices?: TAccountMetas[6] | undefined;
    tokenProgram: TAccountMetas[7];
  };
  data: AddRewardsInstructionData;
}

export function parseAddRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedAddRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === FARMS_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      farmState: getNextAccount(),
      rewardMint: getNextAccount(),
      rewardVault: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      payerRewardTokenAta: getNextAccount(),
      scopePrices: getNextOptionalAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getAddRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
