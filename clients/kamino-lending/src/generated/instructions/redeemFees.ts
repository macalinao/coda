/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REDEEM_FEES_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  215, 39, 180, 41, 173, 46, 248, 220,
]);

export function getRedeemFeesDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REDEEM_FEES_DISCRIMINATOR);
}

export type RedeemFeesInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveLiquidityFeeReceiver extends
    | string
    | AccountMeta = string,
  TAccountReserveSupplyLiquidity extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveLiquidityFeeReceiver extends string
        ? WritableAccount<TAccountReserveLiquidityFeeReceiver>
        : TAccountReserveLiquidityFeeReceiver,
      TAccountReserveSupplyLiquidity extends string
        ? WritableAccount<TAccountReserveSupplyLiquidity>
        : TAccountReserveSupplyLiquidity,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RedeemFeesInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RedeemFeesInstructionDataArgs {}

export function getRedeemFeesInstructionDataEncoder(): FixedSizeEncoder<RedeemFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REDEEM_FEES_DISCRIMINATOR }),
  );
}

export function getRedeemFeesInstructionDataDecoder(): FixedSizeDecoder<RedeemFeesInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRedeemFeesInstructionDataCodec(): FixedSizeCodec<
  RedeemFeesInstructionDataArgs,
  RedeemFeesInstructionData
> {
  return combineCodec(
    getRedeemFeesInstructionDataEncoder(),
    getRedeemFeesInstructionDataDecoder(),
  );
}

export interface RedeemFeesInput<
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveLiquidityFeeReceiver extends string = string,
  TAccountReserveSupplyLiquidity extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> {
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquidityFeeReceiver: Address<TAccountReserveLiquidityFeeReceiver>;
  reserveSupplyLiquidity: Address<TAccountReserveSupplyLiquidity>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  tokenProgram: Address<TAccountTokenProgram>;
}

export function getRedeemFeesInstruction<
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveLiquidityFeeReceiver extends string,
  TAccountReserveSupplyLiquidity extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: RedeemFeesInput<
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquidityFeeReceiver,
    TAccountReserveSupplyLiquidity,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RedeemFeesInstruction<
  TProgramAddress,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveLiquidityFeeReceiver,
  TAccountReserveSupplyLiquidity,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveLiquidityFeeReceiver: {
      value: input.reserveLiquidityFeeReceiver ?? null,
      isWritable: true,
    },
    reserveSupplyLiquidity: {
      value: input.reserveSupplyLiquidity ?? null,
      isWritable: true,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquidityFeeReceiver),
      getAccountMeta(accounts.reserveSupplyLiquidity),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getRedeemFeesInstructionDataEncoder().encode({}),
    programAddress,
  } as RedeemFeesInstruction<
    TProgramAddress,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquidityFeeReceiver,
    TAccountReserveSupplyLiquidity,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountTokenProgram
  >);
}

export interface ParsedRedeemFeesInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    reserve: TAccountMetas[0];
    reserveLiquidityMint: TAccountMetas[1];
    reserveLiquidityFeeReceiver: TAccountMetas[2];
    reserveSupplyLiquidity: TAccountMetas[3];
    lendingMarket: TAccountMetas[4];
    lendingMarketAuthority: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: RedeemFeesInstructionData;
}

export function parseRedeemFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRedeemFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveLiquidityFeeReceiver: getNextAccount(),
      reserveSupplyLiquidity: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRedeemFeesInstructionDataDecoder().decode(instruction.data),
  };
}
