/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const BORROW_OBLIGATION_LIQUIDITY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([121, 127, 18, 204, 73, 245, 225, 65]);

export function getBorrowObligationLiquidityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BORROW_OBLIGATION_LIQUIDITY_DISCRIMINATOR,
  );
}

export type BorrowObligationLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountBorrowReserve extends string | AccountMeta = string,
  TAccountBorrowReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveSourceLiquidity extends string | AccountMeta = string,
  TAccountBorrowReserveLiquidityFeeReceiver extends
    | string
    | AccountMeta = string,
  TAccountUserDestinationLiquidity extends string | AccountMeta = string,
  TAccountReferrerTokenState extends string | AccountMeta = string,
  TAccountTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountBorrowReserve extends string
        ? WritableAccount<TAccountBorrowReserve>
        : TAccountBorrowReserve,
      TAccountBorrowReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountBorrowReserveLiquidityMint>
        : TAccountBorrowReserveLiquidityMint,
      TAccountReserveSourceLiquidity extends string
        ? WritableAccount<TAccountReserveSourceLiquidity>
        : TAccountReserveSourceLiquidity,
      TAccountBorrowReserveLiquidityFeeReceiver extends string
        ? WritableAccount<TAccountBorrowReserveLiquidityFeeReceiver>
        : TAccountBorrowReserveLiquidityFeeReceiver,
      TAccountUserDestinationLiquidity extends string
        ? WritableAccount<TAccountUserDestinationLiquidity>
        : TAccountUserDestinationLiquidity,
      TAccountReferrerTokenState extends string
        ? WritableAccount<TAccountReferrerTokenState>
        : TAccountReferrerTokenState,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface BorrowObligationLiquidityInstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface BorrowObligationLiquidityInstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getBorrowObligationLiquidityInstructionDataEncoder(): FixedSizeEncoder<BorrowObligationLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: BORROW_OBLIGATION_LIQUIDITY_DISCRIMINATOR,
    }),
  );
}

export function getBorrowObligationLiquidityInstructionDataDecoder(): FixedSizeDecoder<BorrowObligationLiquidityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getBorrowObligationLiquidityInstructionDataCodec(): FixedSizeCodec<
  BorrowObligationLiquidityInstructionDataArgs,
  BorrowObligationLiquidityInstructionData
> {
  return combineCodec(
    getBorrowObligationLiquidityInstructionDataEncoder(),
    getBorrowObligationLiquidityInstructionDataDecoder(),
  );
}

export interface BorrowObligationLiquidityInput<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountBorrowReserve extends string = string,
  TAccountBorrowReserveLiquidityMint extends string = string,
  TAccountReserveSourceLiquidity extends string = string,
  TAccountBorrowReserveLiquidityFeeReceiver extends string = string,
  TAccountUserDestinationLiquidity extends string = string,
  TAccountReferrerTokenState extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  borrowReserve: Address<TAccountBorrowReserve>;
  borrowReserveLiquidityMint: Address<TAccountBorrowReserveLiquidityMint>;
  reserveSourceLiquidity: Address<TAccountReserveSourceLiquidity>;
  borrowReserveLiquidityFeeReceiver: Address<TAccountBorrowReserveLiquidityFeeReceiver>;
  userDestinationLiquidity: Address<TAccountUserDestinationLiquidity>;
  referrerTokenState?: Address<TAccountReferrerTokenState>;
  tokenProgram: Address<TAccountTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  liquidityAmount: BorrowObligationLiquidityInstructionDataArgs["liquidityAmount"];
}

export function getBorrowObligationLiquidityInstruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountBorrowReserve extends string,
  TAccountBorrowReserveLiquidityMint extends string,
  TAccountReserveSourceLiquidity extends string,
  TAccountBorrowReserveLiquidityFeeReceiver extends string,
  TAccountUserDestinationLiquidity extends string,
  TAccountReferrerTokenState extends string,
  TAccountTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: BorrowObligationLiquidityInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountBorrowReserve,
    TAccountBorrowReserveLiquidityMint,
    TAccountReserveSourceLiquidity,
    TAccountBorrowReserveLiquidityFeeReceiver,
    TAccountUserDestinationLiquidity,
    TAccountReferrerTokenState,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): BorrowObligationLiquidityInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountBorrowReserve,
  TAccountBorrowReserveLiquidityMint,
  TAccountReserveSourceLiquidity,
  TAccountBorrowReserveLiquidityFeeReceiver,
  TAccountUserDestinationLiquidity,
  TAccountReferrerTokenState,
  TAccountTokenProgram,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    borrowReserve: { value: input.borrowReserve ?? null, isWritable: true },
    borrowReserveLiquidityMint: {
      value: input.borrowReserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveSourceLiquidity: {
      value: input.reserveSourceLiquidity ?? null,
      isWritable: true,
    },
    borrowReserveLiquidityFeeReceiver: {
      value: input.borrowReserveLiquidityFeeReceiver ?? null,
      isWritable: true,
    },
    userDestinationLiquidity: {
      value: input.userDestinationLiquidity ?? null,
      isWritable: true,
    },
    referrerTokenState: {
      value: input.referrerTokenState ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.borrowReserve),
      getAccountMeta(accounts.borrowReserveLiquidityMint),
      getAccountMeta(accounts.reserveSourceLiquidity),
      getAccountMeta(accounts.borrowReserveLiquidityFeeReceiver),
      getAccountMeta(accounts.userDestinationLiquidity),
      getAccountMeta(accounts.referrerTokenState),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    programAddress,
    data: getBorrowObligationLiquidityInstructionDataEncoder().encode(
      args as BorrowObligationLiquidityInstructionDataArgs,
    ),
  } as BorrowObligationLiquidityInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountBorrowReserve,
    TAccountBorrowReserveLiquidityMint,
    TAccountReserveSourceLiquidity,
    TAccountBorrowReserveLiquidityFeeReceiver,
    TAccountUserDestinationLiquidity,
    TAccountReferrerTokenState,
    TAccountTokenProgram,
    TAccountInstructionSysvarAccount
  >;

  return instruction;
}

export interface ParsedBorrowObligationLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    borrowReserve: TAccountMetas[4];
    borrowReserveLiquidityMint: TAccountMetas[5];
    reserveSourceLiquidity: TAccountMetas[6];
    borrowReserveLiquidityFeeReceiver: TAccountMetas[7];
    userDestinationLiquidity: TAccountMetas[8];
    referrerTokenState?: TAccountMetas[9] | undefined;
    tokenProgram: TAccountMetas[10];
    instructionSysvarAccount: TAccountMetas[11];
  };
  data: BorrowObligationLiquidityInstructionData;
}

export function parseBorrowObligationLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedBorrowObligationLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      borrowReserve: getNextAccount(),
      borrowReserveLiquidityMint: getNextAccount(),
      reserveSourceLiquidity: getNextAccount(),
      borrowReserveLiquidityFeeReceiver: getNextAccount(),
      userDestinationLiquidity: getNextAccount(),
      referrerTokenState: getNextOptionalAccount(),
      tokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getBorrowObligationLiquidityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
