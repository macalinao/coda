/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_SLASHED_AMOUNT_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([202, 217, 67, 74, 172, 22, 140, 216]);

export function getWithdrawSlashedAmountDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_SLASHED_AMOUNT_DISCRIMINATOR,
  );
}

export type WithdrawSlashedAmountInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountCrank extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountSlashedAmountSpillAddress extends string | AccountMeta = string,
  TAccountFarmVault extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCrank extends string
        ? WritableSignerAccount<TAccountCrank> &
            AccountSignerMeta<TAccountCrank>
        : TAccountCrank,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountSlashedAmountSpillAddress extends string
        ? WritableAccount<TAccountSlashedAmountSpillAddress>
        : TAccountSlashedAmountSpillAddress,
      TAccountFarmVault extends string
        ? WritableAccount<TAccountFarmVault>
        : TAccountFarmVault,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawSlashedAmountInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface WithdrawSlashedAmountInstructionDataArgs {}

export function getWithdrawSlashedAmountInstructionDataEncoder(): FixedSizeEncoder<WithdrawSlashedAmountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_SLASHED_AMOUNT_DISCRIMINATOR,
    }),
  );
}

export function getWithdrawSlashedAmountInstructionDataDecoder(): FixedSizeDecoder<WithdrawSlashedAmountInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawSlashedAmountInstructionDataCodec(): FixedSizeCodec<
  WithdrawSlashedAmountInstructionDataArgs,
  WithdrawSlashedAmountInstructionData
> {
  return combineCodec(
    getWithdrawSlashedAmountInstructionDataEncoder(),
    getWithdrawSlashedAmountInstructionDataDecoder(),
  );
}

export interface WithdrawSlashedAmountInput<
  TAccountCrank extends string = string,
  TAccountFarmState extends string = string,
  TAccountSlashedAmountSpillAddress extends string = string,
  TAccountFarmVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> {
  crank: TransactionSigner<TAccountCrank>;
  farmState: Address<TAccountFarmState>;
  slashedAmountSpillAddress: Address<TAccountSlashedAmountSpillAddress>;
  farmVault: Address<TAccountFarmVault>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
}

export function getWithdrawSlashedAmountInstruction<
  TAccountCrank extends string,
  TAccountFarmState extends string,
  TAccountSlashedAmountSpillAddress extends string,
  TAccountFarmVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: WithdrawSlashedAmountInput<
    TAccountCrank,
    TAccountFarmState,
    TAccountSlashedAmountSpillAddress,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawSlashedAmountInstruction<
  TProgramAddress,
  TAccountCrank,
  TAccountFarmState,
  TAccountSlashedAmountSpillAddress,
  TAccountFarmVault,
  TAccountFarmVaultsAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    crank: { value: input.crank ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    slashedAmountSpillAddress: {
      value: input.slashedAmountSpillAddress ?? null,
      isWritable: true,
    },
    farmVault: { value: input.farmVault ?? null, isWritable: true },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.crank),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.slashedAmountSpillAddress),
      getAccountMeta(accounts.farmVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getWithdrawSlashedAmountInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawSlashedAmountInstruction<
    TProgramAddress,
    TAccountCrank,
    TAccountFarmState,
    TAccountSlashedAmountSpillAddress,
    TAccountFarmVault,
    TAccountFarmVaultsAuthority,
    TAccountTokenProgram
  >);
}

export interface ParsedWithdrawSlashedAmountInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    crank: TAccountMetas[0];
    farmState: TAccountMetas[1];
    slashedAmountSpillAddress: TAccountMetas[2];
    farmVault: TAccountMetas[3];
    farmVaultsAuthority: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: WithdrawSlashedAmountInstructionData;
}

export function parseWithdrawSlashedAmountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawSlashedAmountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      crank: getNextAccount(),
      farmState: getNextAccount(),
      slashedAmountSpillAddress: getNextAccount(),
      farmVault: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawSlashedAmountInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
