/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import {
  findFarmVaultsAuthorityPda,
  findRewardTreasuryVaultPda,
  findRewardVaultPda,
  findTreasuryVaultsAuthorityPda,
} from "../pdas/index.js";
import { FARMS_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const INITIALIZE_REWARD_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([95, 135, 192, 196, 242, 129, 230, 68]);

export function getInitializeRewardDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_REWARD_DISCRIMINATOR,
  );
}

export type InitializeRewardInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountFarmAdmin extends string | AccountMeta = string,
  TAccountFarmState extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TAccountRewardMint extends string | AccountMeta = string,
  TAccountRewardVault extends string | AccountMeta = string,
  TAccountRewardTreasuryVault extends string | AccountMeta = string,
  TAccountFarmVaultsAuthority extends string | AccountMeta = string,
  TAccountTreasuryVaultsAuthority extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFarmAdmin extends string
        ? WritableSignerAccount<TAccountFarmAdmin> &
            AccountSignerMeta<TAccountFarmAdmin>
        : TAccountFarmAdmin,
      TAccountFarmState extends string
        ? WritableAccount<TAccountFarmState>
        : TAccountFarmState,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardTreasuryVault extends string
        ? WritableAccount<TAccountRewardTreasuryVault>
        : TAccountRewardTreasuryVault,
      TAccountFarmVaultsAuthority extends string
        ? ReadonlyAccount<TAccountFarmVaultsAuthority>
        : TAccountFarmVaultsAuthority,
      TAccountTreasuryVaultsAuthority extends string
        ? ReadonlyAccount<TAccountTreasuryVaultsAuthority>
        : TAccountTreasuryVaultsAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeRewardInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitializeRewardInstructionDataArgs {}

export function getInitializeRewardInstructionDataEncoder(): FixedSizeEncoder<InitializeRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_REWARD_DISCRIMINATOR }),
  );
}

export function getInitializeRewardInstructionDataDecoder(): FixedSizeDecoder<InitializeRewardInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeRewardInstructionDataCodec(): FixedSizeCodec<
  InitializeRewardInstructionDataArgs,
  InitializeRewardInstructionData
> {
  return combineCodec(
    getInitializeRewardInstructionDataEncoder(),
    getInitializeRewardInstructionDataDecoder(),
  );
}

export interface InitializeRewardAsyncInput<
  TAccountFarmAdmin extends string = string,
  TAccountFarmState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardTreasuryVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountTreasuryVaultsAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  farmAdmin: TransactionSigner<TAccountFarmAdmin>;
  farmState: Address<TAccountFarmState>;
  globalConfig: Address<TAccountGlobalConfig>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault?: Address<TAccountRewardVault>;
  rewardTreasuryVault?: Address<TAccountRewardTreasuryVault>;
  farmVaultsAuthority?: Address<TAccountFarmVaultsAuthority>;
  treasuryVaultsAuthority?: Address<TAccountTreasuryVaultsAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
}

export async function getInitializeRewardInstructionAsync<
  TAccountFarmAdmin extends string,
  TAccountFarmState extends string,
  TAccountGlobalConfig extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountRewardTreasuryVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountTreasuryVaultsAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: InitializeRewardAsyncInput<
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountTreasuryVaultsAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializeRewardInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountTreasuryVaultsAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    farmAdmin: { value: input.farmAdmin ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardTreasuryVault: {
      value: input.rewardTreasuryVault ?? null,
      isWritable: true,
    },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    treasuryVaultsAuthority: {
      value: input.treasuryVaultsAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rewardVault.value) {
    accounts.rewardVault.value = await findRewardVaultPda({
      farmState: expectAddress(accounts.farmState.value),
      rewardMint: expectAddress(accounts.rewardMint.value),
    });
  }
  if (!accounts.rewardTreasuryVault.value) {
    accounts.rewardTreasuryVault.value = await findRewardTreasuryVaultPda({
      globalConfig: expectAddress(accounts.globalConfig.value),
      rewardMint: expectAddress(accounts.rewardMint.value),
    });
  }
  if (!accounts.farmVaultsAuthority.value) {
    accounts.farmVaultsAuthority.value = await findFarmVaultsAuthorityPda({
      farmState: expectAddress(accounts.farmState.value),
    });
  }
  if (!accounts.treasuryVaultsAuthority.value) {
    accounts.treasuryVaultsAuthority.value =
      await findTreasuryVaultsAuthorityPda({
        globalConfig: expectAddress(accounts.globalConfig.value),
      });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.farmAdmin),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardTreasuryVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.treasuryVaultsAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializeRewardInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeRewardInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountTreasuryVaultsAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface InitializeRewardInput<
  TAccountFarmAdmin extends string = string,
  TAccountFarmState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardTreasuryVault extends string = string,
  TAccountFarmVaultsAuthority extends string = string,
  TAccountTreasuryVaultsAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> {
  farmAdmin: TransactionSigner<TAccountFarmAdmin>;
  farmState: Address<TAccountFarmState>;
  globalConfig: Address<TAccountGlobalConfig>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault: Address<TAccountRewardVault>;
  rewardTreasuryVault: Address<TAccountRewardTreasuryVault>;
  farmVaultsAuthority: Address<TAccountFarmVaultsAuthority>;
  treasuryVaultsAuthority: Address<TAccountTreasuryVaultsAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
}

export function getInitializeRewardInstruction<
  TAccountFarmAdmin extends string,
  TAccountFarmState extends string,
  TAccountGlobalConfig extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountRewardTreasuryVault extends string,
  TAccountFarmVaultsAuthority extends string,
  TAccountTreasuryVaultsAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof FARMS_PROGRAM_ADDRESS,
>(
  input: InitializeRewardInput<
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountTreasuryVaultsAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeRewardInstruction<
  TProgramAddress,
  TAccountFarmAdmin,
  TAccountFarmState,
  TAccountGlobalConfig,
  TAccountRewardMint,
  TAccountRewardVault,
  TAccountRewardTreasuryVault,
  TAccountFarmVaultsAuthority,
  TAccountTreasuryVaultsAuthority,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? FARMS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    farmAdmin: { value: input.farmAdmin ?? null, isWritable: true },
    farmState: { value: input.farmState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardTreasuryVault: {
      value: input.rewardTreasuryVault ?? null,
      isWritable: true,
    },
    farmVaultsAuthority: {
      value: input.farmVaultsAuthority ?? null,
      isWritable: false,
    },
    treasuryVaultsAuthority: {
      value: input.treasuryVaultsAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.farmAdmin),
      getAccountMeta(accounts.farmState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardTreasuryVault),
      getAccountMeta(accounts.farmVaultsAuthority),
      getAccountMeta(accounts.treasuryVaultsAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializeRewardInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeRewardInstruction<
    TProgramAddress,
    TAccountFarmAdmin,
    TAccountFarmState,
    TAccountGlobalConfig,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTreasuryVault,
    TAccountFarmVaultsAuthority,
    TAccountTreasuryVaultsAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export interface ParsedInitializeRewardInstruction<
  TProgram extends string = typeof FARMS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    farmAdmin: TAccountMetas[0];
    farmState: TAccountMetas[1];
    globalConfig: TAccountMetas[2];
    rewardMint: TAccountMetas[3];
    rewardVault: TAccountMetas[4];
    rewardTreasuryVault: TAccountMetas[5];
    farmVaultsAuthority: TAccountMetas[6];
    treasuryVaultsAuthority: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    rent: TAccountMetas[10];
  };
  data: InitializeRewardInstructionData;
}

export function parseInitializeRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      farmAdmin: getNextAccount(),
      farmState: getNextAccount(),
      globalConfig: getNextAccount(),
      rewardMint: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardTreasuryVault: getNextAccount(),
      farmVaultsAuthority: getNextAccount(),
      treasuryVaultsAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializeRewardInstructionDataDecoder().decode(instruction.data),
  };
}
