/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  transformEncoder,
  type WritableAccount,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared/index.js";

export const FLASH_REPAY_RESERVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  185, 117, 0, 203, 96, 245, 180, 186,
]);

export function getFlashRepayReserveLiquidityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FLASH_REPAY_RESERVE_LIQUIDITY_DISCRIMINATOR,
  );
}

export type FlashRepayReserveLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountUserTransferAuthority extends string | AccountMeta<string> = string,
  TAccountLendingMarketAuthority extends string | AccountMeta<string> = string,
  TAccountLendingMarket extends string | AccountMeta<string> = string,
  TAccountReserve extends string | AccountMeta<string> = string,
  TAccountReserveLiquidityMint extends string | AccountMeta<string> = string,
  TAccountReserveDestinationLiquidity extends
    | string
    | AccountMeta<string> = string,
  TAccountUserSourceLiquidity extends string | AccountMeta<string> = string,
  TAccountReserveLiquidityFeeReceiver extends
    | string
    | AccountMeta<string> = string,
  TAccountReferrerTokenState extends string | AccountMeta<string> = string,
  TAccountReferrerAccount extends string | AccountMeta<string> = string,
  TAccountSysvarInfo extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountTokenProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUserTransferAuthority extends string
        ? ReadonlySignerAccount<TAccountUserTransferAuthority> &
            AccountSignerMeta<TAccountUserTransferAuthority>
        : TAccountUserTransferAuthority,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveDestinationLiquidity extends string
        ? WritableAccount<TAccountReserveDestinationLiquidity>
        : TAccountReserveDestinationLiquidity,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountReserveLiquidityFeeReceiver extends string
        ? WritableAccount<TAccountReserveLiquidityFeeReceiver>
        : TAccountReserveLiquidityFeeReceiver,
      TAccountReferrerTokenState extends string
        ? WritableAccount<TAccountReferrerTokenState>
        : TAccountReferrerTokenState,
      TAccountReferrerAccount extends string
        ? WritableAccount<TAccountReferrerAccount>
        : TAccountReferrerAccount,
      TAccountSysvarInfo extends string
        ? ReadonlyAccount<TAccountSysvarInfo>
        : TAccountSysvarInfo,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FlashRepayReserveLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
  borrowInstructionIndex: number;
};

export type FlashRepayReserveLiquidityInstructionDataArgs = {
  liquidityAmount: number | bigint;
  borrowInstructionIndex: number;
};

export function getFlashRepayReserveLiquidityInstructionDataEncoder(): FixedSizeEncoder<FlashRepayReserveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
      ["borrowInstructionIndex", getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: FLASH_REPAY_RESERVE_LIQUIDITY_DISCRIMINATOR,
    }),
  );
}

export function getFlashRepayReserveLiquidityInstructionDataDecoder(): FixedSizeDecoder<FlashRepayReserveLiquidityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
    ["borrowInstructionIndex", getU8Decoder()],
  ]);
}

export function getFlashRepayReserveLiquidityInstructionDataCodec(): FixedSizeCodec<
  FlashRepayReserveLiquidityInstructionDataArgs,
  FlashRepayReserveLiquidityInstructionData
> {
  return combineCodec(
    getFlashRepayReserveLiquidityInstructionDataEncoder(),
    getFlashRepayReserveLiquidityInstructionDataDecoder(),
  );
}

export type FlashRepayReserveLiquidityInput<
  TAccountUserTransferAuthority extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveDestinationLiquidity extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountReserveLiquidityFeeReceiver extends string = string,
  TAccountReferrerTokenState extends string = string,
  TAccountReferrerAccount extends string = string,
  TAccountSysvarInfo extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  userTransferAuthority: TransactionSigner<TAccountUserTransferAuthority>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  lendingMarket: Address<TAccountLendingMarket>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveDestinationLiquidity: Address<TAccountReserveDestinationLiquidity>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  reserveLiquidityFeeReceiver: Address<TAccountReserveLiquidityFeeReceiver>;
  referrerTokenState?: Address<TAccountReferrerTokenState>;
  referrerAccount?: Address<TAccountReferrerAccount>;
  sysvarInfo?: Address<TAccountSysvarInfo>;
  tokenProgram: Address<TAccountTokenProgram>;
  liquidityAmount: FlashRepayReserveLiquidityInstructionDataArgs["liquidityAmount"];
  borrowInstructionIndex: FlashRepayReserveLiquidityInstructionDataArgs["borrowInstructionIndex"];
};

export function getFlashRepayReserveLiquidityInstruction<
  TAccountUserTransferAuthority extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountLendingMarket extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveDestinationLiquidity extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountReserveLiquidityFeeReceiver extends string,
  TAccountReferrerTokenState extends string,
  TAccountReferrerAccount extends string,
  TAccountSysvarInfo extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: FlashRepayReserveLiquidityInput<
    TAccountUserTransferAuthority,
    TAccountLendingMarketAuthority,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountReserveLiquidityFeeReceiver,
    TAccountReferrerTokenState,
    TAccountReferrerAccount,
    TAccountSysvarInfo,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): FlashRepayReserveLiquidityInstruction<
  TProgramAddress,
  TAccountUserTransferAuthority,
  TAccountLendingMarketAuthority,
  TAccountLendingMarket,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveDestinationLiquidity,
  TAccountUserSourceLiquidity,
  TAccountReserveLiquidityFeeReceiver,
  TAccountReferrerTokenState,
  TAccountReferrerAccount,
  TAccountSysvarInfo,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userTransferAuthority: {
      value: input.userTransferAuthority ?? null,
      isWritable: false,
    },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveDestinationLiquidity: {
      value: input.reserveDestinationLiquidity ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    reserveLiquidityFeeReceiver: {
      value: input.reserveLiquidityFeeReceiver ?? null,
      isWritable: true,
    },
    referrerTokenState: {
      value: input.referrerTokenState ?? null,
      isWritable: true,
    },
    referrerAccount: { value: input.referrerAccount ?? null, isWritable: true },
    sysvarInfo: { value: input.sysvarInfo ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.sysvarInfo.value) {
    accounts.sysvarInfo.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userTransferAuthority),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveDestinationLiquidity),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.reserveLiquidityFeeReceiver),
      getAccountMeta(accounts.referrerTokenState),
      getAccountMeta(accounts.referrerAccount),
      getAccountMeta(accounts.sysvarInfo),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getFlashRepayReserveLiquidityInstructionDataEncoder().encode(
      args as FlashRepayReserveLiquidityInstructionDataArgs,
    ),
  } as FlashRepayReserveLiquidityInstruction<
    TProgramAddress,
    TAccountUserTransferAuthority,
    TAccountLendingMarketAuthority,
    TAccountLendingMarket,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveDestinationLiquidity,
    TAccountUserSourceLiquidity,
    TAccountReserveLiquidityFeeReceiver,
    TAccountReferrerTokenState,
    TAccountReferrerAccount,
    TAccountSysvarInfo,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedFlashRepayReserveLiquidityInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    userTransferAuthority: TAccountMetas[0];
    lendingMarketAuthority: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    reserve: TAccountMetas[3];
    reserveLiquidityMint: TAccountMetas[4];
    reserveDestinationLiquidity: TAccountMetas[5];
    userSourceLiquidity: TAccountMetas[6];
    reserveLiquidityFeeReceiver: TAccountMetas[7];
    referrerTokenState?: TAccountMetas[8] | undefined;
    referrerAccount?: TAccountMetas[9] | undefined;
    sysvarInfo: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
  };
  data: FlashRepayReserveLiquidityInstructionData;
};

export function parseFlashRepayReserveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedFlashRepayReserveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userTransferAuthority: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      lendingMarket: getNextAccount(),
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveDestinationLiquidity: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      reserveLiquidityFeeReceiver: getNextAccount(),
      referrerTokenState: getNextOptionalAccount(),
      referrerAccount: getNextOptionalAccount(),
      sysvarInfo: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getFlashRepayReserveLiquidityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
