/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import type {
  UpdateGlobalConfigMode,
  UpdateGlobalConfigModeArgs,
} from "../types/index.js";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "@solana/kit";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";
import {
  getUpdateGlobalConfigModeDecoder,
  getUpdateGlobalConfigModeEncoder,
} from "../types/index.js";

export const UPDATE_GLOBAL_CONFIG_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([164, 84, 130, 189, 111, 58, 250, 200]);

export function getUpdateGlobalConfigDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_GLOBAL_CONFIG_DISCRIMINATOR,
  );
}

export type UpdateGlobalConfigInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountGlobalAdmin extends string | AccountMeta = string,
  TAccountGlobalConfig extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobalAdmin extends string
        ? ReadonlySignerAccount<TAccountGlobalAdmin> &
            AccountSignerMeta<TAccountGlobalAdmin>
        : TAccountGlobalAdmin,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateGlobalConfigInstructionData {
  discriminator: ReadonlyUint8Array;
  mode: UpdateGlobalConfigMode;
  value: ReadonlyUint8Array;
}

export interface UpdateGlobalConfigInstructionDataArgs {
  mode: UpdateGlobalConfigModeArgs;
  value: ReadonlyUint8Array;
}

export function getUpdateGlobalConfigInstructionDataEncoder(): Encoder<UpdateGlobalConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["mode", getUpdateGlobalConfigModeEncoder()],
      ["value", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_GLOBAL_CONFIG_DISCRIMINATOR,
    }),
  );
}

export function getUpdateGlobalConfigInstructionDataDecoder(): Decoder<UpdateGlobalConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["mode", getUpdateGlobalConfigModeDecoder()],
    ["value", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getUpdateGlobalConfigInstructionDataCodec(): Codec<
  UpdateGlobalConfigInstructionDataArgs,
  UpdateGlobalConfigInstructionData
> {
  return combineCodec(
    getUpdateGlobalConfigInstructionDataEncoder(),
    getUpdateGlobalConfigInstructionDataDecoder(),
  );
}

export interface UpdateGlobalConfigInput<
  TAccountGlobalAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
> {
  globalAdmin: TransactionSigner<TAccountGlobalAdmin>;
  globalConfig: Address<TAccountGlobalConfig>;
  mode: UpdateGlobalConfigInstructionDataArgs["mode"];
  value: UpdateGlobalConfigInstructionDataArgs["value"];
}

export function getUpdateGlobalConfigInstruction<
  TAccountGlobalAdmin extends string,
  TAccountGlobalConfig extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: UpdateGlobalConfigInput<TAccountGlobalAdmin, TAccountGlobalConfig>,
  config?: { programAddress?: TProgramAddress },
): UpdateGlobalConfigInstruction<
  TProgramAddress,
  TAccountGlobalAdmin,
  TAccountGlobalConfig
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalAdmin: { value: input.globalAdmin ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.globalAdmin),
      getAccountMeta(accounts.globalConfig),
    ],
    data: getUpdateGlobalConfigInstructionDataEncoder().encode(
      args as UpdateGlobalConfigInstructionDataArgs,
    ),
    programAddress,
  } as UpdateGlobalConfigInstruction<
    TProgramAddress,
    TAccountGlobalAdmin,
    TAccountGlobalConfig
  >);
}

export interface ParsedUpdateGlobalConfigInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    globalAdmin: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
  };
  data: UpdateGlobalConfigInstructionData;
}

export function parseUpdateGlobalConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateGlobalConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { globalAdmin: getNextAccount(), globalConfig: getNextAccount() },
    data: getUpdateGlobalConfigInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
