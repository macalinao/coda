/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { findLendingMarketAuthPda } from "../pdas/index.js";
import { KAMINO_LENDING_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([129, 199, 4, 2, 222, 39, 26, 46]);

export function getDepositReserveLiquidityAndObligationCollateralDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_DISCRIMINATOR,
  );
}

export type DepositReserveLiquidityAndObligationCollateralInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountObligation extends string | AccountMeta = string,
  TAccountLendingMarket extends string | AccountMeta = string,
  TAccountLendingMarketAuthority extends string | AccountMeta = string,
  TAccountReserve extends string | AccountMeta = string,
  TAccountReserveLiquidityMint extends string | AccountMeta = string,
  TAccountReserveLiquiditySupply extends string | AccountMeta = string,
  TAccountReserveCollateralMint extends string | AccountMeta = string,
  TAccountReserveDestinationDepositCollateral extends
    | string
    | AccountMeta = string,
  TAccountUserSourceLiquidity extends string | AccountMeta = string,
  TAccountPlaceholderUserDestinationCollateral extends
    | string
    | AccountMeta = string,
  TAccountCollateralTokenProgram extends string | AccountMeta = string,
  TAccountLiquidityTokenProgram extends string | AccountMeta = string,
  TAccountInstructionSysvarAccount extends
    | string
    | AccountMeta = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountObligation extends string
        ? WritableAccount<TAccountObligation>
        : TAccountObligation,
      TAccountLendingMarket extends string
        ? ReadonlyAccount<TAccountLendingMarket>
        : TAccountLendingMarket,
      TAccountLendingMarketAuthority extends string
        ? ReadonlyAccount<TAccountLendingMarketAuthority>
        : TAccountLendingMarketAuthority,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountReserveLiquidityMint extends string
        ? ReadonlyAccount<TAccountReserveLiquidityMint>
        : TAccountReserveLiquidityMint,
      TAccountReserveLiquiditySupply extends string
        ? WritableAccount<TAccountReserveLiquiditySupply>
        : TAccountReserveLiquiditySupply,
      TAccountReserveCollateralMint extends string
        ? WritableAccount<TAccountReserveCollateralMint>
        : TAccountReserveCollateralMint,
      TAccountReserveDestinationDepositCollateral extends string
        ? WritableAccount<TAccountReserveDestinationDepositCollateral>
        : TAccountReserveDestinationDepositCollateral,
      TAccountUserSourceLiquidity extends string
        ? WritableAccount<TAccountUserSourceLiquidity>
        : TAccountUserSourceLiquidity,
      TAccountPlaceholderUserDestinationCollateral extends string
        ? ReadonlyAccount<TAccountPlaceholderUserDestinationCollateral>
        : TAccountPlaceholderUserDestinationCollateral,
      TAccountCollateralTokenProgram extends string
        ? ReadonlyAccount<TAccountCollateralTokenProgram>
        : TAccountCollateralTokenProgram,
      TAccountLiquidityTokenProgram extends string
        ? ReadonlyAccount<TAccountLiquidityTokenProgram>
        : TAccountLiquidityTokenProgram,
      TAccountInstructionSysvarAccount extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccount>
        : TAccountInstructionSysvarAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface DepositReserveLiquidityAndObligationCollateralInstructionData {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
}

export interface DepositReserveLiquidityAndObligationCollateralInstructionDataArgs {
  liquidityAmount: number | bigint;
}

export function getDepositReserveLiquidityAndObligationCollateralInstructionDataEncoder(): FixedSizeEncoder<DepositReserveLiquidityAndObligationCollateralInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_DISCRIMINATOR,
    }),
  );
}

export function getDepositReserveLiquidityAndObligationCollateralInstructionDataDecoder(): FixedSizeDecoder<DepositReserveLiquidityAndObligationCollateralInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU64Decoder()],
  ]);
}

export function getDepositReserveLiquidityAndObligationCollateralInstructionDataCodec(): FixedSizeCodec<
  DepositReserveLiquidityAndObligationCollateralInstructionDataArgs,
  DepositReserveLiquidityAndObligationCollateralInstructionData
> {
  return combineCodec(
    getDepositReserveLiquidityAndObligationCollateralInstructionDataEncoder(),
    getDepositReserveLiquidityAndObligationCollateralInstructionDataDecoder(),
  );
}

export interface DepositReserveLiquidityAndObligationCollateralAsyncInput<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveDestinationDepositCollateral extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountPlaceholderUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority?: Address<TAccountLendingMarketAuthority>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveDestinationDepositCollateral: Address<TAccountReserveDestinationDepositCollateral>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  liquidityAmount: DepositReserveLiquidityAndObligationCollateralInstructionDataArgs["liquidityAmount"];
}

export async function getDepositReserveLiquidityAndObligationCollateralInstructionAsync<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveDestinationDepositCollateral extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountPlaceholderUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositReserveLiquidityAndObligationCollateralAsyncInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DepositReserveLiquidityAndObligationCollateralInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveDestinationDepositCollateral: {
      value: input.reserveDestinationDepositCollateral ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    placeholderUserDestinationCollateral: {
      value: input.placeholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.lendingMarketAuthority.value) {
    accounts.lendingMarketAuthority.value = await findLendingMarketAuthPda({
      lendingMarket: expectAddress(accounts.lendingMarket.value),
    });
  }
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveDestinationDepositCollateral),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    data: getDepositReserveLiquidityAndObligationCollateralInstructionDataEncoder().encode(
      args as DepositReserveLiquidityAndObligationCollateralInstructionDataArgs,
    ),
    programAddress,
  } as DepositReserveLiquidityAndObligationCollateralInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >);
}

export interface DepositReserveLiquidityAndObligationCollateralInput<
  TAccountOwner extends string = string,
  TAccountObligation extends string = string,
  TAccountLendingMarket extends string = string,
  TAccountLendingMarketAuthority extends string = string,
  TAccountReserve extends string = string,
  TAccountReserveLiquidityMint extends string = string,
  TAccountReserveLiquiditySupply extends string = string,
  TAccountReserveCollateralMint extends string = string,
  TAccountReserveDestinationDepositCollateral extends string = string,
  TAccountUserSourceLiquidity extends string = string,
  TAccountPlaceholderUserDestinationCollateral extends string = string,
  TAccountCollateralTokenProgram extends string = string,
  TAccountLiquidityTokenProgram extends string = string,
  TAccountInstructionSysvarAccount extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  obligation: Address<TAccountObligation>;
  lendingMarket: Address<TAccountLendingMarket>;
  lendingMarketAuthority: Address<TAccountLendingMarketAuthority>;
  reserve: Address<TAccountReserve>;
  reserveLiquidityMint: Address<TAccountReserveLiquidityMint>;
  reserveLiquiditySupply: Address<TAccountReserveLiquiditySupply>;
  reserveCollateralMint: Address<TAccountReserveCollateralMint>;
  reserveDestinationDepositCollateral: Address<TAccountReserveDestinationDepositCollateral>;
  userSourceLiquidity: Address<TAccountUserSourceLiquidity>;
  placeholderUserDestinationCollateral?: Address<TAccountPlaceholderUserDestinationCollateral>;
  collateralTokenProgram: Address<TAccountCollateralTokenProgram>;
  liquidityTokenProgram: Address<TAccountLiquidityTokenProgram>;
  instructionSysvarAccount?: Address<TAccountInstructionSysvarAccount>;
  liquidityAmount: DepositReserveLiquidityAndObligationCollateralInstructionDataArgs["liquidityAmount"];
}

export function getDepositReserveLiquidityAndObligationCollateralInstruction<
  TAccountOwner extends string,
  TAccountObligation extends string,
  TAccountLendingMarket extends string,
  TAccountLendingMarketAuthority extends string,
  TAccountReserve extends string,
  TAccountReserveLiquidityMint extends string,
  TAccountReserveLiquiditySupply extends string,
  TAccountReserveCollateralMint extends string,
  TAccountReserveDestinationDepositCollateral extends string,
  TAccountUserSourceLiquidity extends string,
  TAccountPlaceholderUserDestinationCollateral extends string,
  TAccountCollateralTokenProgram extends string,
  TAccountLiquidityTokenProgram extends string,
  TAccountInstructionSysvarAccount extends string,
  TProgramAddress extends Address = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
>(
  input: DepositReserveLiquidityAndObligationCollateralInput<
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >,
  config?: { programAddress?: TProgramAddress },
): DepositReserveLiquidityAndObligationCollateralInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountObligation,
  TAccountLendingMarket,
  TAccountLendingMarketAuthority,
  TAccountReserve,
  TAccountReserveLiquidityMint,
  TAccountReserveLiquiditySupply,
  TAccountReserveCollateralMint,
  TAccountReserveDestinationDepositCollateral,
  TAccountUserSourceLiquidity,
  TAccountPlaceholderUserDestinationCollateral,
  TAccountCollateralTokenProgram,
  TAccountLiquidityTokenProgram,
  TAccountInstructionSysvarAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? KAMINO_LENDING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    obligation: { value: input.obligation ?? null, isWritable: true },
    lendingMarket: { value: input.lendingMarket ?? null, isWritable: false },
    lendingMarketAuthority: {
      value: input.lendingMarketAuthority ?? null,
      isWritable: false,
    },
    reserve: { value: input.reserve ?? null, isWritable: true },
    reserveLiquidityMint: {
      value: input.reserveLiquidityMint ?? null,
      isWritable: false,
    },
    reserveLiquiditySupply: {
      value: input.reserveLiquiditySupply ?? null,
      isWritable: true,
    },
    reserveCollateralMint: {
      value: input.reserveCollateralMint ?? null,
      isWritable: true,
    },
    reserveDestinationDepositCollateral: {
      value: input.reserveDestinationDepositCollateral ?? null,
      isWritable: true,
    },
    userSourceLiquidity: {
      value: input.userSourceLiquidity ?? null,
      isWritable: true,
    },
    placeholderUserDestinationCollateral: {
      value: input.placeholderUserDestinationCollateral ?? null,
      isWritable: false,
    },
    collateralTokenProgram: {
      value: input.collateralTokenProgram ?? null,
      isWritable: false,
    },
    liquidityTokenProgram: {
      value: input.liquidityTokenProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccount: {
      value: input.instructionSysvarAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionSysvarAccount.value) {
    accounts.instructionSysvarAccount.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.obligation),
      getAccountMeta(accounts.lendingMarket),
      getAccountMeta(accounts.lendingMarketAuthority),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.reserveLiquidityMint),
      getAccountMeta(accounts.reserveLiquiditySupply),
      getAccountMeta(accounts.reserveCollateralMint),
      getAccountMeta(accounts.reserveDestinationDepositCollateral),
      getAccountMeta(accounts.userSourceLiquidity),
      getAccountMeta(accounts.placeholderUserDestinationCollateral),
      getAccountMeta(accounts.collateralTokenProgram),
      getAccountMeta(accounts.liquidityTokenProgram),
      getAccountMeta(accounts.instructionSysvarAccount),
    ],
    data: getDepositReserveLiquidityAndObligationCollateralInstructionDataEncoder().encode(
      args as DepositReserveLiquidityAndObligationCollateralInstructionDataArgs,
    ),
    programAddress,
  } as DepositReserveLiquidityAndObligationCollateralInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountObligation,
    TAccountLendingMarket,
    TAccountLendingMarketAuthority,
    TAccountReserve,
    TAccountReserveLiquidityMint,
    TAccountReserveLiquiditySupply,
    TAccountReserveCollateralMint,
    TAccountReserveDestinationDepositCollateral,
    TAccountUserSourceLiquidity,
    TAccountPlaceholderUserDestinationCollateral,
    TAccountCollateralTokenProgram,
    TAccountLiquidityTokenProgram,
    TAccountInstructionSysvarAccount
  >);
}

export interface ParsedDepositReserveLiquidityAndObligationCollateralInstruction<
  TProgram extends string = typeof KAMINO_LENDING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    obligation: TAccountMetas[1];
    lendingMarket: TAccountMetas[2];
    lendingMarketAuthority: TAccountMetas[3];
    reserve: TAccountMetas[4];
    reserveLiquidityMint: TAccountMetas[5];
    reserveLiquiditySupply: TAccountMetas[6];
    reserveCollateralMint: TAccountMetas[7];
    reserveDestinationDepositCollateral: TAccountMetas[8];
    userSourceLiquidity: TAccountMetas[9];
    placeholderUserDestinationCollateral?: TAccountMetas[10] | undefined;
    collateralTokenProgram: TAccountMetas[11];
    liquidityTokenProgram: TAccountMetas[12];
    instructionSysvarAccount: TAccountMetas[13];
  };
  data: DepositReserveLiquidityAndObligationCollateralInstructionData;
}

export function parseDepositReserveLiquidityAndObligationCollateralInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDepositReserveLiquidityAndObligationCollateralInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === KAMINO_LENDING_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      obligation: getNextAccount(),
      lendingMarket: getNextAccount(),
      lendingMarketAuthority: getNextAccount(),
      reserve: getNextAccount(),
      reserveLiquidityMint: getNextAccount(),
      reserveLiquiditySupply: getNextAccount(),
      reserveCollateralMint: getNextAccount(),
      reserveDestinationDepositCollateral: getNextAccount(),
      userSourceLiquidity: getNextAccount(),
      placeholderUserDestinationCollateral: getNextOptionalAccount(),
      collateralTokenProgram: getNextAccount(),
      liquidityTokenProgram: getNextAccount(),
      instructionSysvarAccount: getNextAccount(),
    },
    data: getDepositReserveLiquidityAndObligationCollateralInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
