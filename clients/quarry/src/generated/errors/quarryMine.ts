/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  SolanaError,
} from "@solana/kit";
import { isProgramError } from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";

/** Unauthorized: You are not authorized to perform this action. */
export const QUARRY_MINE_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** InsufficientBalance: Insufficient staked balance for withdraw request. */
export const QUARRY_MINE_ERROR__INSUFFICIENT_BALANCE = 0x1771; // 6001
/** PendingAuthorityNotSet: Pending authority not set */
export const QUARRY_MINE_ERROR__PENDING_AUTHORITY_NOT_SET = 0x1772; // 6002
/** InvalidRewardsShare: Invalid quarry rewards share */
export const QUARRY_MINE_ERROR__INVALID_REWARDS_SHARE = 0x1773; // 6003
/** InsufficientAllowance: Insufficient allowance. */
export const QUARRY_MINE_ERROR__INSUFFICIENT_ALLOWANCE = 0x1774; // 6004
/** NewVaultNotEmpty: New vault not empty. */
export const QUARRY_MINE_ERROR__NEW_VAULT_NOT_EMPTY = 0x1775; // 6005
/** NotEnoughTokens: Not enough tokens. */
export const QUARRY_MINE_ERROR__NOT_ENOUGH_TOKENS = 0x1776; // 6006
/** InvalidTimestamp: Invalid timestamp. */
export const QUARRY_MINE_ERROR__INVALID_TIMESTAMP = 0x1777; // 6007
/** InvalidMaxClaimFee: Invalid max claim fee. */
export const QUARRY_MINE_ERROR__INVALID_MAX_CLAIM_FEE = 0x1778; // 6008
/** MaxAnnualRewardsRateExceeded: Max annual rewards rate exceeded. */
export const QUARRY_MINE_ERROR__MAX_ANNUAL_REWARDS_RATE_EXCEEDED = 0x1779; // 6009
/** Paused: Rewarder is paused. */
export const QUARRY_MINE_ERROR__PAUSED = 0x177a; // 6010
/** UpperboundExceeded: Rewards earned exceeded quarry's upper bound. */
export const QUARRY_MINE_ERROR__UPPERBOUND_EXCEEDED = 0x177b; // 6011

export type QuarryMineError =
  | typeof QUARRY_MINE_ERROR__INSUFFICIENT_ALLOWANCE
  | typeof QUARRY_MINE_ERROR__INSUFFICIENT_BALANCE
  | typeof QUARRY_MINE_ERROR__INVALID_MAX_CLAIM_FEE
  | typeof QUARRY_MINE_ERROR__INVALID_REWARDS_SHARE
  | typeof QUARRY_MINE_ERROR__INVALID_TIMESTAMP
  | typeof QUARRY_MINE_ERROR__MAX_ANNUAL_REWARDS_RATE_EXCEEDED
  | typeof QUARRY_MINE_ERROR__NEW_VAULT_NOT_EMPTY
  | typeof QUARRY_MINE_ERROR__NOT_ENOUGH_TOKENS
  | typeof QUARRY_MINE_ERROR__PAUSED
  | typeof QUARRY_MINE_ERROR__PENDING_AUTHORITY_NOT_SET
  | typeof QUARRY_MINE_ERROR__UNAUTHORIZED
  | typeof QUARRY_MINE_ERROR__UPPERBOUND_EXCEEDED;

let quarryMineErrorMessages: Record<QuarryMineError, string> | undefined;
if (true) {
  quarryMineErrorMessages = {
    [QUARRY_MINE_ERROR__INSUFFICIENT_ALLOWANCE]: `Insufficient allowance.`,
    [QUARRY_MINE_ERROR__INSUFFICIENT_BALANCE]: `Insufficient staked balance for withdraw request.`,
    [QUARRY_MINE_ERROR__INVALID_MAX_CLAIM_FEE]: `Invalid max claim fee.`,
    [QUARRY_MINE_ERROR__INVALID_REWARDS_SHARE]: `Invalid quarry rewards share`,
    [QUARRY_MINE_ERROR__INVALID_TIMESTAMP]: `Invalid timestamp.`,
    [QUARRY_MINE_ERROR__MAX_ANNUAL_REWARDS_RATE_EXCEEDED]: `Max annual rewards rate exceeded.`,
    [QUARRY_MINE_ERROR__NEW_VAULT_NOT_EMPTY]: `New vault not empty.`,
    [QUARRY_MINE_ERROR__NOT_ENOUGH_TOKENS]: `Not enough tokens.`,
    [QUARRY_MINE_ERROR__PAUSED]: `Rewarder is paused.`,
    [QUARRY_MINE_ERROR__PENDING_AUTHORITY_NOT_SET]: `Pending authority not set`,
    [QUARRY_MINE_ERROR__UNAUTHORIZED]: `You are not authorized to perform this action.`,
    [QUARRY_MINE_ERROR__UPPERBOUND_EXCEEDED]: `Rewards earned exceeded quarry's upper bound.`,
  };
}

export function getQuarryMineErrorMessage(code: QuarryMineError): string {
  if (true) {
    return quarryMineErrorMessages![code];
  }

  return "Error message not available in production bundles.";
}

export function isQuarryMineError<TProgramErrorCode extends QuarryMineError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    QUARRY_MINE_PROGRAM_ADDRESS,
    code,
  );
}
