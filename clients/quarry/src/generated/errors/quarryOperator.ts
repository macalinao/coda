/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  isProgramError
  
  
} from "@solana/kit";
import type {Address, SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, SolanaError} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";

/** Unauthorized: Signer is not authorized to perform this action. */
export const QUARRY_OPERATOR_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** PendingAuthorityNotSet: Pending authority must be set to the created operator. */
export const QUARRY_OPERATOR_ERROR__PENDING_AUTHORITY_NOT_SET = 0x1771; // 6001
/** OperatorNotRewarderAuthority: Operator is not the Rewarder authority. */
export const QUARRY_OPERATOR_ERROR__OPERATOR_NOT_REWARDER_AUTHORITY = 0x1772; // 6002

export type QuarryOperatorError =
  | typeof QUARRY_OPERATOR_ERROR__OPERATOR_NOT_REWARDER_AUTHORITY
  | typeof QUARRY_OPERATOR_ERROR__PENDING_AUTHORITY_NOT_SET
  | typeof QUARRY_OPERATOR_ERROR__UNAUTHORIZED;

let quarryOperatorErrorMessages:
  | Record<QuarryOperatorError, string>
  | undefined;
if (true) {
  quarryOperatorErrorMessages = {
    [QUARRY_OPERATOR_ERROR__OPERATOR_NOT_REWARDER_AUTHORITY]: `Operator is not the Rewarder authority.`,
    [QUARRY_OPERATOR_ERROR__PENDING_AUTHORITY_NOT_SET]: `Pending authority must be set to the created operator.`,
    [QUARRY_OPERATOR_ERROR__UNAUTHORIZED]: `Signer is not authorized to perform this action.`,
  };
}

export function getQuarryOperatorErrorMessage(
  code: QuarryOperatorError,
): string {
  if (true) {
    return (quarryOperatorErrorMessages!)[
      code
    ];
  }

  return "Error message not available in production bundles.";
}

export function isQuarryOperatorError<
  TProgramErrorCode extends QuarryOperatorError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    QUARRY_OPERATOR_PROGRAM_ADDRESS,
    code,
  );
}
