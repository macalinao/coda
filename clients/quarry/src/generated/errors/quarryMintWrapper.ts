/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Address,
  SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  SolanaError,
} from "@solana/kit";
import { isProgramError } from "@solana/kit";
import { QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS } from "../programs/index.js";

/** Unauthorized: You are not authorized to perform this action. */
export const QUARRY_MINT_WRAPPER_ERROR__UNAUTHORIZED = 0x1770; // 6000
/** HardcapExceeded: Cannot mint over hard cap. */
export const QUARRY_MINT_WRAPPER_ERROR__HARDCAP_EXCEEDED = 0x1771; // 6001
/** MinterAllowanceExceeded: Minter allowance exceeded. */
export const QUARRY_MINT_WRAPPER_ERROR__MINTER_ALLOWANCE_EXCEEDED = 0x1772; // 6002

export type QuarryMintWrapperError =
  | typeof QUARRY_MINT_WRAPPER_ERROR__HARDCAP_EXCEEDED
  | typeof QUARRY_MINT_WRAPPER_ERROR__MINTER_ALLOWANCE_EXCEEDED
  | typeof QUARRY_MINT_WRAPPER_ERROR__UNAUTHORIZED;

let quarryMintWrapperErrorMessages:
  | Record<QuarryMintWrapperError, string>
  | undefined;
if (true) {
  quarryMintWrapperErrorMessages = {
    [QUARRY_MINT_WRAPPER_ERROR__HARDCAP_EXCEEDED]: "Cannot mint over hard cap.",
    [QUARRY_MINT_WRAPPER_ERROR__MINTER_ALLOWANCE_EXCEEDED]:
      "Minter allowance exceeded.",
    [QUARRY_MINT_WRAPPER_ERROR__UNAUTHORIZED]:
      "You are not authorized to perform this action.",
  };
}

export function getQuarryMintWrapperErrorMessage(
  code: QuarryMintWrapperError,
): string {
  if (true) {
    return quarryMintWrapperErrorMessages![code];
  }

  return "Error message not available in production bundles.";
}

export function isQuarryMintWrapperError<
  TProgramErrorCode extends QuarryMintWrapperError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
    code,
  );
}
