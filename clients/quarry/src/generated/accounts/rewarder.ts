/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";

export const REWARDER_DISCRIMINATOR = new Uint8Array([
  83, 3, 203, 174, 244, 30, 172, 198,
]);

export function getRewarderDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REWARDER_DISCRIMINATOR);
}

export interface Rewarder {
  discriminator: ReadonlyUint8Array;
  base: Address;
  bump: number;
  authority: Address;
  pendingAuthority: Address;
  numQuarries: number;
  annualRewardsRate: bigint;
  totalRewardsShares: bigint;
  mintWrapper: Address;
  rewardsTokenMint: Address;
  claimFeeTokenAccount: Address;
  maxClaimFeeMillibps: bigint;
  pauseAuthority: Address;
  isPaused: boolean;
}

export interface RewarderArgs {
  base: Address;
  bump: number;
  authority: Address;
  pendingAuthority: Address;
  numQuarries: number;
  annualRewardsRate: number | bigint;
  totalRewardsShares: number | bigint;
  mintWrapper: Address;
  rewardsTokenMint: Address;
  claimFeeTokenAccount: Address;
  maxClaimFeeMillibps: number | bigint;
  pauseAuthority: Address;
  isPaused: boolean;
}

export function getRewarderEncoder(): FixedSizeEncoder<RewarderArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["base", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["authority", getAddressEncoder()],
      ["pendingAuthority", getAddressEncoder()],
      ["numQuarries", getU16Encoder()],
      ["annualRewardsRate", getU64Encoder()],
      ["totalRewardsShares", getU64Encoder()],
      ["mintWrapper", getAddressEncoder()],
      ["rewardsTokenMint", getAddressEncoder()],
      ["claimFeeTokenAccount", getAddressEncoder()],
      ["maxClaimFeeMillibps", getU64Encoder()],
      ["pauseAuthority", getAddressEncoder()],
      ["isPaused", getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: REWARDER_DISCRIMINATOR }),
  );
}

export function getRewarderDecoder(): FixedSizeDecoder<Rewarder> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["base", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["authority", getAddressDecoder()],
    ["pendingAuthority", getAddressDecoder()],
    ["numQuarries", getU16Decoder()],
    ["annualRewardsRate", getU64Decoder()],
    ["totalRewardsShares", getU64Decoder()],
    ["mintWrapper", getAddressDecoder()],
    ["rewardsTokenMint", getAddressDecoder()],
    ["claimFeeTokenAccount", getAddressDecoder()],
    ["maxClaimFeeMillibps", getU64Decoder()],
    ["pauseAuthority", getAddressDecoder()],
    ["isPaused", getBooleanDecoder()],
  ]);
}

export function getRewarderCodec(): FixedSizeCodec<RewarderArgs, Rewarder> {
  return combineCodec(getRewarderEncoder(), getRewarderDecoder());
}

export function decodeRewarder<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Rewarder, TAddress>;
export function decodeRewarder<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Rewarder, TAddress>;
export function decodeRewarder<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Rewarder, TAddress> | MaybeAccount<Rewarder, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRewarderDecoder(),
  );
}

export async function fetchRewarder<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Rewarder, TAddress>> {
  const maybeAccount = await fetchMaybeRewarder(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRewarder<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Rewarder, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRewarder(maybeAccount);
}

export async function fetchAllRewarder(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Rewarder>[]> {
  const maybeAccounts = await fetchAllMaybeRewarder(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRewarder(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Rewarder>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRewarder(maybeAccount));
}
