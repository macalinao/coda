/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { MinerSeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
} from "@solana/kit";
import { findMinerPda } from "../pdas/index.js";

export const MINER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  223, 113, 15, 54, 123, 122, 140, 100,
]);

export function getMinerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINER_DISCRIMINATOR);
}

export interface Miner {
  discriminator: ReadonlyUint8Array;
  quarry: Address;
  authority: Address;
  bump: number;
  tokenVaultKey: Address;
  rewardsEarned: bigint;
  rewardsPerTokenPaid: bigint;
  balance: bigint;
  index: bigint;
}

export interface MinerArgs {
  quarry: Address;
  authority: Address;
  bump: number;
  tokenVaultKey: Address;
  rewardsEarned: number | bigint;
  rewardsPerTokenPaid: number | bigint;
  balance: number | bigint;
  index: number | bigint;
}

export function getMinerEncoder(): FixedSizeEncoder<MinerArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["quarry", getAddressEncoder()],
      ["authority", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["tokenVaultKey", getAddressEncoder()],
      ["rewardsEarned", getU64Encoder()],
      ["rewardsPerTokenPaid", getU128Encoder()],
      ["balance", getU64Encoder()],
      ["index", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MINER_DISCRIMINATOR }),
  );
}

export function getMinerDecoder(): FixedSizeDecoder<Miner> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["quarry", getAddressDecoder()],
    ["authority", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["tokenVaultKey", getAddressDecoder()],
    ["rewardsEarned", getU64Decoder()],
    ["rewardsPerTokenPaid", getU128Decoder()],
    ["balance", getU64Decoder()],
    ["index", getU64Decoder()],
  ]);
}

export function getMinerCodec(): FixedSizeCodec<MinerArgs, Miner> {
  return combineCodec(getMinerEncoder(), getMinerDecoder());
}

export function decodeMiner<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Miner, TAddress>;
export function decodeMiner<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Miner, TAddress>;
export function decodeMiner<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Miner, TAddress> | MaybeAccount<Miner, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMinerDecoder(),
  );
}

export async function fetchMiner<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Miner, TAddress>> {
  const maybeAccount = await fetchMaybeMiner(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMiner<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Miner, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMiner(maybeAccount);
}

export async function fetchAllMiner(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Miner>[]> {
  const maybeAccounts = await fetchAllMaybeMiner(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMiner(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Miner>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMiner(maybeAccount));
}

export async function fetchMinerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MinerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Miner>> {
  const maybeAccount = await fetchMaybeMinerFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMinerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MinerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Miner>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMinerPda(seeds, { programAddress });
  return await fetchMaybeMiner(rpc, address, fetchConfig);
}
