/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { QuarrySeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
} from "@solana/kit";
import { findQuarryPda } from "../pdas/index.js";

export const QUARRY_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  243, 248, 54, 182, 240, 85, 9, 77,
]);

export function getQuarryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(QUARRY_DISCRIMINATOR);
}

export interface Quarry {
  discriminator: ReadonlyUint8Array;
  rewarder: Address;
  tokenMintKey: Address;
  bump: number;
  index: number;
  tokenMintDecimals: number;
  famineTs: bigint;
  lastUpdateTs: bigint;
  rewardsPerTokenStored: bigint;
  annualRewardsRate: bigint;
  rewardsShare: bigint;
  totalTokensDeposited: bigint;
  numMiners: bigint;
}

export interface QuarryArgs {
  rewarder: Address;
  tokenMintKey: Address;
  bump: number;
  index: number;
  tokenMintDecimals: number;
  famineTs: number | bigint;
  lastUpdateTs: number | bigint;
  rewardsPerTokenStored: number | bigint;
  annualRewardsRate: number | bigint;
  rewardsShare: number | bigint;
  totalTokensDeposited: number | bigint;
  numMiners: number | bigint;
}

export function getQuarryEncoder(): FixedSizeEncoder<QuarryArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewarder", getAddressEncoder()],
      ["tokenMintKey", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["index", getU16Encoder()],
      ["tokenMintDecimals", getU8Encoder()],
      ["famineTs", getI64Encoder()],
      ["lastUpdateTs", getI64Encoder()],
      ["rewardsPerTokenStored", getU128Encoder()],
      ["annualRewardsRate", getU64Encoder()],
      ["rewardsShare", getU64Encoder()],
      ["totalTokensDeposited", getU64Encoder()],
      ["numMiners", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: QUARRY_DISCRIMINATOR }),
  );
}

export function getQuarryDecoder(): FixedSizeDecoder<Quarry> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewarder", getAddressDecoder()],
    ["tokenMintKey", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["index", getU16Decoder()],
    ["tokenMintDecimals", getU8Decoder()],
    ["famineTs", getI64Decoder()],
    ["lastUpdateTs", getI64Decoder()],
    ["rewardsPerTokenStored", getU128Decoder()],
    ["annualRewardsRate", getU64Decoder()],
    ["rewardsShare", getU64Decoder()],
    ["totalTokensDeposited", getU64Decoder()],
    ["numMiners", getU64Decoder()],
  ]);
}

export function getQuarryCodec(): FixedSizeCodec<QuarryArgs, Quarry> {
  return combineCodec(getQuarryEncoder(), getQuarryDecoder());
}

export function decodeQuarry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Quarry, TAddress>;
export function decodeQuarry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Quarry, TAddress>;
export function decodeQuarry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Quarry, TAddress> | MaybeAccount<Quarry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getQuarryDecoder(),
  );
}

export async function fetchQuarry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Quarry, TAddress>> {
  const maybeAccount = await fetchMaybeQuarry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeQuarry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Quarry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeQuarry(maybeAccount);
}

export async function fetchAllQuarry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Quarry>[]> {
  const maybeAccounts = await fetchAllMaybeQuarry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeQuarry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Quarry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeQuarry(maybeAccount));
}

export async function fetchQuarryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: QuarrySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Quarry>> {
  const maybeAccount = await fetchMaybeQuarryFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeQuarryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: QuarrySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Quarry>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findQuarryPda(seeds, { programAddress });
  return await fetchMaybeQuarry(rpc, address, fetchConfig);
}
