/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";

export const MERGE_POOL_DISCRIMINATOR = new Uint8Array([
  15, 189, 242, 87, 188, 75, 64, 244,
]);

export function getMergePoolDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MERGE_POOL_DISCRIMINATOR);
}

export interface MergePool {
  discriminator: ReadonlyUint8Array;
  primaryMint: Address;
  bump: number;
  replicaMint: Address;
  mmCount: bigint;
  totalPrimaryBalance: bigint;
  totalReplicaBalance: bigint;
  reserved: bigint[];
}

export interface MergePoolArgs {
  primaryMint: Address;
  bump: number;
  replicaMint: Address;
  mmCount: number | bigint;
  totalPrimaryBalance: number | bigint;
  totalReplicaBalance: number | bigint;
  reserved: (number | bigint)[];
}

export function getMergePoolEncoder(): FixedSizeEncoder<MergePoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["primaryMint", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["replicaMint", getAddressEncoder()],
      ["mmCount", getU64Encoder()],
      ["totalPrimaryBalance", getU64Encoder()],
      ["totalReplicaBalance", getU64Encoder()],
      ["reserved", getArrayEncoder(getU64Encoder(), { size: 16 })],
    ]),
    (value) => ({ ...value, discriminator: MERGE_POOL_DISCRIMINATOR }),
  );
}

export function getMergePoolDecoder(): FixedSizeDecoder<MergePool> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["primaryMint", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["replicaMint", getAddressDecoder()],
    ["mmCount", getU64Decoder()],
    ["totalPrimaryBalance", getU64Decoder()],
    ["totalReplicaBalance", getU64Decoder()],
    ["reserved", getArrayDecoder(getU64Decoder(), { size: 16 })],
  ]);
}

export function getMergePoolCodec(): FixedSizeCodec<MergePoolArgs, MergePool> {
  return combineCodec(getMergePoolEncoder(), getMergePoolDecoder());
}

export function decodeMergePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<MergePool, TAddress>;
export function decodeMergePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<MergePool, TAddress>;
export function decodeMergePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<MergePool, TAddress> | MaybeAccount<MergePool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMergePoolDecoder(),
  );
}

export async function fetchMergePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<MergePool, TAddress>> {
  const maybeAccount = await fetchMaybeMergePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMergePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<MergePool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMergePool(maybeAccount);
}

export async function fetchAllMergePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<MergePool>[]> {
  const maybeAccounts = await fetchAllMaybeMergePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMergePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<MergePool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMergePool(maybeAccount));
}
