/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";

export const OPERATOR_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  219, 31, 188, 145, 69, 139, 204, 117,
]);

export function getOperatorDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(OPERATOR_DISCRIMINATOR);
}

export interface Operator {
  discriminator: ReadonlyUint8Array;
  base: Address;
  bump: number;
  rewarder: Address;
  admin: Address;
  rateSetter: Address;
  quarryCreator: Address;
  shareAllocator: Address;
  lastModifiedTs: bigint;
  generation: bigint;
}

export interface OperatorArgs {
  base: Address;
  bump: number;
  rewarder: Address;
  admin: Address;
  rateSetter: Address;
  quarryCreator: Address;
  shareAllocator: Address;
  lastModifiedTs: number | bigint;
  generation: number | bigint;
}

export function getOperatorEncoder(): FixedSizeEncoder<OperatorArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["base", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["rewarder", getAddressEncoder()],
      ["admin", getAddressEncoder()],
      ["rateSetter", getAddressEncoder()],
      ["quarryCreator", getAddressEncoder()],
      ["shareAllocator", getAddressEncoder()],
      ["lastModifiedTs", getI64Encoder()],
      ["generation", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OPERATOR_DISCRIMINATOR }),
  );
}

export function getOperatorDecoder(): FixedSizeDecoder<Operator> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["base", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["rewarder", getAddressDecoder()],
    ["admin", getAddressDecoder()],
    ["rateSetter", getAddressDecoder()],
    ["quarryCreator", getAddressDecoder()],
    ["shareAllocator", getAddressDecoder()],
    ["lastModifiedTs", getI64Decoder()],
    ["generation", getU64Decoder()],
  ]);
}

export function getOperatorCodec(): FixedSizeCodec<OperatorArgs, Operator> {
  return combineCodec(getOperatorEncoder(), getOperatorDecoder());
}

export function decodeOperator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Operator, TAddress>;
export function decodeOperator<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Operator, TAddress>;
export function decodeOperator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Operator, TAddress> | MaybeAccount<Operator, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOperatorDecoder(),
  );
}

export async function fetchOperator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Operator, TAddress>> {
  const maybeAccount = await fetchMaybeOperator(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOperator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Operator, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOperator(maybeAccount);
}

export async function fetchAllOperator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Operator>[]> {
  const maybeAccounts = await fetchAllMaybeOperator(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOperator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Operator>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOperator(maybeAccount));
}
