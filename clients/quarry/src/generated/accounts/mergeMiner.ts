/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";

export const MERGE_MINER_DISCRIMINATOR = new Uint8Array([
  243, 97, 253, 80, 19, 210, 148, 120,
]);

export function getMergeMinerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MERGE_MINER_DISCRIMINATOR);
}

export interface MergeMiner {
  discriminator: ReadonlyUint8Array;
  pool: Address;
  owner: Address;
  bump: number;
  index: bigint;
  primaryBalance: bigint;
  replicaBalance: bigint;
}

export interface MergeMinerArgs {
  pool: Address;
  owner: Address;
  bump: number;
  index: number | bigint;
  primaryBalance: number | bigint;
  replicaBalance: number | bigint;
}

export function getMergeMinerEncoder(): FixedSizeEncoder<MergeMinerArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["pool", getAddressEncoder()],
      ["owner", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["index", getU64Encoder()],
      ["primaryBalance", getU64Encoder()],
      ["replicaBalance", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MERGE_MINER_DISCRIMINATOR }),
  );
}

export function getMergeMinerDecoder(): FixedSizeDecoder<MergeMiner> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["pool", getAddressDecoder()],
    ["owner", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["index", getU64Decoder()],
    ["primaryBalance", getU64Decoder()],
    ["replicaBalance", getU64Decoder()],
  ]);
}

export function getMergeMinerCodec(): FixedSizeCodec<
  MergeMinerArgs,
  MergeMiner
> {
  return combineCodec(getMergeMinerEncoder(), getMergeMinerDecoder());
}

export function decodeMergeMiner<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<MergeMiner, TAddress>;
export function decodeMergeMiner<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<MergeMiner, TAddress>;
export function decodeMergeMiner<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<MergeMiner, TAddress> | MaybeAccount<MergeMiner, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMergeMinerDecoder(),
  );
}

export async function fetchMergeMiner<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<MergeMiner, TAddress>> {
  const maybeAccount = await fetchMaybeMergeMiner(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMergeMiner<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<MergeMiner, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMergeMiner(maybeAccount);
}

export async function fetchAllMergeMiner(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<MergeMiner>[]> {
  const maybeAccounts = await fetchAllMaybeMergeMiner(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMergeMiner(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<MergeMiner>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMergeMiner(maybeAccount));
}
