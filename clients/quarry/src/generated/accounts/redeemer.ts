/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  
  
  
  
  
  
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  
  
  
  transformEncoder
} from "@solana/kit";
import type {Account, Address, EncodedAccount, FetchAccountConfig, FetchAccountsConfig, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, MaybeAccount, MaybeEncodedAccount, ReadonlyUint8Array} from "@solana/kit";

export const REDEEMER_DISCRIMINATOR = new Uint8Array([
  41, 191, 197, 8, 98, 64, 17, 99,
]);

export function getRedeemerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REDEEMER_DISCRIMINATOR);
}

export interface Redeemer {
  discriminator: ReadonlyUint8Array;
  iouMint: Address;
  redemptionMint: Address;
  bump: number;
  totalTokensRedeemed: bigint;
}

export interface RedeemerArgs {
  iouMint: Address;
  redemptionMint: Address;
  bump: number;
  totalTokensRedeemed: number | bigint;
}

export function getRedeemerEncoder(): FixedSizeEncoder<RedeemerArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["iouMint", getAddressEncoder()],
      ["redemptionMint", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["totalTokensRedeemed", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REDEEMER_DISCRIMINATOR }),
  );
}

export function getRedeemerDecoder(): FixedSizeDecoder<Redeemer> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["iouMint", getAddressDecoder()],
    ["redemptionMint", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["totalTokensRedeemed", getU64Decoder()],
  ]);
}

export function getRedeemerCodec(): FixedSizeCodec<RedeemerArgs, Redeemer> {
  return combineCodec(getRedeemerEncoder(), getRedeemerDecoder());
}

export function decodeRedeemer<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Redeemer, TAddress>;
export function decodeRedeemer<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Redeemer, TAddress>;
export function decodeRedeemer<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Redeemer, TAddress> | MaybeAccount<Redeemer, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRedeemerDecoder(),
  );
}

export async function fetchRedeemer<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Redeemer, TAddress>> {
  const maybeAccount = await fetchMaybeRedeemer(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRedeemer<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Redeemer, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRedeemer(maybeAccount);
}

export async function fetchAllRedeemer(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Redeemer>[]> {
  const maybeAccounts = await fetchAllMaybeRedeemer(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRedeemer(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Redeemer>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRedeemer(maybeAccount));
}
