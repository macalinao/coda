/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import type { RegistrySeeds } from "../pdas/index.js";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { findRegistryPda } from "../pdas/index.js";

export const REGISTRY_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  47, 174, 110, 246, 184, 182, 252, 218,
]);

export function getRegistryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REGISTRY_DISCRIMINATOR);
}

export interface Registry {
  discriminator: ReadonlyUint8Array;
  bump: number;
  rewarder: Address;
  tokens: Address[];
}

export interface RegistryArgs {
  bump: number;
  rewarder: Address;
  tokens: Address[];
}

export function getRegistryEncoder(): Encoder<RegistryArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
      ["rewarder", getAddressEncoder()],
      ["tokens", getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: REGISTRY_DISCRIMINATOR }),
  );
}

export function getRegistryDecoder(): Decoder<Registry> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
    ["rewarder", getAddressDecoder()],
    ["tokens", getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getRegistryCodec(): Codec<RegistryArgs, Registry> {
  return combineCodec(getRegistryEncoder(), getRegistryDecoder());
}

export function decodeRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Registry, TAddress>;
export function decodeRegistry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Registry, TAddress>;
export function decodeRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Registry, TAddress> | MaybeAccount<Registry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRegistryDecoder(),
  );
}

export async function fetchRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Registry, TAddress>> {
  const maybeAccount = await fetchMaybeRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Registry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRegistry(maybeAccount);
}

export async function fetchAllRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<Registry>[]> {
  const maybeAccounts = await fetchAllMaybeRegistry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Registry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRegistry(maybeAccount));
}

export async function fetchRegistryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RegistrySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<Account<Registry>> {
  const maybeAccount = await fetchMaybeRegistryFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRegistryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: RegistrySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<MaybeAccount<Registry>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findRegistryPda(seeds, { programAddress });
  return await fetchMaybeRegistry(rpc, address, fetchConfig);
}
