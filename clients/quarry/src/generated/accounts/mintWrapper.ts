/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "@solana/kit";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";

export const MINT_WRAPPER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  154, 166, 64, 239, 170, 99, 74, 158,
]);

export function getMintWrapperDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_WRAPPER_DISCRIMINATOR,
  );
}

export interface MintWrapper {
  discriminator: ReadonlyUint8Array;
  base: Address;
  bump: number;
  hardCap: bigint;
  admin: Address;
  pendingAdmin: Address;
  tokenMint: Address;
  numMinters: bigint;
  totalAllowance: bigint;
  totalMinted: bigint;
}

export interface MintWrapperArgs {
  base: Address;
  bump: number;
  hardCap: number | bigint;
  admin: Address;
  pendingAdmin: Address;
  tokenMint: Address;
  numMinters: number | bigint;
  totalAllowance: number | bigint;
  totalMinted: number | bigint;
}

export function getMintWrapperEncoder(): FixedSizeEncoder<MintWrapperArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["base", getAddressEncoder()],
      ["bump", getU8Encoder()],
      ["hardCap", getU64Encoder()],
      ["admin", getAddressEncoder()],
      ["pendingAdmin", getAddressEncoder()],
      ["tokenMint", getAddressEncoder()],
      ["numMinters", getU64Encoder()],
      ["totalAllowance", getU64Encoder()],
      ["totalMinted", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MINT_WRAPPER_DISCRIMINATOR }),
  );
}

export function getMintWrapperDecoder(): FixedSizeDecoder<MintWrapper> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["base", getAddressDecoder()],
    ["bump", getU8Decoder()],
    ["hardCap", getU64Decoder()],
    ["admin", getAddressDecoder()],
    ["pendingAdmin", getAddressDecoder()],
    ["tokenMint", getAddressDecoder()],
    ["numMinters", getU64Decoder()],
    ["totalAllowance", getU64Decoder()],
    ["totalMinted", getU64Decoder()],
  ]);
}

export function getMintWrapperCodec(): FixedSizeCodec<
  MintWrapperArgs,
  MintWrapper
> {
  return combineCodec(getMintWrapperEncoder(), getMintWrapperDecoder());
}

export function decodeMintWrapper<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<MintWrapper, TAddress>;
export function decodeMintWrapper<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<MintWrapper, TAddress>;
export function decodeMintWrapper<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<MintWrapper, TAddress> | MaybeAccount<MintWrapper, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMintWrapperDecoder(),
  );
}

export async function fetchMintWrapper<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<MintWrapper, TAddress>> {
  const maybeAccount = await fetchMaybeMintWrapper(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintWrapper<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<MintWrapper, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMintWrapper(maybeAccount);
}

export async function fetchAllMintWrapper(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<MintWrapper>[]> {
  const maybeAccounts = await fetchAllMaybeMintWrapper(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMintWrapper(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<MintWrapper>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMintWrapper(maybeAccount));
}
