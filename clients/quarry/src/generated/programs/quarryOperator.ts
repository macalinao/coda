/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  containsBytes,
  fixEncoderSize,
  getBytesEncoder
  
} from "@solana/kit";
import type {Address, ReadonlyUint8Array} from "@solana/kit";
import type {ParsedCreateOperatorInstruction, ParsedCreateOperatorV2Instruction, ParsedDelegateCreateQuarryInstruction, ParsedDelegateCreateQuarryV2Instruction, ParsedDelegateSetAnnualRewardsInstruction, ParsedDelegateSetFamineInstruction, ParsedDelegateSetRewardsShareInstruction, ParsedSetAdminInstruction, ParsedSetQuarryCreatorInstruction, ParsedSetRateSetterInstruction, ParsedSetShareAllocatorInstruction} from "../instructions/index.js";

export const QUARRY_OPERATOR_PROGRAM_ADDRESS =
  "QoP6NfrQbaGnccXQrMLUkog2tQZ4C1RFgJcwDnT8Kmz" as Address<"QoP6NfrQbaGnccXQrMLUkog2tQZ4C1RFgJcwDnT8Kmz">;

export enum QuarryOperatorAccount {
  Operator,
}

export function identifyQuarryOperatorAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): QuarryOperatorAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 31, 188, 145, 69, 139, 204, 117]),
      ),
      0,
    )
  ) {
    return QuarryOperatorAccount.Operator;
  }
  throw new Error(
    "The provided account could not be identified as a quarryOperator account.",
  );
}

export enum QuarryOperatorInstruction {
  CreateOperator,
  CreateOperatorV2,
  SetAdmin,
  SetRateSetter,
  SetQuarryCreator,
  SetShareAllocator,
  DelegateSetAnnualRewards,
  DelegateCreateQuarry,
  DelegateCreateQuarryV2,
  DelegateSetRewardsShare,
  DelegateSetFamine,
}

export function identifyQuarryOperatorInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): QuarryOperatorInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 40, 238, 75, 181, 252, 59, 11]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.CreateOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 106, 174, 35, 45, 26, 10, 67]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.CreateOperatorV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 163, 0, 52, 91, 194, 187, 92]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.SetAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 193, 107, 111, 94, 23, 64, 107]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.SetRateSetter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 91, 208, 54, 209, 64, 234, 68]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.SetQuarryCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([96, 77, 203, 216, 167, 175, 61, 189]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.SetShareAllocator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 174, 85, 150, 174, 18, 13, 31]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.DelegateSetAnnualRewards;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 238, 31, 14, 175, 233, 75, 237]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.DelegateCreateQuarry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 180, 9, 212, 75, 142, 202, 62]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.DelegateCreateQuarryV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 198, 20, 112, 172, 82, 102, 66]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.DelegateSetRewardsShare;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([1, 196, 52, 171, 199, 237, 240, 134]),
      ),
      0,
    )
  ) {
    return QuarryOperatorInstruction.DelegateSetFamine;
  }
  throw new Error(
    "The provided instruction could not be identified as a quarryOperator instruction.",
  );
}

export type ParsedQuarryOperatorInstruction<
  TProgram extends string = "QoP6NfrQbaGnccXQrMLUkog2tQZ4C1RFgJcwDnT8Kmz",
> =
  | ({
      instructionType: QuarryOperatorInstruction.CreateOperator;
    } & ParsedCreateOperatorInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.CreateOperatorV2;
    } & ParsedCreateOperatorV2Instruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.SetAdmin;
    } & ParsedSetAdminInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.SetRateSetter;
    } & ParsedSetRateSetterInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.SetQuarryCreator;
    } & ParsedSetQuarryCreatorInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.SetShareAllocator;
    } & ParsedSetShareAllocatorInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.DelegateSetAnnualRewards;
    } & ParsedDelegateSetAnnualRewardsInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.DelegateCreateQuarry;
    } & ParsedDelegateCreateQuarryInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.DelegateCreateQuarryV2;
    } & ParsedDelegateCreateQuarryV2Instruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.DelegateSetRewardsShare;
    } & ParsedDelegateSetRewardsShareInstruction<TProgram>)
  | ({
      instructionType: QuarryOperatorInstruction.DelegateSetFamine;
    } & ParsedDelegateSetFamineInstruction<TProgram>);
