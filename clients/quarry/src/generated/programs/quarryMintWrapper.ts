/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "@solana/kit";
import type {
  ParsedAcceptAdminInstruction,
  ParsedMinterUpdateInstruction,
  ParsedNewMinterInstruction,
  ParsedNewMinterV2Instruction,
  ParsedNewWrapperInstruction,
  ParsedNewWrapperV2Instruction,
  ParsedPerformMintInstruction,
  ParsedTransferAdminInstruction,
} from "../instructions/index.js";
import { containsBytes, fixEncoderSize, getBytesEncoder } from "@solana/kit";

export const QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS =
  "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV" as Address<"QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV">;

export enum QuarryMintWrapperAccount {
  MintWrapper = 0,
  Minter = 1,
}

export function identifyQuarryMintWrapperAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): QuarryMintWrapperAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([154, 166, 64, 239, 170, 99, 74, 158]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperAccount.MintWrapper;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([28, 69, 107, 166, 41, 139, 205, 247]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperAccount.Minter;
  }
  throw new Error(
    "The provided account could not be identified as a quarryMintWrapper account.",
  );
}

export enum QuarryMintWrapperInstruction {
  NewWrapper = 0,
  NewWrapperV2 = 1,
  TransferAdmin = 2,
  AcceptAdmin = 3,
  NewMinter = 4,
  NewMinterV2 = 5,
  MinterUpdate = 6,
  PerformMint = 7,
}

export function identifyQuarryMintWrapperInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): QuarryMintWrapperInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 226, 139, 13, 35, 121, 62, 171]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.NewWrapper;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 106, 205, 202, 15, 176, 85, 19]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.NewWrapperV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([42, 242, 66, 106, 228, 10, 111, 156]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.TransferAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 42, 45, 90, 116, 181, 13, 170]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.AcceptAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([14, 95, 216, 55, 122, 115, 37, 250]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.NewMinter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 93, 245, 202, 126, 212, 61, 195]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.NewMinterV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 219, 68, 245, 38, 222, 221, 184]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.MinterUpdate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 41, 142, 248, 38, 22, 106, 23]),
      ),
      0,
    )
  ) {
    return QuarryMintWrapperInstruction.PerformMint;
  }
  throw new Error(
    "The provided instruction could not be identified as a quarryMintWrapper instruction.",
  );
}

export type ParsedQuarryMintWrapperInstruction<
  TProgram extends string = "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV",
> =
  | ({
      instructionType: QuarryMintWrapperInstruction.NewWrapper;
    } & ParsedNewWrapperInstruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.NewWrapperV2;
    } & ParsedNewWrapperV2Instruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.TransferAdmin;
    } & ParsedTransferAdminInstruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.AcceptAdmin;
    } & ParsedAcceptAdminInstruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.NewMinter;
    } & ParsedNewMinterInstruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.NewMinterV2;
    } & ParsedNewMinterV2Instruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.MinterUpdate;
    } & ParsedMinterUpdateInstruction<TProgram>)
  | ({
      instructionType: QuarryMintWrapperInstruction.PerformMint;
    } & ParsedPerformMintInstruction<TProgram>);
