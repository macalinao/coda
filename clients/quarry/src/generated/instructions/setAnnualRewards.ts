/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_ANNUAL_REWARDS_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([135, 125, 92, 160, 100, 101, 141, 84]);

export function getSetAnnualRewardsDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_ANNUAL_REWARDS_DISCRIMINATOR,
  );
}

export type SetAnnualRewardsInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      ...TRemainingAccounts,
    ]
  >;

export interface SetAnnualRewardsInstructionData {
  discriminator: ReadonlyUint8Array;
  newRate: bigint;
}

export interface SetAnnualRewardsInstructionDataArgs {
  newRate: number | bigint;
}

export function getSetAnnualRewardsInstructionDataEncoder(): FixedSizeEncoder<SetAnnualRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newRate", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_ANNUAL_REWARDS_DISCRIMINATOR }),
  );
}

export function getSetAnnualRewardsInstructionDataDecoder(): FixedSizeDecoder<SetAnnualRewardsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newRate", getU64Decoder()],
  ]);
}

export function getSetAnnualRewardsInstructionDataCodec(): FixedSizeCodec<
  SetAnnualRewardsInstructionDataArgs,
  SetAnnualRewardsInstructionData
> {
  return combineCodec(
    getSetAnnualRewardsInstructionDataEncoder(),
    getSetAnnualRewardsInstructionDataDecoder(),
  );
}

export interface SetAnnualRewardsInput<
  TAccountAuthority extends string = string,
  TAccountRewarder extends string = string,
> {
  authority: TransactionSigner<TAccountAuthority>;
  rewarder: Address<TAccountRewarder>;
  newRate: SetAnnualRewardsInstructionDataArgs["newRate"];
}

export function getSetAnnualRewardsInstruction<
  TAccountAuthority extends string,
  TAccountRewarder extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: SetAnnualRewardsInput<TAccountAuthority, TAccountRewarder>,
  config?: { programAddress?: TProgramAddress },
): SetAnnualRewardsInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountRewarder
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewarder),
    ],
    programAddress,
    data: getSetAnnualRewardsInstructionDataEncoder().encode(
      args as SetAnnualRewardsInstructionDataArgs,
    ),
  } as SetAnnualRewardsInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRewarder
  >;

  return instruction;
}

export interface ParsedSetAnnualRewardsInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    rewarder: TAccountMetas[1];
  };
  data: SetAnnualRewardsInstructionData;
}

export function parseSetAnnualRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetAnnualRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      rewarder: getNextAccount(),
    },
    data: getSetAnnualRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
