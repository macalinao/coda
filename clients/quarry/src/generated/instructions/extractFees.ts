/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const EXTRACT_FEES_DISCRIMINATOR = new Uint8Array([
  57, 219, 44, 55, 130, 127, 165, 183,
]);

export function getExtractFeesDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXTRACT_FEES_DISCRIMINATOR,
  );
}

export type ExtractFeesInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountClaimFeeTokenAccount extends string | AccountMeta = string,
  TAccountFeeToTokenAccount extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRewarder extends string
        ? ReadonlyAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountClaimFeeTokenAccount extends string
        ? WritableAccount<TAccountClaimFeeTokenAccount>
        : TAccountClaimFeeTokenAccount,
      TAccountFeeToTokenAccount extends string
        ? WritableAccount<TAccountFeeToTokenAccount>
        : TAccountFeeToTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface ExtractFeesInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface ExtractFeesInstructionDataArgs {}

export function getExtractFeesInstructionDataEncoder(): FixedSizeEncoder<ExtractFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: EXTRACT_FEES_DISCRIMINATOR }),
  );
}

export function getExtractFeesInstructionDataDecoder(): FixedSizeDecoder<ExtractFeesInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getExtractFeesInstructionDataCodec(): FixedSizeCodec<
  ExtractFeesInstructionDataArgs,
  ExtractFeesInstructionData
> {
  return combineCodec(
    getExtractFeesInstructionDataEncoder(),
    getExtractFeesInstructionDataDecoder(),
  );
}

export interface ExtractFeesInput<
  TAccountRewarder extends string = string,
  TAccountClaimFeeTokenAccount extends string = string,
  TAccountFeeToTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> {
  rewarder: Address<TAccountRewarder>;
  claimFeeTokenAccount: Address<TAccountClaimFeeTokenAccount>;
  feeToTokenAccount: Address<TAccountFeeToTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
}

export function getExtractFeesInstruction<
  TAccountRewarder extends string,
  TAccountClaimFeeTokenAccount extends string,
  TAccountFeeToTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: ExtractFeesInput<
    TAccountRewarder,
    TAccountClaimFeeTokenAccount,
    TAccountFeeToTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ExtractFeesInstruction<
  TProgramAddress,
  TAccountRewarder,
  TAccountClaimFeeTokenAccount,
  TAccountFeeToTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewarder: { value: input.rewarder ?? null, isWritable: false },
    claimFeeTokenAccount: {
      value: input.claimFeeTokenAccount ?? null,
      isWritable: true,
    },
    feeToTokenAccount: {
      value: input.feeToTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.claimFeeTokenAccount),
      getAccountMeta(accounts.feeToTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getExtractFeesInstructionDataEncoder().encode({}),
  } as ExtractFeesInstruction<
    TProgramAddress,
    TAccountRewarder,
    TAccountClaimFeeTokenAccount,
    TAccountFeeToTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export interface ParsedExtractFeesInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    rewarder: TAccountMetas[0];
    claimFeeTokenAccount: TAccountMetas[1];
    feeToTokenAccount: TAccountMetas[2];
    tokenProgram: TAccountMetas[3];
  };
  data: ExtractFeesInstructionData;
}

export function parseExtractFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedExtractFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewarder: getNextAccount(),
      claimFeeTokenAccount: getNextAccount(),
      feeToTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getExtractFeesInstructionDataDecoder().decode(instruction.data),
  };
}
