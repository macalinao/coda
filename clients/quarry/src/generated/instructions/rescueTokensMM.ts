/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const RESCUE_TOKENS_M_M_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([222, 81, 199, 209, 182, 62, 62, 186]);

export function getRescueTokensMMDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESCUE_TOKENS_M_M_DISCRIMINATOR,
  );
}

export type RescueTokensMMInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMmOwner extends string | AccountMeta = string,
  TAccountMergePool extends string | AccountMeta = string,
  TAccountMm extends string | AccountMeta = string,
  TAccountMiner extends string | AccountMeta = string,
  TAccountMinerTokenAccount extends string | AccountMeta = string,
  TAccountDestinationTokenAccount extends string | AccountMeta = string,
  TAccountQuarryMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMmOwner extends string
        ? ReadonlySignerAccount<TAccountMmOwner> &
            AccountSignerMeta<TAccountMmOwner>
        : TAccountMmOwner,
      TAccountMergePool extends string
        ? ReadonlyAccount<TAccountMergePool>
        : TAccountMergePool,
      TAccountMm extends string ? ReadonlyAccount<TAccountMm> : TAccountMm,
      TAccountMiner extends string
        ? ReadonlyAccount<TAccountMiner>
        : TAccountMiner,
      TAccountMinerTokenAccount extends string
        ? WritableAccount<TAccountMinerTokenAccount>
        : TAccountMinerTokenAccount,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountQuarryMineProgram extends string
        ? ReadonlyAccount<TAccountQuarryMineProgram>
        : TAccountQuarryMineProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RescueTokensMMInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface RescueTokensMMInstructionDataArgs {}

export function getRescueTokensMMInstructionDataEncoder(): FixedSizeEncoder<RescueTokensMMInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RESCUE_TOKENS_M_M_DISCRIMINATOR }),
  );
}

export function getRescueTokensMMInstructionDataDecoder(): FixedSizeDecoder<RescueTokensMMInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRescueTokensMMInstructionDataCodec(): FixedSizeCodec<
  RescueTokensMMInstructionDataArgs,
  RescueTokensMMInstructionData
> {
  return combineCodec(
    getRescueTokensMMInstructionDataEncoder(),
    getRescueTokensMMInstructionDataDecoder(),
  );
}

export interface RescueTokensMMInput<
  TAccountMmOwner extends string = string,
  TAccountMergePool extends string = string,
  TAccountMm extends string = string,
  TAccountMiner extends string = string,
  TAccountMinerTokenAccount extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountQuarryMineProgram extends string = string,
  TAccountTokenProgram extends string = string,
> {
  mmOwner: TransactionSigner<TAccountMmOwner>;
  mergePool: Address<TAccountMergePool>;
  mm: Address<TAccountMm>;
  miner: Address<TAccountMiner>;
  minerTokenAccount: Address<TAccountMinerTokenAccount>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  quarryMineProgram?: Address<TAccountQuarryMineProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
}

export function getRescueTokensMMInstruction<
  TAccountMmOwner extends string,
  TAccountMergePool extends string,
  TAccountMm extends string,
  TAccountMiner extends string,
  TAccountMinerTokenAccount extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountQuarryMineProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: RescueTokensMMInput<
    TAccountMmOwner,
    TAccountMergePool,
    TAccountMm,
    TAccountMiner,
    TAccountMinerTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountQuarryMineProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RescueTokensMMInstruction<
  TProgramAddress,
  TAccountMmOwner,
  TAccountMergePool,
  TAccountMm,
  TAccountMiner,
  TAccountMinerTokenAccount,
  TAccountDestinationTokenAccount,
  TAccountQuarryMineProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mmOwner: { value: input.mmOwner ?? null, isWritable: false },
    mergePool: { value: input.mergePool ?? null, isWritable: false },
    mm: { value: input.mm ?? null, isWritable: false },
    miner: { value: input.miner ?? null, isWritable: false },
    minerTokenAccount: {
      value: input.minerTokenAccount ?? null,
      isWritable: true,
    },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    quarryMineProgram: {
      value: input.quarryMineProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.quarryMineProgram.value) {
    accounts.quarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mmOwner),
      getAccountMeta(accounts.mergePool),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.minerTokenAccount),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.quarryMineProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getRescueTokensMMInstructionDataEncoder().encode({}),
    programAddress,
  } as RescueTokensMMInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountMergePool,
    TAccountMm,
    TAccountMiner,
    TAccountMinerTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountQuarryMineProgram,
    TAccountTokenProgram
  >);
}

export interface ParsedRescueTokensMMInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mmOwner: TAccountMetas[0];
    mergePool: TAccountMetas[1];
    mm: TAccountMetas[2];
    miner: TAccountMetas[3];
    minerTokenAccount: TAccountMetas[4];
    destinationTokenAccount: TAccountMetas[5];
    quarryMineProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: RescueTokensMMInstructionData;
}

export function parseRescueTokensMMInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRescueTokensMMInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mmOwner: getNextAccount(),
      mergePool: getNextAccount(),
      mm: getNextAccount(),
      miner: getNextAccount(),
      minerTokenAccount: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      quarryMineProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRescueTokensMMInstructionDataDecoder().decode(instruction.data),
  };
}
