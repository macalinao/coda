/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_PAUSE_AUTHORITY_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([127, 70, 214, 12, 172, 8, 89, 114]);

export function getSetPauseAuthorityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PAUSE_AUTHORITY_DISCRIMINATOR,
  );
}

export type SetPauseAuthorityInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountAuthAuthority extends string | AccountMeta = string,
  TAccountAuthRewarder extends string | AccountMeta = string,
  TAccountNewPauseAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthAuthority> &
            AccountSignerMeta<TAccountAuthAuthority>
        : TAccountAuthAuthority,
      TAccountAuthRewarder extends string
        ? WritableAccount<TAccountAuthRewarder>
        : TAccountAuthRewarder,
      TAccountNewPauseAuthority extends string
        ? ReadonlyAccount<TAccountNewPauseAuthority>
        : TAccountNewPauseAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface SetPauseAuthorityInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface SetPauseAuthorityInstructionDataArgs {}

export function getSetPauseAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetPauseAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SET_PAUSE_AUTHORITY_DISCRIMINATOR }),
  );
}

export function getSetPauseAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetPauseAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetPauseAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetPauseAuthorityInstructionDataArgs,
  SetPauseAuthorityInstructionData
> {
  return combineCodec(
    getSetPauseAuthorityInstructionDataEncoder(),
    getSetPauseAuthorityInstructionDataDecoder(),
  );
}

export interface SetPauseAuthorityInput<
  TAccountAuthAuthority extends string = string,
  TAccountAuthRewarder extends string = string,
  TAccountNewPauseAuthority extends string = string,
> {
  authAuthority: TransactionSigner<TAccountAuthAuthority>;
  authRewarder: Address<TAccountAuthRewarder>;
  newPauseAuthority: Address<TAccountNewPauseAuthority>;
}

export function getSetPauseAuthorityInstruction<
  TAccountAuthAuthority extends string,
  TAccountAuthRewarder extends string,
  TAccountNewPauseAuthority extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: SetPauseAuthorityInput<
    TAccountAuthAuthority,
    TAccountAuthRewarder,
    TAccountNewPauseAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetPauseAuthorityInstruction<
  TProgramAddress,
  TAccountAuthAuthority,
  TAccountAuthRewarder,
  TAccountNewPauseAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authAuthority: { value: input.authAuthority ?? null, isWritable: false },
    authRewarder: { value: input.authRewarder ?? null, isWritable: true },
    newPauseAuthority: {
      value: input.newPauseAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authAuthority),
      getAccountMeta(accounts.authRewarder),
      getAccountMeta(accounts.newPauseAuthority),
    ],
    programAddress,
    data: getSetPauseAuthorityInstructionDataEncoder().encode({}),
  } as SetPauseAuthorityInstruction<
    TProgramAddress,
    TAccountAuthAuthority,
    TAccountAuthRewarder,
    TAccountNewPauseAuthority
  >;

  return instruction;
}

export interface ParsedSetPauseAuthorityInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    authAuthority: TAccountMetas[0];
    authRewarder: TAccountMetas[1];
    newPauseAuthority: TAccountMetas[2];
  };
  data: SetPauseAuthorityInstructionData;
}

export function parseSetPauseAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetPauseAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authAuthority: getNextAccount(),
      authRewarder: getNextAccount(),
      newPauseAuthority: getNextAccount(),
    },
    data: getSetPauseAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
