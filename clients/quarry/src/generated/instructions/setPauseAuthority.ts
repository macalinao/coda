/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  
  
  combineCodec,
  
  
  
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  
  
  
  
  
  
  
  transformEncoder
  
} from "@solana/kit";
import type {AccountMeta, AccountSignerMeta, Address, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, Instruction, InstructionWithAccounts, InstructionWithData, ReadonlyAccount, ReadonlySignerAccount, ReadonlyUint8Array, TransactionSigner, WritableAccount} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory
  
} from "../shared/index.js";
import type {ResolvedAccount} from "../shared/index.js";

export const SET_PAUSE_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  127, 70, 214, 12, 172, 8, 89, 114,
]);

export function getSetPauseAuthorityDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PAUSE_AUTHORITY_DISCRIMINATOR,
  );
}

export type SetPauseAuthorityInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountNewPauseAuthority extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountNewPauseAuthority extends string
        ? ReadonlyAccount<TAccountNewPauseAuthority>
        : TAccountNewPauseAuthority,
      ...TRemainingAccounts,
    ]
  >;

export interface SetPauseAuthorityInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface SetPauseAuthorityInstructionDataArgs {}

export function getSetPauseAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetPauseAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SET_PAUSE_AUTHORITY_DISCRIMINATOR }),
  );
}

export function getSetPauseAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetPauseAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetPauseAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetPauseAuthorityInstructionDataArgs,
  SetPauseAuthorityInstructionData
> {
  return combineCodec(
    getSetPauseAuthorityInstructionDataEncoder(),
    getSetPauseAuthorityInstructionDataDecoder(),
  );
}

export interface SetPauseAuthorityInput<
  TAccountAuthority extends string = string,
  TAccountRewarder extends string = string,
  TAccountNewPauseAuthority extends string = string,
> {
  authority: TransactionSigner<TAccountAuthority>;
  rewarder: Address<TAccountRewarder>;
  newPauseAuthority: Address<TAccountNewPauseAuthority>;
}

export function getSetPauseAuthorityInstruction<
  TAccountAuthority extends string,
  TAccountRewarder extends string,
  TAccountNewPauseAuthority extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: SetPauseAuthorityInput<
    TAccountAuthority,
    TAccountRewarder,
    TAccountNewPauseAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetPauseAuthorityInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountRewarder,
  TAccountNewPauseAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    newPauseAuthority: {
      value: input.newPauseAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.newPauseAuthority),
    ],
    programAddress,
    data: getSetPauseAuthorityInstructionDataEncoder().encode({}),
  } as SetPauseAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRewarder,
    TAccountNewPauseAuthority
  >;

  return instruction;
}

export interface ParsedSetPauseAuthorityInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    rewarder: TAccountMetas[1];
    newPauseAuthority: TAccountMetas[2];
  };
  data: SetPauseAuthorityInstructionData;
}

export function parseSetPauseAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetPauseAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      rewarder: getNextAccount(),
      newPauseAuthority: getNextAccount(),
    },
    data: getSetPauseAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
