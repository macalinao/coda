/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const CREATE_OPERATOR_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [145, 40, 238, 75, 181, 252, 59, 11],
);

export function getCreateOperatorDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_OPERATOR_DISCRIMINATOR,
  );
}

export type CreateOperatorInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountBase extends string | AccountMeta = string,
  TAccountOperator extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountAdmin extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountQuarryMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & AccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountOperator extends string
        ? WritableAccount<TAccountOperator>
        : TAccountOperator,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountAdmin extends string
        ? ReadonlyAccount<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountQuarryMineProgram extends string
        ? ReadonlyAccount<TAccountQuarryMineProgram>
        : TAccountQuarryMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateOperatorInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
}

export interface CreateOperatorInstructionDataArgs {
  bump: number;
}

export function getCreateOperatorInstructionDataEncoder(): FixedSizeEncoder<CreateOperatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_OPERATOR_DISCRIMINATOR }),
  );
}

export function getCreateOperatorInstructionDataDecoder(): FixedSizeDecoder<CreateOperatorInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
  ]);
}

export function getCreateOperatorInstructionDataCodec(): FixedSizeCodec<
  CreateOperatorInstructionDataArgs,
  CreateOperatorInstructionData
> {
  return combineCodec(
    getCreateOperatorInstructionDataEncoder(),
    getCreateOperatorInstructionDataDecoder(),
  );
}

export interface CreateOperatorAsyncInput<
  TAccountBase extends string = string,
  TAccountOperator extends string = string,
  TAccountRewarder extends string = string,
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountQuarryMineProgram extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  operator?: Address<TAccountOperator>;
  rewarder: Address<TAccountRewarder>;
  admin: Address<TAccountAdmin>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  quarryMineProgram?: Address<TAccountQuarryMineProgram>;
  bump: CreateOperatorInstructionDataArgs["bump"];
}

export async function getCreateOperatorInstructionAsync<
  TAccountBase extends string,
  TAccountOperator extends string,
  TAccountRewarder extends string,
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountQuarryMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: CreateOperatorAsyncInput<
    TAccountBase,
    TAccountOperator,
    TAccountRewarder,
    TAccountAdmin,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountQuarryMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  CreateOperatorInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountOperator,
    TAccountRewarder,
    TAccountAdmin,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountQuarryMineProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: true },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    quarryMineProgram: {
      value: input.quarryMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.operator.value) {
    accounts.operator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([34, 79, 112, 101, 114, 97, 116, 111, 114, 34]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.base.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.quarryMineProgram.value) {
    accounts.quarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.quarryMineProgram),
    ],
    data: getCreateOperatorInstructionDataEncoder().encode(
      args as CreateOperatorInstructionDataArgs,
    ),
    programAddress,
  } as CreateOperatorInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountOperator,
    TAccountRewarder,
    TAccountAdmin,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountQuarryMineProgram
  >);
}

export interface CreateOperatorInput<
  TAccountBase extends string = string,
  TAccountOperator extends string = string,
  TAccountRewarder extends string = string,
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountQuarryMineProgram extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  operator: Address<TAccountOperator>;
  rewarder: Address<TAccountRewarder>;
  admin: Address<TAccountAdmin>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  quarryMineProgram?: Address<TAccountQuarryMineProgram>;
  bump: CreateOperatorInstructionDataArgs["bump"];
}

export function getCreateOperatorInstruction<
  TAccountBase extends string,
  TAccountOperator extends string,
  TAccountRewarder extends string,
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountQuarryMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: CreateOperatorInput<
    TAccountBase,
    TAccountOperator,
    TAccountRewarder,
    TAccountAdmin,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountQuarryMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CreateOperatorInstruction<
  TProgramAddress,
  TAccountBase,
  TAccountOperator,
  TAccountRewarder,
  TAccountAdmin,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountQuarryMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: true },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    quarryMineProgram: {
      value: input.quarryMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.quarryMineProgram.value) {
    accounts.quarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.quarryMineProgram),
    ],
    data: getCreateOperatorInstructionDataEncoder().encode(
      args as CreateOperatorInstructionDataArgs,
    ),
    programAddress,
  } as CreateOperatorInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountOperator,
    TAccountRewarder,
    TAccountAdmin,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountQuarryMineProgram
  >);
}

export interface ParsedCreateOperatorInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    base: TAccountMetas[0];
    operator: TAccountMetas[1];
    rewarder: TAccountMetas[2];
    admin: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    quarryMineProgram: TAccountMetas[6];
  };
  data: CreateOperatorInstructionData;
}

export function parseCreateOperatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateOperatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      operator: getNextAccount(),
      rewarder: getNextAccount(),
      admin: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      quarryMineProgram: getNextAccount(),
    },
    data: getCreateOperatorInstructionDataDecoder().decode(instruction.data),
  };
}
