/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const NEW_REWARDER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  1, 115, 16, 244, 109, 74, 67, 209,
]);

export function getNewRewarderDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NEW_REWARDER_DISCRIMINATOR,
  );
}

export type NewRewarderInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountBase extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountInitialAuthority extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TAccountUnusedAccount extends string | AccountMeta = string,
  TAccountMintWrapper extends string | AccountMeta = string,
  TAccountRewardsTokenMint extends string | AccountMeta = string,
  TAccountClaimFeeTokenAccount extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & AccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountInitialAuthority extends string
        ? ReadonlyAccount<TAccountInitialAuthority>
        : TAccountInitialAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountUnusedAccount extends string
        ? ReadonlyAccount<TAccountUnusedAccount>
        : TAccountUnusedAccount,
      TAccountMintWrapper extends string
        ? ReadonlyAccount<TAccountMintWrapper>
        : TAccountMintWrapper,
      TAccountRewardsTokenMint extends string
        ? ReadonlyAccount<TAccountRewardsTokenMint>
        : TAccountRewardsTokenMint,
      TAccountClaimFeeTokenAccount extends string
        ? ReadonlyAccount<TAccountClaimFeeTokenAccount>
        : TAccountClaimFeeTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export interface NewRewarderInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
}

export interface NewRewarderInstructionDataArgs {
  bump: number;
}

export function getNewRewarderInstructionDataEncoder(): FixedSizeEncoder<NewRewarderInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NEW_REWARDER_DISCRIMINATOR }),
  );
}

export function getNewRewarderInstructionDataDecoder(): FixedSizeDecoder<NewRewarderInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
  ]);
}

export function getNewRewarderInstructionDataCodec(): FixedSizeCodec<
  NewRewarderInstructionDataArgs,
  NewRewarderInstructionData
> {
  return combineCodec(
    getNewRewarderInstructionDataEncoder(),
    getNewRewarderInstructionDataDecoder(),
  );
}

export interface NewRewarderAsyncInput<
  TAccountBase extends string = string,
  TAccountRewarder extends string = string,
  TAccountInitialAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountUnusedAccount extends string = string,
  TAccountMintWrapper extends string = string,
  TAccountRewardsTokenMint extends string = string,
  TAccountClaimFeeTokenAccount extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  rewarder?: Address<TAccountRewarder>;
  initialAuthority: Address<TAccountInitialAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  unusedAccount: Address<TAccountUnusedAccount>;
  mintWrapper: Address<TAccountMintWrapper>;
  rewardsTokenMint: Address<TAccountRewardsTokenMint>;
  claimFeeTokenAccount: Address<TAccountClaimFeeTokenAccount>;
  bump: NewRewarderInstructionDataArgs["bump"];
}

export async function getNewRewarderInstructionAsync<
  TAccountBase extends string,
  TAccountRewarder extends string,
  TAccountInitialAuthority extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountUnusedAccount extends string,
  TAccountMintWrapper extends string,
  TAccountRewardsTokenMint extends string,
  TAccountClaimFeeTokenAccount extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: NewRewarderAsyncInput<
    TAccountBase,
    TAccountRewarder,
    TAccountInitialAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountUnusedAccount,
    TAccountMintWrapper,
    TAccountRewardsTokenMint,
    TAccountClaimFeeTokenAccount
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  NewRewarderInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountRewarder,
    TAccountInitialAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountUnusedAccount,
    TAccountMintWrapper,
    TAccountRewardsTokenMint,
    TAccountClaimFeeTokenAccount
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    initialAuthority: {
      value: input.initialAuthority ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    unusedAccount: { value: input.unusedAccount ?? null, isWritable: false },
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: false },
    rewardsTokenMint: {
      value: input.rewardsTokenMint ?? null,
      isWritable: false,
    },
    claimFeeTokenAccount: {
      value: input.claimFeeTokenAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rewarder.value) {
    accounts.rewarder.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([34, 82, 101, 119, 97, 114, 100, 101, 114, 34]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.base.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.initialAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.unusedAccount),
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.rewardsTokenMint),
      getAccountMeta(accounts.claimFeeTokenAccount),
    ],
    programAddress,
    data: getNewRewarderInstructionDataEncoder().encode(
      args as NewRewarderInstructionDataArgs,
    ),
  } as NewRewarderInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountRewarder,
    TAccountInitialAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountUnusedAccount,
    TAccountMintWrapper,
    TAccountRewardsTokenMint,
    TAccountClaimFeeTokenAccount
  >;

  return instruction;
}

export interface NewRewarderInput<
  TAccountBase extends string = string,
  TAccountRewarder extends string = string,
  TAccountInitialAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountUnusedAccount extends string = string,
  TAccountMintWrapper extends string = string,
  TAccountRewardsTokenMint extends string = string,
  TAccountClaimFeeTokenAccount extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  rewarder: Address<TAccountRewarder>;
  initialAuthority: Address<TAccountInitialAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  unusedAccount: Address<TAccountUnusedAccount>;
  mintWrapper: Address<TAccountMintWrapper>;
  rewardsTokenMint: Address<TAccountRewardsTokenMint>;
  claimFeeTokenAccount: Address<TAccountClaimFeeTokenAccount>;
  bump: NewRewarderInstructionDataArgs["bump"];
}

export function getNewRewarderInstruction<
  TAccountBase extends string,
  TAccountRewarder extends string,
  TAccountInitialAuthority extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountUnusedAccount extends string,
  TAccountMintWrapper extends string,
  TAccountRewardsTokenMint extends string,
  TAccountClaimFeeTokenAccount extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: NewRewarderInput<
    TAccountBase,
    TAccountRewarder,
    TAccountInitialAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountUnusedAccount,
    TAccountMintWrapper,
    TAccountRewardsTokenMint,
    TAccountClaimFeeTokenAccount
  >,
  config?: { programAddress?: TProgramAddress },
): NewRewarderInstruction<
  TProgramAddress,
  TAccountBase,
  TAccountRewarder,
  TAccountInitialAuthority,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountUnusedAccount,
  TAccountMintWrapper,
  TAccountRewardsTokenMint,
  TAccountClaimFeeTokenAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    initialAuthority: {
      value: input.initialAuthority ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    unusedAccount: { value: input.unusedAccount ?? null, isWritable: false },
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: false },
    rewardsTokenMint: {
      value: input.rewardsTokenMint ?? null,
      isWritable: false,
    },
    claimFeeTokenAccount: {
      value: input.claimFeeTokenAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.initialAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.unusedAccount),
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.rewardsTokenMint),
      getAccountMeta(accounts.claimFeeTokenAccount),
    ],
    programAddress,
    data: getNewRewarderInstructionDataEncoder().encode(
      args as NewRewarderInstructionDataArgs,
    ),
  } as NewRewarderInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountRewarder,
    TAccountInitialAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountUnusedAccount,
    TAccountMintWrapper,
    TAccountRewardsTokenMint,
    TAccountClaimFeeTokenAccount
  >;

  return instruction;
}

export interface ParsedNewRewarderInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    base: TAccountMetas[0];
    rewarder: TAccountMetas[1];
    initialAuthority: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    unusedAccount: TAccountMetas[5];
    mintWrapper: TAccountMetas[6];
    rewardsTokenMint: TAccountMetas[7];
    claimFeeTokenAccount: TAccountMetas[8];
  };
  data: NewRewarderInstructionData;
}

export function parseNewRewarderInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedNewRewarderInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      rewarder: getNextAccount(),
      initialAuthority: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      unusedAccount: getNextAccount(),
      mintWrapper: getNextAccount(),
      rewardsTokenMint: getNextAccount(),
      claimFeeTokenAccount: getNextAccount(),
    },
    data: getNewRewarderInstructionDataDecoder().decode(instruction.data),
  };
}
