/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  
  
  combineCodec,
  
  
  
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  
  
  
  
  
  
  
  transformEncoder
  
} from "@solana/kit";
import type {AccountMeta, AccountSignerMeta, Address, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, Instruction, InstructionWithAccounts, InstructionWithData, ReadonlyAccount, ReadonlySignerAccount, ReadonlyUint8Array, TransactionSigner, WritableAccount} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory
  
} from "../shared/index.js";
import type {ResolvedAccount} from "../shared/index.js";

export const STAKE_PRIMARY_MINER_DISCRIMINATOR = new Uint8Array([
  72, 59, 23, 242, 117, 178, 129, 138,
]);

export function getStakePrimaryMinerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STAKE_PRIMARY_MINER_DISCRIMINATOR,
  );
}

export type StakePrimaryMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMmOwner extends string | AccountMeta = string,
  TAccountMmPrimaryTokenAccount extends string | AccountMeta = string,
  TAccountPool extends string | AccountMeta = string,
  TAccountMm extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountQuarry extends string | AccountMeta = string,
  TAccountMiner extends string | AccountMeta = string,
  TAccountMinerVault extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMmOwner extends string
        ? ReadonlySignerAccount<TAccountMmOwner> &
            AccountSignerMeta<TAccountMmOwner>
        : TAccountMmOwner,
      TAccountMmPrimaryTokenAccount extends string
        ? WritableAccount<TAccountMmPrimaryTokenAccount>
        : TAccountMmPrimaryTokenAccount,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountMm extends string ? WritableAccount<TAccountMm> : TAccountMm,
      TAccountRewarder extends string
        ? ReadonlyAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountMiner extends string
        ? WritableAccount<TAccountMiner>
        : TAccountMiner,
      TAccountMinerVault extends string
        ? WritableAccount<TAccountMinerVault>
        : TAccountMinerVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMineProgram extends string
        ? ReadonlyAccount<TAccountMineProgram>
        : TAccountMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface StakePrimaryMinerInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface StakePrimaryMinerInstructionDataArgs {}

export function getStakePrimaryMinerInstructionDataEncoder(): FixedSizeEncoder<StakePrimaryMinerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: STAKE_PRIMARY_MINER_DISCRIMINATOR }),
  );
}

export function getStakePrimaryMinerInstructionDataDecoder(): FixedSizeDecoder<StakePrimaryMinerInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getStakePrimaryMinerInstructionDataCodec(): FixedSizeCodec<
  StakePrimaryMinerInstructionDataArgs,
  StakePrimaryMinerInstructionData
> {
  return combineCodec(
    getStakePrimaryMinerInstructionDataEncoder(),
    getStakePrimaryMinerInstructionDataDecoder(),
  );
}

export interface StakePrimaryMinerInput<
  TAccountMmOwner extends string = string,
  TAccountMmPrimaryTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountMm extends string = string,
  TAccountRewarder extends string = string,
  TAccountQuarry extends string = string,
  TAccountMiner extends string = string,
  TAccountMinerVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMineProgram extends string = string,
> {
  mmOwner: TransactionSigner<TAccountMmOwner>;
  mmPrimaryTokenAccount: Address<TAccountMmPrimaryTokenAccount>;
  pool: Address<TAccountPool>;
  mm: Address<TAccountMm>;
  rewarder: Address<TAccountRewarder>;
  quarry: Address<TAccountQuarry>;
  miner: Address<TAccountMiner>;
  minerVault: Address<TAccountMinerVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mineProgram?: Address<TAccountMineProgram>;
}

export function getStakePrimaryMinerInstruction<
  TAccountMmOwner extends string,
  TAccountMmPrimaryTokenAccount extends string,
  TAccountPool extends string,
  TAccountMm extends string,
  TAccountRewarder extends string,
  TAccountQuarry extends string,
  TAccountMiner extends string,
  TAccountMinerVault extends string,
  TAccountTokenProgram extends string,
  TAccountMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: StakePrimaryMinerInput<
    TAccountMmOwner,
    TAccountMmPrimaryTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): StakePrimaryMinerInstruction<
  TProgramAddress,
  TAccountMmOwner,
  TAccountMmPrimaryTokenAccount,
  TAccountPool,
  TAccountMm,
  TAccountRewarder,
  TAccountQuarry,
  TAccountMiner,
  TAccountMinerVault,
  TAccountTokenProgram,
  TAccountMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mmOwner: { value: input.mmOwner ?? null, isWritable: false },
    mmPrimaryTokenAccount: {
      value: input.mmPrimaryTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    mm: { value: input.mm ?? null, isWritable: true },
    rewarder: { value: input.rewarder ?? null, isWritable: false },
    quarry: { value: input.quarry ?? null, isWritable: true },
    miner: { value: input.miner ?? null, isWritable: true },
    minerVault: { value: input.minerVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mineProgram: { value: input.mineProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.mineProgram.value) {
    accounts.mineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mmOwner),
      getAccountMeta(accounts.mmPrimaryTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.minerVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mineProgram),
    ],
    programAddress,
    data: getStakePrimaryMinerInstructionDataEncoder().encode({}),
  } as StakePrimaryMinerInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountMmPrimaryTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >;

  return instruction;
}

export interface ParsedStakePrimaryMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mmOwner: TAccountMetas[0];
    mmPrimaryTokenAccount: TAccountMetas[1];
    pool: TAccountMetas[2];
    mm: TAccountMetas[3];
    rewarder: TAccountMetas[4];
    quarry: TAccountMetas[5];
    miner: TAccountMetas[6];
    minerVault: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    mineProgram: TAccountMetas[9];
  };
  data: StakePrimaryMinerInstructionData;
}

export function parseStakePrimaryMinerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedStakePrimaryMinerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mmOwner: getNextAccount(),
      mmPrimaryTokenAccount: getNextAccount(),
      pool: getNextAccount(),
      mm: getNextAccount(),
      rewarder: getNextAccount(),
      quarry: getNextAccount(),
      miner: getNextAccount(),
      minerVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      mineProgram: getNextAccount(),
    },
    data: getStakePrimaryMinerInstructionDataDecoder().decode(instruction.data),
  };
}
