/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const PERFORM_MINT_DISCRIMINATOR = new Uint8Array([
  8, 41, 142, 248, 38, 22, 106, 23,
]);

export function getPerformMintDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PERFORM_MINT_DISCRIMINATOR,
  );
}

export type PerformMintInstruction<
  TProgram extends string = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
  TAccountMintWrapper extends string | AccountMeta = string,
  TAccountMinterAuthority extends string | AccountMeta = string,
  TAccountTokenMint extends string | AccountMeta = string,
  TAccountDestination extends string | AccountMeta = string,
  TAccountMinter extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMintWrapper extends string
        ? WritableAccount<TAccountMintWrapper>
        : TAccountMintWrapper,
      TAccountMinterAuthority extends string
        ? ReadonlySignerAccount<TAccountMinterAuthority> &
            AccountSignerMeta<TAccountMinterAuthority>
        : TAccountMinterAuthority,
      TAccountTokenMint extends string
        ? WritableAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountMinter extends string
        ? WritableAccount<TAccountMinter>
        : TAccountMinter,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface PerformMintInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface PerformMintInstructionDataArgs {
  amount: number | bigint;
}

export function getPerformMintInstructionDataEncoder(): FixedSizeEncoder<PerformMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PERFORM_MINT_DISCRIMINATOR }),
  );
}

export function getPerformMintInstructionDataDecoder(): FixedSizeDecoder<PerformMintInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getPerformMintInstructionDataCodec(): FixedSizeCodec<
  PerformMintInstructionDataArgs,
  PerformMintInstructionData
> {
  return combineCodec(
    getPerformMintInstructionDataEncoder(),
    getPerformMintInstructionDataDecoder(),
  );
}

export interface PerformMintInput<
  TAccountMintWrapper extends string = string,
  TAccountMinterAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountDestination extends string = string,
  TAccountMinter extends string = string,
  TAccountTokenProgram extends string = string,
> {
  mintWrapper: Address<TAccountMintWrapper>;
  minterAuthority: TransactionSigner<TAccountMinterAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  destination: Address<TAccountDestination>;
  minter: Address<TAccountMinter>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: PerformMintInstructionDataArgs["amount"];
}

export function getPerformMintInstruction<
  TAccountMintWrapper extends string,
  TAccountMinterAuthority extends string,
  TAccountTokenMint extends string,
  TAccountDestination extends string,
  TAccountMinter extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
>(
  input: PerformMintInput<
    TAccountMintWrapper,
    TAccountMinterAuthority,
    TAccountTokenMint,
    TAccountDestination,
    TAccountMinter,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): PerformMintInstruction<
  TProgramAddress,
  TAccountMintWrapper,
  TAccountMinterAuthority,
  TAccountTokenMint,
  TAccountDestination,
  TAccountMinter,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: true },
    minterAuthority: {
      value: input.minterAuthority ?? null,
      isWritable: false,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    minter: { value: input.minter ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.minterAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.minter),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getPerformMintInstructionDataEncoder().encode(
      args as PerformMintInstructionDataArgs,
    ),
  } as PerformMintInstruction<
    TProgramAddress,
    TAccountMintWrapper,
    TAccountMinterAuthority,
    TAccountTokenMint,
    TAccountDestination,
    TAccountMinter,
    TAccountTokenProgram
  >;

  return instruction;
}

export interface ParsedPerformMintInstruction<
  TProgram extends string = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mintWrapper: TAccountMetas[0];
    minterAuthority: TAccountMetas[1];
    tokenMint: TAccountMetas[2];
    destination: TAccountMetas[3];
    minter: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: PerformMintInstructionData;
}

export function parsePerformMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedPerformMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintWrapper: getNextAccount(),
      minterAuthority: getNextAccount(),
      tokenMint: getNextAccount(),
      destination: getNextAccount(),
      minter: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getPerformMintInstructionDataDecoder().decode(instruction.data),
  };
}
