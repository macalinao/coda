/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_REWARDS_SHARE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([186, 168, 34, 15, 178, 135, 189, 129]);

export function getSetRewardsShareDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_REWARDS_SHARE_DISCRIMINATOR,
  );
}

export type SetRewardsShareInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountQuarry extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      ...TRemainingAccounts,
    ]
  >;

export interface SetRewardsShareInstructionData {
  discriminator: ReadonlyUint8Array;
  newShare: bigint;
}

export interface SetRewardsShareInstructionDataArgs {
  newShare: number | bigint;
}

export function getSetRewardsShareInstructionDataEncoder(): FixedSizeEncoder<SetRewardsShareInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newShare", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_REWARDS_SHARE_DISCRIMINATOR }),
  );
}

export function getSetRewardsShareInstructionDataDecoder(): FixedSizeDecoder<SetRewardsShareInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newShare", getU64Decoder()],
  ]);
}

export function getSetRewardsShareInstructionDataCodec(): FixedSizeCodec<
  SetRewardsShareInstructionDataArgs,
  SetRewardsShareInstructionData
> {
  return combineCodec(
    getSetRewardsShareInstructionDataEncoder(),
    getSetRewardsShareInstructionDataDecoder(),
  );
}

export interface SetRewardsShareInput<
  TAccountAuthority extends string = string,
  TAccountRewarder extends string = string,
  TAccountQuarry extends string = string,
> {
  authority: TransactionSigner<TAccountAuthority>;
  rewarder: Address<TAccountRewarder>;
  quarry: Address<TAccountQuarry>;
  newShare: SetRewardsShareInstructionDataArgs["newShare"];
}

export function getSetRewardsShareInstruction<
  TAccountAuthority extends string,
  TAccountRewarder extends string,
  TAccountQuarry extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: SetRewardsShareInput<
    TAccountAuthority,
    TAccountRewarder,
    TAccountQuarry
  >,
  config?: { programAddress?: TProgramAddress },
): SetRewardsShareInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountRewarder,
  TAccountQuarry
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    quarry: { value: input.quarry ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.quarry),
    ],
    programAddress,
    data: getSetRewardsShareInstructionDataEncoder().encode(
      args as SetRewardsShareInstructionDataArgs,
    ),
  } as SetRewardsShareInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountRewarder,
    TAccountQuarry
  >;

  return instruction;
}

export interface ParsedSetRewardsShareInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    rewarder: TAccountMetas[1];
    quarry: TAccountMetas[2];
  };
  data: SetRewardsShareInstructionData;
}

export function parseSetRewardsShareInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetRewardsShareInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      rewarder: getNextAccount(),
      quarry: getNextAccount(),
    },
    data: getSetRewardsShareInstructionDataDecoder().decode(instruction.data),
  };
}
