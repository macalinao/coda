/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_REDEEMER_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const CREATE_REDEEMER_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array(
  [137, 228, 81, 63, 209, 33, 131, 195],
);

export function getCreateRedeemerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_REDEEMER_DISCRIMINATOR,
  );
}

export type CreateRedeemerInstruction<
  TProgram extends string = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
  TAccountRedeemer extends string | AccountMeta = string,
  TAccountIouMint extends string | AccountMeta = string,
  TAccountRedemptionMint extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRedeemer extends string
        ? WritableAccount<TAccountRedeemer>
        : TAccountRedeemer,
      TAccountIouMint extends string
        ? ReadonlyAccount<TAccountIouMint>
        : TAccountIouMint,
      TAccountRedemptionMint extends string
        ? ReadonlyAccount<TAccountRedemptionMint>
        : TAccountRedemptionMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateRedeemerInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
}

export interface CreateRedeemerInstructionDataArgs {
  bump: number;
}

export function getCreateRedeemerInstructionDataEncoder(): FixedSizeEncoder<CreateRedeemerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_REDEEMER_DISCRIMINATOR }),
  );
}

export function getCreateRedeemerInstructionDataDecoder(): FixedSizeDecoder<CreateRedeemerInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
  ]);
}

export function getCreateRedeemerInstructionDataCodec(): FixedSizeCodec<
  CreateRedeemerInstructionDataArgs,
  CreateRedeemerInstructionData
> {
  return combineCodec(
    getCreateRedeemerInstructionDataEncoder(),
    getCreateRedeemerInstructionDataDecoder(),
  );
}

export interface CreateRedeemerAsyncInput<
  TAccountRedeemer extends string = string,
  TAccountIouMint extends string = string,
  TAccountRedemptionMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  redeemer?: Address<TAccountRedeemer>;
  iouMint: Address<TAccountIouMint>;
  redemptionMint: Address<TAccountRedemptionMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: CreateRedeemerInstructionDataArgs["bump"];
}

export async function getCreateRedeemerInstructionAsync<
  TAccountRedeemer extends string,
  TAccountIouMint extends string,
  TAccountRedemptionMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
>(
  input: CreateRedeemerAsyncInput<
    TAccountRedeemer,
    TAccountIouMint,
    TAccountRedemptionMint,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  CreateRedeemerInstruction<
    TProgramAddress,
    TAccountRedeemer,
    TAccountIouMint,
    TAccountRedemptionMint,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_REDEEMER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    redeemer: { value: input.redeemer ?? null, isWritable: true },
    iouMint: { value: input.iouMint ?? null, isWritable: false },
    redemptionMint: { value: input.redemptionMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.redeemer.value) {
    accounts.redeemer.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([34, 82, 101, 100, 101, 101, 109, 101, 114, 34]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.iouMint.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.redemptionMint.value),
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.redeemer),
      getAccountMeta(accounts.iouMint),
      getAccountMeta(accounts.redemptionMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateRedeemerInstructionDataEncoder().encode(
      args as CreateRedeemerInstructionDataArgs,
    ),
    programAddress,
  } as CreateRedeemerInstruction<
    TProgramAddress,
    TAccountRedeemer,
    TAccountIouMint,
    TAccountRedemptionMint,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface CreateRedeemerInput<
  TAccountRedeemer extends string = string,
  TAccountIouMint extends string = string,
  TAccountRedemptionMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  redeemer: Address<TAccountRedeemer>;
  iouMint: Address<TAccountIouMint>;
  redemptionMint: Address<TAccountRedemptionMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: CreateRedeemerInstructionDataArgs["bump"];
}

export function getCreateRedeemerInstruction<
  TAccountRedeemer extends string,
  TAccountIouMint extends string,
  TAccountRedemptionMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
>(
  input: CreateRedeemerInput<
    TAccountRedeemer,
    TAccountIouMint,
    TAccountRedemptionMint,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CreateRedeemerInstruction<
  TProgramAddress,
  TAccountRedeemer,
  TAccountIouMint,
  TAccountRedemptionMint,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_REDEEMER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    redeemer: { value: input.redeemer ?? null, isWritable: true },
    iouMint: { value: input.iouMint ?? null, isWritable: false },
    redemptionMint: { value: input.redemptionMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.redeemer),
      getAccountMeta(accounts.iouMint),
      getAccountMeta(accounts.redemptionMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateRedeemerInstructionDataEncoder().encode(
      args as CreateRedeemerInstructionDataArgs,
    ),
    programAddress,
  } as CreateRedeemerInstruction<
    TProgramAddress,
    TAccountRedeemer,
    TAccountIouMint,
    TAccountRedemptionMint,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export interface ParsedCreateRedeemerInstruction<
  TProgram extends string = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    redeemer: TAccountMetas[0];
    iouMint: TAccountMetas[1];
    redemptionMint: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateRedeemerInstructionData;
}

export function parseCreateRedeemerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateRedeemerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      redeemer: getNextAccount(),
      iouMint: getNextAccount(),
      redemptionMint: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateRedeemerInstructionDataDecoder().decode(instruction.data),
  };
}
