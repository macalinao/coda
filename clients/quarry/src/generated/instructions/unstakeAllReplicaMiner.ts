/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UNSTAKE_ALL_REPLICA_MINER_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([250, 4, 3, 209, 154, 125, 71, 168]);

export function getUnstakeAllReplicaMinerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UNSTAKE_ALL_REPLICA_MINER_DISCRIMINATOR,
  );
}

export type UnstakeAllReplicaMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMmOwner extends string | AccountMeta = string,
  TAccountReplicaMint extends string | AccountMeta = string,
  TAccountReplicaMintTokenAccount extends string | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakePool extends string | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakeMm extends string | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakeRewarder extends
    | string
    | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakeQuarry extends
    | string
    | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakeMiner extends
    | string
    | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakeMinerVault extends
    | string
    | AccountMeta = string,
  TAccountUnstakeAllReplicaMinerStakeTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountUnstakeAllReplicaMinerStakeMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMmOwner extends string
        ? ReadonlySignerAccount<TAccountMmOwner> &
            AccountSignerMeta<TAccountMmOwner>
        : TAccountMmOwner,
      TAccountReplicaMint extends string
        ? WritableAccount<TAccountReplicaMint>
        : TAccountReplicaMint,
      TAccountReplicaMintTokenAccount extends string
        ? WritableAccount<TAccountReplicaMintTokenAccount>
        : TAccountReplicaMintTokenAccount,
      TAccountUnstakeAllReplicaMinerStakePool extends string
        ? WritableAccount<TAccountUnstakeAllReplicaMinerStakePool>
        : TAccountUnstakeAllReplicaMinerStakePool,
      TAccountUnstakeAllReplicaMinerStakeMm extends string
        ? WritableAccount<TAccountUnstakeAllReplicaMinerStakeMm>
        : TAccountUnstakeAllReplicaMinerStakeMm,
      TAccountUnstakeAllReplicaMinerStakeRewarder extends string
        ? ReadonlyAccount<TAccountUnstakeAllReplicaMinerStakeRewarder>
        : TAccountUnstakeAllReplicaMinerStakeRewarder,
      TAccountUnstakeAllReplicaMinerStakeQuarry extends string
        ? WritableAccount<TAccountUnstakeAllReplicaMinerStakeQuarry>
        : TAccountUnstakeAllReplicaMinerStakeQuarry,
      TAccountUnstakeAllReplicaMinerStakeMiner extends string
        ? WritableAccount<TAccountUnstakeAllReplicaMinerStakeMiner>
        : TAccountUnstakeAllReplicaMinerStakeMiner,
      TAccountUnstakeAllReplicaMinerStakeMinerVault extends string
        ? WritableAccount<TAccountUnstakeAllReplicaMinerStakeMinerVault>
        : TAccountUnstakeAllReplicaMinerStakeMinerVault,
      TAccountUnstakeAllReplicaMinerStakeTokenProgram extends string
        ? ReadonlyAccount<TAccountUnstakeAllReplicaMinerStakeTokenProgram>
        : TAccountUnstakeAllReplicaMinerStakeTokenProgram,
      TAccountUnstakeAllReplicaMinerStakeMineProgram extends string
        ? ReadonlyAccount<TAccountUnstakeAllReplicaMinerStakeMineProgram>
        : TAccountUnstakeAllReplicaMinerStakeMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UnstakeAllReplicaMinerInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface UnstakeAllReplicaMinerInstructionDataArgs {}

export function getUnstakeAllReplicaMinerInstructionDataEncoder(): FixedSizeEncoder<UnstakeAllReplicaMinerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UNSTAKE_ALL_REPLICA_MINER_DISCRIMINATOR,
    }),
  );
}

export function getUnstakeAllReplicaMinerInstructionDataDecoder(): FixedSizeDecoder<UnstakeAllReplicaMinerInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUnstakeAllReplicaMinerInstructionDataCodec(): FixedSizeCodec<
  UnstakeAllReplicaMinerInstructionDataArgs,
  UnstakeAllReplicaMinerInstructionData
> {
  return combineCodec(
    getUnstakeAllReplicaMinerInstructionDataEncoder(),
    getUnstakeAllReplicaMinerInstructionDataDecoder(),
  );
}

export interface UnstakeAllReplicaMinerInput<
  TAccountMmOwner extends string = string,
  TAccountReplicaMint extends string = string,
  TAccountReplicaMintTokenAccount extends string = string,
  TAccountUnstakeAllReplicaMinerStakePool extends string = string,
  TAccountUnstakeAllReplicaMinerStakeMm extends string = string,
  TAccountUnstakeAllReplicaMinerStakeRewarder extends string = string,
  TAccountUnstakeAllReplicaMinerStakeQuarry extends string = string,
  TAccountUnstakeAllReplicaMinerStakeMiner extends string = string,
  TAccountUnstakeAllReplicaMinerStakeMinerVault extends string = string,
  TAccountUnstakeAllReplicaMinerStakeTokenProgram extends string = string,
  TAccountUnstakeAllReplicaMinerStakeMineProgram extends string = string,
> {
  mmOwner: TransactionSigner<TAccountMmOwner>;
  replicaMint: Address<TAccountReplicaMint>;
  replicaMintTokenAccount: Address<TAccountReplicaMintTokenAccount>;
  unstakeAllReplicaMinerStakePool: Address<TAccountUnstakeAllReplicaMinerStakePool>;
  unstakeAllReplicaMinerStakeMm: Address<TAccountUnstakeAllReplicaMinerStakeMm>;
  unstakeAllReplicaMinerStakeRewarder: Address<TAccountUnstakeAllReplicaMinerStakeRewarder>;
  unstakeAllReplicaMinerStakeQuarry: Address<TAccountUnstakeAllReplicaMinerStakeQuarry>;
  unstakeAllReplicaMinerStakeMiner: Address<TAccountUnstakeAllReplicaMinerStakeMiner>;
  unstakeAllReplicaMinerStakeMinerVault: Address<TAccountUnstakeAllReplicaMinerStakeMinerVault>;
  unstakeAllReplicaMinerStakeTokenProgram?: Address<TAccountUnstakeAllReplicaMinerStakeTokenProgram>;
  unstakeAllReplicaMinerStakeMineProgram?: Address<TAccountUnstakeAllReplicaMinerStakeMineProgram>;
}

export function getUnstakeAllReplicaMinerInstruction<
  TAccountMmOwner extends string,
  TAccountReplicaMint extends string,
  TAccountReplicaMintTokenAccount extends string,
  TAccountUnstakeAllReplicaMinerStakePool extends string,
  TAccountUnstakeAllReplicaMinerStakeMm extends string,
  TAccountUnstakeAllReplicaMinerStakeRewarder extends string,
  TAccountUnstakeAllReplicaMinerStakeQuarry extends string,
  TAccountUnstakeAllReplicaMinerStakeMiner extends string,
  TAccountUnstakeAllReplicaMinerStakeMinerVault extends string,
  TAccountUnstakeAllReplicaMinerStakeTokenProgram extends string,
  TAccountUnstakeAllReplicaMinerStakeMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: UnstakeAllReplicaMinerInput<
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountUnstakeAllReplicaMinerStakePool,
    TAccountUnstakeAllReplicaMinerStakeMm,
    TAccountUnstakeAllReplicaMinerStakeRewarder,
    TAccountUnstakeAllReplicaMinerStakeQuarry,
    TAccountUnstakeAllReplicaMinerStakeMiner,
    TAccountUnstakeAllReplicaMinerStakeMinerVault,
    TAccountUnstakeAllReplicaMinerStakeTokenProgram,
    TAccountUnstakeAllReplicaMinerStakeMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UnstakeAllReplicaMinerInstruction<
  TProgramAddress,
  TAccountMmOwner,
  TAccountReplicaMint,
  TAccountReplicaMintTokenAccount,
  TAccountUnstakeAllReplicaMinerStakePool,
  TAccountUnstakeAllReplicaMinerStakeMm,
  TAccountUnstakeAllReplicaMinerStakeRewarder,
  TAccountUnstakeAllReplicaMinerStakeQuarry,
  TAccountUnstakeAllReplicaMinerStakeMiner,
  TAccountUnstakeAllReplicaMinerStakeMinerVault,
  TAccountUnstakeAllReplicaMinerStakeTokenProgram,
  TAccountUnstakeAllReplicaMinerStakeMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mmOwner: { value: input.mmOwner ?? null, isWritable: false },
    replicaMint: { value: input.replicaMint ?? null, isWritable: true },
    replicaMintTokenAccount: {
      value: input.replicaMintTokenAccount ?? null,
      isWritable: true,
    },
    unstakeAllReplicaMinerStakePool: {
      value: input.unstakeAllReplicaMinerStakePool ?? null,
      isWritable: true,
    },
    unstakeAllReplicaMinerStakeMm: {
      value: input.unstakeAllReplicaMinerStakeMm ?? null,
      isWritable: true,
    },
    unstakeAllReplicaMinerStakeRewarder: {
      value: input.unstakeAllReplicaMinerStakeRewarder ?? null,
      isWritable: false,
    },
    unstakeAllReplicaMinerStakeQuarry: {
      value: input.unstakeAllReplicaMinerStakeQuarry ?? null,
      isWritable: true,
    },
    unstakeAllReplicaMinerStakeMiner: {
      value: input.unstakeAllReplicaMinerStakeMiner ?? null,
      isWritable: true,
    },
    unstakeAllReplicaMinerStakeMinerVault: {
      value: input.unstakeAllReplicaMinerStakeMinerVault ?? null,
      isWritable: true,
    },
    unstakeAllReplicaMinerStakeTokenProgram: {
      value: input.unstakeAllReplicaMinerStakeTokenProgram ?? null,
      isWritable: false,
    },
    unstakeAllReplicaMinerStakeMineProgram: {
      value: input.unstakeAllReplicaMinerStakeMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.unstakeAllReplicaMinerStakeTokenProgram.value) {
    accounts.unstakeAllReplicaMinerStakeTokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.unstakeAllReplicaMinerStakeMineProgram.value) {
    accounts.unstakeAllReplicaMinerStakeMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mmOwner),
      getAccountMeta(accounts.replicaMint),
      getAccountMeta(accounts.replicaMintTokenAccount),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakePool),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeMm),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeRewarder),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeQuarry),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeMiner),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeMinerVault),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeTokenProgram),
      getAccountMeta(accounts.unstakeAllReplicaMinerStakeMineProgram),
    ],
    programAddress,
    data: getUnstakeAllReplicaMinerInstructionDataEncoder().encode({}),
  } as UnstakeAllReplicaMinerInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountUnstakeAllReplicaMinerStakePool,
    TAccountUnstakeAllReplicaMinerStakeMm,
    TAccountUnstakeAllReplicaMinerStakeRewarder,
    TAccountUnstakeAllReplicaMinerStakeQuarry,
    TAccountUnstakeAllReplicaMinerStakeMiner,
    TAccountUnstakeAllReplicaMinerStakeMinerVault,
    TAccountUnstakeAllReplicaMinerStakeTokenProgram,
    TAccountUnstakeAllReplicaMinerStakeMineProgram
  >;

  return instruction;
}

export interface ParsedUnstakeAllReplicaMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mmOwner: TAccountMetas[0];
    replicaMint: TAccountMetas[1];
    replicaMintTokenAccount: TAccountMetas[2];
    unstakeAllReplicaMinerStakePool: TAccountMetas[3];
    unstakeAllReplicaMinerStakeMm: TAccountMetas[4];
    unstakeAllReplicaMinerStakeRewarder: TAccountMetas[5];
    unstakeAllReplicaMinerStakeQuarry: TAccountMetas[6];
    unstakeAllReplicaMinerStakeMiner: TAccountMetas[7];
    unstakeAllReplicaMinerStakeMinerVault: TAccountMetas[8];
    unstakeAllReplicaMinerStakeTokenProgram: TAccountMetas[9];
    unstakeAllReplicaMinerStakeMineProgram: TAccountMetas[10];
  };
  data: UnstakeAllReplicaMinerInstructionData;
}

export function parseUnstakeAllReplicaMinerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUnstakeAllReplicaMinerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mmOwner: getNextAccount(),
      replicaMint: getNextAccount(),
      replicaMintTokenAccount: getNextAccount(),
      unstakeAllReplicaMinerStakePool: getNextAccount(),
      unstakeAllReplicaMinerStakeMm: getNextAccount(),
      unstakeAllReplicaMinerStakeRewarder: getNextAccount(),
      unstakeAllReplicaMinerStakeQuarry: getNextAccount(),
      unstakeAllReplicaMinerStakeMiner: getNextAccount(),
      unstakeAllReplicaMinerStakeMinerVault: getNextAccount(),
      unstakeAllReplicaMinerStakeTokenProgram: getNextAccount(),
      unstakeAllReplicaMinerStakeMineProgram: getNextAccount(),
    },
    data: getUnstakeAllReplicaMinerInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
