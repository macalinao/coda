/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const ACCEPT_ADMIN_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  112, 42, 45, 90, 116, 181, 13, 170,
]);

export function getAcceptAdminDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ACCEPT_ADMIN_DISCRIMINATOR,
  );
}

export type AcceptAdminInstruction<
  TProgram extends string = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
  TAccountMintWrapper extends string | AccountMeta = string,
  TAccountPendingAdmin extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMintWrapper extends string
        ? WritableAccount<TAccountMintWrapper>
        : TAccountMintWrapper,
      TAccountPendingAdmin extends string
        ? ReadonlySignerAccount<TAccountPendingAdmin> &
            AccountSignerMeta<TAccountPendingAdmin>
        : TAccountPendingAdmin,
      ...TRemainingAccounts,
    ]
  >;

export interface AcceptAdminInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface AcceptAdminInstructionDataArgs {}

export function getAcceptAdminInstructionDataEncoder(): FixedSizeEncoder<AcceptAdminInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: ACCEPT_ADMIN_DISCRIMINATOR }),
  );
}

export function getAcceptAdminInstructionDataDecoder(): FixedSizeDecoder<AcceptAdminInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAcceptAdminInstructionDataCodec(): FixedSizeCodec<
  AcceptAdminInstructionDataArgs,
  AcceptAdminInstructionData
> {
  return combineCodec(
    getAcceptAdminInstructionDataEncoder(),
    getAcceptAdminInstructionDataDecoder(),
  );
}

export interface AcceptAdminInput<
  TAccountMintWrapper extends string = string,
  TAccountPendingAdmin extends string = string,
> {
  mintWrapper: Address<TAccountMintWrapper>;
  pendingAdmin: TransactionSigner<TAccountPendingAdmin>;
}

export function getAcceptAdminInstruction<
  TAccountMintWrapper extends string,
  TAccountPendingAdmin extends string,
  TProgramAddress extends Address = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
>(
  input: AcceptAdminInput<TAccountMintWrapper, TAccountPendingAdmin>,
  config?: { programAddress?: TProgramAddress },
): AcceptAdminInstruction<
  TProgramAddress,
  TAccountMintWrapper,
  TAccountPendingAdmin
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: true },
    pendingAdmin: { value: input.pendingAdmin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.pendingAdmin),
    ],
    programAddress,
    data: getAcceptAdminInstructionDataEncoder().encode({}),
  } as AcceptAdminInstruction<
    TProgramAddress,
    TAccountMintWrapper,
    TAccountPendingAdmin
  >;

  return instruction;
}

export interface ParsedAcceptAdminInstruction<
  TProgram extends string = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mintWrapper: TAccountMetas[0];
    pendingAdmin: TAccountMetas[1];
  };
  data: AcceptAdminInstructionData;
}

export function parseAcceptAdminInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedAcceptAdminInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintWrapper: getNextAccount(),
      pendingAdmin: getNextAccount(),
    },
    data: getAcceptAdminInstructionDataDecoder().decode(instruction.data),
  };
}
