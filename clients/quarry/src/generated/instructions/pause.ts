/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const PAUSE_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  211, 22, 221, 251, 74, 121, 193, 47,
]);

export function getPauseDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PAUSE_DISCRIMINATOR);
}

export type PauseInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountPauseAuthority extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPauseAuthority extends string
        ? ReadonlySignerAccount<TAccountPauseAuthority> &
            AccountSignerMeta<TAccountPauseAuthority>
        : TAccountPauseAuthority,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      ...TRemainingAccounts,
    ]
  >;

export interface PauseInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface PauseInstructionDataArgs {}

export function getPauseInstructionDataEncoder(): FixedSizeEncoder<PauseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: PAUSE_DISCRIMINATOR }),
  );
}

export function getPauseInstructionDataDecoder(): FixedSizeDecoder<PauseInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPauseInstructionDataCodec(): FixedSizeCodec<
  PauseInstructionDataArgs,
  PauseInstructionData
> {
  return combineCodec(
    getPauseInstructionDataEncoder(),
    getPauseInstructionDataDecoder(),
  );
}

export interface PauseInput<
  TAccountPauseAuthority extends string = string,
  TAccountRewarder extends string = string,
> {
  pauseAuthority: TransactionSigner<TAccountPauseAuthority>;
  rewarder: Address<TAccountRewarder>;
}

export function getPauseInstruction<
  TAccountPauseAuthority extends string,
  TAccountRewarder extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: PauseInput<TAccountPauseAuthority, TAccountRewarder>,
  config?: { programAddress?: TProgramAddress },
): PauseInstruction<TProgramAddress, TAccountPauseAuthority, TAccountRewarder> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pauseAuthority: { value: input.pauseAuthority ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pauseAuthority),
      getAccountMeta(accounts.rewarder),
    ],
    data: getPauseInstructionDataEncoder().encode({}),
    programAddress,
  } as PauseInstruction<
    TProgramAddress,
    TAccountPauseAuthority,
    TAccountRewarder
  >);
}

export interface ParsedPauseInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    pauseAuthority: TAccountMetas[0];
    rewarder: TAccountMetas[1];
  };
  data: PauseInstructionData;
}

export function parsePauseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedPauseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { pauseAuthority: getNextAccount(), rewarder: getNextAccount() },
    data: getPauseInstructionDataDecoder().decode(instruction.data),
  };
}
