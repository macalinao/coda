/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DELEGATE_CREATE_QUARRY_V2_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([69, 180, 9, 212, 75, 142, 202, 62]);

export function getDelegateCreateQuarryV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELEGATE_CREATE_QUARRY_V2_DISCRIMINATOR,
  );
}

export type DelegateCreateQuarryV2Instruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountCreateQuarryV2WithDelegateOperator extends
    | string
    | AccountMeta = string,
  TAccountCreateQuarryV2WithDelegateDelegate extends
    | string
    | AccountMeta = string,
  TAccountCreateQuarryV2WithDelegateRewarder extends
    | string
    | AccountMeta = string,
  TAccountCreateQuarryV2WithDelegateQuarryMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TAccountQuarry extends string | AccountMeta = string,
  TAccountTokenMint extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreateQuarryV2WithDelegateOperator extends string
        ? WritableAccount<TAccountCreateQuarryV2WithDelegateOperator>
        : TAccountCreateQuarryV2WithDelegateOperator,
      TAccountCreateQuarryV2WithDelegateDelegate extends string
        ? ReadonlySignerAccount<TAccountCreateQuarryV2WithDelegateDelegate> &
            AccountSignerMeta<TAccountCreateQuarryV2WithDelegateDelegate>
        : TAccountCreateQuarryV2WithDelegateDelegate,
      TAccountCreateQuarryV2WithDelegateRewarder extends string
        ? WritableAccount<TAccountCreateQuarryV2WithDelegateRewarder>
        : TAccountCreateQuarryV2WithDelegateRewarder,
      TAccountCreateQuarryV2WithDelegateQuarryMineProgram extends string
        ? ReadonlyAccount<TAccountCreateQuarryV2WithDelegateQuarryMineProgram>
        : TAccountCreateQuarryV2WithDelegateQuarryMineProgram,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DelegateCreateQuarryV2InstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface DelegateCreateQuarryV2InstructionDataArgs {}

export function getDelegateCreateQuarryV2InstructionDataEncoder(): FixedSizeEncoder<DelegateCreateQuarryV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: DELEGATE_CREATE_QUARRY_V2_DISCRIMINATOR,
    }),
  );
}

export function getDelegateCreateQuarryV2InstructionDataDecoder(): FixedSizeDecoder<DelegateCreateQuarryV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDelegateCreateQuarryV2InstructionDataCodec(): FixedSizeCodec<
  DelegateCreateQuarryV2InstructionDataArgs,
  DelegateCreateQuarryV2InstructionData
> {
  return combineCodec(
    getDelegateCreateQuarryV2InstructionDataEncoder(),
    getDelegateCreateQuarryV2InstructionDataDecoder(),
  );
}

export interface DelegateCreateQuarryV2Input<
  TAccountCreateQuarryV2WithDelegateOperator extends string = string,
  TAccountCreateQuarryV2WithDelegateDelegate extends string = string,
  TAccountCreateQuarryV2WithDelegateRewarder extends string = string,
  TAccountCreateQuarryV2WithDelegateQuarryMineProgram extends string = string,
  TAccountQuarry extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  createQuarryV2WithDelegateOperator: Address<TAccountCreateQuarryV2WithDelegateOperator>;
  createQuarryV2WithDelegateDelegate: TransactionSigner<TAccountCreateQuarryV2WithDelegateDelegate>;
  createQuarryV2WithDelegateRewarder: Address<TAccountCreateQuarryV2WithDelegateRewarder>;
  createQuarryV2WithDelegateQuarryMineProgram?: Address<TAccountCreateQuarryV2WithDelegateQuarryMineProgram>;
  quarry: Address<TAccountQuarry>;
  tokenMint: Address<TAccountTokenMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export function getDelegateCreateQuarryV2Instruction<
  TAccountCreateQuarryV2WithDelegateOperator extends string,
  TAccountCreateQuarryV2WithDelegateDelegate extends string,
  TAccountCreateQuarryV2WithDelegateRewarder extends string,
  TAccountCreateQuarryV2WithDelegateQuarryMineProgram extends string,
  TAccountQuarry extends string,
  TAccountTokenMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: DelegateCreateQuarryV2Input<
    TAccountCreateQuarryV2WithDelegateOperator,
    TAccountCreateQuarryV2WithDelegateDelegate,
    TAccountCreateQuarryV2WithDelegateRewarder,
    TAccountCreateQuarryV2WithDelegateQuarryMineProgram,
    TAccountQuarry,
    TAccountTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DelegateCreateQuarryV2Instruction<
  TProgramAddress,
  TAccountCreateQuarryV2WithDelegateOperator,
  TAccountCreateQuarryV2WithDelegateDelegate,
  TAccountCreateQuarryV2WithDelegateRewarder,
  TAccountCreateQuarryV2WithDelegateQuarryMineProgram,
  TAccountQuarry,
  TAccountTokenMint,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    createQuarryV2WithDelegateOperator: {
      value: input.createQuarryV2WithDelegateOperator ?? null,
      isWritable: true,
    },
    createQuarryV2WithDelegateDelegate: {
      value: input.createQuarryV2WithDelegateDelegate ?? null,
      isWritable: false,
    },
    createQuarryV2WithDelegateRewarder: {
      value: input.createQuarryV2WithDelegateRewarder ?? null,
      isWritable: true,
    },
    createQuarryV2WithDelegateQuarryMineProgram: {
      value: input.createQuarryV2WithDelegateQuarryMineProgram ?? null,
      isWritable: false,
    },
    quarry: { value: input.quarry ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.createQuarryV2WithDelegateQuarryMineProgram.value) {
    accounts.createQuarryV2WithDelegateQuarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.createQuarryV2WithDelegateOperator),
      getAccountMeta(accounts.createQuarryV2WithDelegateDelegate),
      getAccountMeta(accounts.createQuarryV2WithDelegateRewarder),
      getAccountMeta(accounts.createQuarryV2WithDelegateQuarryMineProgram),
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDelegateCreateQuarryV2InstructionDataEncoder().encode({}),
  } as DelegateCreateQuarryV2Instruction<
    TProgramAddress,
    TAccountCreateQuarryV2WithDelegateOperator,
    TAccountCreateQuarryV2WithDelegateDelegate,
    TAccountCreateQuarryV2WithDelegateRewarder,
    TAccountCreateQuarryV2WithDelegateQuarryMineProgram,
    TAccountQuarry,
    TAccountTokenMint,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedDelegateCreateQuarryV2Instruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    createQuarryV2WithDelegateOperator: TAccountMetas[0];
    createQuarryV2WithDelegateDelegate: TAccountMetas[1];
    createQuarryV2WithDelegateRewarder: TAccountMetas[2];
    createQuarryV2WithDelegateQuarryMineProgram: TAccountMetas[3];
    quarry: TAccountMetas[4];
    tokenMint: TAccountMetas[5];
    payer: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: DelegateCreateQuarryV2InstructionData;
}

export function parseDelegateCreateQuarryV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDelegateCreateQuarryV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      createQuarryV2WithDelegateOperator: getNextAccount(),
      createQuarryV2WithDelegateDelegate: getNextAccount(),
      createQuarryV2WithDelegateRewarder: getNextAccount(),
      createQuarryV2WithDelegateQuarryMineProgram: getNextAccount(),
      quarry: getNextAccount(),
      tokenMint: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDelegateCreateQuarryV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
