/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_TOKENS_M_M_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([2, 4, 225, 61, 19, 182, 106, 170]);

export function getWithdrawTokensMMDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_TOKENS_M_M_DISCRIMINATOR,
  );
}

export type WithdrawTokensMMInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta = string,
  TAccountPool extends string | AccountMeta = string,
  TAccountMm extends string | AccountMeta = string,
  TAccountWithdrawMint extends string | AccountMeta = string,
  TAccountMmTokenAccount extends string | AccountMeta = string,
  TAccountTokenDestination extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountMm extends string ? WritableAccount<TAccountMm> : TAccountMm,
      TAccountWithdrawMint extends string
        ? ReadonlyAccount<TAccountWithdrawMint>
        : TAccountWithdrawMint,
      TAccountMmTokenAccount extends string
        ? WritableAccount<TAccountMmTokenAccount>
        : TAccountMmTokenAccount,
      TAccountTokenDestination extends string
        ? WritableAccount<TAccountTokenDestination>
        : TAccountTokenDestination,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawTokensMMInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface WithdrawTokensMMInstructionDataArgs {}

export function getWithdrawTokensMMInstructionDataEncoder(): FixedSizeEncoder<WithdrawTokensMMInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_TOKENS_M_M_DISCRIMINATOR }),
  );
}

export function getWithdrawTokensMMInstructionDataDecoder(): FixedSizeDecoder<WithdrawTokensMMInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawTokensMMInstructionDataCodec(): FixedSizeCodec<
  WithdrawTokensMMInstructionDataArgs,
  WithdrawTokensMMInstructionData
> {
  return combineCodec(
    getWithdrawTokensMMInstructionDataEncoder(),
    getWithdrawTokensMMInstructionDataDecoder(),
  );
}

export interface WithdrawTokensMMInput<
  TAccountOwner extends string = string,
  TAccountPool extends string = string,
  TAccountMm extends string = string,
  TAccountWithdrawMint extends string = string,
  TAccountMmTokenAccount extends string = string,
  TAccountTokenDestination extends string = string,
  TAccountTokenProgram extends string = string,
> {
  owner: TransactionSigner<TAccountOwner>;
  pool: Address<TAccountPool>;
  mm: Address<TAccountMm>;
  withdrawMint: Address<TAccountWithdrawMint>;
  mmTokenAccount: Address<TAccountMmTokenAccount>;
  tokenDestination: Address<TAccountTokenDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
}

export function getWithdrawTokensMMInstruction<
  TAccountOwner extends string,
  TAccountPool extends string,
  TAccountMm extends string,
  TAccountWithdrawMint extends string,
  TAccountMmTokenAccount extends string,
  TAccountTokenDestination extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: WithdrawTokensMMInput<
    TAccountOwner,
    TAccountPool,
    TAccountMm,
    TAccountWithdrawMint,
    TAccountMmTokenAccount,
    TAccountTokenDestination,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawTokensMMInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountPool,
  TAccountMm,
  TAccountWithdrawMint,
  TAccountMmTokenAccount,
  TAccountTokenDestination,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    mm: { value: input.mm ?? null, isWritable: true },
    withdrawMint: { value: input.withdrawMint ?? null, isWritable: false },
    mmTokenAccount: { value: input.mmTokenAccount ?? null, isWritable: true },
    tokenDestination: {
      value: input.tokenDestination ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.withdrawMint),
      getAccountMeta(accounts.mmTokenAccount),
      getAccountMeta(accounts.tokenDestination),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawTokensMMInstructionDataEncoder().encode({}),
  } as WithdrawTokensMMInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountPool,
    TAccountMm,
    TAccountWithdrawMint,
    TAccountMmTokenAccount,
    TAccountTokenDestination,
    TAccountTokenProgram
  >;

  return instruction;
}

export interface ParsedWithdrawTokensMMInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    pool: TAccountMetas[1];
    mm: TAccountMetas[2];
    withdrawMint: TAccountMetas[3];
    mmTokenAccount: TAccountMetas[4];
    tokenDestination: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: WithdrawTokensMMInstructionData;
}

export function parseWithdrawTokensMMInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawTokensMMInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      pool: getNextAccount(),
      mm: getNextAccount(),
      withdrawMint: getNextAccount(),
      mmTokenAccount: getNextAccount(),
      tokenDestination: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawTokensMMInstructionDataDecoder().decode(instruction.data),
  };
}
