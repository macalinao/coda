/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  
  
  combineCodec,
  
  
  
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  
  
  
  
  
  
  transformEncoder
  
  
} from "@solana/kit";
import type {AccountMeta, AccountSignerMeta, Address, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, Instruction, InstructionWithAccounts, InstructionWithData, ReadonlyAccount, ReadonlyUint8Array, TransactionSigner, WritableAccount, WritableSignerAccount} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  expectAddress,
  getAccountMetaFactory
  
} from "../shared/index.js";
import type {ResolvedAccount} from "../shared/index.js";

export const INIT_MERGE_MINER_V2_DISCRIMINATOR = new Uint8Array([
  153, 44, 29, 197, 171, 114, 71, 208,
]);

export function getInitMergeMinerV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_MERGE_MINER_V2_DISCRIMINATOR,
  );
}

export type InitMergeMinerV2Instruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta = string,
  TAccountOwner extends string | AccountMeta = string,
  TAccountMm extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountMm extends string ? WritableAccount<TAccountMm> : TAccountMm,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitMergeMinerV2InstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface InitMergeMinerV2InstructionDataArgs {}

export function getInitMergeMinerV2InstructionDataEncoder(): FixedSizeEncoder<InitMergeMinerV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_MERGE_MINER_V2_DISCRIMINATOR }),
  );
}

export function getInitMergeMinerV2InstructionDataDecoder(): FixedSizeDecoder<InitMergeMinerV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitMergeMinerV2InstructionDataCodec(): FixedSizeCodec<
  InitMergeMinerV2InstructionDataArgs,
  InitMergeMinerV2InstructionData
> {
  return combineCodec(
    getInitMergeMinerV2InstructionDataEncoder(),
    getInitMergeMinerV2InstructionDataDecoder(),
  );
}

export interface InitMergeMinerV2AsyncInput<
  TAccountPool extends string = string,
  TAccountOwner extends string = string,
  TAccountMm extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  pool: Address<TAccountPool>;
  owner: Address<TAccountOwner>;
  mm?: Address<TAccountMm>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export async function getInitMergeMinerV2InstructionAsync<
  TAccountPool extends string,
  TAccountOwner extends string,
  TAccountMm extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: InitMergeMinerV2AsyncInput<
    TAccountPool,
    TAccountOwner,
    TAccountMm,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitMergeMinerV2Instruction<
    TProgramAddress,
    TAccountPool,
    TAccountOwner,
    TAccountMm,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    mm: { value: input.mm ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mm.value) {
    accounts.mm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            34, 77, 101, 114, 103, 101, 77, 105, 110, 101, 114, 34,
          ]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitMergeMinerV2InstructionDataEncoder().encode({}),
  } as InitMergeMinerV2Instruction<
    TProgramAddress,
    TAccountPool,
    TAccountOwner,
    TAccountMm,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface InitMergeMinerV2Input<
  TAccountPool extends string = string,
  TAccountOwner extends string = string,
  TAccountMm extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  pool: Address<TAccountPool>;
  owner: Address<TAccountOwner>;
  mm: Address<TAccountMm>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export function getInitMergeMinerV2Instruction<
  TAccountPool extends string,
  TAccountOwner extends string,
  TAccountMm extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: InitMergeMinerV2Input<
    TAccountPool,
    TAccountOwner,
    TAccountMm,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitMergeMinerV2Instruction<
  TProgramAddress,
  TAccountPool,
  TAccountOwner,
  TAccountMm,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    mm: { value: input.mm ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitMergeMinerV2InstructionDataEncoder().encode({}),
  } as InitMergeMinerV2Instruction<
    TProgramAddress,
    TAccountPool,
    TAccountOwner,
    TAccountMm,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedInitMergeMinerV2Instruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    owner: TAccountMetas[1];
    mm: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitMergeMinerV2InstructionData;
}

export function parseInitMergeMinerV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitMergeMinerV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      owner: getNextAccount(),
      mm: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitMergeMinerV2InstructionDataDecoder().decode(instruction.data),
  };
}
