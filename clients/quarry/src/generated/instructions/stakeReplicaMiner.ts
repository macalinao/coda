/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { findMergeMinerPda, findMinerPda } from "../pdas/index.js";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const STAKE_REPLICA_MINER_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([246, 171, 25, 201, 242, 145, 94, 47]);

export function getStakeReplicaMinerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STAKE_REPLICA_MINER_DISCRIMINATOR,
  );
}

export type StakeReplicaMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMmOwner extends string | AccountMeta = string,
  TAccountReplicaMint extends string | AccountMeta = string,
  TAccountReplicaMintTokenAccount extends string | AccountMeta = string,
  TAccountPool extends string | AccountMeta = string,
  TAccountMm extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountQuarry extends string | AccountMeta = string,
  TAccountMiner extends string | AccountMeta = string,
  TAccountMinerVault extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMmOwner extends string
        ? ReadonlySignerAccount<TAccountMmOwner> &
            AccountSignerMeta<TAccountMmOwner>
        : TAccountMmOwner,
      TAccountReplicaMint extends string
        ? WritableAccount<TAccountReplicaMint>
        : TAccountReplicaMint,
      TAccountReplicaMintTokenAccount extends string
        ? WritableAccount<TAccountReplicaMintTokenAccount>
        : TAccountReplicaMintTokenAccount,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountMm extends string ? WritableAccount<TAccountMm> : TAccountMm,
      TAccountRewarder extends string
        ? ReadonlyAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountMiner extends string
        ? WritableAccount<TAccountMiner>
        : TAccountMiner,
      TAccountMinerVault extends string
        ? WritableAccount<TAccountMinerVault>
        : TAccountMinerVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMineProgram extends string
        ? ReadonlyAccount<TAccountMineProgram>
        : TAccountMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface StakeReplicaMinerInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface StakeReplicaMinerInstructionDataArgs {}

export function getStakeReplicaMinerInstructionDataEncoder(): FixedSizeEncoder<StakeReplicaMinerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: STAKE_REPLICA_MINER_DISCRIMINATOR }),
  );
}

export function getStakeReplicaMinerInstructionDataDecoder(): FixedSizeDecoder<StakeReplicaMinerInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getStakeReplicaMinerInstructionDataCodec(): FixedSizeCodec<
  StakeReplicaMinerInstructionDataArgs,
  StakeReplicaMinerInstructionData
> {
  return combineCodec(
    getStakeReplicaMinerInstructionDataEncoder(),
    getStakeReplicaMinerInstructionDataDecoder(),
  );
}

export interface StakeReplicaMinerAsyncInput<
  TAccountMmOwner extends string = string,
  TAccountReplicaMint extends string = string,
  TAccountReplicaMintTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountMm extends string = string,
  TAccountRewarder extends string = string,
  TAccountQuarry extends string = string,
  TAccountMiner extends string = string,
  TAccountMinerVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMineProgram extends string = string,
> {
  mmOwner: TransactionSigner<TAccountMmOwner>;
  replicaMint: Address<TAccountReplicaMint>;
  replicaMintTokenAccount: Address<TAccountReplicaMintTokenAccount>;
  pool: Address<TAccountPool>;
  mm?: Address<TAccountMm>;
  rewarder: Address<TAccountRewarder>;
  quarry: Address<TAccountQuarry>;
  miner?: Address<TAccountMiner>;
  minerVault: Address<TAccountMinerVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mineProgram?: Address<TAccountMineProgram>;
}

export async function getStakeReplicaMinerInstructionAsync<
  TAccountMmOwner extends string,
  TAccountReplicaMint extends string,
  TAccountReplicaMintTokenAccount extends string,
  TAccountPool extends string,
  TAccountMm extends string,
  TAccountRewarder extends string,
  TAccountQuarry extends string,
  TAccountMiner extends string,
  TAccountMinerVault extends string,
  TAccountTokenProgram extends string,
  TAccountMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: StakeReplicaMinerAsyncInput<
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  StakeReplicaMinerInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mmOwner: { value: input.mmOwner ?? null, isWritable: false },
    replicaMint: { value: input.replicaMint ?? null, isWritable: true },
    replicaMintTokenAccount: {
      value: input.replicaMintTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    mm: { value: input.mm ?? null, isWritable: true },
    rewarder: { value: input.rewarder ?? null, isWritable: false },
    quarry: { value: input.quarry ?? null, isWritable: true },
    miner: { value: input.miner ?? null, isWritable: true },
    minerVault: { value: input.minerVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mineProgram: { value: input.mineProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mm.value) {
    accounts.mm.value = await findMergeMinerPda({
      pool: expectAddress(accounts.pool.value),
      owner: expectAddress(accounts.mmOwner.value),
    });
  }
  if (!accounts.miner.value) {
    accounts.miner.value = await findMinerPda({
      quarry: expectAddress(accounts.quarry.value),
      authority: expectAddress(accounts.mm.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.mineProgram.value) {
    accounts.mineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mmOwner),
      getAccountMeta(accounts.replicaMint),
      getAccountMeta(accounts.replicaMintTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.minerVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mineProgram),
    ],
    data: getStakeReplicaMinerInstructionDataEncoder().encode({}),
    programAddress,
  } as StakeReplicaMinerInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >);
}

export interface StakeReplicaMinerInput<
  TAccountMmOwner extends string = string,
  TAccountReplicaMint extends string = string,
  TAccountReplicaMintTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountMm extends string = string,
  TAccountRewarder extends string = string,
  TAccountQuarry extends string = string,
  TAccountMiner extends string = string,
  TAccountMinerVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMineProgram extends string = string,
> {
  mmOwner: TransactionSigner<TAccountMmOwner>;
  replicaMint: Address<TAccountReplicaMint>;
  replicaMintTokenAccount: Address<TAccountReplicaMintTokenAccount>;
  pool: Address<TAccountPool>;
  mm: Address<TAccountMm>;
  rewarder: Address<TAccountRewarder>;
  quarry: Address<TAccountQuarry>;
  miner: Address<TAccountMiner>;
  minerVault: Address<TAccountMinerVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mineProgram?: Address<TAccountMineProgram>;
}

export function getStakeReplicaMinerInstruction<
  TAccountMmOwner extends string,
  TAccountReplicaMint extends string,
  TAccountReplicaMintTokenAccount extends string,
  TAccountPool extends string,
  TAccountMm extends string,
  TAccountRewarder extends string,
  TAccountQuarry extends string,
  TAccountMiner extends string,
  TAccountMinerVault extends string,
  TAccountTokenProgram extends string,
  TAccountMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: StakeReplicaMinerInput<
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): StakeReplicaMinerInstruction<
  TProgramAddress,
  TAccountMmOwner,
  TAccountReplicaMint,
  TAccountReplicaMintTokenAccount,
  TAccountPool,
  TAccountMm,
  TAccountRewarder,
  TAccountQuarry,
  TAccountMiner,
  TAccountMinerVault,
  TAccountTokenProgram,
  TAccountMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mmOwner: { value: input.mmOwner ?? null, isWritable: false },
    replicaMint: { value: input.replicaMint ?? null, isWritable: true },
    replicaMintTokenAccount: {
      value: input.replicaMintTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    mm: { value: input.mm ?? null, isWritable: true },
    rewarder: { value: input.rewarder ?? null, isWritable: false },
    quarry: { value: input.quarry ?? null, isWritable: true },
    miner: { value: input.miner ?? null, isWritable: true },
    minerVault: { value: input.minerVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mineProgram: { value: input.mineProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.mineProgram.value) {
    accounts.mineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mmOwner),
      getAccountMeta(accounts.replicaMint),
      getAccountMeta(accounts.replicaMintTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.mm),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.minerVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mineProgram),
    ],
    data: getStakeReplicaMinerInstructionDataEncoder().encode({}),
    programAddress,
  } as StakeReplicaMinerInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountReplicaMint,
    TAccountReplicaMintTokenAccount,
    TAccountPool,
    TAccountMm,
    TAccountRewarder,
    TAccountQuarry,
    TAccountMiner,
    TAccountMinerVault,
    TAccountTokenProgram,
    TAccountMineProgram
  >);
}

export interface ParsedStakeReplicaMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mmOwner: TAccountMetas[0];
    replicaMint: TAccountMetas[1];
    replicaMintTokenAccount: TAccountMetas[2];
    pool: TAccountMetas[3];
    mm: TAccountMetas[4];
    rewarder: TAccountMetas[5];
    quarry: TAccountMetas[6];
    miner: TAccountMetas[7];
    minerVault: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    mineProgram: TAccountMetas[10];
  };
  data: StakeReplicaMinerInstructionData;
}

export function parseStakeReplicaMinerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedStakeReplicaMinerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mmOwner: getNextAccount(),
      replicaMint: getNextAccount(),
      replicaMintTokenAccount: getNextAccount(),
      pool: getNextAccount(),
      mm: getNextAccount(),
      rewarder: getNextAccount(),
      quarry: getNextAccount(),
      miner: getNextAccount(),
      minerVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      mineProgram: getNextAccount(),
    },
    data: getStakeReplicaMinerInstructionDataDecoder().decode(instruction.data),
  };
}
