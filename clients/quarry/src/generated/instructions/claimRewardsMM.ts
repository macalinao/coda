/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CLAIM_REWARDS_M_M_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([4, 144, 132, 71, 116, 23, 151, 80]);

export function getClaimRewardsMMDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_REWARDS_M_M_DISCRIMINATOR,
  );
}

export type ClaimRewardsMMInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMintWrapper extends string | AccountMeta = string,
  TAccountMintWrapperProgram extends
    | string
    | AccountMeta = "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV",
  TAccountMinter extends string | AccountMeta = string,
  TAccountRewardsTokenMint extends string | AccountMeta = string,
  TAccountRewardsTokenAccount extends string | AccountMeta = string,
  TAccountClaimFeeTokenAccount extends string | AccountMeta = string,
  TAccountStakeTokenAccount extends string | AccountMeta = string,
  TAccountClaimRewardsStakePool extends string | AccountMeta = string,
  TAccountClaimRewardsStakeMm extends string | AccountMeta = string,
  TAccountClaimRewardsStakeRewarder extends string | AccountMeta = string,
  TAccountClaimRewardsStakeQuarry extends string | AccountMeta = string,
  TAccountClaimRewardsStakeMiner extends string | AccountMeta = string,
  TAccountClaimRewardsStakeMinerVault extends string | AccountMeta = string,
  TAccountClaimRewardsStakeTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountClaimRewardsStakeMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMintWrapper extends string
        ? WritableAccount<TAccountMintWrapper>
        : TAccountMintWrapper,
      TAccountMintWrapperProgram extends string
        ? ReadonlyAccount<TAccountMintWrapperProgram>
        : TAccountMintWrapperProgram,
      TAccountMinter extends string
        ? WritableAccount<TAccountMinter>
        : TAccountMinter,
      TAccountRewardsTokenMint extends string
        ? WritableAccount<TAccountRewardsTokenMint>
        : TAccountRewardsTokenMint,
      TAccountRewardsTokenAccount extends string
        ? WritableAccount<TAccountRewardsTokenAccount>
        : TAccountRewardsTokenAccount,
      TAccountClaimFeeTokenAccount extends string
        ? WritableAccount<TAccountClaimFeeTokenAccount>
        : TAccountClaimFeeTokenAccount,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountClaimRewardsStakePool extends string
        ? WritableAccount<TAccountClaimRewardsStakePool>
        : TAccountClaimRewardsStakePool,
      TAccountClaimRewardsStakeMm extends string
        ? WritableAccount<TAccountClaimRewardsStakeMm>
        : TAccountClaimRewardsStakeMm,
      TAccountClaimRewardsStakeRewarder extends string
        ? ReadonlyAccount<TAccountClaimRewardsStakeRewarder>
        : TAccountClaimRewardsStakeRewarder,
      TAccountClaimRewardsStakeQuarry extends string
        ? WritableAccount<TAccountClaimRewardsStakeQuarry>
        : TAccountClaimRewardsStakeQuarry,
      TAccountClaimRewardsStakeMiner extends string
        ? WritableAccount<TAccountClaimRewardsStakeMiner>
        : TAccountClaimRewardsStakeMiner,
      TAccountClaimRewardsStakeMinerVault extends string
        ? WritableAccount<TAccountClaimRewardsStakeMinerVault>
        : TAccountClaimRewardsStakeMinerVault,
      TAccountClaimRewardsStakeTokenProgram extends string
        ? ReadonlyAccount<TAccountClaimRewardsStakeTokenProgram>
        : TAccountClaimRewardsStakeTokenProgram,
      TAccountClaimRewardsStakeMineProgram extends string
        ? ReadonlyAccount<TAccountClaimRewardsStakeMineProgram>
        : TAccountClaimRewardsStakeMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface ClaimRewardsMMInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface ClaimRewardsMMInstructionDataArgs {}

export function getClaimRewardsMMInstructionDataEncoder(): FixedSizeEncoder<ClaimRewardsMMInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_REWARDS_M_M_DISCRIMINATOR }),
  );
}

export function getClaimRewardsMMInstructionDataDecoder(): FixedSizeDecoder<ClaimRewardsMMInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimRewardsMMInstructionDataCodec(): FixedSizeCodec<
  ClaimRewardsMMInstructionDataArgs,
  ClaimRewardsMMInstructionData
> {
  return combineCodec(
    getClaimRewardsMMInstructionDataEncoder(),
    getClaimRewardsMMInstructionDataDecoder(),
  );
}

export interface ClaimRewardsMMInput<
  TAccountMintWrapper extends string = string,
  TAccountMintWrapperProgram extends string = string,
  TAccountMinter extends string = string,
  TAccountRewardsTokenMint extends string = string,
  TAccountRewardsTokenAccount extends string = string,
  TAccountClaimFeeTokenAccount extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountClaimRewardsStakePool extends string = string,
  TAccountClaimRewardsStakeMm extends string = string,
  TAccountClaimRewardsStakeRewarder extends string = string,
  TAccountClaimRewardsStakeQuarry extends string = string,
  TAccountClaimRewardsStakeMiner extends string = string,
  TAccountClaimRewardsStakeMinerVault extends string = string,
  TAccountClaimRewardsStakeTokenProgram extends string = string,
  TAccountClaimRewardsStakeMineProgram extends string = string,
> {
  mintWrapper: Address<TAccountMintWrapper>;
  mintWrapperProgram?: Address<TAccountMintWrapperProgram>;
  minter: Address<TAccountMinter>;
  rewardsTokenMint: Address<TAccountRewardsTokenMint>;
  rewardsTokenAccount: Address<TAccountRewardsTokenAccount>;
  claimFeeTokenAccount: Address<TAccountClaimFeeTokenAccount>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  claimRewardsStakePool: Address<TAccountClaimRewardsStakePool>;
  claimRewardsStakeMm: Address<TAccountClaimRewardsStakeMm>;
  claimRewardsStakeRewarder: Address<TAccountClaimRewardsStakeRewarder>;
  claimRewardsStakeQuarry: Address<TAccountClaimRewardsStakeQuarry>;
  claimRewardsStakeMiner: Address<TAccountClaimRewardsStakeMiner>;
  claimRewardsStakeMinerVault: Address<TAccountClaimRewardsStakeMinerVault>;
  claimRewardsStakeTokenProgram?: Address<TAccountClaimRewardsStakeTokenProgram>;
  claimRewardsStakeMineProgram?: Address<TAccountClaimRewardsStakeMineProgram>;
}

export function getClaimRewardsMMInstruction<
  TAccountMintWrapper extends string,
  TAccountMintWrapperProgram extends string,
  TAccountMinter extends string,
  TAccountRewardsTokenMint extends string,
  TAccountRewardsTokenAccount extends string,
  TAccountClaimFeeTokenAccount extends string,
  TAccountStakeTokenAccount extends string,
  TAccountClaimRewardsStakePool extends string,
  TAccountClaimRewardsStakeMm extends string,
  TAccountClaimRewardsStakeRewarder extends string,
  TAccountClaimRewardsStakeQuarry extends string,
  TAccountClaimRewardsStakeMiner extends string,
  TAccountClaimRewardsStakeMinerVault extends string,
  TAccountClaimRewardsStakeTokenProgram extends string,
  TAccountClaimRewardsStakeMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: ClaimRewardsMMInput<
    TAccountMintWrapper,
    TAccountMintWrapperProgram,
    TAccountMinter,
    TAccountRewardsTokenMint,
    TAccountRewardsTokenAccount,
    TAccountClaimFeeTokenAccount,
    TAccountStakeTokenAccount,
    TAccountClaimRewardsStakePool,
    TAccountClaimRewardsStakeMm,
    TAccountClaimRewardsStakeRewarder,
    TAccountClaimRewardsStakeQuarry,
    TAccountClaimRewardsStakeMiner,
    TAccountClaimRewardsStakeMinerVault,
    TAccountClaimRewardsStakeTokenProgram,
    TAccountClaimRewardsStakeMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ClaimRewardsMMInstruction<
  TProgramAddress,
  TAccountMintWrapper,
  TAccountMintWrapperProgram,
  TAccountMinter,
  TAccountRewardsTokenMint,
  TAccountRewardsTokenAccount,
  TAccountClaimFeeTokenAccount,
  TAccountStakeTokenAccount,
  TAccountClaimRewardsStakePool,
  TAccountClaimRewardsStakeMm,
  TAccountClaimRewardsStakeRewarder,
  TAccountClaimRewardsStakeQuarry,
  TAccountClaimRewardsStakeMiner,
  TAccountClaimRewardsStakeMinerVault,
  TAccountClaimRewardsStakeTokenProgram,
  TAccountClaimRewardsStakeMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: true },
    mintWrapperProgram: {
      value: input.mintWrapperProgram ?? null,
      isWritable: false,
    },
    minter: { value: input.minter ?? null, isWritable: true },
    rewardsTokenMint: {
      value: input.rewardsTokenMint ?? null,
      isWritable: true,
    },
    rewardsTokenAccount: {
      value: input.rewardsTokenAccount ?? null,
      isWritable: true,
    },
    claimFeeTokenAccount: {
      value: input.claimFeeTokenAccount ?? null,
      isWritable: true,
    },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    claimRewardsStakePool: {
      value: input.claimRewardsStakePool ?? null,
      isWritable: true,
    },
    claimRewardsStakeMm: {
      value: input.claimRewardsStakeMm ?? null,
      isWritable: true,
    },
    claimRewardsStakeRewarder: {
      value: input.claimRewardsStakeRewarder ?? null,
      isWritable: false,
    },
    claimRewardsStakeQuarry: {
      value: input.claimRewardsStakeQuarry ?? null,
      isWritable: true,
    },
    claimRewardsStakeMiner: {
      value: input.claimRewardsStakeMiner ?? null,
      isWritable: true,
    },
    claimRewardsStakeMinerVault: {
      value: input.claimRewardsStakeMinerVault ?? null,
      isWritable: true,
    },
    claimRewardsStakeTokenProgram: {
      value: input.claimRewardsStakeTokenProgram ?? null,
      isWritable: false,
    },
    claimRewardsStakeMineProgram: {
      value: input.claimRewardsStakeMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mintWrapperProgram.value) {
    accounts.mintWrapperProgram.value =
      "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV" as Address<"QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV">;
  }
  if (!accounts.claimRewardsStakeTokenProgram.value) {
    accounts.claimRewardsStakeTokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.claimRewardsStakeMineProgram.value) {
    accounts.claimRewardsStakeMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.mintWrapperProgram),
      getAccountMeta(accounts.minter),
      getAccountMeta(accounts.rewardsTokenMint),
      getAccountMeta(accounts.rewardsTokenAccount),
      getAccountMeta(accounts.claimFeeTokenAccount),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.claimRewardsStakePool),
      getAccountMeta(accounts.claimRewardsStakeMm),
      getAccountMeta(accounts.claimRewardsStakeRewarder),
      getAccountMeta(accounts.claimRewardsStakeQuarry),
      getAccountMeta(accounts.claimRewardsStakeMiner),
      getAccountMeta(accounts.claimRewardsStakeMinerVault),
      getAccountMeta(accounts.claimRewardsStakeTokenProgram),
      getAccountMeta(accounts.claimRewardsStakeMineProgram),
    ],
    programAddress,
    data: getClaimRewardsMMInstructionDataEncoder().encode({}),
  } as ClaimRewardsMMInstruction<
    TProgramAddress,
    TAccountMintWrapper,
    TAccountMintWrapperProgram,
    TAccountMinter,
    TAccountRewardsTokenMint,
    TAccountRewardsTokenAccount,
    TAccountClaimFeeTokenAccount,
    TAccountStakeTokenAccount,
    TAccountClaimRewardsStakePool,
    TAccountClaimRewardsStakeMm,
    TAccountClaimRewardsStakeRewarder,
    TAccountClaimRewardsStakeQuarry,
    TAccountClaimRewardsStakeMiner,
    TAccountClaimRewardsStakeMinerVault,
    TAccountClaimRewardsStakeTokenProgram,
    TAccountClaimRewardsStakeMineProgram
  >;

  return instruction;
}

export interface ParsedClaimRewardsMMInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mintWrapper: TAccountMetas[0];
    mintWrapperProgram: TAccountMetas[1];
    minter: TAccountMetas[2];
    rewardsTokenMint: TAccountMetas[3];
    rewardsTokenAccount: TAccountMetas[4];
    claimFeeTokenAccount: TAccountMetas[5];
    stakeTokenAccount: TAccountMetas[6];
    claimRewardsStakePool: TAccountMetas[7];
    claimRewardsStakeMm: TAccountMetas[8];
    claimRewardsStakeRewarder: TAccountMetas[9];
    claimRewardsStakeQuarry: TAccountMetas[10];
    claimRewardsStakeMiner: TAccountMetas[11];
    claimRewardsStakeMinerVault: TAccountMetas[12];
    claimRewardsStakeTokenProgram: TAccountMetas[13];
    claimRewardsStakeMineProgram: TAccountMetas[14];
  };
  data: ClaimRewardsMMInstructionData;
}

export function parseClaimRewardsMMInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedClaimRewardsMMInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintWrapper: getNextAccount(),
      mintWrapperProgram: getNextAccount(),
      minter: getNextAccount(),
      rewardsTokenMint: getNextAccount(),
      rewardsTokenAccount: getNextAccount(),
      claimFeeTokenAccount: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      claimRewardsStakePool: getNextAccount(),
      claimRewardsStakeMm: getNextAccount(),
      claimRewardsStakeRewarder: getNextAccount(),
      claimRewardsStakeQuarry: getNextAccount(),
      claimRewardsStakeMiner: getNextAccount(),
      claimRewardsStakeMinerVault: getNextAccount(),
      claimRewardsStakeTokenProgram: getNextAccount(),
      claimRewardsStakeMineProgram: getNextAccount(),
    },
    data: getClaimRewardsMMInstructionDataDecoder().decode(instruction.data),
  };
}
