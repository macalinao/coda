/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CLAIM_REWARDS_DISCRIMINATOR = new Uint8Array([
  4, 144, 132, 71, 116, 23, 151, 80,
]);

export function getClaimRewardsDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_REWARDS_DISCRIMINATOR,
  );
}

export type ClaimRewardsInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMintWrapper extends string | AccountMeta = string,
  TAccountMintWrapperProgram extends
    | string
    | AccountMeta = "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV",
  TAccountMinter extends string | AccountMeta = string,
  TAccountRewardsTokenMint extends string | AccountMeta = string,
  TAccountRewardsTokenAccount extends string | AccountMeta = string,
  TAccountClaimFeeTokenAccount extends string | AccountMeta = string,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountMiner extends string | AccountMeta = string,
  TAccountQuarry extends string | AccountMeta = string,
  TAccountUnusedMinerVault extends string | AccountMeta = string,
  TAccountUnusedTokenAccount extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountRewarder extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMintWrapper extends string
        ? WritableAccount<TAccountMintWrapper>
        : TAccountMintWrapper,
      TAccountMintWrapperProgram extends string
        ? ReadonlyAccount<TAccountMintWrapperProgram>
        : TAccountMintWrapperProgram,
      TAccountMinter extends string
        ? WritableAccount<TAccountMinter>
        : TAccountMinter,
      TAccountRewardsTokenMint extends string
        ? WritableAccount<TAccountRewardsTokenMint>
        : TAccountRewardsTokenMint,
      TAccountRewardsTokenAccount extends string
        ? WritableAccount<TAccountRewardsTokenAccount>
        : TAccountRewardsTokenAccount,
      TAccountClaimFeeTokenAccount extends string
        ? WritableAccount<TAccountClaimFeeTokenAccount>
        : TAccountClaimFeeTokenAccount,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMiner extends string
        ? WritableAccount<TAccountMiner>
        : TAccountMiner,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountUnusedMinerVault extends string
        ? ReadonlyAccount<TAccountUnusedMinerVault>
        : TAccountUnusedMinerVault,
      TAccountUnusedTokenAccount extends string
        ? ReadonlyAccount<TAccountUnusedTokenAccount>
        : TAccountUnusedTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRewarder extends string
        ? ReadonlyAccount<TAccountRewarder>
        : TAccountRewarder,
      ...TRemainingAccounts,
    ]
  >;

export interface ClaimRewardsInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface ClaimRewardsInstructionDataArgs {}

export function getClaimRewardsInstructionDataEncoder(): FixedSizeEncoder<ClaimRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_REWARDS_DISCRIMINATOR }),
  );
}

export function getClaimRewardsInstructionDataDecoder(): FixedSizeDecoder<ClaimRewardsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimRewardsInstructionDataCodec(): FixedSizeCodec<
  ClaimRewardsInstructionDataArgs,
  ClaimRewardsInstructionData
> {
  return combineCodec(
    getClaimRewardsInstructionDataEncoder(),
    getClaimRewardsInstructionDataDecoder(),
  );
}

export interface ClaimRewardsInput<
  TAccountMintWrapper extends string = string,
  TAccountMintWrapperProgram extends string = string,
  TAccountMinter extends string = string,
  TAccountRewardsTokenMint extends string = string,
  TAccountRewardsTokenAccount extends string = string,
  TAccountClaimFeeTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountMiner extends string = string,
  TAccountQuarry extends string = string,
  TAccountUnusedMinerVault extends string = string,
  TAccountUnusedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRewarder extends string = string,
> {
  mintWrapper: Address<TAccountMintWrapper>;
  mintWrapperProgram?: Address<TAccountMintWrapperProgram>;
  minter: Address<TAccountMinter>;
  rewardsTokenMint: Address<TAccountRewardsTokenMint>;
  rewardsTokenAccount: Address<TAccountRewardsTokenAccount>;
  claimFeeTokenAccount: Address<TAccountClaimFeeTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  miner: Address<TAccountMiner>;
  quarry: Address<TAccountQuarry>;
  unusedMinerVault: Address<TAccountUnusedMinerVault>;
  unusedTokenAccount: Address<TAccountUnusedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewarder: Address<TAccountRewarder>;
}

export function getClaimRewardsInstruction<
  TAccountMintWrapper extends string,
  TAccountMintWrapperProgram extends string,
  TAccountMinter extends string,
  TAccountRewardsTokenMint extends string,
  TAccountRewardsTokenAccount extends string,
  TAccountClaimFeeTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountMiner extends string,
  TAccountQuarry extends string,
  TAccountUnusedMinerVault extends string,
  TAccountUnusedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountRewarder extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: ClaimRewardsInput<
    TAccountMintWrapper,
    TAccountMintWrapperProgram,
    TAccountMinter,
    TAccountRewardsTokenMint,
    TAccountRewardsTokenAccount,
    TAccountClaimFeeTokenAccount,
    TAccountAuthority,
    TAccountMiner,
    TAccountQuarry,
    TAccountUnusedMinerVault,
    TAccountUnusedTokenAccount,
    TAccountTokenProgram,
    TAccountRewarder
  >,
  config?: { programAddress?: TProgramAddress },
): ClaimRewardsInstruction<
  TProgramAddress,
  TAccountMintWrapper,
  TAccountMintWrapperProgram,
  TAccountMinter,
  TAccountRewardsTokenMint,
  TAccountRewardsTokenAccount,
  TAccountClaimFeeTokenAccount,
  TAccountAuthority,
  TAccountMiner,
  TAccountQuarry,
  TAccountUnusedMinerVault,
  TAccountUnusedTokenAccount,
  TAccountTokenProgram,
  TAccountRewarder
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: true },
    mintWrapperProgram: {
      value: input.mintWrapperProgram ?? null,
      isWritable: false,
    },
    minter: { value: input.minter ?? null, isWritable: true },
    rewardsTokenMint: {
      value: input.rewardsTokenMint ?? null,
      isWritable: true,
    },
    rewardsTokenAccount: {
      value: input.rewardsTokenAccount ?? null,
      isWritable: true,
    },
    claimFeeTokenAccount: {
      value: input.claimFeeTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    miner: { value: input.miner ?? null, isWritable: true },
    quarry: { value: input.quarry ?? null, isWritable: true },
    unusedMinerVault: {
      value: input.unusedMinerVault ?? null,
      isWritable: false,
    },
    unusedTokenAccount: {
      value: input.unusedTokenAccount ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mintWrapperProgram.value) {
    accounts.mintWrapperProgram.value =
      "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV" as Address<"QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.mintWrapperProgram),
      getAccountMeta(accounts.minter),
      getAccountMeta(accounts.rewardsTokenMint),
      getAccountMeta(accounts.rewardsTokenAccount),
      getAccountMeta(accounts.claimFeeTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.unusedMinerVault),
      getAccountMeta(accounts.unusedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rewarder),
    ],
    programAddress,
    data: getClaimRewardsInstructionDataEncoder().encode({}),
  } as ClaimRewardsInstruction<
    TProgramAddress,
    TAccountMintWrapper,
    TAccountMintWrapperProgram,
    TAccountMinter,
    TAccountRewardsTokenMint,
    TAccountRewardsTokenAccount,
    TAccountClaimFeeTokenAccount,
    TAccountAuthority,
    TAccountMiner,
    TAccountQuarry,
    TAccountUnusedMinerVault,
    TAccountUnusedTokenAccount,
    TAccountTokenProgram,
    TAccountRewarder
  >;

  return instruction;
}

export interface ParsedClaimRewardsInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mintWrapper: TAccountMetas[0];
    mintWrapperProgram: TAccountMetas[1];
    minter: TAccountMetas[2];
    rewardsTokenMint: TAccountMetas[3];
    rewardsTokenAccount: TAccountMetas[4];
    claimFeeTokenAccount: TAccountMetas[5];
    authority: TAccountMetas[6];
    miner: TAccountMetas[7];
    quarry: TAccountMetas[8];
    unusedMinerVault: TAccountMetas[9];
    unusedTokenAccount: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    rewarder: TAccountMetas[12];
  };
  data: ClaimRewardsInstructionData;
}

export function parseClaimRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedClaimRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintWrapper: getNextAccount(),
      mintWrapperProgram: getNextAccount(),
      minter: getNextAccount(),
      rewardsTokenMint: getNextAccount(),
      rewardsTokenAccount: getNextAccount(),
      claimFeeTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      miner: getNextAccount(),
      quarry: getNextAccount(),
      unusedMinerVault: getNextAccount(),
      unusedTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      rewarder: getNextAccount(),
    },
    data: getClaimRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
