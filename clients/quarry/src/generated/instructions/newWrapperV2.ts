/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const NEW_WRAPPER_V2_DISCRIMINATOR = new Uint8Array([
  140, 106, 205, 202, 15, 176, 85, 19,
]);

export function getNewWrapperV2DiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NEW_WRAPPER_V2_DISCRIMINATOR,
  );
}

export type NewWrapperV2Instruction<
  TProgram extends string = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
  TAccountBase extends string | AccountMeta = string,
  TAccountMintWrapper extends string | AccountMeta = string,
  TAccountAdmin extends string | AccountMeta = string,
  TAccountTokenMint extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & AccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountMintWrapper extends string
        ? WritableAccount<TAccountMintWrapper>
        : TAccountMintWrapper,
      TAccountAdmin extends string
        ? ReadonlyAccount<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface NewWrapperV2InstructionData {
  discriminator: ReadonlyUint8Array;
  hardCap: bigint;
}

export interface NewWrapperV2InstructionDataArgs {
  hardCap: number | bigint;
}

export function getNewWrapperV2InstructionDataEncoder(): FixedSizeEncoder<NewWrapperV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["hardCap", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NEW_WRAPPER_V2_DISCRIMINATOR }),
  );
}

export function getNewWrapperV2InstructionDataDecoder(): FixedSizeDecoder<NewWrapperV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["hardCap", getU64Decoder()],
  ]);
}

export function getNewWrapperV2InstructionDataCodec(): FixedSizeCodec<
  NewWrapperV2InstructionDataArgs,
  NewWrapperV2InstructionData
> {
  return combineCodec(
    getNewWrapperV2InstructionDataEncoder(),
    getNewWrapperV2InstructionDataDecoder(),
  );
}

export interface NewWrapperV2AsyncInput<
  TAccountBase extends string = string,
  TAccountMintWrapper extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  mintWrapper?: Address<TAccountMintWrapper>;
  admin: Address<TAccountAdmin>;
  tokenMint: Address<TAccountTokenMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  hardCap: NewWrapperV2InstructionDataArgs["hardCap"];
}

export async function getNewWrapperV2InstructionAsync<
  TAccountBase extends string,
  TAccountMintWrapper extends string,
  TAccountAdmin extends string,
  TAccountTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
>(
  input: NewWrapperV2AsyncInput<
    TAccountBase,
    TAccountMintWrapper,
    TAccountAdmin,
    TAccountTokenMint,
    TAccountTokenProgram,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  NewWrapperV2Instruction<
    TProgramAddress,
    TAccountBase,
    TAccountMintWrapper,
    TAccountAdmin,
    TAccountTokenMint,
    TAccountTokenProgram,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mintWrapper.value) {
    accounts.mintWrapper.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            34, 77, 105, 110, 116, 87, 114, 97, 112, 112, 101, 114, 34,
          ]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.base.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getNewWrapperV2InstructionDataEncoder().encode(
      args as NewWrapperV2InstructionDataArgs,
    ),
  } as NewWrapperV2Instruction<
    TProgramAddress,
    TAccountBase,
    TAccountMintWrapper,
    TAccountAdmin,
    TAccountTokenMint,
    TAccountTokenProgram,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface NewWrapperV2Input<
  TAccountBase extends string = string,
  TAccountMintWrapper extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  base: TransactionSigner<TAccountBase>;
  mintWrapper: Address<TAccountMintWrapper>;
  admin: Address<TAccountAdmin>;
  tokenMint: Address<TAccountTokenMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  hardCap: NewWrapperV2InstructionDataArgs["hardCap"];
}

export function getNewWrapperV2Instruction<
  TAccountBase extends string,
  TAccountMintWrapper extends string,
  TAccountAdmin extends string,
  TAccountTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
>(
  input: NewWrapperV2Input<
    TAccountBase,
    TAccountMintWrapper,
    TAccountAdmin,
    TAccountTokenMint,
    TAccountTokenProgram,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): NewWrapperV2Instruction<
  TProgramAddress,
  TAccountBase,
  TAccountMintWrapper,
  TAccountAdmin,
  TAccountTokenMint,
  TAccountTokenProgram,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    mintWrapper: { value: input.mintWrapper ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.mintWrapper),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getNewWrapperV2InstructionDataEncoder().encode(
      args as NewWrapperV2InstructionDataArgs,
    ),
  } as NewWrapperV2Instruction<
    TProgramAddress,
    TAccountBase,
    TAccountMintWrapper,
    TAccountAdmin,
    TAccountTokenMint,
    TAccountTokenProgram,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedNewWrapperV2Instruction<
  TProgram extends string = typeof QUARRY_MINT_WRAPPER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    base: TAccountMetas[0];
    mintWrapper: TAccountMetas[1];
    admin: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: NewWrapperV2InstructionData;
}

export function parseNewWrapperV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedNewWrapperV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      mintWrapper: getNextAccount(),
      admin: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getNewWrapperV2InstructionDataDecoder().decode(instruction.data),
  };
}
