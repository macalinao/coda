/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const CREATE_QUARRY_DISCRIMINATOR = new Uint8Array([
  18, 113, 223, 132, 105, 208, 102, 93,
]);

export function getCreateQuarryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_QUARRY_DISCRIMINATOR,
  );
}

export type CreateQuarryInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountQuarry extends string | AccountMeta = string,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountTokenMint extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountUnusedAccount extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUnusedAccount extends string
        ? ReadonlyAccount<TAccountUnusedAccount>
        : TAccountUnusedAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateQuarryInstructionData {
  discriminator: ReadonlyUint8Array;
  bump: number;
}

export interface CreateQuarryInstructionDataArgs {
  bump: number;
}

export function getCreateQuarryInstructionDataEncoder(): FixedSizeEncoder<CreateQuarryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_QUARRY_DISCRIMINATOR }),
  );
}

export function getCreateQuarryInstructionDataDecoder(): FixedSizeDecoder<CreateQuarryInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["bump", getU8Decoder()],
  ]);
}

export function getCreateQuarryInstructionDataCodec(): FixedSizeCodec<
  CreateQuarryInstructionDataArgs,
  CreateQuarryInstructionData
> {
  return combineCodec(
    getCreateQuarryInstructionDataEncoder(),
    getCreateQuarryInstructionDataDecoder(),
  );
}

export interface CreateQuarryInput<
  TAccountQuarry extends string = string,
  TAccountAuthority extends string = string,
  TAccountRewarder extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPayer extends string = string,
  TAccountUnusedAccount extends string = string,
  TAccountSystemProgram extends string = string,
> {
  quarry: Address<TAccountQuarry>;
  authority: TransactionSigner<TAccountAuthority>;
  rewarder: Address<TAccountRewarder>;
  tokenMint: Address<TAccountTokenMint>;
  payer: TransactionSigner<TAccountPayer>;
  unusedAccount: Address<TAccountUnusedAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: CreateQuarryInstructionDataArgs["bump"];
}

export function getCreateQuarryInstruction<
  TAccountQuarry extends string,
  TAccountAuthority extends string,
  TAccountRewarder extends string,
  TAccountTokenMint extends string,
  TAccountPayer extends string,
  TAccountUnusedAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: CreateQuarryInput<
    TAccountQuarry,
    TAccountAuthority,
    TAccountRewarder,
    TAccountTokenMint,
    TAccountPayer,
    TAccountUnusedAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CreateQuarryInstruction<
  TProgramAddress,
  TAccountQuarry,
  TAccountAuthority,
  TAccountRewarder,
  TAccountTokenMint,
  TAccountPayer,
  TAccountUnusedAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    quarry: { value: input.quarry ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    unusedAccount: { value: input.unusedAccount ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.unusedAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateQuarryInstructionDataEncoder().encode(
      args as CreateQuarryInstructionDataArgs,
    ),
  } as CreateQuarryInstruction<
    TProgramAddress,
    TAccountQuarry,
    TAccountAuthority,
    TAccountRewarder,
    TAccountTokenMint,
    TAccountPayer,
    TAccountUnusedAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedCreateQuarryInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    quarry: TAccountMetas[0];
    authority: TAccountMetas[1];
    rewarder: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    payer: TAccountMetas[4];
    unusedAccount: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CreateQuarryInstructionData;
}

export function parseCreateQuarryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateQuarryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      quarry: getNextAccount(),
      authority: getNextAccount(),
      rewarder: getNextAccount(),
      tokenMint: getNextAccount(),
      payer: getNextAccount(),
      unusedAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateQuarryInstructionDataDecoder().decode(instruction.data),
  };
}
