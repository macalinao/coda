/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_REDEEMER_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const REDEEM_TOKENS_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  246, 98, 134, 41, 152, 33, 120, 69,
]);

export function getRedeemTokensDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REDEEM_TOKENS_DISCRIMINATOR,
  );
}

export type RedeemTokensInstruction<
  TProgram extends string = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
  TAccountRedeemer extends string | AccountMeta = string,
  TAccountSourceAuthority extends string | AccountMeta = string,
  TAccountIouMint extends string | AccountMeta = string,
  TAccountIouSource extends string | AccountMeta = string,
  TAccountRedemptionVault extends string | AccountMeta = string,
  TAccountRedemptionDestination extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRedeemer extends string
        ? WritableAccount<TAccountRedeemer>
        : TAccountRedeemer,
      TAccountSourceAuthority extends string
        ? ReadonlySignerAccount<TAccountSourceAuthority> &
            AccountSignerMeta<TAccountSourceAuthority>
        : TAccountSourceAuthority,
      TAccountIouMint extends string
        ? WritableAccount<TAccountIouMint>
        : TAccountIouMint,
      TAccountIouSource extends string
        ? WritableAccount<TAccountIouSource>
        : TAccountIouSource,
      TAccountRedemptionVault extends string
        ? WritableAccount<TAccountRedemptionVault>
        : TAccountRedemptionVault,
      TAccountRedemptionDestination extends string
        ? WritableAccount<TAccountRedemptionDestination>
        : TAccountRedemptionDestination,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface RedeemTokensInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface RedeemTokensInstructionDataArgs {
  amount: number | bigint;
}

export function getRedeemTokensInstructionDataEncoder(): FixedSizeEncoder<RedeemTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REDEEM_TOKENS_DISCRIMINATOR }),
  );
}

export function getRedeemTokensInstructionDataDecoder(): FixedSizeDecoder<RedeemTokensInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getRedeemTokensInstructionDataCodec(): FixedSizeCodec<
  RedeemTokensInstructionDataArgs,
  RedeemTokensInstructionData
> {
  return combineCodec(
    getRedeemTokensInstructionDataEncoder(),
    getRedeemTokensInstructionDataDecoder(),
  );
}

export interface RedeemTokensInput<
  TAccountRedeemer extends string = string,
  TAccountSourceAuthority extends string = string,
  TAccountIouMint extends string = string,
  TAccountIouSource extends string = string,
  TAccountRedemptionVault extends string = string,
  TAccountRedemptionDestination extends string = string,
  TAccountTokenProgram extends string = string,
> {
  redeemer: Address<TAccountRedeemer>;
  sourceAuthority: TransactionSigner<TAccountSourceAuthority>;
  iouMint: Address<TAccountIouMint>;
  iouSource: Address<TAccountIouSource>;
  redemptionVault: Address<TAccountRedemptionVault>;
  redemptionDestination: Address<TAccountRedemptionDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: RedeemTokensInstructionDataArgs["amount"];
}

export function getRedeemTokensInstruction<
  TAccountRedeemer extends string,
  TAccountSourceAuthority extends string,
  TAccountIouMint extends string,
  TAccountIouSource extends string,
  TAccountRedemptionVault extends string,
  TAccountRedemptionDestination extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
>(
  input: RedeemTokensInput<
    TAccountRedeemer,
    TAccountSourceAuthority,
    TAccountIouMint,
    TAccountIouSource,
    TAccountRedemptionVault,
    TAccountRedemptionDestination,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RedeemTokensInstruction<
  TProgramAddress,
  TAccountRedeemer,
  TAccountSourceAuthority,
  TAccountIouMint,
  TAccountIouSource,
  TAccountRedemptionVault,
  TAccountRedemptionDestination,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_REDEEMER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    redeemer: { value: input.redeemer ?? null, isWritable: true },
    sourceAuthority: {
      value: input.sourceAuthority ?? null,
      isWritable: false,
    },
    iouMint: { value: input.iouMint ?? null, isWritable: true },
    iouSource: { value: input.iouSource ?? null, isWritable: true },
    redemptionVault: { value: input.redemptionVault ?? null, isWritable: true },
    redemptionDestination: {
      value: input.redemptionDestination ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.redeemer),
      getAccountMeta(accounts.sourceAuthority),
      getAccountMeta(accounts.iouMint),
      getAccountMeta(accounts.iouSource),
      getAccountMeta(accounts.redemptionVault),
      getAccountMeta(accounts.redemptionDestination),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRedeemTokensInstructionDataEncoder().encode(
      args as RedeemTokensInstructionDataArgs,
    ),
  } as RedeemTokensInstruction<
    TProgramAddress,
    TAccountRedeemer,
    TAccountSourceAuthority,
    TAccountIouMint,
    TAccountIouSource,
    TAccountRedemptionVault,
    TAccountRedemptionDestination,
    TAccountTokenProgram
  >;

  return instruction;
}

export interface ParsedRedeemTokensInstruction<
  TProgram extends string = typeof QUARRY_REDEEMER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    redeemer: TAccountMetas[0];
    sourceAuthority: TAccountMetas[1];
    iouMint: TAccountMetas[2];
    iouSource: TAccountMetas[3];
    redemptionVault: TAccountMetas[4];
    redemptionDestination: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: RedeemTokensInstructionData;
}

export function parseRedeemTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedRedeemTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      redeemer: getNextAccount(),
      sourceAuthority: getNextAccount(),
      iouMint: getNextAccount(),
      iouSource: getNextAccount(),
      redemptionVault: getNextAccount(),
      redemptionDestination: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRedeemTokensInstructionDataDecoder().decode(instruction.data),
  };
}
