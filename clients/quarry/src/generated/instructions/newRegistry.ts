/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { expectAddress, getAccountMetaFactory } from "../shared/index.js";

export const NEW_REGISTRY_DISCRIMINATOR = new Uint8Array([
  237, 187, 50, 70, 74, 26, 144, 230,
]);

export function getNewRegistryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NEW_REGISTRY_DISCRIMINATOR,
  );
}

export type NewRegistryInstruction<
  TProgram extends string = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountRegistry extends string | AccountMeta = string,
  TAccountPayer extends string | AccountMeta = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRewarder extends string
        ? ReadonlyAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountRegistry extends string
        ? WritableAccount<TAccountRegistry>
        : TAccountRegistry,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface NewRegistryInstructionData {
  discriminator: ReadonlyUint8Array;
  maxQuarries: number;
  bump: number;
}

export interface NewRegistryInstructionDataArgs {
  maxQuarries: number;
  bump: number;
}

export function getNewRegistryInstructionDataEncoder(): FixedSizeEncoder<NewRegistryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["maxQuarries", getU16Encoder()],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NEW_REGISTRY_DISCRIMINATOR }),
  );
}

export function getNewRegistryInstructionDataDecoder(): FixedSizeDecoder<NewRegistryInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["maxQuarries", getU16Decoder()],
    ["bump", getU8Decoder()],
  ]);
}

export function getNewRegistryInstructionDataCodec(): FixedSizeCodec<
  NewRegistryInstructionDataArgs,
  NewRegistryInstructionData
> {
  return combineCodec(
    getNewRegistryInstructionDataEncoder(),
    getNewRegistryInstructionDataDecoder(),
  );
}

export interface NewRegistryAsyncInput<
  TAccountRewarder extends string = string,
  TAccountRegistry extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  rewarder: Address<TAccountRewarder>;
  registry?: Address<TAccountRegistry>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  maxQuarries: NewRegistryInstructionDataArgs["maxQuarries"];
  bump: NewRegistryInstructionDataArgs["bump"];
}

export async function getNewRegistryInstructionAsync<
  TAccountRewarder extends string,
  TAccountRegistry extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
>(
  input: NewRegistryAsyncInput<
    TAccountRewarder,
    TAccountRegistry,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  NewRegistryInstruction<
    TProgramAddress,
    TAccountRewarder,
    TAccountRegistry,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewarder: { value: input.rewarder ?? null, isWritable: false },
    registry: { value: input.registry ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.registry.value) {
    accounts.registry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            34, 81, 117, 97, 114, 114, 121, 82, 101, 103, 105, 115, 116, 114,
            121, 34,
          ]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewarder.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.registry),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getNewRegistryInstructionDataEncoder().encode(
      args as NewRegistryInstructionDataArgs,
    ),
  } as NewRegistryInstruction<
    TProgramAddress,
    TAccountRewarder,
    TAccountRegistry,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface NewRegistryInput<
  TAccountRewarder extends string = string,
  TAccountRegistry extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  rewarder: Address<TAccountRewarder>;
  registry: Address<TAccountRegistry>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  maxQuarries: NewRegistryInstructionDataArgs["maxQuarries"];
  bump: NewRegistryInstructionDataArgs["bump"];
}

export function getNewRegistryInstruction<
  TAccountRewarder extends string,
  TAccountRegistry extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
>(
  input: NewRegistryInput<
    TAccountRewarder,
    TAccountRegistry,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): NewRegistryInstruction<
  TProgramAddress,
  TAccountRewarder,
  TAccountRegistry,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewarder: { value: input.rewarder ?? null, isWritable: false },
    registry: { value: input.registry ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.registry),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getNewRegistryInstructionDataEncoder().encode(
      args as NewRegistryInstructionDataArgs,
    ),
  } as NewRegistryInstruction<
    TProgramAddress,
    TAccountRewarder,
    TAccountRegistry,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedNewRegistryInstruction<
  TProgram extends string = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    rewarder: TAccountMetas[0];
    registry: TAccountMetas[1];
    payer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: NewRegistryInstructionData;
}

export function parseNewRegistryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedNewRegistryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewarder: getNextAccount(),
      registry: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getNewRegistryInstructionDataDecoder().decode(instruction.data),
  };
}
