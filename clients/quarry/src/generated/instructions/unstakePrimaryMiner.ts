/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MERGE_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const UNSTAKE_PRIMARY_MINER_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([45, 62, 3, 33, 114, 156, 186, 26]);

export function getUnstakePrimaryMinerDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UNSTAKE_PRIMARY_MINER_DISCRIMINATOR,
  );
}

export type UnstakePrimaryMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMmOwner extends string | AccountMeta = string,
  TAccountMmPrimaryTokenAccount extends string | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakePool extends string | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakeMm extends string | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakeRewarder extends
    | string
    | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakeQuarry extends string | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakeMiner extends string | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakeMinerVault extends
    | string
    | AccountMeta = string,
  TAccountUnstakePrimaryMinerStakeTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountUnstakePrimaryMinerStakeMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMmOwner extends string
        ? ReadonlySignerAccount<TAccountMmOwner> &
            AccountSignerMeta<TAccountMmOwner>
        : TAccountMmOwner,
      TAccountMmPrimaryTokenAccount extends string
        ? WritableAccount<TAccountMmPrimaryTokenAccount>
        : TAccountMmPrimaryTokenAccount,
      TAccountUnstakePrimaryMinerStakePool extends string
        ? WritableAccount<TAccountUnstakePrimaryMinerStakePool>
        : TAccountUnstakePrimaryMinerStakePool,
      TAccountUnstakePrimaryMinerStakeMm extends string
        ? WritableAccount<TAccountUnstakePrimaryMinerStakeMm>
        : TAccountUnstakePrimaryMinerStakeMm,
      TAccountUnstakePrimaryMinerStakeRewarder extends string
        ? ReadonlyAccount<TAccountUnstakePrimaryMinerStakeRewarder>
        : TAccountUnstakePrimaryMinerStakeRewarder,
      TAccountUnstakePrimaryMinerStakeQuarry extends string
        ? WritableAccount<TAccountUnstakePrimaryMinerStakeQuarry>
        : TAccountUnstakePrimaryMinerStakeQuarry,
      TAccountUnstakePrimaryMinerStakeMiner extends string
        ? WritableAccount<TAccountUnstakePrimaryMinerStakeMiner>
        : TAccountUnstakePrimaryMinerStakeMiner,
      TAccountUnstakePrimaryMinerStakeMinerVault extends string
        ? WritableAccount<TAccountUnstakePrimaryMinerStakeMinerVault>
        : TAccountUnstakePrimaryMinerStakeMinerVault,
      TAccountUnstakePrimaryMinerStakeTokenProgram extends string
        ? ReadonlyAccount<TAccountUnstakePrimaryMinerStakeTokenProgram>
        : TAccountUnstakePrimaryMinerStakeTokenProgram,
      TAccountUnstakePrimaryMinerStakeMineProgram extends string
        ? ReadonlyAccount<TAccountUnstakePrimaryMinerStakeMineProgram>
        : TAccountUnstakePrimaryMinerStakeMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UnstakePrimaryMinerInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface UnstakePrimaryMinerInstructionDataArgs {
  amount: number | bigint;
}

export function getUnstakePrimaryMinerInstructionDataEncoder(): FixedSizeEncoder<UnstakePrimaryMinerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UNSTAKE_PRIMARY_MINER_DISCRIMINATOR,
    }),
  );
}

export function getUnstakePrimaryMinerInstructionDataDecoder(): FixedSizeDecoder<UnstakePrimaryMinerInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getUnstakePrimaryMinerInstructionDataCodec(): FixedSizeCodec<
  UnstakePrimaryMinerInstructionDataArgs,
  UnstakePrimaryMinerInstructionData
> {
  return combineCodec(
    getUnstakePrimaryMinerInstructionDataEncoder(),
    getUnstakePrimaryMinerInstructionDataDecoder(),
  );
}

export interface UnstakePrimaryMinerInput<
  TAccountMmOwner extends string = string,
  TAccountMmPrimaryTokenAccount extends string = string,
  TAccountUnstakePrimaryMinerStakePool extends string = string,
  TAccountUnstakePrimaryMinerStakeMm extends string = string,
  TAccountUnstakePrimaryMinerStakeRewarder extends string = string,
  TAccountUnstakePrimaryMinerStakeQuarry extends string = string,
  TAccountUnstakePrimaryMinerStakeMiner extends string = string,
  TAccountUnstakePrimaryMinerStakeMinerVault extends string = string,
  TAccountUnstakePrimaryMinerStakeTokenProgram extends string = string,
  TAccountUnstakePrimaryMinerStakeMineProgram extends string = string,
> {
  mmOwner: TransactionSigner<TAccountMmOwner>;
  mmPrimaryTokenAccount: Address<TAccountMmPrimaryTokenAccount>;
  unstakePrimaryMinerStakePool: Address<TAccountUnstakePrimaryMinerStakePool>;
  unstakePrimaryMinerStakeMm: Address<TAccountUnstakePrimaryMinerStakeMm>;
  unstakePrimaryMinerStakeRewarder: Address<TAccountUnstakePrimaryMinerStakeRewarder>;
  unstakePrimaryMinerStakeQuarry: Address<TAccountUnstakePrimaryMinerStakeQuarry>;
  unstakePrimaryMinerStakeMiner: Address<TAccountUnstakePrimaryMinerStakeMiner>;
  unstakePrimaryMinerStakeMinerVault: Address<TAccountUnstakePrimaryMinerStakeMinerVault>;
  unstakePrimaryMinerStakeTokenProgram?: Address<TAccountUnstakePrimaryMinerStakeTokenProgram>;
  unstakePrimaryMinerStakeMineProgram?: Address<TAccountUnstakePrimaryMinerStakeMineProgram>;
  amount: UnstakePrimaryMinerInstructionDataArgs["amount"];
}

export function getUnstakePrimaryMinerInstruction<
  TAccountMmOwner extends string,
  TAccountMmPrimaryTokenAccount extends string,
  TAccountUnstakePrimaryMinerStakePool extends string,
  TAccountUnstakePrimaryMinerStakeMm extends string,
  TAccountUnstakePrimaryMinerStakeRewarder extends string,
  TAccountUnstakePrimaryMinerStakeQuarry extends string,
  TAccountUnstakePrimaryMinerStakeMiner extends string,
  TAccountUnstakePrimaryMinerStakeMinerVault extends string,
  TAccountUnstakePrimaryMinerStakeTokenProgram extends string,
  TAccountUnstakePrimaryMinerStakeMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
>(
  input: UnstakePrimaryMinerInput<
    TAccountMmOwner,
    TAccountMmPrimaryTokenAccount,
    TAccountUnstakePrimaryMinerStakePool,
    TAccountUnstakePrimaryMinerStakeMm,
    TAccountUnstakePrimaryMinerStakeRewarder,
    TAccountUnstakePrimaryMinerStakeQuarry,
    TAccountUnstakePrimaryMinerStakeMiner,
    TAccountUnstakePrimaryMinerStakeMinerVault,
    TAccountUnstakePrimaryMinerStakeTokenProgram,
    TAccountUnstakePrimaryMinerStakeMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UnstakePrimaryMinerInstruction<
  TProgramAddress,
  TAccountMmOwner,
  TAccountMmPrimaryTokenAccount,
  TAccountUnstakePrimaryMinerStakePool,
  TAccountUnstakePrimaryMinerStakeMm,
  TAccountUnstakePrimaryMinerStakeRewarder,
  TAccountUnstakePrimaryMinerStakeQuarry,
  TAccountUnstakePrimaryMinerStakeMiner,
  TAccountUnstakePrimaryMinerStakeMinerVault,
  TAccountUnstakePrimaryMinerStakeTokenProgram,
  TAccountUnstakePrimaryMinerStakeMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_MERGE_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mmOwner: { value: input.mmOwner ?? null, isWritable: false },
    mmPrimaryTokenAccount: {
      value: input.mmPrimaryTokenAccount ?? null,
      isWritable: true,
    },
    unstakePrimaryMinerStakePool: {
      value: input.unstakePrimaryMinerStakePool ?? null,
      isWritable: true,
    },
    unstakePrimaryMinerStakeMm: {
      value: input.unstakePrimaryMinerStakeMm ?? null,
      isWritable: true,
    },
    unstakePrimaryMinerStakeRewarder: {
      value: input.unstakePrimaryMinerStakeRewarder ?? null,
      isWritable: false,
    },
    unstakePrimaryMinerStakeQuarry: {
      value: input.unstakePrimaryMinerStakeQuarry ?? null,
      isWritable: true,
    },
    unstakePrimaryMinerStakeMiner: {
      value: input.unstakePrimaryMinerStakeMiner ?? null,
      isWritable: true,
    },
    unstakePrimaryMinerStakeMinerVault: {
      value: input.unstakePrimaryMinerStakeMinerVault ?? null,
      isWritable: true,
    },
    unstakePrimaryMinerStakeTokenProgram: {
      value: input.unstakePrimaryMinerStakeTokenProgram ?? null,
      isWritable: false,
    },
    unstakePrimaryMinerStakeMineProgram: {
      value: input.unstakePrimaryMinerStakeMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.unstakePrimaryMinerStakeTokenProgram.value) {
    accounts.unstakePrimaryMinerStakeTokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.unstakePrimaryMinerStakeMineProgram.value) {
    accounts.unstakePrimaryMinerStakeMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mmOwner),
      getAccountMeta(accounts.mmPrimaryTokenAccount),
      getAccountMeta(accounts.unstakePrimaryMinerStakePool),
      getAccountMeta(accounts.unstakePrimaryMinerStakeMm),
      getAccountMeta(accounts.unstakePrimaryMinerStakeRewarder),
      getAccountMeta(accounts.unstakePrimaryMinerStakeQuarry),
      getAccountMeta(accounts.unstakePrimaryMinerStakeMiner),
      getAccountMeta(accounts.unstakePrimaryMinerStakeMinerVault),
      getAccountMeta(accounts.unstakePrimaryMinerStakeTokenProgram),
      getAccountMeta(accounts.unstakePrimaryMinerStakeMineProgram),
    ],
    programAddress,
    data: getUnstakePrimaryMinerInstructionDataEncoder().encode(
      args as UnstakePrimaryMinerInstructionDataArgs,
    ),
  } as UnstakePrimaryMinerInstruction<
    TProgramAddress,
    TAccountMmOwner,
    TAccountMmPrimaryTokenAccount,
    TAccountUnstakePrimaryMinerStakePool,
    TAccountUnstakePrimaryMinerStakeMm,
    TAccountUnstakePrimaryMinerStakeRewarder,
    TAccountUnstakePrimaryMinerStakeQuarry,
    TAccountUnstakePrimaryMinerStakeMiner,
    TAccountUnstakePrimaryMinerStakeMinerVault,
    TAccountUnstakePrimaryMinerStakeTokenProgram,
    TAccountUnstakePrimaryMinerStakeMineProgram
  >;

  return instruction;
}

export interface ParsedUnstakePrimaryMinerInstruction<
  TProgram extends string = typeof QUARRY_MERGE_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    mmOwner: TAccountMetas[0];
    mmPrimaryTokenAccount: TAccountMetas[1];
    unstakePrimaryMinerStakePool: TAccountMetas[2];
    unstakePrimaryMinerStakeMm: TAccountMetas[3];
    unstakePrimaryMinerStakeRewarder: TAccountMetas[4];
    unstakePrimaryMinerStakeQuarry: TAccountMetas[5];
    unstakePrimaryMinerStakeMiner: TAccountMetas[6];
    unstakePrimaryMinerStakeMinerVault: TAccountMetas[7];
    unstakePrimaryMinerStakeTokenProgram: TAccountMetas[8];
    unstakePrimaryMinerStakeMineProgram: TAccountMetas[9];
  };
  data: UnstakePrimaryMinerInstructionData;
}

export function parseUnstakePrimaryMinerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUnstakePrimaryMinerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mmOwner: getNextAccount(),
      mmPrimaryTokenAccount: getNextAccount(),
      unstakePrimaryMinerStakePool: getNextAccount(),
      unstakePrimaryMinerStakeMm: getNextAccount(),
      unstakePrimaryMinerStakeRewarder: getNextAccount(),
      unstakePrimaryMinerStakeQuarry: getNextAccount(),
      unstakePrimaryMinerStakeMiner: getNextAccount(),
      unstakePrimaryMinerStakeMinerVault: getNextAccount(),
      unstakePrimaryMinerStakeTokenProgram: getNextAccount(),
      unstakePrimaryMinerStakeMineProgram: getNextAccount(),
    },
    data: getUnstakePrimaryMinerInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
