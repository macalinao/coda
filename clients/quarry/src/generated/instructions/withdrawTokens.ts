/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_MINE_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const WITHDRAW_TOKENS_DISCRIMINATOR = new Uint8Array([
  2, 4, 225, 61, 19, 182, 106, 170,
]);

export function getWithdrawTokensDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_TOKENS_DISCRIMINATOR,
  );
}

export type WithdrawTokensInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta = string,
  TAccountMiner extends string | AccountMeta = string,
  TAccountQuarry extends string | AccountMeta = string,
  TAccountMinerVault extends string | AccountMeta = string,
  TAccountTokenAccount extends string | AccountMeta = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountRewarder extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMiner extends string
        ? WritableAccount<TAccountMiner>
        : TAccountMiner,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountMinerVault extends string
        ? WritableAccount<TAccountMinerVault>
        : TAccountMinerVault,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRewarder extends string
        ? ReadonlyAccount<TAccountRewarder>
        : TAccountRewarder,
      ...TRemainingAccounts,
    ]
  >;

export interface WithdrawTokensInstructionData {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
}

export interface WithdrawTokensInstructionDataArgs {
  amount: number | bigint;
}

export function getWithdrawTokensInstructionDataEncoder(): FixedSizeEncoder<WithdrawTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_TOKENS_DISCRIMINATOR }),
  );
}

export function getWithdrawTokensInstructionDataDecoder(): FixedSizeDecoder<WithdrawTokensInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
  ]);
}

export function getWithdrawTokensInstructionDataCodec(): FixedSizeCodec<
  WithdrawTokensInstructionDataArgs,
  WithdrawTokensInstructionData
> {
  return combineCodec(
    getWithdrawTokensInstructionDataEncoder(),
    getWithdrawTokensInstructionDataDecoder(),
  );
}

export interface WithdrawTokensInput<
  TAccountAuthority extends string = string,
  TAccountMiner extends string = string,
  TAccountQuarry extends string = string,
  TAccountMinerVault extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRewarder extends string = string,
> {
  authority: TransactionSigner<TAccountAuthority>;
  miner: Address<TAccountMiner>;
  quarry: Address<TAccountQuarry>;
  minerVault: Address<TAccountMinerVault>;
  tokenAccount: Address<TAccountTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewarder: Address<TAccountRewarder>;
  amount: WithdrawTokensInstructionDataArgs["amount"];
}

export function getWithdrawTokensInstruction<
  TAccountAuthority extends string,
  TAccountMiner extends string,
  TAccountQuarry extends string,
  TAccountMinerVault extends string,
  TAccountTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountRewarder extends string,
  TProgramAddress extends Address = typeof QUARRY_MINE_PROGRAM_ADDRESS,
>(
  input: WithdrawTokensInput<
    TAccountAuthority,
    TAccountMiner,
    TAccountQuarry,
    TAccountMinerVault,
    TAccountTokenAccount,
    TAccountTokenProgram,
    TAccountRewarder
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawTokensInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMiner,
  TAccountQuarry,
  TAccountMinerVault,
  TAccountTokenAccount,
  TAccountTokenProgram,
  TAccountRewarder
> {
  // Program address.
  const programAddress = config?.programAddress ?? QUARRY_MINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    miner: { value: input.miner ?? null, isWritable: true },
    quarry: { value: input.quarry ?? null, isWritable: true },
    minerVault: { value: input.minerVault ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.minerVault),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rewarder),
    ],
    programAddress,
    data: getWithdrawTokensInstructionDataEncoder().encode(
      args as WithdrawTokensInstructionDataArgs,
    ),
  } as WithdrawTokensInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMiner,
    TAccountQuarry,
    TAccountMinerVault,
    TAccountTokenAccount,
    TAccountTokenProgram,
    TAccountRewarder
  >;

  return instruction;
}

export interface ParsedWithdrawTokensInstruction<
  TProgram extends string = typeof QUARRY_MINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    miner: TAccountMetas[1];
    quarry: TAccountMetas[2];
    minerVault: TAccountMetas[3];
    tokenAccount: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    rewarder: TAccountMetas[6];
  };
  data: WithdrawTokensInstructionData;
}

export function parseWithdrawTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedWithdrawTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      miner: getNextAccount(),
      quarry: getNextAccount(),
      minerVault: getNextAccount(),
      tokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      rewarder: getNextAccount(),
    },
    data: getWithdrawTokensInstructionDataDecoder().decode(instruction.data),
  };
}
