/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DELEGATE_SET_ANNUAL_REWARDS_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([121, 174, 85, 150, 174, 18, 13, 31]);

export function getDelegateSetAnnualRewardsDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELEGATE_SET_ANNUAL_REWARDS_DISCRIMINATOR,
  );
}

export type DelegateSetAnnualRewardsInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountSetAnnualRewardsWithDelegateOperator extends
    | string
    | AccountMeta = string,
  TAccountSetAnnualRewardsWithDelegateDelegate extends
    | string
    | AccountMeta = string,
  TAccountSetAnnualRewardsWithDelegateRewarder extends
    | string
    | AccountMeta = string,
  TAccountSetAnnualRewardsWithDelegateQuarryMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSetAnnualRewardsWithDelegateOperator extends string
        ? WritableAccount<TAccountSetAnnualRewardsWithDelegateOperator>
        : TAccountSetAnnualRewardsWithDelegateOperator,
      TAccountSetAnnualRewardsWithDelegateDelegate extends string
        ? ReadonlySignerAccount<TAccountSetAnnualRewardsWithDelegateDelegate> &
            AccountSignerMeta<TAccountSetAnnualRewardsWithDelegateDelegate>
        : TAccountSetAnnualRewardsWithDelegateDelegate,
      TAccountSetAnnualRewardsWithDelegateRewarder extends string
        ? WritableAccount<TAccountSetAnnualRewardsWithDelegateRewarder>
        : TAccountSetAnnualRewardsWithDelegateRewarder,
      TAccountSetAnnualRewardsWithDelegateQuarryMineProgram extends string
        ? ReadonlyAccount<TAccountSetAnnualRewardsWithDelegateQuarryMineProgram>
        : TAccountSetAnnualRewardsWithDelegateQuarryMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DelegateSetAnnualRewardsInstructionData {
  discriminator: ReadonlyUint8Array;
  newRate: bigint;
}

export interface DelegateSetAnnualRewardsInstructionDataArgs {
  newRate: number | bigint;
}

export function getDelegateSetAnnualRewardsInstructionDataEncoder(): FixedSizeEncoder<DelegateSetAnnualRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newRate", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DELEGATE_SET_ANNUAL_REWARDS_DISCRIMINATOR,
    }),
  );
}

export function getDelegateSetAnnualRewardsInstructionDataDecoder(): FixedSizeDecoder<DelegateSetAnnualRewardsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newRate", getU64Decoder()],
  ]);
}

export function getDelegateSetAnnualRewardsInstructionDataCodec(): FixedSizeCodec<
  DelegateSetAnnualRewardsInstructionDataArgs,
  DelegateSetAnnualRewardsInstructionData
> {
  return combineCodec(
    getDelegateSetAnnualRewardsInstructionDataEncoder(),
    getDelegateSetAnnualRewardsInstructionDataDecoder(),
  );
}

export interface DelegateSetAnnualRewardsInput<
  TAccountSetAnnualRewardsWithDelegateOperator extends string = string,
  TAccountSetAnnualRewardsWithDelegateDelegate extends string = string,
  TAccountSetAnnualRewardsWithDelegateRewarder extends string = string,
  TAccountSetAnnualRewardsWithDelegateQuarryMineProgram extends string = string,
> {
  setAnnualRewardsWithDelegateOperator: Address<TAccountSetAnnualRewardsWithDelegateOperator>;
  setAnnualRewardsWithDelegateDelegate: TransactionSigner<TAccountSetAnnualRewardsWithDelegateDelegate>;
  setAnnualRewardsWithDelegateRewarder: Address<TAccountSetAnnualRewardsWithDelegateRewarder>;
  setAnnualRewardsWithDelegateQuarryMineProgram?: Address<TAccountSetAnnualRewardsWithDelegateQuarryMineProgram>;
  newRate: DelegateSetAnnualRewardsInstructionDataArgs["newRate"];
}

export function getDelegateSetAnnualRewardsInstruction<
  TAccountSetAnnualRewardsWithDelegateOperator extends string,
  TAccountSetAnnualRewardsWithDelegateDelegate extends string,
  TAccountSetAnnualRewardsWithDelegateRewarder extends string,
  TAccountSetAnnualRewardsWithDelegateQuarryMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: DelegateSetAnnualRewardsInput<
    TAccountSetAnnualRewardsWithDelegateOperator,
    TAccountSetAnnualRewardsWithDelegateDelegate,
    TAccountSetAnnualRewardsWithDelegateRewarder,
    TAccountSetAnnualRewardsWithDelegateQuarryMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DelegateSetAnnualRewardsInstruction<
  TProgramAddress,
  TAccountSetAnnualRewardsWithDelegateOperator,
  TAccountSetAnnualRewardsWithDelegateDelegate,
  TAccountSetAnnualRewardsWithDelegateRewarder,
  TAccountSetAnnualRewardsWithDelegateQuarryMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    setAnnualRewardsWithDelegateOperator: {
      value: input.setAnnualRewardsWithDelegateOperator ?? null,
      isWritable: true,
    },
    setAnnualRewardsWithDelegateDelegate: {
      value: input.setAnnualRewardsWithDelegateDelegate ?? null,
      isWritable: false,
    },
    setAnnualRewardsWithDelegateRewarder: {
      value: input.setAnnualRewardsWithDelegateRewarder ?? null,
      isWritable: true,
    },
    setAnnualRewardsWithDelegateQuarryMineProgram: {
      value: input.setAnnualRewardsWithDelegateQuarryMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.setAnnualRewardsWithDelegateQuarryMineProgram.value) {
    accounts.setAnnualRewardsWithDelegateQuarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.setAnnualRewardsWithDelegateOperator),
      getAccountMeta(accounts.setAnnualRewardsWithDelegateDelegate),
      getAccountMeta(accounts.setAnnualRewardsWithDelegateRewarder),
      getAccountMeta(accounts.setAnnualRewardsWithDelegateQuarryMineProgram),
    ],
    programAddress,
    data: getDelegateSetAnnualRewardsInstructionDataEncoder().encode(
      args as DelegateSetAnnualRewardsInstructionDataArgs,
    ),
  } as DelegateSetAnnualRewardsInstruction<
    TProgramAddress,
    TAccountSetAnnualRewardsWithDelegateOperator,
    TAccountSetAnnualRewardsWithDelegateDelegate,
    TAccountSetAnnualRewardsWithDelegateRewarder,
    TAccountSetAnnualRewardsWithDelegateQuarryMineProgram
  >;

  return instruction;
}

export interface ParsedDelegateSetAnnualRewardsInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    setAnnualRewardsWithDelegateOperator: TAccountMetas[0];
    setAnnualRewardsWithDelegateDelegate: TAccountMetas[1];
    setAnnualRewardsWithDelegateRewarder: TAccountMetas[2];
    setAnnualRewardsWithDelegateQuarryMineProgram: TAccountMetas[3];
  };
  data: DelegateSetAnnualRewardsInstructionData;
}

export function parseDelegateSetAnnualRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDelegateSetAnnualRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      setAnnualRewardsWithDelegateOperator: getNextAccount(),
      setAnnualRewardsWithDelegateDelegate: getNextAccount(),
      setAnnualRewardsWithDelegateRewarder: getNextAccount(),
      setAnnualRewardsWithDelegateQuarryMineProgram: getNextAccount(),
    },
    data: getDelegateSetAnnualRewardsInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
