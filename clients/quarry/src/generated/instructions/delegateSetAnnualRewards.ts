/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  
  
  
  combineCodec,
  
  
  
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  
  
  
  
  
  
  
  transformEncoder
  
} from "@solana/kit";
import type {AccountMeta, AccountSignerMeta, Address, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, Instruction, InstructionWithAccounts, InstructionWithData, ReadonlyAccount, ReadonlySignerAccount, ReadonlyUint8Array, TransactionSigner, WritableAccount} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";
import {
  getAccountMetaFactory
  
} from "../shared/index.js";
import type {ResolvedAccount} from "../shared/index.js";

export const DELEGATE_SET_ANNUAL_REWARDS_DISCRIMINATOR = new Uint8Array([
  121, 174, 85, 150, 174, 18, 13, 31,
]);

export function getDelegateSetAnnualRewardsDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELEGATE_SET_ANNUAL_REWARDS_DISCRIMINATOR,
  );
}

export type DelegateSetAnnualRewardsInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountOperator extends string | AccountMeta = string,
  TAccountDelegate extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountQuarryMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOperator extends string
        ? WritableAccount<TAccountOperator>
        : TAccountOperator,
      TAccountDelegate extends string
        ? ReadonlySignerAccount<TAccountDelegate> &
            AccountSignerMeta<TAccountDelegate>
        : TAccountDelegate,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountQuarryMineProgram extends string
        ? ReadonlyAccount<TAccountQuarryMineProgram>
        : TAccountQuarryMineProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface DelegateSetAnnualRewardsInstructionData {
  discriminator: ReadonlyUint8Array;
  newRate: bigint;
}

export interface DelegateSetAnnualRewardsInstructionDataArgs {
  newRate: number | bigint;
}

export function getDelegateSetAnnualRewardsInstructionDataEncoder(): FixedSizeEncoder<DelegateSetAnnualRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newRate", getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DELEGATE_SET_ANNUAL_REWARDS_DISCRIMINATOR,
    }),
  );
}

export function getDelegateSetAnnualRewardsInstructionDataDecoder(): FixedSizeDecoder<DelegateSetAnnualRewardsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newRate", getU64Decoder()],
  ]);
}

export function getDelegateSetAnnualRewardsInstructionDataCodec(): FixedSizeCodec<
  DelegateSetAnnualRewardsInstructionDataArgs,
  DelegateSetAnnualRewardsInstructionData
> {
  return combineCodec(
    getDelegateSetAnnualRewardsInstructionDataEncoder(),
    getDelegateSetAnnualRewardsInstructionDataDecoder(),
  );
}

export interface DelegateSetAnnualRewardsInput<
  TAccountOperator extends string = string,
  TAccountDelegate extends string = string,
  TAccountRewarder extends string = string,
  TAccountQuarryMineProgram extends string = string,
> {
  operator: Address<TAccountOperator>;
  delegate: TransactionSigner<TAccountDelegate>;
  rewarder: Address<TAccountRewarder>;
  quarryMineProgram?: Address<TAccountQuarryMineProgram>;
  newRate: DelegateSetAnnualRewardsInstructionDataArgs["newRate"];
}

export function getDelegateSetAnnualRewardsInstruction<
  TAccountOperator extends string,
  TAccountDelegate extends string,
  TAccountRewarder extends string,
  TAccountQuarryMineProgram extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: DelegateSetAnnualRewardsInput<
    TAccountOperator,
    TAccountDelegate,
    TAccountRewarder,
    TAccountQuarryMineProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DelegateSetAnnualRewardsInstruction<
  TProgramAddress,
  TAccountOperator,
  TAccountDelegate,
  TAccountRewarder,
  TAccountQuarryMineProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    operator: { value: input.operator ?? null, isWritable: true },
    delegate: { value: input.delegate ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    quarryMineProgram: {
      value: input.quarryMineProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.quarryMineProgram.value) {
    accounts.quarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.quarryMineProgram),
    ],
    programAddress,
    data: getDelegateSetAnnualRewardsInstructionDataEncoder().encode(
      args as DelegateSetAnnualRewardsInstructionDataArgs,
    ),
  } as DelegateSetAnnualRewardsInstruction<
    TProgramAddress,
    TAccountOperator,
    TAccountDelegate,
    TAccountRewarder,
    TAccountQuarryMineProgram
  >;

  return instruction;
}

export interface ParsedDelegateSetAnnualRewardsInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    operator: TAccountMetas[0];
    delegate: TAccountMetas[1];
    rewarder: TAccountMetas[2];
    quarryMineProgram: TAccountMetas[3];
  };
  data: DelegateSetAnnualRewardsInstructionData;
}

export function parseDelegateSetAnnualRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDelegateSetAnnualRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      operator: getNextAccount(),
      delegate: getNextAccount(),
      rewarder: getNextAccount(),
      quarryMineProgram: getNextAccount(),
    },
    data: getDelegateSetAnnualRewardsInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
