/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import type { ResolvedAccount } from "../shared/index.js";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SET_SHARE_ALLOCATOR_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([96, 77, 203, 216, 167, 175, 61, 189]);

export function getSetShareAllocatorDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_SHARE_ALLOCATOR_DISCRIMINATOR,
  );
}

export type SetShareAllocatorInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountOperator extends string | AccountMeta = string,
  TAccountAdmin extends string | AccountMeta = string,
  TAccountDelegate extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOperator extends string
        ? WritableAccount<TAccountOperator>
        : TAccountOperator,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountDelegate extends string
        ? ReadonlyAccount<TAccountDelegate>
        : TAccountDelegate,
      ...TRemainingAccounts,
    ]
  >;

export interface SetShareAllocatorInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface SetShareAllocatorInstructionDataArgs {}

export function getSetShareAllocatorInstructionDataEncoder(): FixedSizeEncoder<SetShareAllocatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SET_SHARE_ALLOCATOR_DISCRIMINATOR }),
  );
}

export function getSetShareAllocatorInstructionDataDecoder(): FixedSizeDecoder<SetShareAllocatorInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetShareAllocatorInstructionDataCodec(): FixedSizeCodec<
  SetShareAllocatorInstructionDataArgs,
  SetShareAllocatorInstructionData
> {
  return combineCodec(
    getSetShareAllocatorInstructionDataEncoder(),
    getSetShareAllocatorInstructionDataDecoder(),
  );
}

export interface SetShareAllocatorInput<
  TAccountOperator extends string = string,
  TAccountAdmin extends string = string,
  TAccountDelegate extends string = string,
> {
  operator: Address<TAccountOperator>;
  admin: TransactionSigner<TAccountAdmin>;
  delegate: Address<TAccountDelegate>;
}

export function getSetShareAllocatorInstruction<
  TAccountOperator extends string,
  TAccountAdmin extends string,
  TAccountDelegate extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: SetShareAllocatorInput<
    TAccountOperator,
    TAccountAdmin,
    TAccountDelegate
  >,
  config?: { programAddress?: TProgramAddress },
): SetShareAllocatorInstruction<
  TProgramAddress,
  TAccountOperator,
  TAccountAdmin,
  TAccountDelegate
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    operator: { value: input.operator ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    delegate: { value: input.delegate ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.delegate),
    ],
    programAddress,
    data: getSetShareAllocatorInstructionDataEncoder().encode({}),
  } as SetShareAllocatorInstruction<
    TProgramAddress,
    TAccountOperator,
    TAccountAdmin,
    TAccountDelegate
  >;

  return instruction;
}

export interface ParsedSetShareAllocatorInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    operator: TAccountMetas[0];
    admin: TAccountMetas[1];
    delegate: TAccountMetas[2];
  };
  data: SetShareAllocatorInstructionData;
}

export function parseSetShareAllocatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetShareAllocatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      operator: getNextAccount(),
      admin: getNextAccount(),
      delegate: getNextAccount(),
    },
    data: getSetShareAllocatorInstructionDataDecoder().decode(instruction.data),
  };
}
