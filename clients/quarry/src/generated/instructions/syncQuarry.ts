/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_REGISTRY_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const SYNC_QUARRY_DISCRIMINATOR: ReadonlyUint8Array = new Uint8Array([
  48, 99, 184, 151, 219, 101, 253, 170,
]);

export function getSyncQuarryDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SYNC_QUARRY_DISCRIMINATOR);
}

export type SyncQuarryInstruction<
  TProgram extends string = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
  TAccountQuarry extends string | AccountMeta = string,
  TAccountRegistry extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountQuarry extends string
        ? ReadonlyAccount<TAccountQuarry>
        : TAccountQuarry,
      TAccountRegistry extends string
        ? WritableAccount<TAccountRegistry>
        : TAccountRegistry,
      ...TRemainingAccounts,
    ]
  >;

export interface SyncQuarryInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface SyncQuarryInstructionDataArgs {}

export function getSyncQuarryInstructionDataEncoder(): FixedSizeEncoder<SyncQuarryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SYNC_QUARRY_DISCRIMINATOR }),
  );
}

export function getSyncQuarryInstructionDataDecoder(): FixedSizeDecoder<SyncQuarryInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSyncQuarryInstructionDataCodec(): FixedSizeCodec<
  SyncQuarryInstructionDataArgs,
  SyncQuarryInstructionData
> {
  return combineCodec(
    getSyncQuarryInstructionDataEncoder(),
    getSyncQuarryInstructionDataDecoder(),
  );
}

export interface SyncQuarryInput<
  TAccountQuarry extends string = string,
  TAccountRegistry extends string = string,
> {
  quarry: Address<TAccountQuarry>;
  registry: Address<TAccountRegistry>;
}

export function getSyncQuarryInstruction<
  TAccountQuarry extends string,
  TAccountRegistry extends string,
  TProgramAddress extends Address = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
>(
  input: SyncQuarryInput<TAccountQuarry, TAccountRegistry>,
  config?: { programAddress?: TProgramAddress },
): SyncQuarryInstruction<TProgramAddress, TAccountQuarry, TAccountRegistry> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    quarry: { value: input.quarry ?? null, isWritable: false },
    registry: { value: input.registry ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.quarry),
      getAccountMeta(accounts.registry),
    ],
    programAddress,
    data: getSyncQuarryInstructionDataEncoder().encode({}),
  } as SyncQuarryInstruction<TProgramAddress, TAccountQuarry, TAccountRegistry>;

  return instruction;
}

export interface ParsedSyncQuarryInstruction<
  TProgram extends string = typeof QUARRY_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    quarry: TAccountMetas[0];
    registry: TAccountMetas[1];
  };
  data: SyncQuarryInstructionData;
}

export function parseSyncQuarryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSyncQuarryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      quarry: getNextAccount(),
      registry: getNextAccount(),
    },
    data: getSyncQuarryInstructionDataDecoder().decode(instruction.data),
  };
}
