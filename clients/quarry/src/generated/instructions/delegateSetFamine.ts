/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
} from "@solana/kit";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "@solana/kit";
import { QUARRY_OPERATOR_PROGRAM_ADDRESS } from "../programs/index.js";
import type { ResolvedAccount } from "../shared/index.js";
import { getAccountMetaFactory } from "../shared/index.js";

export const DELEGATE_SET_FAMINE_DISCRIMINATOR: ReadonlyUint8Array =
  new Uint8Array([1, 196, 52, 171, 199, 237, 240, 134]);

export function getDelegateSetFamineDiscriminatorBytes(): ReadonlyUint8Array {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELEGATE_SET_FAMINE_DISCRIMINATOR,
  );
}

export type DelegateSetFamineInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountOperator extends string | AccountMeta = string,
  TAccountDelegate extends string | AccountMeta = string,
  TAccountRewarder extends string | AccountMeta = string,
  TAccountQuarryMineProgram extends
    | string
    | AccountMeta = "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB",
  TAccountQuarry extends string | AccountMeta = string,
  TRemainingAccounts extends readonly AccountMeta[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOperator extends string
        ? WritableAccount<TAccountOperator>
        : TAccountOperator,
      TAccountDelegate extends string
        ? ReadonlySignerAccount<TAccountDelegate> &
            AccountSignerMeta<TAccountDelegate>
        : TAccountDelegate,
      TAccountRewarder extends string
        ? WritableAccount<TAccountRewarder>
        : TAccountRewarder,
      TAccountQuarryMineProgram extends string
        ? ReadonlyAccount<TAccountQuarryMineProgram>
        : TAccountQuarryMineProgram,
      TAccountQuarry extends string
        ? WritableAccount<TAccountQuarry>
        : TAccountQuarry,
      ...TRemainingAccounts,
    ]
  >;

export interface DelegateSetFamineInstructionData {
  discriminator: ReadonlyUint8Array;
  famineTs: bigint;
}

export interface DelegateSetFamineInstructionDataArgs {
  famineTs: number | bigint;
}

export function getDelegateSetFamineInstructionDataEncoder(): FixedSizeEncoder<DelegateSetFamineInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["famineTs", getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DELEGATE_SET_FAMINE_DISCRIMINATOR }),
  );
}

export function getDelegateSetFamineInstructionDataDecoder(): FixedSizeDecoder<DelegateSetFamineInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["famineTs", getI64Decoder()],
  ]);
}

export function getDelegateSetFamineInstructionDataCodec(): FixedSizeCodec<
  DelegateSetFamineInstructionDataArgs,
  DelegateSetFamineInstructionData
> {
  return combineCodec(
    getDelegateSetFamineInstructionDataEncoder(),
    getDelegateSetFamineInstructionDataDecoder(),
  );
}

export interface DelegateSetFamineInput<
  TAccountOperator extends string = string,
  TAccountDelegate extends string = string,
  TAccountRewarder extends string = string,
  TAccountQuarryMineProgram extends string = string,
  TAccountQuarry extends string = string,
> {
  operator: Address<TAccountOperator>;
  delegate: TransactionSigner<TAccountDelegate>;
  rewarder: Address<TAccountRewarder>;
  quarryMineProgram?: Address<TAccountQuarryMineProgram>;
  quarry: Address<TAccountQuarry>;
  famineTs: DelegateSetFamineInstructionDataArgs["famineTs"];
}

export function getDelegateSetFamineInstruction<
  TAccountOperator extends string,
  TAccountDelegate extends string,
  TAccountRewarder extends string,
  TAccountQuarryMineProgram extends string,
  TAccountQuarry extends string,
  TProgramAddress extends Address = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
>(
  input: DelegateSetFamineInput<
    TAccountOperator,
    TAccountDelegate,
    TAccountRewarder,
    TAccountQuarryMineProgram,
    TAccountQuarry
  >,
  config?: { programAddress?: TProgramAddress },
): DelegateSetFamineInstruction<
  TProgramAddress,
  TAccountOperator,
  TAccountDelegate,
  TAccountRewarder,
  TAccountQuarryMineProgram,
  TAccountQuarry
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QUARRY_OPERATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    operator: { value: input.operator ?? null, isWritable: true },
    delegate: { value: input.delegate ?? null, isWritable: false },
    rewarder: { value: input.rewarder ?? null, isWritable: true },
    quarryMineProgram: {
      value: input.quarryMineProgram ?? null,
      isWritable: false,
    },
    quarry: { value: input.quarry ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.quarryMineProgram.value) {
    accounts.quarryMineProgram.value =
      "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB" as Address<"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.rewarder),
      getAccountMeta(accounts.quarryMineProgram),
      getAccountMeta(accounts.quarry),
    ],
    programAddress,
    data: getDelegateSetFamineInstructionDataEncoder().encode(
      args as DelegateSetFamineInstructionDataArgs,
    ),
  } as DelegateSetFamineInstruction<
    TProgramAddress,
    TAccountOperator,
    TAccountDelegate,
    TAccountRewarder,
    TAccountQuarryMineProgram,
    TAccountQuarry
  >;

  return instruction;
}

export interface ParsedDelegateSetFamineInstruction<
  TProgram extends string = typeof QUARRY_OPERATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    operator: TAccountMetas[0];
    delegate: TAccountMetas[1];
    rewarder: TAccountMetas[2];
    quarryMineProgram: TAccountMetas[3];
    quarry: TAccountMetas[4];
  };
  data: DelegateSetFamineInstructionData;
}

export function parseDelegateSetFamineInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDelegateSetFamineInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      operator: getNextAccount(),
      delegate: getNextAccount(),
      rewarder: getNextAccount(),
      quarryMineProgram: getNextAccount(),
      quarry: getNextAccount(),
    },
    data: getDelegateSetFamineInstructionDataDecoder().decode(instruction.data),
  };
}
